// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders differently after changed properties 1`] = `
<withPosition(SequenceViewerComponent)
  fullHeight={2000}
  fullWidth={1000}
  height={200}
  nrXTiles={100}
  nrYTiles={100}
  sequences={
    Array [
      Object {
        "name": "sequence 1",
        "sequence": "MEEPQSDPSIEP-PLSQETFSDLWKLLPENNVLSPLPS-QA-VDDLMLSPDDLAQWLTED",
      },
      Object {
        "name": "sequence 2",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 3",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 4",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 5",
        "sequence": "MEEPQSD--IEL-PLSEETFSDLWWPLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 6",
        "sequence": "MEEPQEDLSSSL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 7",
        "sequence": "MEEPQ---SISE-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE---LSENVAGWLEDP",
      },
    ]
  }
  tileHeight={20}
  tileWidth={20}
  width={100}
/>
`;

exports[`renders differently after changed properties 2`] = `
<withPosition(SequenceViewerComponent)
  fullHeight={2000}
  fullWidth={1000}
  height={200}
  nrXTiles={100}
  nrYTiles={100}
  sequences={
    Array [
      Object {
        "name": "sequence 1",
        "sequence": "MEEPQSDPSIEP-PLSQETFSDLWKLLPENNVLSPLPS-QA-VDDLMLSPDDLAQWLTED",
      },
      Object {
        "name": "sequence 2",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 3",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 4",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 5",
        "sequence": "MEEPQSD--IEL-PLSEETFSDLWWPLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 6",
        "sequence": "MEEPQEDLSSSL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 7",
        "sequence": "MEEPQ---SISE-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE---LSENVAGWLEDP",
      },
    ]
  }
  tileHeight={20}
  tileWidth={20}
  width={100}
>
  <SequenceViewerComponent
    border={false}
    borderColor="black"
    borderWidth={1}
    cacheElements={20}
    fullHeight={2000}
    fullWidth={1000}
    height={200}
    nrXTiles={100}
    nrYTiles={100}
    overflow="hidden"
    overflowX="auto"
    overflowY="auto"
    position={
      Object {
        "currentViewSequence": 0,
        "currentViewSequencePosition": 10,
        "xPos": 0,
        "xPosOffset": 0,
        "yPos": 0,
        "yPosOffset": 0,
      }
    }
    positionDispatch={[Function]}
    scrollBarPositionX="bottom"
    scrollBarPositionY="right"
    sequences={
      Array [
        Object {
          "name": "sequence 1",
          "sequence": "MEEPQSDPSIEP-PLSQETFSDLWKLLPENNVLSPLPS-QA-VDDLMLSPDDLAQWLTED",
        },
        Object {
          "name": "sequence 2",
          "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
        },
        Object {
          "name": "sequence 3",
          "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
        },
        Object {
          "name": "sequence 4",
          "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
        },
        Object {
          "name": "sequence 5",
          "sequence": "MEEPQSD--IEL-PLSEETFSDLWWPLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
        },
        Object {
          "name": "sequence 6",
          "sequence": "MEEPQEDLSSSL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
        },
        Object {
          "name": "sequence 7",
          "sequence": "MEEPQ---SISE-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE---LSENVAGWLEDP",
        },
      ]
    }
    showModBar={false}
    textColor="black"
    textFont="18px Arial"
    tileHeight={20}
    tileWidth={20}
    width={100}
    xGridSize={10}
    yGridSize={10}
  >
    <div
      height={200}
      style={
        Object {
          "cursor": "grab",
          "height": 200,
          "position": "relative",
          "width": 100,
        }
      }
      width={100}
    >
      <canvas
        height={200}
        style={
          Object {
            "left": 0,
            "position": "absolute",
            "top": 0,
          }
        }
        width={100}
      >
        Your browser does not seem to support HTML5 canvas.
      </canvas>
      <canvas
        height={200}
        style={
          Object {
            "left": 0,
            "position": "absolute",
            "top": 0,
          }
        }
        width={100}
      >
        Your browser does not seem to support HTML5 canvas.
      </canvas>
      <withPosition(FakeScroll)
        fullHeight={2000}
        fullWidth={1000}
        height={200}
        overflow="hidden"
        overflowX="auto"
        overflowY="auto"
        positionX="bottom"
        positionY="right"
        width={100}
      >
        <FakeScroll
          fullHeight={2000}
          fullWidth={1000}
          height={200}
          overflow="hidden"
          overflowX="auto"
          overflowY="auto"
          position={
            Object {
              "currentViewSequence": 0,
              "currentViewSequencePosition": 10,
              "xPos": 0,
              "xPosOffset": 0,
              "yPos": 0,
              "yPosOffset": 0,
            }
          }
          positionDispatch={[Function]}
          positionX="bottom"
          positionY="right"
          scrollBarWidth={5}
          width={100}
        >
          <div />
        </FakeScroll>
      </withPosition(FakeScroll)>
    </div>
  </SequenceViewerComponent>
</withPosition(SequenceViewerComponent)>
`;

exports[`renders differently after changed properties 3`] = `
<withPosition(SequenceViewerComponent)
  borderColor="green"
  fullHeight={2000}
  fullWidth={1000}
  height={200}
  nrXTiles={100}
  nrYTiles={100}
  sequences={
    Array [
      Object {
        "name": "sequence 1",
        "sequence": "MEEPQSDPSIEP-PLSQETFSDLWKLLPENNVLSPLPS-QA-VDDLMLSPDDLAQWLTED",
      },
      Object {
        "name": "sequence 2",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 3",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 4",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 5",
        "sequence": "MEEPQSD--IEL-PLSEETFSDLWWPLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 6",
        "sequence": "MEEPQEDLSSSL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 7",
        "sequence": "MEEPQ---SISE-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE---LSENVAGWLEDP",
      },
    ]
  }
  tileHeight={20}
  tileWidth={20}
  width={100}
>
  <SequenceViewerComponent
    border={false}
    borderColor="green"
    borderWidth={1}
    cacheElements={20}
    fullHeight={2000}
    fullWidth={1000}
    height={200}
    nrXTiles={100}
    nrYTiles={100}
    overflow="hidden"
    overflowX="auto"
    overflowY="auto"
    position={
      Object {
        "currentViewSequence": 0,
        "currentViewSequencePosition": 10,
        "xPos": 0,
        "xPosOffset": 0,
        "yPos": 0,
        "yPosOffset": 0,
      }
    }
    positionDispatch={[Function]}
    scrollBarPositionX="bottom"
    scrollBarPositionY="right"
    sequences={
      Array [
        Object {
          "name": "sequence 1",
          "sequence": "MEEPQSDPSIEP-PLSQETFSDLWKLLPENNVLSPLPS-QA-VDDLMLSPDDLAQWLTED",
        },
        Object {
          "name": "sequence 2",
          "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
        },
        Object {
          "name": "sequence 3",
          "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
        },
        Object {
          "name": "sequence 4",
          "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
        },
        Object {
          "name": "sequence 5",
          "sequence": "MEEPQSD--IEL-PLSEETFSDLWWPLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
        },
        Object {
          "name": "sequence 6",
          "sequence": "MEEPQEDLSSSL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
        },
        Object {
          "name": "sequence 7",
          "sequence": "MEEPQ---SISE-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE---LSENVAGWLEDP",
        },
      ]
    }
    showModBar={false}
    textColor="black"
    textFont="18px Arial"
    tileHeight={20}
    tileWidth={20}
    width={100}
    xGridSize={10}
    yGridSize={10}
  >
    <div
      height={200}
      style={
        Object {
          "cursor": "grab",
          "height": 200,
          "position": "relative",
          "width": 100,
        }
      }
      width={100}
    >
      <canvas
        height={200}
        style={
          Object {
            "left": 0,
            "position": "absolute",
            "top": 0,
          }
        }
        width={100}
      >
        Your browser does not seem to support HTML5 canvas.
      </canvas>
      <canvas
        height={200}
        style={
          Object {
            "left": 0,
            "position": "absolute",
            "top": 0,
          }
        }
        width={100}
      >
        Your browser does not seem to support HTML5 canvas.
      </canvas>
      <withPosition(FakeScroll)
        fullHeight={2000}
        fullWidth={1000}
        height={200}
        overflow="hidden"
        overflowX="auto"
        overflowY="auto"
        positionX="bottom"
        positionY="right"
        width={100}
      >
        <FakeScroll
          fullHeight={2000}
          fullWidth={1000}
          height={200}
          overflow="hidden"
          overflowX="auto"
          overflowY="auto"
          position={
            Object {
              "currentViewSequence": 0,
              "currentViewSequencePosition": 10,
              "xPos": 0,
              "xPosOffset": 0,
              "yPos": 0,
              "yPosOffset": 0,
            }
          }
          positionDispatch={[Function]}
          positionX="bottom"
          positionY="right"
          scrollBarWidth={5}
          width={100}
        >
          <div />
        </FakeScroll>
      </withPosition(FakeScroll)>
    </div>
  </SequenceViewerComponent>
</withPosition(SequenceViewerComponent)>
`;

exports[`renders differently after changed properties 4`] = `
<withPosition(SequenceViewerComponent)
  borderColor="green"
  fullHeight={2000}
  fullWidth={1000}
  height={200}
  nrXTiles={100}
  nrYTiles={100}
  sequences={
    Array [
      Object {
        "name": "seq.1",
        "sequence": "AAAAAAAAAAAAAAAAAAAA",
      },
      Object {
        "name": "seq.1",
        "sequence": "AAAAAAAAAAAAAAAAAAAA",
      },
      Object {
        "name": "seq.3",
        "sequence": "AAAAAAAAAAAAAAAAAAAA",
      },
    ]
  }
  tileHeight={20}
  tileWidth={20}
  width={100}
>
  <SequenceViewerComponent
    border={false}
    borderColor="green"
    borderWidth={1}
    cacheElements={20}
    fullHeight={2000}
    fullWidth={1000}
    height={200}
    nrXTiles={100}
    nrYTiles={100}
    overflow="hidden"
    overflowX="auto"
    overflowY="auto"
    position={
      Object {
        "currentViewSequence": 0,
        "currentViewSequencePosition": 10,
        "xPos": 0,
        "xPosOffset": 0,
        "yPos": 0,
        "yPosOffset": 0,
      }
    }
    positionDispatch={[Function]}
    scrollBarPositionX="bottom"
    scrollBarPositionY="right"
    sequences={
      Array [
        Object {
          "name": "seq.1",
          "sequence": "AAAAAAAAAAAAAAAAAAAA",
        },
        Object {
          "name": "seq.1",
          "sequence": "AAAAAAAAAAAAAAAAAAAA",
        },
        Object {
          "name": "seq.3",
          "sequence": "AAAAAAAAAAAAAAAAAAAA",
        },
      ]
    }
    showModBar={false}
    textColor="black"
    textFont="18px Arial"
    tileHeight={20}
    tileWidth={20}
    width={100}
    xGridSize={10}
    yGridSize={10}
  >
    <div
      height={200}
      style={
        Object {
          "cursor": "grab",
          "height": 200,
          "position": "relative",
          "width": 100,
        }
      }
      width={100}
    >
      <canvas
        height={200}
        style={
          Object {
            "left": 0,
            "position": "absolute",
            "top": 0,
          }
        }
        width={100}
      >
        Your browser does not seem to support HTML5 canvas.
      </canvas>
      <canvas
        height={200}
        style={
          Object {
            "left": 0,
            "position": "absolute",
            "top": 0,
          }
        }
        width={100}
      >
        Your browser does not seem to support HTML5 canvas.
      </canvas>
      <withPosition(FakeScroll)
        fullHeight={2000}
        fullWidth={1000}
        height={200}
        overflow="hidden"
        overflowX="auto"
        overflowY="auto"
        positionX="bottom"
        positionY="right"
        width={100}
      >
        <FakeScroll
          fullHeight={2000}
          fullWidth={1000}
          height={200}
          overflow="hidden"
          overflowX="auto"
          overflowY="auto"
          position={
            Object {
              "currentViewSequence": 0,
              "currentViewSequencePosition": 10,
              "xPos": 0,
              "xPosOffset": 0,
              "yPos": 0,
              "yPosOffset": 0,
            }
          }
          positionDispatch={[Function]}
          positionX="bottom"
          positionY="right"
          scrollBarWidth={5}
          width={100}
        >
          <div />
        </FakeScroll>
      </withPosition(FakeScroll)>
    </div>
  </SequenceViewerComponent>
</withPosition(SequenceViewerComponent)>
`;

exports[`renders invalidates the tile cache changed properties should invalidate both caches on an affecting property change 1`] = `
<withPosition(SequenceViewerComponent)
  fullHeight={2000}
  fullWidth={1000}
  height={200}
  nrXTiles={100}
  nrYTiles={100}
  sequences={
    Array [
      Object {
        "name": "sequence 1",
        "sequence": "MEEPQSDPSIEP-PLSQETFSDLWKLLPENNVLSPLPS-QA-VDDLMLSPDDLAQWLTED",
      },
      Object {
        "name": "sequence 2",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 3",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 4",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 5",
        "sequence": "MEEPQSD--IEL-PLSEETFSDLWWPLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 6",
        "sequence": "MEEPQEDLSSSL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 7",
        "sequence": "MEEPQ---SISE-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE---LSENVAGWLEDP",
      },
    ]
  }
  tileHeight={20}
  tileWidth={20}
  width={100}
/>
`;

exports[`renders invalidates the tile cache changed properties should invalidate both caches on an affecting property change 2`] = `
<withPosition(SequenceViewerComponent)
  borderColor="green"
  fullHeight={2000}
  fullWidth={1000}
  height={200}
  nrXTiles={100}
  nrYTiles={100}
  sequences={
    Array [
      Object {
        "name": "sequence 1",
        "sequence": "MEEPQSDPSIEP-PLSQETFSDLWKLLPENNVLSPLPS-QA-VDDLMLSPDDLAQWLTED",
      },
      Object {
        "name": "sequence 2",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 3",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 4",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 5",
        "sequence": "MEEPQSD--IEL-PLSEETFSDLWWPLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 6",
        "sequence": "MEEPQEDLSSSL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 7",
        "sequence": "MEEPQ---SISE-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE---LSENVAGWLEDP",
      },
    ]
  }
  tileHeight={20}
  tileWidth={20}
  width={100}
>
  <SequenceViewerComponent
    border={false}
    borderColor="green"
    borderWidth={1}
    cacheElements={20}
    fullHeight={2000}
    fullWidth={1000}
    height={200}
    nrXTiles={100}
    nrYTiles={100}
    overflow="hidden"
    overflowX="auto"
    overflowY="auto"
    position={
      Object {
        "currentViewSequence": 0,
        "currentViewSequencePosition": 10,
        "xPos": 0,
        "xPosOffset": 0,
        "yPos": 0,
        "yPosOffset": 0,
      }
    }
    positionDispatch={[Function]}
    scrollBarPositionX="bottom"
    scrollBarPositionY="right"
    sequences={
      Array [
        Object {
          "name": "sequence 1",
          "sequence": "MEEPQSDPSIEP-PLSQETFSDLWKLLPENNVLSPLPS-QA-VDDLMLSPDDLAQWLTED",
        },
        Object {
          "name": "sequence 2",
          "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
        },
        Object {
          "name": "sequence 3",
          "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
        },
        Object {
          "name": "sequence 4",
          "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
        },
        Object {
          "name": "sequence 5",
          "sequence": "MEEPQSD--IEL-PLSEETFSDLWWPLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
        },
        Object {
          "name": "sequence 6",
          "sequence": "MEEPQEDLSSSL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
        },
        Object {
          "name": "sequence 7",
          "sequence": "MEEPQ---SISE-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE---LSENVAGWLEDP",
        },
      ]
    }
    showModBar={false}
    textColor="black"
    textFont="18px Arial"
    tileHeight={20}
    tileWidth={20}
    width={100}
    xGridSize={10}
    yGridSize={10}
  >
    <div
      height={200}
      style={
        Object {
          "cursor": "grab",
          "height": 200,
          "position": "relative",
          "width": 100,
        }
      }
      width={100}
    >
      <canvas
        height={200}
        style={
          Object {
            "left": 0,
            "position": "absolute",
            "top": 0,
          }
        }
        width={100}
      >
        Your browser does not seem to support HTML5 canvas.
      </canvas>
      <canvas
        height={200}
        style={
          Object {
            "left": 0,
            "position": "absolute",
            "top": 0,
          }
        }
        width={100}
      >
        Your browser does not seem to support HTML5 canvas.
      </canvas>
      <withPosition(FakeScroll)
        fullHeight={2000}
        fullWidth={1000}
        height={200}
        overflow="hidden"
        overflowX="auto"
        overflowY="auto"
        positionX="bottom"
        positionY="right"
        width={100}
      >
        <FakeScroll
          fullHeight={2000}
          fullWidth={1000}
          height={200}
          overflow="hidden"
          overflowX="auto"
          overflowY="auto"
          position={
            Object {
              "currentViewSequence": 0,
              "currentViewSequencePosition": 10,
              "xPos": 0,
              "xPosOffset": 0,
              "yPos": 0,
              "yPosOffset": 0,
            }
          }
          positionDispatch={[Function]}
          positionX="bottom"
          positionY="right"
          scrollBarWidth={5}
          width={100}
        >
          <div />
        </FakeScroll>
      </withPosition(FakeScroll)>
    </div>
  </SequenceViewerComponent>
</withPosition(SequenceViewerComponent)>
`;

exports[`renders invalidates the tile cache changed properties shouldn't invalidate any cache on mousemove 1`] = `
<withPosition(SequenceViewerComponent)
  fullHeight={2000}
  fullWidth={1000}
  height={200}
  nrXTiles={100}
  nrYTiles={100}
  sequences={
    Array [
      Object {
        "name": "sequence 1",
        "sequence": "MEEPQSDPSIEP-PLSQETFSDLWKLLPENNVLSPLPS-QA-VDDLMLSPDDLAQWLTED",
      },
      Object {
        "name": "sequence 2",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 3",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 4",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 5",
        "sequence": "MEEPQSD--IEL-PLSEETFSDLWWPLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 6",
        "sequence": "MEEPQEDLSSSL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 7",
        "sequence": "MEEPQ---SISE-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE---LSENVAGWLEDP",
      },
    ]
  }
  tileHeight={20}
  tileWidth={20}
  width={100}
/>
`;

exports[`renders invalidates the tile cache changed properties shouldn't invalidate any cache on unrelated properties 1`] = `
<withPosition(SequenceViewerComponent)
  fullHeight={2000}
  fullWidth={1000}
  height={200}
  nrXTiles={100}
  nrYTiles={100}
  sequences={
    Array [
      Object {
        "name": "sequence 1",
        "sequence": "MEEPQSDPSIEP-PLSQETFSDLWKLLPENNVLSPLPS-QA-VDDLMLSPDDLAQWLTED",
      },
      Object {
        "name": "sequence 2",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 3",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 4",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 5",
        "sequence": "MEEPQSD--IEL-PLSEETFSDLWWPLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 6",
        "sequence": "MEEPQEDLSSSL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 7",
        "sequence": "MEEPQ---SISE-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE---LSENVAGWLEDP",
      },
    ]
  }
  tileHeight={20}
  tileWidth={20}
  width={100}
/>
`;

exports[`renders invalidates the tile cache changed properties shouldn't invalidate the residue cache when sequences change 1`] = `
<withPosition(SequenceViewerComponent)
  fullHeight={2000}
  fullWidth={1000}
  height={200}
  nrXTiles={100}
  nrYTiles={100}
  sequences={
    Array [
      Object {
        "name": "sequence 1",
        "sequence": "MEEPQSDPSIEP-PLSQETFSDLWKLLPENNVLSPLPS-QA-VDDLMLSPDDLAQWLTED",
      },
      Object {
        "name": "sequence 2",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 3",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 4",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 5",
        "sequence": "MEEPQSD--IEL-PLSEETFSDLWWPLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 6",
        "sequence": "MEEPQEDLSSSL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 7",
        "sequence": "MEEPQ---SISE-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE---LSENVAGWLEDP",
      },
    ]
  }
  tileHeight={20}
  tileWidth={20}
  width={100}
/>
`;

exports[`renders invalidates the tile cache changed properties shouldn't invalidate the residue cache when sequences change 2`] = `
<withPosition(SequenceViewerComponent)
  fullHeight={2000}
  fullWidth={1000}
  height={200}
  nrXTiles={100}
  nrYTiles={100}
  sequences={
    Array [
      Object {
        "name": "seq.1",
        "sequence": "AAAAAAAAAAAAAAAAAAAA",
      },
      Object {
        "name": "seq.1",
        "sequence": "AAAAAAAAAAAAAAAAAAAA",
      },
      Object {
        "name": "seq.3",
        "sequence": "AAAAAAAAAAAAAAAAAAAA",
      },
    ]
  }
  tileHeight={20}
  tileWidth={20}
  width={100}
>
  <SequenceViewerComponent
    border={false}
    borderColor="black"
    borderWidth={1}
    cacheElements={20}
    fullHeight={2000}
    fullWidth={1000}
    height={200}
    nrXTiles={100}
    nrYTiles={100}
    overflow="hidden"
    overflowX="auto"
    overflowY="auto"
    position={
      Object {
        "currentViewSequence": 0,
        "currentViewSequencePosition": 10,
        "xPos": 0,
        "xPosOffset": 0,
        "yPos": 0,
        "yPosOffset": 0,
      }
    }
    positionDispatch={[Function]}
    scrollBarPositionX="bottom"
    scrollBarPositionY="right"
    sequences={
      Array [
        Object {
          "name": "seq.1",
          "sequence": "AAAAAAAAAAAAAAAAAAAA",
        },
        Object {
          "name": "seq.1",
          "sequence": "AAAAAAAAAAAAAAAAAAAA",
        },
        Object {
          "name": "seq.3",
          "sequence": "AAAAAAAAAAAAAAAAAAAA",
        },
      ]
    }
    showModBar={false}
    textColor="black"
    textFont="18px Arial"
    tileHeight={20}
    tileWidth={20}
    width={100}
    xGridSize={10}
    yGridSize={10}
  >
    <div
      height={200}
      style={
        Object {
          "cursor": "grab",
          "height": 200,
          "position": "relative",
          "width": 100,
        }
      }
      width={100}
    >
      <canvas
        height={200}
        style={
          Object {
            "left": 0,
            "position": "absolute",
            "top": 0,
          }
        }
        width={100}
      >
        Your browser does not seem to support HTML5 canvas.
      </canvas>
      <canvas
        height={200}
        style={
          Object {
            "left": 0,
            "position": "absolute",
            "top": 0,
          }
        }
        width={100}
      >
        Your browser does not seem to support HTML5 canvas.
      </canvas>
      <withPosition(FakeScroll)
        fullHeight={2000}
        fullWidth={1000}
        height={200}
        overflow="hidden"
        overflowX="auto"
        overflowY="auto"
        positionX="bottom"
        positionY="right"
        width={100}
      >
        <FakeScroll
          fullHeight={2000}
          fullWidth={1000}
          height={200}
          overflow="hidden"
          overflowX="auto"
          overflowY="auto"
          position={
            Object {
              "currentViewSequence": 0,
              "currentViewSequencePosition": 10,
              "xPos": 0,
              "xPosOffset": 0,
              "yPos": 0,
              "yPosOffset": 0,
            }
          }
          positionDispatch={[Function]}
          positionX="bottom"
          positionY="right"
          scrollBarWidth={5}
          width={100}
        >
          <div />
        </FakeScroll>
      </withPosition(FakeScroll)>
    </div>
  </SequenceViewerComponent>
</withPosition(SequenceViewerComponent)>
`;

exports[`renders without crashing 1`] = `
<PropsToReduxComponent
  backgroundColor="red"
  colorScheme="clustal"
  engine="canvas"
  height={100}
  sequences={
    Array [
      Object {
        "name": "sequence 1",
        "sequence": "MEEPQSDPSIEP-PLSQETFSDLWKLLPENNVLSPLPS-QA-VDDLMLSPDDLAQWLTED",
      },
      Object {
        "name": "sequence 2",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 3",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 4",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 5",
        "sequence": "MEEPQSD--IEL-PLSEETFSDLWWPLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 6",
        "sequence": "MEEPQEDLSSSL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 7",
        "sequence": "MEEPQ---SISE-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE---LSENVAGWLEDP",
      },
    ]
  }
  tileHeight={20}
  tileWidth={20}
  width={500}
>
  <MSAViewerComponent
    msaStore={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        }
      }
    >
      <div>
        <Connect(withPosition(SequenceViewerComponent))>
          <withPosition(SequenceViewerComponent)
            colorScheme={
              ColorScheme {
                "scheme": StaticSchemeClass {
                  "defaultColor": "#ffffff",
                  "getColor": [Function],
                  "map": Object {
                    "A": "orange",
                    "B": "#fff",
                    "C": "green",
                    "D": "red",
                    "E": "red",
                    "F": "blue",
                    "G": "orange",
                    "Gap": "#fff",
                    "H": "red",
                    "I": "green",
                    "J": "#fff",
                    "K": "red",
                    "L": "green",
                    "M": "green",
                    "N": "#fff",
                    "O": "#fff",
                    "P": "orange",
                    "Q": "#fff",
                    "R": "red",
                    "S": "orange",
                    "T": "orange",
                    "U": "#fff",
                    "V": "green",
                    "W": "blue",
                    "X": "#fff",
                    "Y": "blue",
                    "Z": "#fff",
                  },
                  "type": "static",
                },
              }
            }
            dispatch={[Function]}
            fullHeight={140}
            fullWidth={1200}
            height={100}
            nrXTiles={26}
            nrYTiles={6}
            sequences={
              Object {
                "length": 7,
                "maxLength": 60,
                "raw": Array [
                  Object {
                    "name": "sequence 1",
                    "sequence": "MEEPQSDPSIEP-PLSQETFSDLWKLLPENNVLSPLPS-QA-VDDLMLSPDDLAQWLTED",
                  },
                  Object {
                    "name": "sequence 2",
                    "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                  },
                  Object {
                    "name": "sequence 3",
                    "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                  },
                  Object {
                    "name": "sequence 4",
                    "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                  },
                  Object {
                    "name": "sequence 5",
                    "sequence": "MEEPQSD--IEL-PLSEETFSDLWWPLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                  },
                  Object {
                    "name": "sequence 6",
                    "sequence": "MEEPQEDLSSSL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                  },
                  Object {
                    "name": "sequence 7",
                    "sequence": "MEEPQ---SISE-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE---LSENVAGWLEDP",
                  },
                ],
              }
            }
            tileHeight={20}
            tileWidth={20}
            width={500}
          >
            <SequenceViewerComponent
              border={false}
              borderColor="black"
              borderWidth={1}
              cacheElements={20}
              colorScheme={
                ColorScheme {
                  "scheme": StaticSchemeClass {
                    "defaultColor": "#ffffff",
                    "getColor": [Function],
                    "map": Object {
                      "A": "orange",
                      "B": "#fff",
                      "C": "green",
                      "D": "red",
                      "E": "red",
                      "F": "blue",
                      "G": "orange",
                      "Gap": "#fff",
                      "H": "red",
                      "I": "green",
                      "J": "#fff",
                      "K": "red",
                      "L": "green",
                      "M": "green",
                      "N": "#fff",
                      "O": "#fff",
                      "P": "orange",
                      "Q": "#fff",
                      "R": "red",
                      "S": "orange",
                      "T": "orange",
                      "U": "#fff",
                      "V": "green",
                      "W": "blue",
                      "X": "#fff",
                      "Y": "blue",
                      "Z": "#fff",
                    },
                    "type": "static",
                  },
                }
              }
              dispatch={[Function]}
              fullHeight={140}
              fullWidth={1200}
              height={100}
              nrXTiles={26}
              nrYTiles={6}
              overflow="hidden"
              overflowX="auto"
              overflowY="auto"
              position={
                Object {
                  "currentViewSequence": 0,
                  "currentViewSequencePosition": 0,
                  "xPos": 0,
                  "xPosOffset": -0,
                  "yPos": 0,
                  "yPosOffset": -0,
                }
              }
              positionDispatch={[Function]}
              scrollBarPositionX="bottom"
              scrollBarPositionY="right"
              sequences={
                Object {
                  "length": 7,
                  "maxLength": 60,
                  "raw": Array [
                    Object {
                      "name": "sequence 1",
                      "sequence": "MEEPQSDPSIEP-PLSQETFSDLWKLLPENNVLSPLPS-QA-VDDLMLSPDDLAQWLTED",
                    },
                    Object {
                      "name": "sequence 2",
                      "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                    },
                    Object {
                      "name": "sequence 3",
                      "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                    },
                    Object {
                      "name": "sequence 4",
                      "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                    },
                    Object {
                      "name": "sequence 5",
                      "sequence": "MEEPQSD--IEL-PLSEETFSDLWWPLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                    },
                    Object {
                      "name": "sequence 6",
                      "sequence": "MEEPQEDLSSSL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                    },
                    Object {
                      "name": "sequence 7",
                      "sequence": "MEEPQ---SISE-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE---LSENVAGWLEDP",
                    },
                  ],
                }
              }
              showModBar={false}
              textColor="black"
              textFont="18px Arial"
              tileHeight={20}
              tileWidth={20}
              width={500}
              xGridSize={10}
              yGridSize={10}
            >
              <div
                height={100}
                style={
                  Object {
                    "cursor": "grab",
                    "height": 100,
                    "position": "relative",
                    "width": 500,
                  }
                }
                width={500}
              >
                <canvas
                  height={100}
                  style={
                    Object {
                      "left": 0,
                      "position": "absolute",
                      "top": 0,
                    }
                  }
                  width={500}
                >
                  Your browser does not seem to support HTML5 canvas.
                </canvas>
                <canvas
                  height={100}
                  style={
                    Object {
                      "left": 0,
                      "position": "absolute",
                      "top": 0,
                    }
                  }
                  width={500}
                >
                  Your browser does not seem to support HTML5 canvas.
                </canvas>
                <withPosition(FakeScroll)
                  fullHeight={140}
                  fullWidth={1200}
                  height={100}
                  overflow="hidden"
                  overflowX="auto"
                  overflowY="auto"
                  positionX="bottom"
                  positionY="right"
                  width={500}
                >
                  <FakeScroll
                    fullHeight={140}
                    fullWidth={1200}
                    height={100}
                    overflow="hidden"
                    overflowX="auto"
                    overflowY="auto"
                    position={
                      Object {
                        "currentViewSequence": 0,
                        "currentViewSequencePosition": 0,
                        "xPos": 0,
                        "xPosOffset": -0,
                        "yPos": 0,
                        "yPosOffset": -0,
                      }
                    }
                    positionDispatch={[Function]}
                    positionX="bottom"
                    positionY="right"
                    scrollBarWidth={5}
                    width={500}
                  >
                    <div />
                  </FakeScroll>
                </withPosition(FakeScroll)>
              </div>
            </SequenceViewerComponent>
          </withPosition(SequenceViewerComponent)>
        </Connect(withPosition(SequenceViewerComponent))>
      </div>
    </Provider>
  </MSAViewerComponent>
</PropsToReduxComponent>
`;

exports[`sends movement actions on mousemove events should change the cursor state on mousedown/mouseup 1`] = `
<FakePositionStore
  currentViewSequence={0}
  currentViewSequencePosition={0}
  height={200}
  position={
    Object {
      "xPos": 0,
      "yPos": 0,
    }
  }
  sequences={
    Array [
      Object {
        "name": "sequence 1",
        "sequence": "MEEPQSDPSIEP-PLSQETFSDLWKLLPENNVLSPLPS-QA-VDDLMLSPDDLAQWLTED",
      },
      Object {
        "name": "sequence 2",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 3",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 4",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 5",
        "sequence": "MEEPQSD--IEL-PLSEETFSDLWWPLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 6",
        "sequence": "MEEPQEDLSSSL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 7",
        "sequence": "MEEPQ---SISE-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE---LSENVAGWLEDP",
      },
    ]
  }
  subscribe={[Function]}
  width={400}
  xPosOffset={0}
  yPosOffset={0}
>
  <Provider
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
  >
    <div>
      <Connect(withPosition(SequenceViewerComponent))>
        <withPosition(SequenceViewerComponent)
          colorScheme={
            ColorScheme {
              "scheme": StaticSchemeClass {
                "defaultColor": "#ffffff",
                "getColor": [Function],
                "map": Object {
                  "A": "orange",
                  "B": "#fff",
                  "C": "green",
                  "D": "red",
                  "E": "red",
                  "F": "blue",
                  "G": "orange",
                  "Gap": "#fff",
                  "H": "red",
                  "I": "green",
                  "J": "#fff",
                  "K": "red",
                  "L": "green",
                  "M": "green",
                  "N": "#fff",
                  "O": "#fff",
                  "P": "orange",
                  "Q": "#fff",
                  "R": "red",
                  "S": "orange",
                  "T": "orange",
                  "U": "#fff",
                  "V": "green",
                  "W": "blue",
                  "X": "#fff",
                  "Y": "blue",
                  "Z": "#fff",
                },
                "type": "static",
              },
            }
          }
          dispatch={[Function]}
          fullHeight={140}
          fullWidth={1200}
          height={140}
          nrXTiles={21}
          nrYTiles={11}
          sequences={
            Object {
              "length": 7,
              "maxLength": 60,
              "raw": Array [
                Object {
                  "name": "sequence 1",
                  "sequence": "MEEPQSDPSIEP-PLSQETFSDLWKLLPENNVLSPLPS-QA-VDDLMLSPDDLAQWLTED",
                },
                Object {
                  "name": "sequence 2",
                  "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                },
                Object {
                  "name": "sequence 3",
                  "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                },
                Object {
                  "name": "sequence 4",
                  "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                },
                Object {
                  "name": "sequence 5",
                  "sequence": "MEEPQSD--IEL-PLSEETFSDLWWPLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                },
                Object {
                  "name": "sequence 6",
                  "sequence": "MEEPQEDLSSSL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                },
                Object {
                  "name": "sequence 7",
                  "sequence": "MEEPQ---SISE-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE---LSENVAGWLEDP",
                },
              ],
            }
          }
          tileHeight={20}
          tileWidth={20}
          width={400}
        >
          <SequenceViewerComponent
            border={false}
            borderColor="black"
            borderWidth={1}
            cacheElements={20}
            colorScheme={
              ColorScheme {
                "scheme": StaticSchemeClass {
                  "defaultColor": "#ffffff",
                  "getColor": [Function],
                  "map": Object {
                    "A": "orange",
                    "B": "#fff",
                    "C": "green",
                    "D": "red",
                    "E": "red",
                    "F": "blue",
                    "G": "orange",
                    "Gap": "#fff",
                    "H": "red",
                    "I": "green",
                    "J": "#fff",
                    "K": "red",
                    "L": "green",
                    "M": "green",
                    "N": "#fff",
                    "O": "#fff",
                    "P": "orange",
                    "Q": "#fff",
                    "R": "red",
                    "S": "orange",
                    "T": "orange",
                    "U": "#fff",
                    "V": "green",
                    "W": "blue",
                    "X": "#fff",
                    "Y": "blue",
                    "Z": "#fff",
                  },
                  "type": "static",
                },
              }
            }
            dispatch={[Function]}
            fullHeight={140}
            fullWidth={1200}
            height={140}
            nrXTiles={21}
            nrYTiles={11}
            overflow="hidden"
            overflowX="auto"
            overflowY="auto"
            position={
              Object {
                "currentViewSequence": 0,
                "currentViewSequencePosition": 0,
                "xPos": 0,
                "xPosOffset": 0,
                "yPos": 0,
                "yPosOffset": 0,
              }
            }
            positionDispatch={[Function]}
            scrollBarPositionX="bottom"
            scrollBarPositionY="right"
            sequences={
              Object {
                "length": 7,
                "maxLength": 60,
                "raw": Array [
                  Object {
                    "name": "sequence 1",
                    "sequence": "MEEPQSDPSIEP-PLSQETFSDLWKLLPENNVLSPLPS-QA-VDDLMLSPDDLAQWLTED",
                  },
                  Object {
                    "name": "sequence 2",
                    "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                  },
                  Object {
                    "name": "sequence 3",
                    "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                  },
                  Object {
                    "name": "sequence 4",
                    "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                  },
                  Object {
                    "name": "sequence 5",
                    "sequence": "MEEPQSD--IEL-PLSEETFSDLWWPLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                  },
                  Object {
                    "name": "sequence 6",
                    "sequence": "MEEPQEDLSSSL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                  },
                  Object {
                    "name": "sequence 7",
                    "sequence": "MEEPQ---SISE-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE---LSENVAGWLEDP",
                  },
                ],
              }
            }
            showModBar={false}
            textColor="black"
            textFont="18px Arial"
            tileHeight={20}
            tileWidth={20}
            width={400}
            xGridSize={10}
            yGridSize={10}
          >
            <div
              height={140}
              style={
                Object {
                  "cursor": "grab",
                  "height": 140,
                  "position": "relative",
                  "width": 400,
                }
              }
              width={400}
            >
              <canvas
                height={140}
                style={
                  Object {
                    "left": 0,
                    "position": "absolute",
                    "top": 0,
                  }
                }
                width={400}
              >
                Your browser does not seem to support HTML5 canvas.
              </canvas>
              <canvas
                height={140}
                style={
                  Object {
                    "left": 0,
                    "position": "absolute",
                    "top": 0,
                  }
                }
                width={400}
              >
                Your browser does not seem to support HTML5 canvas.
              </canvas>
              <withPosition(FakeScroll)
                fullHeight={140}
                fullWidth={1200}
                height={140}
                overflow="hidden"
                overflowX="auto"
                overflowY="auto"
                positionX="bottom"
                positionY="right"
                width={400}
              >
                <FakeScroll
                  fullHeight={140}
                  fullWidth={1200}
                  height={140}
                  overflow="hidden"
                  overflowX="auto"
                  overflowY="auto"
                  position={
                    Object {
                      "currentViewSequence": 0,
                      "currentViewSequencePosition": 0,
                      "xPos": 0,
                      "xPosOffset": 0,
                      "yPos": 0,
                      "yPosOffset": 0,
                    }
                  }
                  positionDispatch={[Function]}
                  positionX="bottom"
                  positionY="right"
                  scrollBarWidth={5}
                  width={400}
                >
                  <div />
                </FakeScroll>
              </withPosition(FakeScroll)>
            </div>
          </SequenceViewerComponent>
        </withPosition(SequenceViewerComponent)>
      </Connect(withPosition(SequenceViewerComponent))>
    </div>
  </Provider>
</FakePositionStore>
`;

exports[`should fire an event on mouseclick 1`] = `
<PropsToReduxComponent
  backgroundColor="red"
  colorScheme="clustal"
  engine="canvas"
  height={200}
  sequences={
    Array [
      Object {
        "name": "sequence 1",
        "sequence": "MEEPQSDPSIEP-PLSQETFSDLWKLLPENNVLSPLPS-QA-VDDLMLSPDDLAQWLTED",
      },
      Object {
        "name": "sequence 2",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 3",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 4",
        "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 5",
        "sequence": "MEEPQSD--IEL-PLSEETFSDLWWPLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 6",
        "sequence": "MEEPQEDLSSSL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
      },
      Object {
        "name": "sequence 7",
        "sequence": "MEEPQ---SISE-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE---LSENVAGWLEDP",
      },
    ]
  }
  tileHeight={20}
  tileWidth={20}
  width={400}
>
  <MSAViewerComponent
    msaStore={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        }
      }
    >
      <div>
        <Connect(withPosition(SequenceViewerComponent))
          onResidueClick={[MockFunction]}
        >
          <withPosition(SequenceViewerComponent)
            colorScheme={
              ColorScheme {
                "scheme": StaticSchemeClass {
                  "defaultColor": "#ffffff",
                  "getColor": [Function],
                  "map": Object {
                    "A": "orange",
                    "B": "#fff",
                    "C": "green",
                    "D": "red",
                    "E": "red",
                    "F": "blue",
                    "G": "orange",
                    "Gap": "#fff",
                    "H": "red",
                    "I": "green",
                    "J": "#fff",
                    "K": "red",
                    "L": "green",
                    "M": "green",
                    "N": "#fff",
                    "O": "#fff",
                    "P": "orange",
                    "Q": "#fff",
                    "R": "red",
                    "S": "orange",
                    "T": "orange",
                    "U": "#fff",
                    "V": "green",
                    "W": "blue",
                    "X": "#fff",
                    "Y": "blue",
                    "Z": "#fff",
                  },
                  "type": "static",
                },
              }
            }
            dispatch={[Function]}
            fullHeight={140}
            fullWidth={1200}
            height={140}
            nrXTiles={21}
            nrYTiles={11}
            onResidueClick={[MockFunction]}
            sequences={
              Object {
                "length": 7,
                "maxLength": 60,
                "raw": Array [
                  Object {
                    "name": "sequence 1",
                    "sequence": "MEEPQSDPSIEP-PLSQETFSDLWKLLPENNVLSPLPS-QA-VDDLMLSPDDLAQWLTED",
                  },
                  Object {
                    "name": "sequence 2",
                    "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                  },
                  Object {
                    "name": "sequence 3",
                    "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                  },
                  Object {
                    "name": "sequence 4",
                    "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                  },
                  Object {
                    "name": "sequence 5",
                    "sequence": "MEEPQSD--IEL-PLSEETFSDLWWPLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                  },
                  Object {
                    "name": "sequence 6",
                    "sequence": "MEEPQEDLSSSL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                  },
                  Object {
                    "name": "sequence 7",
                    "sequence": "MEEPQ---SISE-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE---LSENVAGWLEDP",
                  },
                ],
              }
            }
            tileHeight={20}
            tileWidth={20}
            width={400}
          >
            <SequenceViewerComponent
              border={false}
              borderColor="black"
              borderWidth={1}
              cacheElements={20}
              colorScheme={
                ColorScheme {
                  "scheme": StaticSchemeClass {
                    "defaultColor": "#ffffff",
                    "getColor": [Function],
                    "map": Object {
                      "A": "orange",
                      "B": "#fff",
                      "C": "green",
                      "D": "red",
                      "E": "red",
                      "F": "blue",
                      "G": "orange",
                      "Gap": "#fff",
                      "H": "red",
                      "I": "green",
                      "J": "#fff",
                      "K": "red",
                      "L": "green",
                      "M": "green",
                      "N": "#fff",
                      "O": "#fff",
                      "P": "orange",
                      "Q": "#fff",
                      "R": "red",
                      "S": "orange",
                      "T": "orange",
                      "U": "#fff",
                      "V": "green",
                      "W": "blue",
                      "X": "#fff",
                      "Y": "blue",
                      "Z": "#fff",
                    },
                    "type": "static",
                  },
                }
              }
              dispatch={[Function]}
              fullHeight={140}
              fullWidth={1200}
              height={140}
              nrXTiles={21}
              nrYTiles={11}
              onResidueClick={[MockFunction]}
              overflow="hidden"
              overflowX="auto"
              overflowY="auto"
              position={
                Object {
                  "currentViewSequence": 0,
                  "currentViewSequencePosition": 0,
                  "xPos": 0,
                  "xPosOffset": -0,
                  "yPos": 0,
                  "yPosOffset": -0,
                }
              }
              positionDispatch={[Function]}
              scrollBarPositionX="bottom"
              scrollBarPositionY="right"
              sequences={
                Object {
                  "length": 7,
                  "maxLength": 60,
                  "raw": Array [
                    Object {
                      "name": "sequence 1",
                      "sequence": "MEEPQSDPSIEP-PLSQETFSDLWKLLPENNVLSPLPS-QA-VDDLMLSPDDLAQWLTED",
                    },
                    Object {
                      "name": "sequence 2",
                      "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                    },
                    Object {
                      "name": "sequence 3",
                      "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                    },
                    Object {
                      "name": "sequence 4",
                      "sequence": "MEEPQSDLSIEL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                    },
                    Object {
                      "name": "sequence 5",
                      "sequence": "MEEPQSD--IEL-PLSEETFSDLWWPLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                    },
                    Object {
                      "name": "sequence 6",
                      "sequence": "MEEPQEDLSSSL-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE-LFLSENVAGWLEDP",
                    },
                    Object {
                      "name": "sequence 7",
                      "sequence": "MEEPQ---SISE-PLSQETFSDLWKLLPPNNVLSTLPS-SDSIEE---LSENVAGWLEDP",
                    },
                  ],
                }
              }
              showModBar={false}
              textColor="black"
              textFont="18px Arial"
              tileHeight={20}
              tileWidth={20}
              width={400}
              xGridSize={10}
              yGridSize={10}
            >
              <div
                height={140}
                style={
                  Object {
                    "cursor": "grab",
                    "height": 140,
                    "position": "relative",
                    "width": 400,
                  }
                }
                width={400}
              >
                <canvas
                  height={140}
                  style={
                    Object {
                      "left": 0,
                      "position": "absolute",
                      "top": 0,
                    }
                  }
                  width={400}
                >
                  Your browser does not seem to support HTML5 canvas.
                </canvas>
                <canvas
                  height={140}
                  style={
                    Object {
                      "left": 0,
                      "position": "absolute",
                      "top": 0,
                    }
                  }
                  width={400}
                >
                  Your browser does not seem to support HTML5 canvas.
                </canvas>
                <withPosition(FakeScroll)
                  fullHeight={140}
                  fullWidth={1200}
                  height={140}
                  overflow="hidden"
                  overflowX="auto"
                  overflowY="auto"
                  positionX="bottom"
                  positionY="right"
                  width={400}
                >
                  <FakeScroll
                    fullHeight={140}
                    fullWidth={1200}
                    height={140}
                    overflow="hidden"
                    overflowX="auto"
                    overflowY="auto"
                    position={
                      Object {
                        "currentViewSequence": 0,
                        "currentViewSequencePosition": 0,
                        "xPos": 0,
                        "xPosOffset": -0,
                        "yPos": 0,
                        "yPosOffset": -0,
                      }
                    }
                    positionDispatch={[Function]}
                    positionX="bottom"
                    positionY="right"
                    scrollBarWidth={5}
                    width={400}
                  >
                    <div />
                  </FakeScroll>
                </withPosition(FakeScroll)>
              </div>
            </SequenceViewerComponent>
          </withPosition(SequenceViewerComponent)>
        </Connect(withPosition(SequenceViewerComponent))>
      </div>
    </Provider>
  </MSAViewerComponent>
</PropsToReduxComponent>
`;
