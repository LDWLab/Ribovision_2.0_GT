/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./lib/alphafold-transparency.js":
/*!***************************************!*\
  !*** ./lib/alphafold-transparency.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.clearStructureTransparency = exports.setStructureTransparency = exports.applyAFTransparency = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar structure_1 = __webpack_require__(/*! Molstar/mol-model/structure */ \"./node_modules/molstar/lib/mol-model/structure.js\");\nvar transforms_1 = __webpack_require__(/*! Molstar/mol-plugin-state/transforms */ \"./node_modules/molstar/lib/mol-plugin-state/transforms.js\");\nvar mol_state_1 = __webpack_require__(/*! Molstar/mol-state */ \"./node_modules/molstar/lib/mol-state/index.js\");\nvar loci_1 = __webpack_require__(/*! Molstar/mol-model/loci */ \"./node_modules/molstar/lib/mol-model/loci.js\");\nvar transparency_1 = __webpack_require__(/*! Molstar/mol-theme/transparency */ \"./node_modules/molstar/lib/mol-theme/transparency.js\");\nvar builder_1 = __webpack_require__(/*! Molstar/mol-script/language/builder */ \"./node_modules/molstar/lib/mol-script/language/builder.js\");\nvar prop_1 = __webpack_require__(/*! Molstar/extensions/model-archive/quality-assessment/prop */ \"./node_modules/molstar/lib/extensions/model-archive/quality-assessment/prop.js\");\nvar compiler_1 = __webpack_require__(/*! Molstar/mol-script/runtime/query/compiler */ \"./node_modules/molstar/lib/mol-script/runtime/query/compiler.js\");\nvar structure_2 = __webpack_require__(/*! Molstar/mol-model/structure */ \"./node_modules/molstar/lib/mol-model/structure.js\");\nvar TransparencyManagerTag = 'transparency-controls';\nfunction getLociByPLDDT(score, contextData) {\n    var queryExp = builder_1.MolScriptBuilder.struct.modifier.union([\n        builder_1.MolScriptBuilder.struct.modifier.wholeResidues([\n            builder_1.MolScriptBuilder.struct.modifier.union([\n                builder_1.MolScriptBuilder.struct.generator.atomGroups({\n                    'chain-test': builder_1.MolScriptBuilder.core.rel.eq([builder_1.MolScriptBuilder.ammp('objectPrimitive'), 'atomistic']),\n                    'residue-test': builder_1.MolScriptBuilder.core.rel.lte([prop_1.QualityAssessment.symbols.pLDDT.symbol(), score]),\n                })\n            ])\n        ])\n    ]);\n    var query = (0, compiler_1.compile)(queryExp);\n    var sel = query(new structure_2.QueryContext(contextData));\n    return structure_2.StructureSelection.toLociWithSourceUnits(sel);\n}\nfunction applyAFTransparency(plugin, structure, transparency, pLDDT) {\n    if (pLDDT === void 0) { pLDDT = 70; }\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var _this = this;\n        return tslib_1.__generator(this, function (_a) {\n            return [2 /*return*/, plugin.dataTransaction(function (ctx) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                    var loci;\n                    var _a;\n                    return tslib_1.__generator(this, function (_b) {\n                        switch (_b.label) {\n                            case 0:\n                                loci = getLociByPLDDT(pLDDT, (_a = structure.cell.obj) === null || _a === void 0 ? void 0 : _a.data);\n                                return [4 /*yield*/, setStructureTransparency(plugin, structure.components, transparency, loci)];\n                            case 1:\n                                _b.sent();\n                                return [2 /*return*/];\n                        }\n                    });\n                }); }, { canUndo: 'Apply Transparency' })];\n        });\n    });\n}\nexports.applyAFTransparency = applyAFTransparency;\nfunction setStructureTransparency(plugin, components, value, loci, types) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var _this = this;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, eachRepr(plugin, components, function (update, repr, transparencyCell) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                        var structure, layer, bundleLayers, filtered, filtered;\n                        return tslib_1.__generator(this, function (_a) {\n                            if (types && types.length > 0 && !types.includes(repr.params.values.type.name))\n                                return [2 /*return*/];\n                            structure = repr.obj.data.sourceData;\n                            if (loci_1.Loci.isEmpty(loci) || (0, loci_1.isEmptyLoci)(loci))\n                                return [2 /*return*/];\n                            layer = {\n                                bundle: structure_1.StructureElement.Bundle.fromLoci(loci),\n                                value: value,\n                            };\n                            if (transparencyCell) {\n                                bundleLayers = tslib_1.__spreadArray(tslib_1.__spreadArray([], transparencyCell.params.values.layers, true), [layer], false);\n                                filtered = getFilteredBundle(bundleLayers, structure);\n                                update.to(transparencyCell).update(transparency_1.Transparency.toBundle(filtered));\n                            }\n                            else {\n                                filtered = getFilteredBundle([layer], structure);\n                                update.to(repr.transform.ref)\n                                    .apply(transforms_1.StateTransforms.Representation.TransparencyStructureRepresentation3DFromBundle, transparency_1.Transparency.toBundle(filtered), { tags: TransparencyManagerTag });\n                            }\n                            return [2 /*return*/];\n                        });\n                    }); })];\n                case 1:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    });\n}\nexports.setStructureTransparency = setStructureTransparency;\nfunction clearStructureTransparency(plugin, components, types) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var _this = this;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, eachRepr(plugin, components, function (update, repr, transparencyCell) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                        return tslib_1.__generator(this, function (_a) {\n                            if (types && types.length > 0 && !types.includes(repr.params.values.type.name))\n                                return [2 /*return*/];\n                            if (transparencyCell) {\n                                update.delete(transparencyCell.transform.ref);\n                            }\n                            return [2 /*return*/];\n                        });\n                    }); })];\n                case 1:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    });\n}\nexports.clearStructureTransparency = clearStructureTransparency;\nfunction eachRepr(plugin, components, callback) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var state, update, _i, components_1, c, _a, _b, r, transparency;\n        return tslib_1.__generator(this, function (_c) {\n            switch (_c.label) {\n                case 0:\n                    state = plugin.state.data;\n                    update = state.build();\n                    _i = 0, components_1 = components;\n                    _c.label = 1;\n                case 1:\n                    if (!(_i < components_1.length)) return [3 /*break*/, 6];\n                    c = components_1[_i];\n                    _a = 0, _b = c.representations;\n                    _c.label = 2;\n                case 2:\n                    if (!(_a < _b.length)) return [3 /*break*/, 5];\n                    r = _b[_a];\n                    transparency = state.select(mol_state_1.StateSelection.Generators.ofTransformer(transforms_1.StateTransforms.Representation.TransparencyStructureRepresentation3DFromBundle, r.cell.transform.ref).withTag(TransparencyManagerTag));\n                    return [4 /*yield*/, callback(update, r.cell, transparency[0])];\n                case 3:\n                    _c.sent();\n                    _c.label = 4;\n                case 4:\n                    _a++;\n                    return [3 /*break*/, 2];\n                case 5:\n                    _i++;\n                    return [3 /*break*/, 1];\n                case 6: return [2 /*return*/, update.commit({ doNotUpdateCurrent: true })];\n            }\n        });\n    });\n}\n/** filter transparency layers for given structure */\nfunction getFilteredBundle(layers, structure) {\n    var transparency = transparency_1.Transparency.ofBundle(layers, structure.root);\n    var merged = transparency_1.Transparency.merge(transparency);\n    return transparency_1.Transparency.filter(merged, structure);\n}\n//# sourceMappingURL=alphafold-transparency.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/alphafold-transparency.js\n");
  
  /***/ }),
  
  /***/ "./lib/annotation.js":
  /*!***************************!*\
    !*** ./lib/annotation.js ***!
    \***************************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\n/**\n * Copyright (c) 2019-2020 mol* contributors, licensed under MIT, See LICENSE file for more info.\n *\n * @author David Sehnal <david.sehnal@gmail.com>\n * @author Alexander Rose <alexander.rose@weirdbyte.de>\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TwinConsData = exports.ShannonEntropy = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar custom_element_property_1 = __webpack_require__(/*! Molstar/mol-model-props/common/custom-element-property */ \"./node_modules/molstar/lib/mol-model-props/common/custom-element-property.js\");\nvar color_1 = __webpack_require__(/*! Molstar/mol-util/color */ \"./node_modules/molstar/lib/mol-util/color/index.js\");\n/*const ShannonEntropyPalette: Color[] = [\n    [255, 255, 129], // insufficient\n    [160, 37, 96], // 9\n    [240, 125, 171],\n    [250, 201, 222],\n    [252, 237, 244],\n    [255, 255, 255],\n    [234, 255, 255],\n    [215, 255, 255],\n    [140, 255, 255],\n    [16, 200, 209] // 1\n].reverse().map(([r, g, b]) => Color.fromRgb(r, g, b));*/\nvar ShannonEntropyPalette = [[13, 8, 135], [19, 7, 137], [27, 6, 141], [33, 6, 143], [38, 5, 146], [43, 5, 148], [47, 5, 150], [53, 4, 152], [56, 4, 154], [61, 4, 156], [65, 4, 157], [70, 3, 159], [74, 3, 160], [78, 2, 162], [82, 2, 163], [86, 2, 164], [91, 1, 165], [94, 1, 166], [99, 0, 167], [102, 0, 167], [107, 0, 168], [110, 0, 168], [114, 1, 168], [118, 1, 168], [122, 2, 168], [126, 3, 168], [129, 4, 167], [134, 6, 167], [136, 8, 166], [141, 11, 164], [144, 14, 163], [148, 16, 162], [151, 19, 160], [154, 22, 159], [158, 25, 157], [161, 28, 155], [165, 31, 153], [167, 33, 151], [171, 36, 148], [174, 39, 146], [177, 42, 144], [180, 45, 142], [182, 48, 139], [185, 51, 137], [188, 53, 135], [191, 57, 132], [193, 59, 130], [196, 62, 127], [198, 65, 125], [201, 68, 122], [203, 71, 120], [205, 74, 118], [208, 77, 116], [210, 79, 113], [212, 83, 111], [214, 85, 109], [217, 88, 106], [219, 91, 104], [221, 94, 102], [223, 97, 100], [225, 100, 98], [227, 103, 95], [228, 106, 93], [231, 110, 91], [232, 112, 89], [234, 116, 87], [236, 119, 84], [237, 122, 82], [239, 125, 80], [240, 128, 78], [242, 131, 76], [243, 135, 74], [245, 138, 71], [246, 141, 69], [247, 145, 67], [248, 148, 65], [249, 152, 62], [250, 156, 60], [251, 159, 58], [251, 163, 56], [252, 166, 54], [253, 171, 52], [253, 174, 50], [253, 178, 47], [253, 181, 46], [254, 186, 44], [253, 190, 42], [253, 194, 41], [253, 198, 39], [253, 202, 38], [252, 207, 37], [252, 210, 37], [251, 215, 36], [250, 218, 36], [248, 223, 37], [247, 227, 37], [246, 232, 38], [244, 236, 39], [243, 240, 39], [241, 245, 37]].map(function (_a) {\n    var r = _a[0], g = _a[1], b = _a[2];\n    return color_1.Color.fromRgb(r, g, b);\n});\nvar ShannonEntropyDefaultColor = (0, color_1.Color)(0x999999);\nvar TwinConsPalette = [\n    [8, 48, 107],\n    [8, 51, 112],\n    [8, 55, 118],\n    [8, 58, 122],\n    [8, 62, 127],\n    [8, 65, 133],\n    [8, 69, 138],\n    [8, 73, 143],\n    [8, 76, 148],\n    [8, 80, 154],\n    [10, 83, 158],\n    [12, 86, 160],\n    [15, 90, 163],\n    [18, 93, 165],\n    [20, 96, 168],\n    [23, 100, 171],\n    [25, 103, 174],\n    [28, 107, 176],\n    [31, 110, 179],\n    [34, 114, 181],\n    [37, 117, 183],\n    [41, 121, 185],\n    [44, 124, 187],\n    [48, 128, 189],\n    [51, 131, 190],\n    [55, 135, 192],\n    [58, 139, 194],\n    [62, 142, 196],\n    [65, 145, 198],\n    [70, 149, 199],\n    [74, 152, 201],\n    [78, 154, 203],\n    [83, 158, 205],\n    [87, 160, 206],\n    [92, 164, 208],\n    [96, 167, 210],\n    [101, 170, 211],\n    [105, 173, 213],\n    [109, 175, 214],\n    [115, 178, 216],\n    [121, 182, 217],\n    [126, 184, 218],\n    [132, 188, 219],\n    [137, 190, 220],\n    [143, 194, 222],\n    [148, 196, 223],\n    [153, 199, 224],\n    [159, 202, 225],\n    [162, 204, 227],\n    [167, 206, 228],\n    [171, 208, 230],\n    [176, 210, 231],\n    [180, 211, 233],\n    [184, 213, 234],\n    [189, 215, 236],\n    [193, 217, 237],\n    [197, 218, 239],\n    [200, 220, 240],\n    [202, 222, 241],\n    [205, 224, 241],\n    [208, 225, 242],\n    [210, 227, 243],\n    [213, 229, 244],\n    [215, 231, 245],\n    [218, 232, 246],\n    [220, 234, 247],\n    [223, 236, 247],\n    [226, 237, 248],\n    [228, 239, 249],\n    [231, 241, 250],\n    [234, 243, 251],\n    [237, 244, 252],\n    [239, 246, 252],\n    [242, 248, 253],\n    [245, 249, 254],\n    [255, 245, 240],\n    [255, 238, 231],\n    [254, 232, 221],\n    [254, 225, 211],\n    [253, 213, 196],\n    [253, 202, 181],\n    [252, 190, 165],\n    [252, 178, 150],\n    [252, 164, 135],\n    [252, 151, 119],\n    [252, 138, 106],\n    [251, 125, 93],\n    [251, 112, 80],\n    [249, 99, 69],\n    [245, 83, 59],\n    [241, 68, 50],\n    [235, 55, 42],\n    [223, 43, 37],\n    [211, 32, 32],\n    [200, 23, 28],\n    [188, 20, 26],\n    [176, 18, 23],\n    [162, 14, 21],\n    [142, 9, 18],\n    [122, 5, 16]\n].reverse().map(function (_a) {\n    var r = _a[0], g = _a[1], b = _a[2];\n    return color_1.Color.fromRgb(r, g, b);\n});\nvar TwinConsDefaultColor = (0, color_1.Color)(0x999999);\nvar data = [];\nvar check = function () {\n    setTimeout(function () {\n        if (!window.getAnnotationArray)\n            check();\n        else {\n            var getAnnotationArray = window.getAnnotationArray;\n            if (getAnnotationArray().length == 0) {\n                check();\n            }\n            else {\n                data = getAnnotationArray();\n            }\n        }\n    }, 1000);\n};\ncheck();\nexports.ShannonEntropy = custom_element_property_1.CustomElementProperty.create({\n    name: 'shannon-entropy-wrapper',\n    label: 'Shannon Entropy',\n    type: 'static',\n    getData: function (model, ctx) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var conservationMap, annotations, _i, annotations_1, e, _a, _b, r, map, residueCount, residueOffsets, chainIndex, rI, cI, key, ann, aI;\n            return tslib_1.__generator(this, function (_c) {\n                conservationMap = new Map();\n                annotations = data['SE'];\n                for (_i = 0, annotations_1 = annotations; _i < annotations_1.length; _i++) {\n                    e = annotations_1[_i];\n                    for (_a = 0, _b = e.ids; _a < _b.length; _a++) {\n                        r = _b[_a];\n                        conservationMap.set(r, e.annotation);\n                    }\n                }\n                map = new Map();\n                residueCount = model.atomicHierarchy.residues._rowCount;\n                residueOffsets = model.atomicHierarchy.residueAtomSegments.offsets;\n                chainIndex = model.atomicHierarchy.chainAtomSegments.index;\n                for (rI = 0; rI < residueCount; rI++) {\n                    cI = chainIndex[residueOffsets[rI]];\n                    key = \"\".concat(model.atomicHierarchy.chains.auth_asym_id.value(cI), \" \").concat(model.atomicHierarchy.residues.auth_seq_id.value(rI));\n                    if (!conservationMap.has(key))\n                        continue;\n                    ann = conservationMap.get(key);\n                    for (aI = residueOffsets[rI]; aI < residueOffsets[rI + 1]; aI++) {\n                        map.set(aI, ann);\n                    }\n                }\n                return [2 /*return*/, { value: map }];\n            });\n        });\n    },\n    coloring: {\n        getColor: function (e) {\n            if (e < 1 || e > 100)\n                return ShannonEntropyDefaultColor;\n            return ShannonEntropyPalette[e - 1];\n        },\n        defaultColor: ShannonEntropyDefaultColor\n    },\n    getLabel: function (e) {\n        if (e === 100)\n            return \"Evolutionary Conservation: Insufficient Data\";\n        return e ? \"Evolutionary Conservation: \".concat(e) : void 0;\n    },\n});\nexports.TwinConsData = custom_element_property_1.CustomElementProperty.create({\n    name: 'TwinCons-Data-wrapper',\n    label: 'Twin Cons',\n    type: 'static',\n    getData: function (model, ctx) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var conservationMap, annotations, _i, annotations_2, e, _a, _b, r, map, residueCount, residueOffsets, chainIndex, rI, cI, key, ann, aI;\n            return tslib_1.__generator(this, function (_c) {\n                conservationMap = new Map();\n                annotations = data['TWC'];\n                for (_i = 0, annotations_2 = annotations; _i < annotations_2.length; _i++) {\n                    e = annotations_2[_i];\n                    for (_a = 0, _b = e.ids; _a < _b.length; _a++) {\n                        r = _b[_a];\n                        conservationMap.set(r, e.annotation);\n                    }\n                }\n                map = new Map();\n                residueCount = model.atomicHierarchy.residues._rowCount;\n                residueOffsets = model.atomicHierarchy.residueAtomSegments.offsets;\n                chainIndex = model.atomicHierarchy.chainAtomSegments.index;\n                for (rI = 0; rI < residueCount; rI++) {\n                    cI = chainIndex[residueOffsets[rI]];\n                    key = \"\".concat(model.atomicHierarchy.chains.auth_asym_id.value(cI), \" \").concat(model.atomicHierarchy.residues.auth_seq_id.value(rI));\n                    if (!conservationMap.has(key))\n                        continue;\n                    ann = conservationMap.get(key);\n                    for (aI = residueOffsets[rI]; aI < residueOffsets[rI + 1]; aI++) {\n                        map.set(aI, ann);\n                    }\n                }\n                return [2 /*return*/, { value: map }];\n            });\n        });\n    },\n    coloring: {\n        getColor: function (e) {\n            if (e < 1 || e > 100)\n                return TwinConsDefaultColor;\n            return TwinConsPalette[e - 1];\n        },\n        defaultColor: TwinConsDefaultColor\n    },\n    getLabel: function (e) {\n        if (e === 100)\n            return \"Evolutionary Conservation: Insufficient Data\";\n        return e ? \"Evolutionary Conservation: \".concat(e) : void 0;\n    },\n});\n//# sourceMappingURL=annotation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/annotation.js\n");
  
  /***/ }),
  
  /***/ "./lib/custom-events.js":
  /*!******************************!*\
    !*** ./lib/custom-events.js ***!
    \******************************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CustomEvents = void 0;\nvar loci_details_1 = __webpack_require__(/*! ./loci-details */ \"./lib/loci-details.js\");\nvar operators_1 = __webpack_require__(/*! rxjs/operators */ \"./node_modules/rxjs/dist/cjs/operators/index.js\");\nvar CustomEvents;\n(function (CustomEvents) {\n    function create(eventTypeArr) {\n        var eventObj = {};\n        for (var ei = 0, el = eventTypeArr.length; ei < el; ei++) {\n            var eventType = eventTypeArr[ei];\n            var event_1 = void 0;\n            if (typeof MouseEvent == 'function') {\n                // current standard\n                event_1 = new MouseEvent(eventType, { 'view': window, 'bubbles': true, 'cancelable': true });\n            }\n            else if (typeof document.createEvent == 'function') {\n                // older standard\n                event_1 = document.createEvent('MouseEvents');\n                event_1.initEvent(eventType, true /* bubbles */, true /* cancelable */);\n            }\n            eventObj[eventType] = event_1;\n        }\n        ;\n        return eventObj;\n    }\n    function dispatchCustomEvent(event, eventData, targetElement) {\n        if (typeof eventData !== 'undefined') {\n            eventData['residueNumber'] = eventData.seq_id;\n            event['eventData'] = eventData;\n            event.eventData.residueNumber = eventData.seq_id;\n            targetElement.dispatchEvent(event);\n        }\n    }\n    function add(plugin, targetElement) {\n        var pdbevents = create(['PDB.molstar.click', 'PDB.molstar.mouseover', 'PDB.molstar.mouseout']);\n        plugin.behaviors.interaction.click.subscribe(function (e) {\n            if (e.button === 1 && e.current && e.current.loci.kind !== 'empty-loci') {\n                var evData = (0, loci_details_1.lociDetails)(e.current.loci);\n                if (evData)\n                    dispatchCustomEvent(pdbevents['PDB.molstar.click'], evData, targetElement);\n            }\n        });\n        plugin.behaviors.interaction.hover.pipe((0, operators_1.debounceTime)(100)).subscribe(function (e) {\n            if (e.current && e.current.loci && e.current.loci.kind !== 'empty-loci') {\n                var evData = (0, loci_details_1.lociDetails)(e.current.loci);\n                if (evData)\n                    dispatchCustomEvent(pdbevents['PDB.molstar.mouseover'], evData, targetElement);\n            }\n            if (e.current && e.current.loci && e.current.loci.kind === 'empty-loci') {\n                dispatchCustomEvent(pdbevents['PDB.molstar.mouseout'], {}, targetElement);\n            }\n        });\n    }\n    CustomEvents.add = add;\n})(CustomEvents = exports.CustomEvents || (exports.CustomEvents = {}));\n//# sourceMappingURL=custom-events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWIvY3VzdG9tLWV2ZW50cy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEIscUJBQXFCLG1CQUFPLENBQUMsNkNBQWdCO0FBQzdDLGtCQUFrQixtQkFBTyxDQUFDLHVFQUFnQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxTQUFTO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELHFEQUFxRDtBQUMzRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUU7QUFDekU7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUMsMENBQTBDLG9CQUFvQixLQUFLO0FBQ3BFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGRiZS1tb2xzdGFyLy4vbGliL2N1c3RvbS1ldmVudHMuanM/YzZhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ3VzdG9tRXZlbnRzID0gdm9pZCAwO1xudmFyIGxvY2lfZGV0YWlsc18xID0gcmVxdWlyZShcIi4vbG9jaS1kZXRhaWxzXCIpO1xudmFyIG9wZXJhdG9yc18xID0gcmVxdWlyZShcInJ4anMvb3BlcmF0b3JzXCIpO1xudmFyIEN1c3RvbUV2ZW50cztcbihmdW5jdGlvbiAoQ3VzdG9tRXZlbnRzKSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlKGV2ZW50VHlwZUFycikge1xuICAgICAgICB2YXIgZXZlbnRPYmogPSB7fTtcbiAgICAgICAgZm9yICh2YXIgZWkgPSAwLCBlbCA9IGV2ZW50VHlwZUFyci5sZW5ndGg7IGVpIDwgZWw7IGVpKyspIHtcbiAgICAgICAgICAgIHZhciBldmVudFR5cGUgPSBldmVudFR5cGVBcnJbZWldO1xuICAgICAgICAgICAgdmFyIGV2ZW50XzEgPSB2b2lkIDA7XG4gICAgICAgICAgICBpZiAodHlwZW9mIE1vdXNlRXZlbnQgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIC8vIGN1cnJlbnQgc3RhbmRhcmRcbiAgICAgICAgICAgICAgICBldmVudF8xID0gbmV3IE1vdXNlRXZlbnQoZXZlbnRUeXBlLCB7ICd2aWV3Jzogd2luZG93LCAnYnViYmxlcyc6IHRydWUsICdjYW5jZWxhYmxlJzogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFdmVudCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgLy8gb2xkZXIgc3RhbmRhcmRcbiAgICAgICAgICAgICAgICBldmVudF8xID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ01vdXNlRXZlbnRzJyk7XG4gICAgICAgICAgICAgICAgZXZlbnRfMS5pbml0RXZlbnQoZXZlbnRUeXBlLCB0cnVlIC8qIGJ1YmJsZXMgKi8sIHRydWUgLyogY2FuY2VsYWJsZSAqLyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBldmVudE9ialtldmVudFR5cGVdID0gZXZlbnRfMTtcbiAgICAgICAgfVxuICAgICAgICA7XG4gICAgICAgIHJldHVybiBldmVudE9iajtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGlzcGF0Y2hDdXN0b21FdmVudChldmVudCwgZXZlbnREYXRhLCB0YXJnZXRFbGVtZW50KSB7XG4gICAgICAgIGlmICh0eXBlb2YgZXZlbnREYXRhICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgZXZlbnREYXRhWydyZXNpZHVlTnVtYmVyJ10gPSBldmVudERhdGEuc2VxX2lkO1xuICAgICAgICAgICAgZXZlbnRbJ2V2ZW50RGF0YSddID0gZXZlbnREYXRhO1xuICAgICAgICAgICAgZXZlbnQuZXZlbnREYXRhLnJlc2lkdWVOdW1iZXIgPSBldmVudERhdGEuc2VxX2lkO1xuICAgICAgICAgICAgdGFyZ2V0RWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBhZGQocGx1Z2luLCB0YXJnZXRFbGVtZW50KSB7XG4gICAgICAgIHZhciBwZGJldmVudHMgPSBjcmVhdGUoWydQREIubW9sc3Rhci5jbGljaycsICdQREIubW9sc3Rhci5tb3VzZW92ZXInLCAnUERCLm1vbHN0YXIubW91c2VvdXQnXSk7XG4gICAgICAgIHBsdWdpbi5iZWhhdmlvcnMuaW50ZXJhY3Rpb24uY2xpY2suc3Vic2NyaWJlKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAoZS5idXR0b24gPT09IDEgJiYgZS5jdXJyZW50ICYmIGUuY3VycmVudC5sb2NpLmtpbmQgIT09ICdlbXB0eS1sb2NpJykge1xuICAgICAgICAgICAgICAgIHZhciBldkRhdGEgPSAoMCwgbG9jaV9kZXRhaWxzXzEubG9jaURldGFpbHMpKGUuY3VycmVudC5sb2NpKTtcbiAgICAgICAgICAgICAgICBpZiAoZXZEYXRhKVxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaEN1c3RvbUV2ZW50KHBkYmV2ZW50c1snUERCLm1vbHN0YXIuY2xpY2snXSwgZXZEYXRhLCB0YXJnZXRFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHBsdWdpbi5iZWhhdmlvcnMuaW50ZXJhY3Rpb24uaG92ZXIucGlwZSgoMCwgb3BlcmF0b3JzXzEuZGVib3VuY2VUaW1lKSgxMDApKS5zdWJzY3JpYmUoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGlmIChlLmN1cnJlbnQgJiYgZS5jdXJyZW50LmxvY2kgJiYgZS5jdXJyZW50LmxvY2kua2luZCAhPT0gJ2VtcHR5LWxvY2knKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2RGF0YSA9ICgwLCBsb2NpX2RldGFpbHNfMS5sb2NpRGV0YWlscykoZS5jdXJyZW50LmxvY2kpO1xuICAgICAgICAgICAgICAgIGlmIChldkRhdGEpXG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoQ3VzdG9tRXZlbnQocGRiZXZlbnRzWydQREIubW9sc3Rhci5tb3VzZW92ZXInXSwgZXZEYXRhLCB0YXJnZXRFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlLmN1cnJlbnQgJiYgZS5jdXJyZW50LmxvY2kgJiYgZS5jdXJyZW50LmxvY2kua2luZCA9PT0gJ2VtcHR5LWxvY2knKSB7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hDdXN0b21FdmVudChwZGJldmVudHNbJ1BEQi5tb2xzdGFyLm1vdXNlb3V0J10sIHt9LCB0YXJnZXRFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIEN1c3RvbUV2ZW50cy5hZGQgPSBhZGQ7XG59KShDdXN0b21FdmVudHMgPSBleHBvcnRzLkN1c3RvbUV2ZW50cyB8fCAoZXhwb3J0cy5DdXN0b21FdmVudHMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3VzdG9tLWV2ZW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./lib/custom-events.js\n");
  
  /***/ }),
  
  /***/ "./lib/domain-annotations/behavior.js":
  /*!********************************************!*\
    !*** ./lib/domain-annotations/behavior.js ***!
    \********************************************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PDBeDomainAnnotations = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar prop_1 = __webpack_require__(/*! ./prop */ \"./lib/domain-annotations/prop.js\");\nvar color_1 = __webpack_require__(/*! ./color */ \"./lib/domain-annotations/color.js\");\nvar param_definition_1 = __webpack_require__(/*! Molstar/mol-util/param-definition */ \"./node_modules/molstar/lib/mol-util/param-definition.js\");\nvar behavior_1 = __webpack_require__(/*! Molstar/mol-plugin/behavior */ \"./node_modules/molstar/lib/mol-plugin/behavior.js\");\nexports.PDBeDomainAnnotations = behavior_1.PluginBehavior.create({\n    name: 'pdbe-domain-annotations-prop',\n    category: 'custom-props',\n    display: {\n        name: 'Domain annotations',\n        description: 'Data for domain annotations, obtained via PDBe.'\n    },\n    ctor: /** @class */ (function (_super) {\n        tslib_1.__extends(class_1, _super);\n        function class_1() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.provider = prop_1.DomainAnnotationsProvider;\n            _this.labelDomainAnnotations = {\n                label: function (loci) { return void 0; }\n            };\n            return _this;\n        }\n        class_1.prototype.register = function () {\n            this.ctx.customModelProperties.register(this.provider, this.params.autoAttach);\n            this.ctx.managers.lociLabels.addProvider(this.labelDomainAnnotations);\n            this.ctx.representation.structure.themes.colorThemeRegistry.add(color_1.DomainAnnotationsColorThemeProvider);\n        };\n        class_1.prototype.update = function (p) {\n            var updated = this.params.autoAttach !== p.autoAttach;\n            this.params.autoAttach = p.autoAttach;\n            this.params.showTooltip = p.showTooltip;\n            this.ctx.customModelProperties.setDefaultAutoAttach(this.provider.descriptor.name, this.params.autoAttach);\n            return updated;\n        };\n        class_1.prototype.unregister = function () {\n            this.ctx.customModelProperties.unregister(prop_1.DomainAnnotationsProvider.descriptor.name);\n            this.ctx.managers.lociLabels.removeProvider(this.labelDomainAnnotations);\n            this.ctx.representation.structure.themes.colorThemeRegistry.remove(color_1.DomainAnnotationsColorThemeProvider);\n        };\n        return class_1;\n    }(behavior_1.PluginBehavior.Handler)),\n    params: function () { return ({\n        autoAttach: param_definition_1.ParamDefinition.Boolean(false),\n        showTooltip: param_definition_1.ParamDefinition.Boolean(true)\n    }); }\n});\n//# sourceMappingURL=behavior.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWIvZG9tYWluLWFubm90YXRpb25zL2JlaGF2aW9yLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3QixjQUFjLG1CQUFPLENBQUMsZ0RBQU87QUFDN0IsYUFBYSxtQkFBTyxDQUFDLGdEQUFRO0FBQzdCLGNBQWMsbUJBQU8sQ0FBQyxrREFBUztBQUMvQix5QkFBeUIsbUJBQU8sQ0FBQyxrR0FBbUM7QUFDcEUsaUJBQWlCLG1CQUFPLENBQUMsc0ZBQTZCO0FBQ3RELDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsQ0FBQztBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGRiZS1tb2xzdGFyLy4vbGliL2RvbWFpbi1hbm5vdGF0aW9ucy9iZWhhdmlvci5qcz83NjhiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QREJlRG9tYWluQW5ub3RhdGlvbnMgPSB2b2lkIDA7XG52YXIgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnZhciBwcm9wXzEgPSByZXF1aXJlKFwiLi9wcm9wXCIpO1xudmFyIGNvbG9yXzEgPSByZXF1aXJlKFwiLi9jb2xvclwiKTtcbnZhciBwYXJhbV9kZWZpbml0aW9uXzEgPSByZXF1aXJlKFwiTW9sc3Rhci9tb2wtdXRpbC9wYXJhbS1kZWZpbml0aW9uXCIpO1xudmFyIGJlaGF2aW9yXzEgPSByZXF1aXJlKFwiTW9sc3Rhci9tb2wtcGx1Z2luL2JlaGF2aW9yXCIpO1xuZXhwb3J0cy5QREJlRG9tYWluQW5ub3RhdGlvbnMgPSBiZWhhdmlvcl8xLlBsdWdpbkJlaGF2aW9yLmNyZWF0ZSh7XG4gICAgbmFtZTogJ3BkYmUtZG9tYWluLWFubm90YXRpb25zLXByb3AnLFxuICAgIGNhdGVnb3J5OiAnY3VzdG9tLXByb3BzJyxcbiAgICBkaXNwbGF5OiB7XG4gICAgICAgIG5hbWU6ICdEb21haW4gYW5ub3RhdGlvbnMnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0RhdGEgZm9yIGRvbWFpbiBhbm5vdGF0aW9ucywgb2J0YWluZWQgdmlhIFBEQmUuJ1xuICAgIH0sXG4gICAgY3RvcjogLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICB0c2xpYl8xLl9fZXh0ZW5kcyhjbGFzc18xLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBjbGFzc18xKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgICAgICBfdGhpcy5wcm92aWRlciA9IHByb3BfMS5Eb21haW5Bbm5vdGF0aW9uc1Byb3ZpZGVyO1xuICAgICAgICAgICAgX3RoaXMubGFiZWxEb21haW5Bbm5vdGF0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogZnVuY3Rpb24gKGxvY2kpIHsgcmV0dXJuIHZvaWQgMDsgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuY3R4LmN1c3RvbU1vZGVsUHJvcGVydGllcy5yZWdpc3Rlcih0aGlzLnByb3ZpZGVyLCB0aGlzLnBhcmFtcy5hdXRvQXR0YWNoKTtcbiAgICAgICAgICAgIHRoaXMuY3R4Lm1hbmFnZXJzLmxvY2lMYWJlbHMuYWRkUHJvdmlkZXIodGhpcy5sYWJlbERvbWFpbkFubm90YXRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuY3R4LnJlcHJlc2VudGF0aW9uLnN0cnVjdHVyZS50aGVtZXMuY29sb3JUaGVtZVJlZ2lzdHJ5LmFkZChjb2xvcl8xLkRvbWFpbkFubm90YXRpb25zQ29sb3JUaGVtZVByb3ZpZGVyKTtcbiAgICAgICAgfTtcbiAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICAgIHZhciB1cGRhdGVkID0gdGhpcy5wYXJhbXMuYXV0b0F0dGFjaCAhPT0gcC5hdXRvQXR0YWNoO1xuICAgICAgICAgICAgdGhpcy5wYXJhbXMuYXV0b0F0dGFjaCA9IHAuYXV0b0F0dGFjaDtcbiAgICAgICAgICAgIHRoaXMucGFyYW1zLnNob3dUb29sdGlwID0gcC5zaG93VG9vbHRpcDtcbiAgICAgICAgICAgIHRoaXMuY3R4LmN1c3RvbU1vZGVsUHJvcGVydGllcy5zZXREZWZhdWx0QXV0b0F0dGFjaCh0aGlzLnByb3ZpZGVyLmRlc2NyaXB0b3IubmFtZSwgdGhpcy5wYXJhbXMuYXV0b0F0dGFjaCk7XG4gICAgICAgICAgICByZXR1cm4gdXBkYXRlZDtcbiAgICAgICAgfTtcbiAgICAgICAgY2xhc3NfMS5wcm90b3R5cGUudW5yZWdpc3RlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuY3R4LmN1c3RvbU1vZGVsUHJvcGVydGllcy51bnJlZ2lzdGVyKHByb3BfMS5Eb21haW5Bbm5vdGF0aW9uc1Byb3ZpZGVyLmRlc2NyaXB0b3IubmFtZSk7XG4gICAgICAgICAgICB0aGlzLmN0eC5tYW5hZ2Vycy5sb2NpTGFiZWxzLnJlbW92ZVByb3ZpZGVyKHRoaXMubGFiZWxEb21haW5Bbm5vdGF0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmN0eC5yZXByZXNlbnRhdGlvbi5zdHJ1Y3R1cmUudGhlbWVzLmNvbG9yVGhlbWVSZWdpc3RyeS5yZW1vdmUoY29sb3JfMS5Eb21haW5Bbm5vdGF0aW9uc0NvbG9yVGhlbWVQcm92aWRlcik7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBjbGFzc18xO1xuICAgIH0oYmVoYXZpb3JfMS5QbHVnaW5CZWhhdmlvci5IYW5kbGVyKSksXG4gICAgcGFyYW1zOiBmdW5jdGlvbiAoKSB7IHJldHVybiAoe1xuICAgICAgICBhdXRvQXR0YWNoOiBwYXJhbV9kZWZpbml0aW9uXzEuUGFyYW1EZWZpbml0aW9uLkJvb2xlYW4oZmFsc2UpLFxuICAgICAgICBzaG93VG9vbHRpcDogcGFyYW1fZGVmaW5pdGlvbl8xLlBhcmFtRGVmaW5pdGlvbi5Cb29sZWFuKHRydWUpXG4gICAgfSk7IH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmVoYXZpb3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./lib/domain-annotations/behavior.js\n");
  
  /***/ }),
  
  /***/ "./lib/domain-annotations/color.js":
  /*!*****************************************!*\
    !*** ./lib/domain-annotations/color.js ***!
    \*****************************************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DomainAnnotationsColorThemeProvider = exports.DomainAnnotationsColorTheme = exports.DomainAnnotationsColorThemeParams = void 0;\nvar prop_1 = __webpack_require__(/*! ./prop */ \"./lib/domain-annotations/prop.js\");\nvar structure_1 = __webpack_require__(/*! Molstar/mol-model/structure */ \"./node_modules/molstar/lib/mol-model/structure.js\");\nvar color_1 = __webpack_require__(/*! Molstar/mol-util/color */ \"./node_modules/molstar/lib/mol-util/color/index.js\");\nvar param_definition_1 = __webpack_require__(/*! Molstar/mol-util/param-definition */ \"./node_modules/molstar/lib/mol-util/param-definition.js\");\nvar DomainColors = [\n    color_1.Color.fromRgb(170, 170, 170),\n    color_1.Color.fromRgb(255, 112, 3)\n];\nexports.DomainAnnotationsColorThemeParams = {\n    type: param_definition_1.ParamDefinition.MappedStatic('', {\n        '': param_definition_1.ParamDefinition.EmptyGroup()\n    })\n};\nfunction DomainAnnotationsColorTheme(ctx, props) {\n    var color;\n    if (ctx.structure && !ctx.structure.isEmpty && ctx.structure.models[0].customProperties.has(prop_1.DomainAnnotationsProvider.descriptor)) {\n        var getDomains_1 = prop_1.DomainAnnotations.getDomains;\n        var issue_1 = props.type.params.kind;\n        color = function (location) {\n            if (structure_1.StructureElement.Location.is(location) && getDomains_1(location).indexOf(issue_1) >= 0) {\n                return DomainColors[1];\n            }\n            return DomainColors[0];\n        };\n    }\n    else {\n        color = function () { return DomainColors[0]; };\n    }\n    return {\n        factory: DomainAnnotationsColorTheme,\n        granularity: 'group',\n        color: color,\n        props: props,\n        description: 'Highlights Sequnece and Structure Domain Annotations. Data obtained via PDBe.',\n    };\n}\nexports.DomainAnnotationsColorTheme = DomainAnnotationsColorTheme;\nexports.DomainAnnotationsColorThemeProvider = {\n    name: 'pdbe-domain-annotations',\n    label: 'Domain annotations',\n    category: \"Miscellaneous\" /* ColorTheme.Category.Misc */,\n    factory: DomainAnnotationsColorTheme,\n    getParams: function (ctx) {\n        var domainNames = prop_1.DomainAnnotations.getDomainNames(ctx.structure);\n        var domainTypes = prop_1.DomainAnnotations.getDomainTypes(ctx.structure);\n        var optionObj = {};\n        domainTypes.forEach(function (tp, index) {\n            if (domainNames[index].length > 0) {\n                optionObj[tp] = param_definition_1.ParamDefinition.Group({\n                    kind: param_definition_1.ParamDefinition.Select(domainNames[index][0], param_definition_1.ParamDefinition.arrayToOptions(domainNames[index]))\n                }, { isFlat: true });\n            }\n        });\n        if (Object.keys(optionObj).length > 0) {\n            return {\n                type: param_definition_1.ParamDefinition.MappedStatic(optionObj[0], optionObj)\n            };\n        }\n        else {\n            return {\n                type: param_definition_1.ParamDefinition.MappedStatic('', {\n                    '': param_definition_1.ParamDefinition.EmptyGroup()\n                })\n            };\n        }\n    },\n    defaultValues: param_definition_1.ParamDefinition.getDefaultValues(exports.DomainAnnotationsColorThemeParams),\n    isApplicable: function (ctx) { var _a; return prop_1.DomainAnnotations.isApplicable((_a = ctx.structure) === null || _a === void 0 ? void 0 : _a.models[0]); },\n    ensureCustomProperties: {\n        attach: function (ctx, data) {\n            return data.structure ? prop_1.DomainAnnotationsProvider.attach(ctx, data.structure.models[0], void 0, true) : Promise.resolve();\n        },\n        detach: function (data) { return data.structure && data.structure.models[0].customProperties.reference(prop_1.DomainAnnotationsProvider.descriptor, false); }\n    }\n};\n//# sourceMappingURL=color.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWIvZG9tYWluLWFubm90YXRpb25zL2NvbG9yLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJDQUEyQyxHQUFHLG1DQUFtQyxHQUFHLHlDQUF5QztBQUM3SCxhQUFhLG1CQUFPLENBQUMsZ0RBQVE7QUFDN0Isa0JBQWtCLG1CQUFPLENBQUMsc0ZBQTZCO0FBQ3ZELGNBQWMsbUJBQU8sQ0FBQyxrRkFBd0I7QUFDOUMseUJBQXlCLG1CQUFPLENBQUMsa0dBQW1DO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkMsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixJQUFJLGNBQWM7QUFDbkM7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxtQ0FBbUMsUUFBUSx1SEFBdUg7QUFDbEs7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULGtDQUFrQztBQUNsQztBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZGJlLW1vbHN0YXIvLi9saWIvZG9tYWluLWFubm90YXRpb25zL2NvbG9yLmpzPzU3NDEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRvbWFpbkFubm90YXRpb25zQ29sb3JUaGVtZVByb3ZpZGVyID0gZXhwb3J0cy5Eb21haW5Bbm5vdGF0aW9uc0NvbG9yVGhlbWUgPSBleHBvcnRzLkRvbWFpbkFubm90YXRpb25zQ29sb3JUaGVtZVBhcmFtcyA9IHZvaWQgMDtcbnZhciBwcm9wXzEgPSByZXF1aXJlKFwiLi9wcm9wXCIpO1xudmFyIHN0cnVjdHVyZV8xID0gcmVxdWlyZShcIk1vbHN0YXIvbW9sLW1vZGVsL3N0cnVjdHVyZVwiKTtcbnZhciBjb2xvcl8xID0gcmVxdWlyZShcIk1vbHN0YXIvbW9sLXV0aWwvY29sb3JcIik7XG52YXIgcGFyYW1fZGVmaW5pdGlvbl8xID0gcmVxdWlyZShcIk1vbHN0YXIvbW9sLXV0aWwvcGFyYW0tZGVmaW5pdGlvblwiKTtcbnZhciBEb21haW5Db2xvcnMgPSBbXG4gICAgY29sb3JfMS5Db2xvci5mcm9tUmdiKDE3MCwgMTcwLCAxNzApLFxuICAgIGNvbG9yXzEuQ29sb3IuZnJvbVJnYigyNTUsIDExMiwgMylcbl07XG5leHBvcnRzLkRvbWFpbkFubm90YXRpb25zQ29sb3JUaGVtZVBhcmFtcyA9IHtcbiAgICB0eXBlOiBwYXJhbV9kZWZpbml0aW9uXzEuUGFyYW1EZWZpbml0aW9uLk1hcHBlZFN0YXRpYygnJywge1xuICAgICAgICAnJzogcGFyYW1fZGVmaW5pdGlvbl8xLlBhcmFtRGVmaW5pdGlvbi5FbXB0eUdyb3VwKClcbiAgICB9KVxufTtcbmZ1bmN0aW9uIERvbWFpbkFubm90YXRpb25zQ29sb3JUaGVtZShjdHgsIHByb3BzKSB7XG4gICAgdmFyIGNvbG9yO1xuICAgIGlmIChjdHguc3RydWN0dXJlICYmICFjdHguc3RydWN0dXJlLmlzRW1wdHkgJiYgY3R4LnN0cnVjdHVyZS5tb2RlbHNbMF0uY3VzdG9tUHJvcGVydGllcy5oYXMocHJvcF8xLkRvbWFpbkFubm90YXRpb25zUHJvdmlkZXIuZGVzY3JpcHRvcikpIHtcbiAgICAgICAgdmFyIGdldERvbWFpbnNfMSA9IHByb3BfMS5Eb21haW5Bbm5vdGF0aW9ucy5nZXREb21haW5zO1xuICAgICAgICB2YXIgaXNzdWVfMSA9IHByb3BzLnR5cGUucGFyYW1zLmtpbmQ7XG4gICAgICAgIGNvbG9yID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICAgICAgICBpZiAoc3RydWN0dXJlXzEuU3RydWN0dXJlRWxlbWVudC5Mb2NhdGlvbi5pcyhsb2NhdGlvbikgJiYgZ2V0RG9tYWluc18xKGxvY2F0aW9uKS5pbmRleE9mKGlzc3VlXzEpID49IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRG9tYWluQ29sb3JzWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIERvbWFpbkNvbG9yc1swXTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbG9yID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gRG9tYWluQ29sb3JzWzBdOyB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBmYWN0b3J5OiBEb21haW5Bbm5vdGF0aW9uc0NvbG9yVGhlbWUsXG4gICAgICAgIGdyYW51bGFyaXR5OiAnZ3JvdXAnLFxuICAgICAgICBjb2xvcjogY29sb3IsXG4gICAgICAgIHByb3BzOiBwcm9wcyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdIaWdobGlnaHRzIFNlcXVuZWNlIGFuZCBTdHJ1Y3R1cmUgRG9tYWluIEFubm90YXRpb25zLiBEYXRhIG9idGFpbmVkIHZpYSBQREJlLicsXG4gICAgfTtcbn1cbmV4cG9ydHMuRG9tYWluQW5ub3RhdGlvbnNDb2xvclRoZW1lID0gRG9tYWluQW5ub3RhdGlvbnNDb2xvclRoZW1lO1xuZXhwb3J0cy5Eb21haW5Bbm5vdGF0aW9uc0NvbG9yVGhlbWVQcm92aWRlciA9IHtcbiAgICBuYW1lOiAncGRiZS1kb21haW4tYW5ub3RhdGlvbnMnLFxuICAgIGxhYmVsOiAnRG9tYWluIGFubm90YXRpb25zJyxcbiAgICBjYXRlZ29yeTogXCJNaXNjZWxsYW5lb3VzXCIgLyogQ29sb3JUaGVtZS5DYXRlZ29yeS5NaXNjICovLFxuICAgIGZhY3Rvcnk6IERvbWFpbkFubm90YXRpb25zQ29sb3JUaGVtZSxcbiAgICBnZXRQYXJhbXM6IGZ1bmN0aW9uIChjdHgpIHtcbiAgICAgICAgdmFyIGRvbWFpbk5hbWVzID0gcHJvcF8xLkRvbWFpbkFubm90YXRpb25zLmdldERvbWFpbk5hbWVzKGN0eC5zdHJ1Y3R1cmUpO1xuICAgICAgICB2YXIgZG9tYWluVHlwZXMgPSBwcm9wXzEuRG9tYWluQW5ub3RhdGlvbnMuZ2V0RG9tYWluVHlwZXMoY3R4LnN0cnVjdHVyZSk7XG4gICAgICAgIHZhciBvcHRpb25PYmogPSB7fTtcbiAgICAgICAgZG9tYWluVHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHAsIGluZGV4KSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluTmFtZXNbaW5kZXhdLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBvcHRpb25PYmpbdHBdID0gcGFyYW1fZGVmaW5pdGlvbl8xLlBhcmFtRGVmaW5pdGlvbi5Hcm91cCh7XG4gICAgICAgICAgICAgICAgICAgIGtpbmQ6IHBhcmFtX2RlZmluaXRpb25fMS5QYXJhbURlZmluaXRpb24uU2VsZWN0KGRvbWFpbk5hbWVzW2luZGV4XVswXSwgcGFyYW1fZGVmaW5pdGlvbl8xLlBhcmFtRGVmaW5pdGlvbi5hcnJheVRvT3B0aW9ucyhkb21haW5OYW1lc1tpbmRleF0pKVxuICAgICAgICAgICAgICAgIH0sIHsgaXNGbGF0OiB0cnVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKG9wdGlvbk9iaikubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBwYXJhbV9kZWZpbml0aW9uXzEuUGFyYW1EZWZpbml0aW9uLk1hcHBlZFN0YXRpYyhvcHRpb25PYmpbMF0sIG9wdGlvbk9iailcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHBhcmFtX2RlZmluaXRpb25fMS5QYXJhbURlZmluaXRpb24uTWFwcGVkU3RhdGljKCcnLCB7XG4gICAgICAgICAgICAgICAgICAgICcnOiBwYXJhbV9kZWZpbml0aW9uXzEuUGFyYW1EZWZpbml0aW9uLkVtcHR5R3JvdXAoKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSxcbiAgICBkZWZhdWx0VmFsdWVzOiBwYXJhbV9kZWZpbml0aW9uXzEuUGFyYW1EZWZpbml0aW9uLmdldERlZmF1bHRWYWx1ZXMoZXhwb3J0cy5Eb21haW5Bbm5vdGF0aW9uc0NvbG9yVGhlbWVQYXJhbXMpLFxuICAgIGlzQXBwbGljYWJsZTogZnVuY3Rpb24gKGN0eCkgeyB2YXIgX2E7IHJldHVybiBwcm9wXzEuRG9tYWluQW5ub3RhdGlvbnMuaXNBcHBsaWNhYmxlKChfYSA9IGN0eC5zdHJ1Y3R1cmUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tb2RlbHNbMF0pOyB9LFxuICAgIGVuc3VyZUN1c3RvbVByb3BlcnRpZXM6IHtcbiAgICAgICAgYXR0YWNoOiBmdW5jdGlvbiAoY3R4LCBkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YS5zdHJ1Y3R1cmUgPyBwcm9wXzEuRG9tYWluQW5ub3RhdGlvbnNQcm92aWRlci5hdHRhY2goY3R4LCBkYXRhLnN0cnVjdHVyZS5tb2RlbHNbMF0sIHZvaWQgMCwgdHJ1ZSkgOiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGV0YWNoOiBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gZGF0YS5zdHJ1Y3R1cmUgJiYgZGF0YS5zdHJ1Y3R1cmUubW9kZWxzWzBdLmN1c3RvbVByb3BlcnRpZXMucmVmZXJlbmNlKHByb3BfMS5Eb21haW5Bbm5vdGF0aW9uc1Byb3ZpZGVyLmRlc2NyaXB0b3IsIGZhbHNlKTsgfVxuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./lib/domain-annotations/color.js\n");
  
  /***/ }),
  
  /***/ "./lib/domain-annotations/prop.js":
  /*!****************************************!*\
    !*** ./lib/domain-annotations/prop.js ***!
    \****************************************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DomainAnnotationsProvider = exports.DomainAnnotationsParams = exports.DomainAnnotations = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar structure_1 = __webpack_require__(/*! Molstar/mol-model/structure */ \"./node_modules/molstar/lib/mol-model/structure.js\");\nvar wrapper_1 = __webpack_require__(/*! Molstar/mol-model-props/common/wrapper */ \"./node_modules/molstar/lib/mol-model-props/common/wrapper.js\");\nvar custom_model_property_1 = __webpack_require__(/*! Molstar/mol-model-props/common/custom-model-property */ \"./node_modules/molstar/lib/mol-model-props/common/custom-model-property.js\");\nvar param_definition_1 = __webpack_require__(/*! Molstar/mol-util/param-definition */ \"./node_modules/molstar/lib/mol-util/param-definition.js\");\nvar array_1 = __webpack_require__(/*! Molstar/mol-util/array */ \"./node_modules/molstar/lib/mol-util/array.js\");\nvar assets_1 = __webpack_require__(/*! Molstar/mol-util/assets */ \"./node_modules/molstar/lib/mol-util/assets.js\");\nvar custom_property_1 = __webpack_require__(/*! Molstar/mol-model/custom-property */ \"./node_modules/molstar/lib/mol-model/custom-property.js\");\nvar DomainAnnotations;\n(function (DomainAnnotations) {\n    DomainAnnotations.DefaultServerUrl = 'https://www.ebi.ac.uk/pdbe/api/mappings';\n    function getEntryUrl(pdbId, serverUrl) {\n        return \"\".concat(serverUrl, \"/\").concat(pdbId.toLowerCase());\n    }\n    DomainAnnotations.getEntryUrl = getEntryUrl;\n    function isApplicable(model) {\n        return !!model && structure_1.Model.hasPdbId(model);\n    }\n    DomainAnnotations.isApplicable = isApplicable;\n    function fromJson(model, data) {\n        var info = wrapper_1.PropertyWrapper.createInfo();\n        var domainMap = createdomainMapFromJson(model, data);\n        return { info: info, data: domainMap };\n    }\n    DomainAnnotations.fromJson = fromJson;\n    function fromServer(ctx, model, props) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var url, json, data;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        url = assets_1.Asset.getUrlAsset(ctx.assetManager, getEntryUrl(model.entryId, props.serverUrl));\n                        return [4 /*yield*/, ctx.assetManager.resolve(url, 'json').runInContext(ctx.runtime)];\n                    case 1:\n                        json = _a.sent();\n                        data = json.data[model.entryId.toLowerCase()];\n                        if (!data)\n                            throw new Error('missing data');\n                        return [2 /*return*/, { value: fromJson(model, data), assets: [json] }];\n                }\n            });\n        });\n    }\n    DomainAnnotations.fromServer = fromServer;\n    var _emptyArray = [];\n    function getDomains(e) {\n        if (!structure_1.Unit.isAtomic(e.unit))\n            return _emptyArray;\n        var prop = exports.DomainAnnotationsProvider.get(e.unit.model).value;\n        if (!prop || !prop.data)\n            return _emptyArray;\n        var rI = e.unit.residueIndex[e.element];\n        return prop.data.domains.has(rI) ? prop.data.domains.get(rI) : _emptyArray;\n    }\n    DomainAnnotations.getDomains = getDomains;\n    function getDomainTypes(structure) {\n        if (!structure)\n            return _emptyArray;\n        var prop = exports.DomainAnnotationsProvider.get(structure.models[0]).value;\n        if (!prop || !prop.data)\n            return _emptyArray;\n        return prop.data.domainTypes;\n    }\n    DomainAnnotations.getDomainTypes = getDomainTypes;\n    function getDomainNames(structure) {\n        if (!structure)\n            return _emptyArray;\n        var prop = exports.DomainAnnotationsProvider.get(structure.models[0]).value;\n        if (!prop || !prop.data)\n            return _emptyArray;\n        return prop.data.domainNames;\n    }\n    DomainAnnotations.getDomainNames = getDomainNames;\n})(DomainAnnotations || (DomainAnnotations = {}));\nexports.DomainAnnotations = DomainAnnotations;\nexports.DomainAnnotationsParams = {\n    serverUrl: param_definition_1.ParamDefinition.Text(DomainAnnotations.DefaultServerUrl, { description: 'JSON API Server URL' })\n};\nexports.DomainAnnotationsProvider = custom_model_property_1.CustomModelProperty.createProvider({\n    label: 'Domain annotations',\n    descriptor: (0, custom_property_1.CustomPropertyDescriptor)({\n        name: 'domain_annotations'\n    }),\n    type: 'static',\n    defaultParams: exports.DomainAnnotationsParams,\n    getParams: function (data) { return exports.DomainAnnotationsParams; },\n    isApplicable: function (data) { return DomainAnnotations.isApplicable(data); },\n    obtain: function (ctx, data, props) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {\n        var p;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    p = tslib_1.__assign(tslib_1.__assign({}, param_definition_1.ParamDefinition.getDefaultValues(exports.DomainAnnotationsParams)), props);\n                    return [4 /*yield*/, DomainAnnotations.fromServer(ctx, data, p)];\n                case 1: return [2 /*return*/, _a.sent()];\n            }\n        });\n    }); }\n});\nfunction findChainLabel(map, label_entity_id, label_asym_id) {\n    var entityIndex = map.entities.getEntityIndex;\n    var eI = entityIndex(label_entity_id);\n    if (eI < 0 || !map.entity_index_label_asym_id.has(eI))\n        return -1;\n    var cm = map.entity_index_label_asym_id.get(eI);\n    if (!cm)\n        return -1;\n    return cm.has(label_asym_id) ? cm.get(label_asym_id) : -1;\n}\nfunction findResidue(modelData, map, label_entity_id, label_asym_id, label_seq_id) {\n    var cI = findChainLabel(map, label_entity_id, label_asym_id);\n    if (cI < 0)\n        return -1;\n    var rm = map.chain_index_auth_seq_id.get(cI);\n    return rm.has(label_seq_id) ? rm.get(label_seq_id) : -1;\n}\nfunction createdomainMapFromJson(modelData, data) {\n    var domainTypes = [];\n    var domainNames = [];\n    var ret = new Map();\n    var defaultDomains = ['Pfam', 'InterPro', 'CATH', 'SCOP'];\n    for (var _i = 0, _a = Object.keys(data); _i < _a.length; _i++) {\n        var db_name = _a[_i];\n        if (defaultDomains.indexOf(db_name) === -1)\n            continue;\n        var tempDomains = [];\n        domainTypes.push(db_name);\n        var db = data[db_name];\n        for (var _b = 0, _c = Object.keys(db); _b < _c.length; _b++) {\n            var db_code = _c[_b];\n            var domain = db[db_code];\n            for (var _d = 0, _e = domain.mappings; _d < _e.length; _d++) {\n                var map = _e[_d];\n                (0, array_1.arraySetAdd)(tempDomains, domain.identifier);\n                var indexData = modelData.atomicHierarchy.index;\n                var indexMap = indexData.map;\n                for (var i = map.start.residue_number; i <= map.end.residue_number; i++) {\n                    var seq_id = i;\n                    var idx = findResidue(modelData, indexMap, map.entity_id + '', map.chain_id, seq_id);\n                    var addVal = [domain.identifier];\n                    var prevVal = ret.get(idx);\n                    if (prevVal) {\n                        prevVal.push(domain.identifier);\n                        addVal = prevVal;\n                    }\n                    ret.set(idx, addVal);\n                }\n            }\n        }\n        domainNames.push(tempDomains);\n    }\n    return {\n        domains: structure_1.IndexedCustomProperty.fromResidueMap(ret),\n        domainNames: domainNames,\n        domainTypes: domainTypes\n    };\n}\n//# sourceMappingURL=prop.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/domain-annotations/prop.js\n");
  
  /***/ }),
  
  /***/ "./lib/helpers.js":
  /*!************************!*\
    !*** ./lib/helpers.js ***!
    \************************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ModelInfo = exports.ModelInfo2 = exports.QueryHelper = exports.LigandView = exports.StateElements = exports.AlphafoldView = exports.PDBeVolumes = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar commands_1 = __webpack_require__(/*! Molstar/mol-plugin/commands */ \"./node_modules/molstar/lib/mol-plugin/commands.js\");\nvar builder_1 = __webpack_require__(/*! Molstar/mol-script/language/builder */ \"./node_modules/molstar/lib/mol-script/language/builder.js\");\nvar mol_state_1 = __webpack_require__(/*! Molstar/mol-state */ \"./node_modules/molstar/lib/mol-state/index.js\");\nvar structure_1 = __webpack_require__(/*! Molstar/mol-model/structure */ \"./node_modules/molstar/lib/mol-model/structure.js\");\nvar transformers_1 = __webpack_require__(/*! Molstar/mol-plugin/behavior/dynamic/volume-streaming/transformers */ \"./node_modules/molstar/lib/mol-plugin/behavior/dynamic/volume-streaming/transformers.js\");\n// import { VolumeStreaming } from '../../mol-plugin/behavior/dynamic/volume-streaming/behavior';\nvar compiler_1 = __webpack_require__(/*! Molstar/mol-script/runtime/query/compiler */ \"./node_modules/molstar/lib/mol-script/runtime/query/compiler.js\");\nvar structure_2 = __webpack_require__(/*! Molstar/mol-model/structure */ \"./node_modules/molstar/lib/mol-model/structure.js\");\nvar sifts_mapping_1 = __webpack_require__(/*! Molstar/mol-model-props/sequence/sifts-mapping */ \"./node_modules/molstar/lib/mol-model-props/sequence/sifts-mapping.js\");\nvar query_1 = __webpack_require__(/*! Molstar/mol-model/structure/query/query */ \"./node_modules/molstar/lib/mol-model/structure/query/query.js\");\nvar prop_1 = __webpack_require__(/*! Molstar/extensions/model-archive/quality-assessment/prop */ \"./node_modules/molstar/lib/extensions/model-archive/quality-assessment/prop.js\");\nvar symmetry_1 = __webpack_require__(/*! Molstar/mol-model-formats/structure/property/symmetry */ \"./node_modules/molstar/lib/mol-model-formats/structure/property/symmetry.js\");\nvar PDBeVolumes;\n(function (PDBeVolumes) {\n    function mapParams(defaultParams, mapParams, ref) {\n        var pdbeParams = tslib_1.__assign({}, defaultParams);\n        pdbeParams.options.behaviorRef = 'volume-streaming' + '' + Math.floor(Math.random() * Math.floor(100));\n        pdbeParams.options.emContourProvider = 'pdbe';\n        pdbeParams.options.serverUrl = 'https://www.ebi.ac.uk/pdbe/volume-server';\n        pdbeParams.options.channelParams['em'] = {\n            opacity: (mapParams && mapParams.em && mapParams.em.opacity) ? mapParams.em.opacity : 0.49,\n            wireframe: (mapParams && mapParams.em && mapParams.em.wireframe) ? mapParams.em.wireframe : false\n        };\n        pdbeParams.options.channelParams['2fo-fc'] = {\n            opacity: (mapParams && mapParams['2fo-fc'] && mapParams['2fo-fc'].opacity) ? mapParams['2fo-fc'].opacity : 0.49,\n            wireframe: (mapParams && mapParams['2fo-fc'] && mapParams['2fo-fc'].wireframe) ? mapParams['2fo-fc'].wireframe : false\n        };\n        pdbeParams.options.channelParams['fo-fc(+ve)'] = {\n            opacity: (mapParams && mapParams['fo-fc(+ve)'] && mapParams['fo-fc(+ve)'].opacity) ? mapParams['fo-fc(+ve)'].opacity : 0.3,\n            wireframe: (mapParams && mapParams['fo-fc(+ve)'] && mapParams['fo-fc(+ve)'].wireframe) ? mapParams['fo-fc(+ve)'].wireframe : true\n        };\n        pdbeParams.options.channelParams['fo-fc(-ve)'] = {\n            opacity: (mapParams && mapParams['fo-fc(-ve)'] && mapParams['fo-fc(-ve)'].opacity) ? mapParams['fo-fc(-ve)'].opacity : 0.3,\n            wireframe: (mapParams && mapParams['fo-fc(-ve)'] && mapParams['fo-fc(-ve)'].wireframe) ? mapParams['fo-fc(-ve)'].wireframe : true\n        };\n        return pdbeParams;\n    }\n    PDBeVolumes.mapParams = mapParams;\n    function displayUsibilityMessage(plugin) {\n        commands_1.PluginCommands.Toast.Show(plugin, {\n            title: 'Volume',\n            message: 'Streaming enabled, click on a residue or an atom to view the data.',\n            key: 'toast-1',\n            timeoutMs: 7000\n        });\n    }\n    PDBeVolumes.displayUsibilityMessage = displayUsibilityMessage;\n    function toggle(plugin) {\n        var state = plugin.state.data;\n        var streamingState = state.select(mol_state_1.StateSelection.Generators.ofTransformer(transformers_1.CreateVolumeStreamingInfo))[0];\n        if (streamingState) {\n            commands_1.PluginCommands.State.ToggleVisibility(plugin, { state: state, ref: streamingState.transform.ref });\n            return;\n        }\n    }\n    PDBeVolumes.toggle = toggle;\n})(PDBeVolumes = exports.PDBeVolumes || (exports.PDBeVolumes = {}));\nvar AlphafoldView;\n(function (AlphafoldView) {\n    function getLociByPLDDT(score, contextData) {\n        var queryExp = builder_1.MolScriptBuilder.struct.modifier.union([\n            builder_1.MolScriptBuilder.struct.modifier.wholeResidues([\n                builder_1.MolScriptBuilder.struct.modifier.union([\n                    builder_1.MolScriptBuilder.struct.generator.atomGroups({\n                        'chain-test': builder_1.MolScriptBuilder.core.rel.eq([builder_1.MolScriptBuilder.ammp('objectPrimitive'), 'atomistic']),\n                        'residue-test': builder_1.MolScriptBuilder.core.rel.gr([prop_1.QualityAssessment.symbols.pLDDT.symbol(), score]),\n                    })\n                ])\n            ])\n        ]);\n        var query = (0, compiler_1.compile)(queryExp);\n        var sel = query(new structure_1.QueryContext(contextData));\n        return structure_1.StructureSelection.toLociWithSourceUnits(sel);\n    }\n    AlphafoldView.getLociByPLDDT = getLociByPLDDT;\n})(AlphafoldView = exports.AlphafoldView || (exports.AlphafoldView = {}));\nvar StateElements;\n(function (StateElements) {\n    StateElements[\"Model\"] = \"model\";\n    StateElements[\"ModelProps\"] = \"model-props\";\n    StateElements[\"Assembly\"] = \"assembly\";\n    StateElements[\"VolumeStreaming\"] = \"volume-streaming\";\n    StateElements[\"Sequence\"] = \"sequence\";\n    StateElements[\"SequenceVisual\"] = \"sequence-visual\";\n    StateElements[\"Het\"] = \"het\";\n    StateElements[\"HetVisual\"] = \"het-visual\";\n    StateElements[\"Het3DSNFG\"] = \"het-3dsnfg\";\n    StateElements[\"Water\"] = \"water\";\n    StateElements[\"WaterVisual\"] = \"water-visual\";\n    StateElements[\"HetGroupFocus\"] = \"het-group-focus\";\n    StateElements[\"HetGroupFocusGroup\"] = \"het-group-focus-group\";\n})(StateElements = exports.StateElements || (exports.StateElements = {}));\nvar LigandView;\n(function (LigandView) {\n    function query(ligandViewParams) {\n        var atomGroupsParams = {\n            'group-by': builder_1.MolScriptBuilder.core.str.concat([builder_1.MolScriptBuilder.struct.atomProperty.core.operatorName(), builder_1.MolScriptBuilder.struct.atomProperty.macromolecular.residueKey()])\n        };\n        // Residue Param\n        var residueParam;\n        if (ligandViewParams.auth_seq_id) {\n            residueParam = builder_1.MolScriptBuilder.core.rel.eq([builder_1.MolScriptBuilder.struct.atomProperty.macromolecular.auth_seq_id(), ligandViewParams.auth_seq_id]);\n        }\n        else if (ligandViewParams.label_comp_id) {\n            residueParam = builder_1.MolScriptBuilder.core.rel.eq([builder_1.MolScriptBuilder.struct.atomProperty.macromolecular.label_comp_id(), ligandViewParams.label_comp_id]);\n        }\n        if (residueParam)\n            atomGroupsParams['residue-test'] = residueParam;\n        // Chain Param\n        if (ligandViewParams.auth_asym_id) {\n            atomGroupsParams['chain-test'] = builder_1.MolScriptBuilder.core.rel.eq([builder_1.MolScriptBuilder.struct.atomProperty.macromolecular.auth_asym_id(), ligandViewParams.auth_asym_id]);\n        }\n        else if (ligandViewParams.struct_asym_id) {\n            atomGroupsParams['chain-test'] = builder_1.MolScriptBuilder.core.rel.eq([builder_1.MolScriptBuilder.struct.atomProperty.macromolecular.label_asym_id(), ligandViewParams.struct_asym_id]);\n        }\n        // Construct core query\n        var core = ligandViewParams.show_all ?\n            builder_1.MolScriptBuilder.struct.generator.atomGroups(atomGroupsParams) :\n            builder_1.MolScriptBuilder.struct.filter.first([\n                builder_1.MolScriptBuilder.struct.generator.atomGroups(atomGroupsParams)\n            ]);\n        // Construct surroundings query\n        var surroundings = builder_1.MolScriptBuilder.struct.modifier.includeSurroundings({ 0: core, radius: 5, 'as-whole-residues': true });\n        return {\n            core: core,\n            surroundings: surroundings\n        };\n    }\n    LigandView.query = query;\n    function branchedQuery(params) {\n        var entityObjArray = [];\n        params.atom_site.forEach(function (param) {\n            var qEntities = {\n                'group-by': builder_1.MolScriptBuilder.core.str.concat([builder_1.MolScriptBuilder.struct.atomProperty.core.operatorName(), builder_1.MolScriptBuilder.struct.atomProperty.macromolecular.residueKey()]),\n                'residue-test': builder_1.MolScriptBuilder.core.rel.eq([builder_1.MolScriptBuilder.struct.atomProperty.macromolecular.auth_seq_id(), param.auth_seq_id])\n            };\n            entityObjArray.push(qEntities);\n        });\n        var atmGroupsQueries = [];\n        entityObjArray.forEach(function (entityObj) {\n            atmGroupsQueries.push(builder_1.MolScriptBuilder.struct.generator.atomGroups(entityObj));\n        });\n        var core = builder_1.MolScriptBuilder.struct.modifier.union([\n            atmGroupsQueries.length === 1\n                ? atmGroupsQueries[0]\n                // Need to union before merge for fast performance\n                : builder_1.MolScriptBuilder.struct.combinator.merge(atmGroupsQueries.map(function (q) { return builder_1.MolScriptBuilder.struct.modifier.union([q]); }))\n        ]);\n        // Construct surroundings query\n        var surroundings = builder_1.MolScriptBuilder.struct.modifier.includeSurroundings({ 0: core, radius: 5, 'as-whole-residues': true });\n        return {\n            core: core,\n            surroundings: surroundings\n        };\n    }\n    LigandView.branchedQuery = branchedQuery;\n})(LigandView = exports.LigandView || (exports.LigandView = {}));\nvar QueryHelper;\n(function (QueryHelper) {\n    function getQueryObject(params, contextData) {\n        var selections = [];\n        var siftMappings;\n        var currentAccession;\n        params.forEach(function (param) {\n            var selection = {};\n            // entity\n            if (param.entity_id)\n                selection['entityTest'] = function (l) { return structure_1.StructureProperties.entity.id(l.element) === param.entity_id; };\n            // chain\n            if (param.struct_asym_id) {\n                selection['chainTest'] = function (l) { return structure_1.StructureProperties.chain.label_asym_id(l.element) === param.struct_asym_id; };\n            }\n            else if (param.auth_asym_id) {\n                selection['chainTest'] = function (l) { return structure_1.StructureProperties.chain.auth_asym_id(l.element) === param.auth_asym_id; };\n            }\n            // residues\n            if (param.label_comp_id) {\n                selection['residueTest'] = function (l) { return structure_1.StructureProperties.atom.label_comp_id(l.element) === param.label_comp_id; };\n            }\n            else if (param.uniprot_accession && param.uniprot_residue_number) {\n                selection['residueTest'] = function (l) {\n                    if (!siftMappings || currentAccession !== param.uniprot_accession) {\n                        siftMappings = sifts_mapping_1.SIFTSMapping.Provider.get(contextData.models[0]).value;\n                        currentAccession = param.uniprot_accession;\n                    }\n                    var rI = structure_1.StructureProperties.residue.key(l.element);\n                    return param.uniprot_accession === siftMappings.accession[rI] && param.uniprot_residue_number === +siftMappings.num[rI];\n                };\n            }\n            else if (param.uniprot_accession && param.start_uniprot_residue_number && param.end_uniprot_residue_number) {\n                selection['residueTest'] = function (l) {\n                    if (!siftMappings || currentAccession !== param.uniprot_accession) {\n                        siftMappings = sifts_mapping_1.SIFTSMapping.Provider.get(contextData.models[0]).value;\n                        currentAccession = param.uniprot_accession;\n                    }\n                    var rI = structure_1.StructureProperties.residue.key(l.element);\n                    return param.uniprot_accession === siftMappings.accession[rI] && (param.start_uniprot_residue_number <= +siftMappings.num[rI] && param.end_uniprot_residue_number >= +siftMappings.num[rI]);\n                };\n            }\n            else if (param.residue_number) {\n                selection['residueTest'] = function (l) { return structure_1.StructureProperties.residue.label_seq_id(l.element) === param.residue_number; };\n            }\n            else if ((param.start_residue_number && param.end_residue_number) && (param.end_residue_number > param.start_residue_number)) {\n                selection['residueTest'] = function (l) {\n                    var labelSeqId = structure_1.StructureProperties.residue.label_seq_id(l.element);\n                    return labelSeqId >= param.start_residue_number && labelSeqId <= param.end_residue_number;\n                };\n            }\n            else if ((param.start_residue_number && param.end_residue_number) && (param.end_residue_number === param.start_residue_number)) {\n                selection['residueTest'] = function (l) { return structure_1.StructureProperties.residue.label_seq_id(l.element) === param.start_residue_number; };\n            }\n            else if (param.auth_seq_id) {\n                selection['residueTest'] = function (l) { return structure_1.StructureProperties.residue.auth_seq_id(l.element) === param.auth_seq_id; };\n            }\n            else if (param.auth_residue_number && !param.auth_ins_code_id) {\n                selection['residueTest'] = function (l) { return structure_1.StructureProperties.residue.auth_seq_id(l.element) === param.auth_residue_number; };\n            }\n            else if (param.auth_residue_number && param.auth_ins_code_id) {\n                selection['residueTest'] = function (l) { return structure_1.StructureProperties.residue.auth_seq_id(l.element) === param.auth_residue_number; };\n            }\n            else if ((param.start_auth_residue_number && param.end_auth_residue_number) && (param.end_auth_residue_number > param.start_auth_residue_number)) {\n                selection['residueTest'] = function (l) {\n                    var authSeqId = structure_1.StructureProperties.residue.auth_seq_id(l.element);\n                    return authSeqId >= param.start_auth_residue_number && authSeqId <= param.end_auth_residue_number;\n                };\n            }\n            else if ((param.start_auth_residue_number && param.end_auth_residue_number) && (param.end_auth_residue_number === param.start_auth_residue_number)) {\n                selection['residueTest'] = function (l) { return structure_1.StructureProperties.residue.auth_seq_id(l.element) === param.start_auth_residue_number; };\n            }\n            // atoms\n            if (param.atoms) {\n                selection['atomTest'] = function (l) { return param.atoms.includes(structure_1.StructureProperties.atom.label_atom_id(l.element)); };\n            }\n            if (param.atom_id) {\n                selection['atomTest'] = function (l) { return param.atom_id.includes(structure_1.StructureProperties.atom.id(l.element)); };\n            }\n            selections.push(selection);\n        });\n        var atmGroupsQueries = [];\n        selections.forEach(function (selection) {\n            atmGroupsQueries.push(structure_2.Queries.generators.atoms(selection));\n        });\n        return structure_2.Queries.combinators.merge(atmGroupsQueries);\n    }\n    QueryHelper.getQueryObject = getQueryObject;\n    function getInteractivityLoci(params, contextData) {\n        var sel = query_1.StructureQuery.run(QueryHelper.getQueryObject(params, contextData), contextData);\n        return structure_1.StructureSelection.toLociWithSourceUnits(sel);\n    }\n    QueryHelper.getInteractivityLoci = getInteractivityLoci;\n    function getHetLoci(queryExp, contextData) {\n        var query = (0, compiler_1.compile)(queryExp);\n        var sel = query(new structure_1.QueryContext(contextData));\n        return structure_1.StructureSelection.toLociWithSourceUnits(sel);\n    }\n    QueryHelper.getHetLoci = getHetLoci;\n})(QueryHelper = exports.QueryHelper || (exports.QueryHelper = {}));\nvar ModelInfo2;\n(function (ModelInfo2) {\n    function getPreferredAssembly(ctx, model) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var id, src, json, data, assemblies, _i, assemblies_1, asm, e_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (model.entryId.length <= 3)\n                            return [2 /*return*/, void 0];\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        id = model.entryId.toLowerCase();\n                        return [4 /*yield*/, ctx.runTask(ctx.fetch({ url: \"https://www.ebi.ac.uk/pdbe/api/pdb/entry/summary/\".concat(id) }))];\n                    case 2:\n                        src = _a.sent();\n                        json = JSON.parse(src);\n                        data = json && json[id];\n                        assemblies = data[0] && data[0].assemblies;\n                        if (!assemblies || !assemblies.length)\n                            return [2 /*return*/, void 0];\n                        for (_i = 0, assemblies_1 = assemblies; _i < assemblies_1.length; _i++) {\n                            asm = assemblies_1[_i];\n                            if (asm.preferred) {\n                                return [2 /*return*/, asm.assembly_id];\n                            }\n                        }\n                        return [2 /*return*/, void 0];\n                    case 3:\n                        e_1 = _a.sent();\n                        console.warn('getPreferredAssembly', e_1);\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    }\n    function get(ctx, model, checkPreferred) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var residueCount, residueOffsets, chainIndex, pref, hetResidues, hetMap, rI, cI, eI, entityType, comp_id, lig, preferredAssemblyId, symmetry;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        residueCount = model.atomicHierarchy.residues._rowCount;\n                        residueOffsets = model.atomicHierarchy.residueAtomSegments.offsets;\n                        chainIndex = model.atomicHierarchy.chainAtomSegments.index;\n                        pref = checkPreferred\n                            ? getPreferredAssembly(ctx, model)\n                            : void 0;\n                        hetResidues = [];\n                        hetMap = new Map();\n                        for (rI = 0; rI < residueCount; rI++) {\n                            cI = chainIndex[residueOffsets[rI]];\n                            eI = model.atomicHierarchy.index.getEntityFromChain(cI);\n                            entityType = model.entities.data.type.value(eI);\n                            if (entityType !== 'non-polymer' && entityType !== 'branched')\n                                continue;\n                            comp_id = model.atomicHierarchy.atoms.label_comp_id.value(residueOffsets[rI]);\n                            lig = hetMap.get(comp_id);\n                            if (!lig) {\n                                lig = { name: comp_id, indices: [] };\n                                hetResidues.push(lig);\n                                hetMap.set(comp_id, lig);\n                            }\n                            lig.indices.push(rI);\n                        }\n                        return [4 /*yield*/, pref];\n                    case 1:\n                        preferredAssemblyId = _a.sent();\n                        symmetry = symmetry_1.ModelSymmetry.Provider.get(model);\n                        return [2 /*return*/, {\n                                hetResidues: hetResidues,\n                                assemblies: symmetry ? symmetry.assemblies.map(function (a) { return ({ id: a.id, details: a.details, isPreferred: a.id === preferredAssemblyId }); }) : [],\n                                preferredAssemblyId: preferredAssemblyId\n                            }];\n                }\n            });\n        });\n    }\n    ModelInfo2.get = get;\n})(ModelInfo2 = exports.ModelInfo2 || (exports.ModelInfo2 = {}));\nvar ModelInfo;\n(function (ModelInfo) {\n    function get(model, structures) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var residueCount, residueOffsets, chainIndex, hetNames, carbEntityCount, rI, cI, eI, entityType, comp_id;\n            return tslib_1.__generator(this, function (_a) {\n                residueCount = model.atomicHierarchy.residues._rowCount;\n                residueOffsets = model.atomicHierarchy.residueAtomSegments.offsets;\n                chainIndex = model.atomicHierarchy.chainAtomSegments.index;\n                hetNames = [];\n                carbEntityCount = 0;\n                for (rI = 0; rI < residueCount; rI++) {\n                    cI = chainIndex[residueOffsets[rI]];\n                    eI = model.atomicHierarchy.index.getEntityFromChain(cI);\n                    entityType = model.entities.data.type.value(eI);\n                    if (entityType !== 'non-polymer' && entityType !== 'branched')\n                        continue;\n                    comp_id = model.atomicHierarchy.atoms.label_comp_id.value(residueOffsets[rI]);\n                    if (entityType === 'branched') {\n                        carbEntityCount++;\n                    }\n                    else {\n                        if (hetNames.indexOf(comp_id) === -1)\n                            hetNames.push(comp_id);\n                    }\n                }\n                return [2 /*return*/, {\n                        hetNames: hetNames,\n                        carbEntityCount: carbEntityCount\n                    }];\n            });\n        });\n    }\n    ModelInfo.get = get;\n})(ModelInfo = exports.ModelInfo || (exports.ModelInfo = {}));\n//# sourceMappingURL=helpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/helpers.js\n");
  
  /***/ }),
  
  /***/ "./lib/index.js":
  /*!**********************!*\
    !*** ./lib/index.js ***!
    \**********************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar spec_1 = __webpack_require__(/*! ./spec */ \"./lib/spec.js\");\nvar commands_1 = __webpack_require__(/*! Molstar/mol-plugin/commands */ \"./node_modules/molstar/lib/mol-plugin/commands.js\");\nvar mol_state_1 = __webpack_require__(/*! Molstar/mol-state */ \"./node_modules/molstar/lib/mol-state/index.js\");\nvar loci_1 = __webpack_require__(/*! Molstar/mol-model/loci */ \"./node_modules/molstar/lib/mol-model/loci.js\");\nvar rx_event_helper_1 = __webpack_require__(/*! Molstar/mol-util/rx-event-helper */ \"./node_modules/molstar/lib/mol-util/rx-event-helper.js\");\nvar helpers_1 = __webpack_require__(/*! ./helpers */ \"./lib/helpers.js\");\nvar pdbe_structure_controls_1 = __webpack_require__(/*! ./ui/pdbe-structure-controls */ \"./lib/ui/pdbe-structure-controls.js\");\nvar pdbe_viewport_controls_1 = __webpack_require__(/*! ./ui/pdbe-viewport-controls */ \"./lib/ui/pdbe-viewport-controls.js\");\nvar mol_state_2 = __webpack_require__(/*! Molstar/mol-state */ \"./node_modules/molstar/lib/mol-state/index.js\");\nvar structure_focus_representation_1 = __webpack_require__(/*! Molstar/mol-plugin/behavior/dynamic/selection/structure-focus-representation */ \"./node_modules/molstar/lib/mol-plugin/behavior/dynamic/selection/structure-focus-representation.js\");\nvar spec_2 = __webpack_require__(/*! Molstar/mol-plugin/spec */ \"./node_modules/molstar/lib/mol-plugin/spec.js\");\nvar transformers_1 = __webpack_require__(/*! Molstar/mol-plugin/behavior/dynamic/volume-streaming/transformers */ \"./node_modules/molstar/lib/mol-plugin/behavior/dynamic/volume-streaming/transformers.js\");\nvar structure_representation_params_1 = __webpack_require__(/*! Molstar/mol-plugin-state/helpers/structure-representation-params */ \"./node_modules/molstar/lib/mol-plugin-state/helpers/structure-representation-params.js\");\nvar subscribe_events_1 = __webpack_require__(/*! ./subscribe-events */ \"./lib/subscribe-events.js\");\nvar pdbe_left_panel_1 = __webpack_require__(/*! ./ui/pdbe-left-panel */ \"./lib/ui/pdbe-left-panel.js\");\nvar superposition_1 = __webpack_require__(/*! ./superposition */ \"./lib/superposition.js\");\nvar custom_events_1 = __webpack_require__(/*! ./custom-events */ \"./lib/custom-events.js\");\nvar assets_1 = __webpack_require__(/*! Molstar/mol-util/assets */ \"./node_modules/molstar/lib/mol-util/assets.js\");\nvar config_1 = __webpack_require__(/*! Molstar/mol-plugin/config */ \"./node_modules/molstar/lib/mol-plugin/config.js\");\nvar color_1 = __webpack_require__(/*! Molstar/mol-util/color/color */ \"./node_modules/molstar/lib/mol-util/color/color.js\");\nvar component_1 = __webpack_require__(/*! Molstar/mol-plugin-state/manager/structure/component */ \"./node_modules/molstar/lib/mol-plugin-state/manager/structure/component.js\");\nvar param_definition_1 = __webpack_require__(/*! Molstar/mol-util/param-definition */ \"./node_modules/molstar/lib/mol-util/param-definition.js\");\nvar behavior_1 = __webpack_require__(/*! ./domain-annotations/behavior */ \"./lib/domain-annotations/behavior.js\");\nvar pdbe_1 = __webpack_require__(/*! Molstar/extensions/pdbe */ \"./node_modules/molstar/lib/extensions/pdbe/index.js\");\nvar behavior_2 = __webpack_require__(/*! Molstar/extensions/model-archive/quality-assessment/behavior */ \"./node_modules/molstar/lib/extensions/model-archive/quality-assessment/behavior.js\");\nvar structure_overpaint_1 = __webpack_require__(/*! Molstar/mol-plugin-state/helpers/structure-overpaint */ \"./node_modules/molstar/lib/mol-plugin-state/helpers/structure-overpaint.js\");\nvar superposition_focus_representation_1 = __webpack_require__(/*! ./superposition-focus-representation */ \"./lib/superposition-focus-representation.js\");\nvar superposition_viewport_1 = __webpack_require__(/*! ./ui/superposition-viewport */ \"./lib/ui/superposition-viewport.js\");\nvar representation_1 = __webpack_require__(/*! Molstar/mol-plugin/behavior/dynamic/representation */ \"./node_modules/molstar/lib/mol-plugin/behavior/dynamic/representation.js\");\nvar camera_1 = __webpack_require__(/*! molstar/lib/mol-plugin/behavior/dynamic/camera */ \"./node_modules/molstar/lib/mol-plugin/behavior/dynamic/camera.js\");\nvar mp4_export_1 = __webpack_require__(/*! Molstar/extensions/mp4-export */ \"./node_modules/molstar/lib/extensions/mp4-export/index.js\");\nvar geo_export_1 = __webpack_require__(/*! Molstar/extensions/geo-export */ \"./node_modules/molstar/lib/extensions/geo-export/index.js\");\nvar element_symbol_1 = __webpack_require__(/*! Molstar/mol-theme/color/element-symbol */ \"./node_modules/molstar/lib/mol-theme/color/element-symbol.js\");\nvar model_index_1 = __webpack_require__(/*! Molstar/mol-plugin-state/animation/built-in/model-index */ \"./node_modules/molstar/lib/mol-plugin-state/animation/built-in/model-index.js\");\nvar camera_spin_1 = __webpack_require__(/*! Molstar/mol-plugin-state/animation/built-in/camera-spin */ \"./node_modules/molstar/lib/mol-plugin-state/animation/built-in/camera-spin.js\");\nvar state_snapshots_1 = __webpack_require__(/*! Molstar/mol-plugin-state/animation/built-in/state-snapshots */ \"./node_modules/molstar/lib/mol-plugin-state/animation/built-in/state-snapshots.js\");\nvar state_interpolation_1 = __webpack_require__(/*! Molstar/mol-plugin-state/animation/built-in/state-interpolation */ \"./node_modules/molstar/lib/mol-plugin-state/animation/built-in/state-interpolation.js\");\nvar spin_structure_1 = __webpack_require__(/*! Molstar/mol-plugin-state/animation/built-in/spin-structure */ \"./node_modules/molstar/lib/mol-plugin-state/animation/built-in/spin-structure.js\");\nvar camera_rock_1 = __webpack_require__(/*! Molstar/mol-plugin-state/animation/built-in/camera-rock */ \"./node_modules/molstar/lib/mol-plugin-state/animation/built-in/camera-rock.js\");\nvar assembly_unwind_1 = __webpack_require__(/*! Molstar/mol-plugin-state/animation/built-in/assembly-unwind */ \"./node_modules/molstar/lib/mol-plugin-state/animation/built-in/assembly-unwind.js\");\n//import { ModelInfo2, StateElements } from './helpers';\nvar annotation_1 = __webpack_require__(/*! ./annotation */ \"./lib/annotation.js\");\nvar annotation_2 = __webpack_require__(/*! ./annotation */ \"./lib/annotation.js\");\n//import { ModelInfo2, StateElements, RepresentationStyle } from './helpers';\nvar helpers_2 = __webpack_require__(/*! ./helpers */ \"./lib/helpers.js\");\n//import { StateElements } from './helpers';\n//import { StateElements, RepresentationStyle } from './helpers';\nvar transforms_1 = __webpack_require__(/*! Molstar/mol-plugin-state/transforms */ \"./node_modules/molstar/lib/mol-plugin-state/transforms.js\");\n__webpack_require__(/*! Molstar/mol-plugin-ui/skin/dark.scss */ \"./node_modules/molstar/lib/mol-plugin-ui/skin/dark.scss\");\nvar PDBeMolstarPlugin = /** @class */ (function () {\n    function PDBeMolstarPlugin() {\n        var _this = this;\n        this._ev = rx_event_helper_1.RxEventHelper.create();\n        this.events = {\n            loadComplete: this._ev(),\n            modelInfo: this._ev()\n        };\n        this.assemblyRef = '';\n        this.isHighlightColorUpdated = false;\n        this.isSelectedColorUpdated = false;\n        this.applyVisualParams = function () {\n            var TagRefs = {\n                'structure-component-static-polymer': 'polymer',\n                'structure-component-static-ligand': 'het',\n                'structure-component-static-branched': 'carbs',\n                'structure-component-static-water': 'water',\n                'structure-component-static-coarse': 'coarse',\n                'non-standard': 'nonStandard'\n            };\n            var componentGroups = _this.plugin.managers.structure.hierarchy.currentComponentGroups;\n            componentGroups.forEach(function (compGrp) {\n                var _a;\n                var compGrpIndex = compGrp.length - 1;\n                var key = compGrp[compGrpIndex].key;\n                var rm = false;\n                if (key && _this.initParams.hideStructure) {\n                    var structType = TagRefs[key];\n                    if (structType && ((_a = _this.initParams.hideStructure) === null || _a === void 0 ? void 0 : _a.indexOf(structType)) > -1)\n                        rm = true;\n                }\n                if (rm) {\n                    _this.plugin.managers.structure.hierarchy.remove([compGrp[compGrpIndex]]);\n                }\n                if (!rm && _this.initParams.visualStyle) {\n                    if (compGrp[compGrpIndex] && compGrp[compGrpIndex].representations) {\n                        compGrp[compGrpIndex].representations.forEach(function (rep) {\n                            var currentParams = (0, structure_representation_params_1.createStructureRepresentationParams)(_this.plugin, void 0, { type: _this.initParams.visualStyle });\n                            _this.plugin.managers.structure.component.updateRepresentations([compGrp[compGrpIndex]], rep, currentParams);\n                        });\n                    }\n                }\n            });\n        };\n        this.canvas = {\n            toggleControls: function (isVisible) {\n                if (typeof isVisible === 'undefined')\n                    isVisible = !_this.plugin.layout.state.showControls;\n                commands_1.PluginCommands.Layout.Update(_this.plugin, { state: { showControls: isVisible } });\n            },\n            toggleExpanded: function (isExpanded) {\n                if (typeof isExpanded === 'undefined')\n                    isExpanded = !_this.plugin.layout.state.isExpanded;\n                commands_1.PluginCommands.Layout.Update(_this.plugin, { state: { isExpanded: isExpanded } });\n            },\n            setBgColor: function (color) {\n                if (!color)\n                    return;\n                _this.canvas.applySettings({ color: color });\n            },\n            applySettings: function (settings) {\n                if (!settings)\n                    return;\n                var rendererParams = {};\n                if (settings.color)\n                    rendererParams['backgroundColor'] = color_1.Color.fromRgb(settings.color.r, settings.color.g, settings.color.b);\n                if (settings.lighting)\n                    rendererParams['style'] = { name: settings.lighting };\n                var renderer = _this.plugin.canvas3d.props.renderer;\n                commands_1.PluginCommands.Canvas3D.SetSettings(_this.plugin, { settings: { renderer: tslib_1.__assign(tslib_1.__assign({}, renderer), rendererParams) } });\n            }\n        };\n        this.coloring = {\n            shannonEntropy: function (params) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                var state, tree, colorTheme;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            if (!params || !params.keepStyle) {\n                                // await this.updateStyle({ sequence: { kind: 'spacefill' } }, true);\n                            }\n                            state = this.state;\n                            tree = state.build();\n                            colorTheme = { name: annotation_1.ShannonEntropy.propertyProvider.descriptor.name, params: this.plugin.representation.structure.themes.colorThemeRegistry.get(annotation_1.ShannonEntropy.propertyProvider.descriptor.name).defaultValues };\n                            if (!params || !!params.sequence) {\n                                tree.to(helpers_2.StateElements.SequenceVisual).update(transforms_1.StateTransforms.Representation.StructureRepresentation3D, function (old) { return (tslib_1.__assign(tslib_1.__assign({}, old), { colorTheme: colorTheme })); });\n                            }\n                            if (params && !!params.het) {\n                                tree.to(helpers_2.StateElements.HetVisual).update(transforms_1.StateTransforms.Representation.StructureRepresentation3D, function (old) { return (tslib_1.__assign(tslib_1.__assign({}, old), { colorTheme: colorTheme })); });\n                            }\n                            return [4 /*yield*/, commands_1.PluginCommands.State.Update(this.plugin, { state: state, tree: tree })];\n                        case 1:\n                            _a.sent();\n                            return [2 /*return*/];\n                    }\n                });\n            }); },\n            twinCons: function (params) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                var state, tree, colorTheme;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            if (!params || !params.keepStyle) {\n                                // await this.updateStyle({ sequence: { kind: 'spacefill' } }, true);\n                            }\n                            state = this.state;\n                            tree = state.build();\n                            colorTheme = { name: annotation_2.TwinConsData.propertyProvider.descriptor.name, params: this.plugin.representation.structure.themes.colorThemeRegistry.get(annotation_2.TwinConsData.propertyProvider.descriptor.name).defaultValues };\n                            if (!params || !!params.sequence) {\n                                tree.to(helpers_2.StateElements.SequenceVisual).update(transforms_1.StateTransforms.Representation.StructureRepresentation3D, function (old) { return (tslib_1.__assign(tslib_1.__assign({}, old), { colorTheme: colorTheme })); });\n                            }\n                            if (params && !!params.het) {\n                                tree.to(helpers_2.StateElements.HetVisual).update(transforms_1.StateTransforms.Representation.StructureRepresentation3D, function (old) { return (tslib_1.__assign(tslib_1.__assign({}, old), { colorTheme: colorTheme })); });\n                            }\n                            return [4 /*yield*/, commands_1.PluginCommands.State.Update(this.plugin, { state: state, tree: tree })];\n                        case 1:\n                            _a.sent();\n                            return [2 /*return*/];\n                    }\n                });\n            }); }\n        };\n        this.visual = {\n            highlighting: function (params) {\n                var loci = _this.getLociForParams(params.data, params.structureNumber);\n                params.color = { r: 65, g: 96, b: 91 };\n                if (loci_1.Loci.isEmpty(loci))\n                    return;\n                if (params.color) {\n                    _this.visual.setColor({ highlight: params.color });\n                }\n                _this.plugin.managers.interactivity.lociHighlights.highlightOnly({ loci: loci });\n                if (params.focus)\n                    _this.plugin.managers.camera.focusLoci(loci);\n            },\n            clearHighlighting: function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                return tslib_1.__generator(this, function (_a) {\n                    this.plugin.managers.interactivity.lociHighlights.highlightOnly({ loci: loci_1.EmptyLoci });\n                    if (this.isHighlightColorUpdated)\n                        this.visual.reset({ highlightColor: true });\n                    return [2 /*return*/];\n                });\n            }); },\n            colorByChain: function (data) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                var structureData, i, _a, structureData_1, structureData_1_1, s, color, e_1_1;\n                var _b, e_1, _c, _d;\n                return tslib_1.__generator(this, function (_e) {\n                    switch (_e.label) {\n                        case 0:\n                            structureData = this.plugin.managers.structure.hierarchy.current.structures;\n                            i = 0;\n                            _e.label = 1;\n                        case 1:\n                            _e.trys.push([1, 10, 11, 16]);\n                            _a = true, structureData_1 = tslib_1.__asyncValues(structureData);\n                            _e.label = 2;\n                        case 2: return [4 /*yield*/, structureData_1.next()];\n                        case 3:\n                            if (!(structureData_1_1 = _e.sent(), _b = structureData_1_1.done, !_b)) return [3 /*break*/, 9];\n                            _d = structureData_1_1.value;\n                            _a = false;\n                            _e.label = 4;\n                        case 4:\n                            _e.trys.push([4, , 7, 8]);\n                            s = _d;\n                            if (!(i > 0)) return [3 /*break*/, 6];\n                            color = data[i - 1];\n                            //await this.plugin.managers.structure.component.updateRepresentationsTheme(s.components, { color: 'uniform', colorParams: { value: this.normalizeColor(params.nonSelectedColor) } });\n                            return [4 /*yield*/, this.plugin.managers.structure.component.updateRepresentationsTheme(s.components, { color: 'uniform', colorParams: { value: this.normalizeColor(color) } })];\n                        case 5:\n                            //await this.plugin.managers.structure.component.updateRepresentationsTheme(s.components, { color: 'uniform', colorParams: { value: this.normalizeColor(params.nonSelectedColor) } });\n                            _e.sent();\n                            _e.label = 6;\n                        case 6:\n                            i += 1;\n                            return [3 /*break*/, 8];\n                        case 7:\n                            _a = true;\n                            return [7 /*endfinally*/];\n                        case 8: return [3 /*break*/, 2];\n                        case 9: return [3 /*break*/, 16];\n                        case 10:\n                            e_1_1 = _e.sent();\n                            e_1 = { error: e_1_1 };\n                            return [3 /*break*/, 16];\n                        case 11:\n                            _e.trys.push([11, , 14, 15]);\n                            if (!(!_a && !_b && (_c = structureData_1.return))) return [3 /*break*/, 13];\n                            return [4 /*yield*/, _c.call(structureData_1)];\n                        case 12:\n                            _e.sent();\n                            _e.label = 13;\n                        case 13: return [3 /*break*/, 15];\n                        case 14:\n                            if (e_1) throw e_1.error;\n                            return [7 /*endfinally*/];\n                        case 15: return [7 /*endfinally*/];\n                        case 16: return [2 /*return*/];\n                    }\n                });\n            }); },\n            select: function (params) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                var structureData, _a, structureData_2, structureData_2_1, s, e_2_1, _b, _c, _d, param, loci, themeParams, colorValue, repr, defaultParams, defaultValues, values, structures, updatedStructureData, comps, lastCompsIndex, recentRepComp, uniformColor, e_3_1;\n                var _e, e_2, _f, _g, _h, e_3, _j, _k;\n                return tslib_1.__generator(this, function (_l) {\n                    switch (_l.label) {\n                        case 0:\n                            if (!this.selectedParams) return [3 /*break*/, 2];\n                            return [4 /*yield*/, this.visual.clearSelection(params.structureNumber)];\n                        case 1:\n                            _l.sent();\n                            _l.label = 2;\n                        case 2:\n                            structureData = this.plugin.managers.structure.hierarchy.current.structures;\n                            if (params.structureNumber) {\n                                structureData = [this.plugin.managers.structure.hierarchy.current.structures[params.structureNumber - 1]];\n                            }\n                            if (!params.nonSelectedColor) return [3 /*break*/, 17];\n                            _l.label = 3;\n                        case 3:\n                            _l.trys.push([3, 11, 12, 17]);\n                            _a = true, structureData_2 = tslib_1.__asyncValues(structureData);\n                            _l.label = 4;\n                        case 4: return [4 /*yield*/, structureData_2.next()];\n                        case 5:\n                            if (!(structureData_2_1 = _l.sent(), _e = structureData_2_1.done, !_e)) return [3 /*break*/, 10];\n                            _g = structureData_2_1.value;\n                            _a = false;\n                            _l.label = 6;\n                        case 6:\n                            _l.trys.push([6, , 8, 9]);\n                            s = _g;\n                            return [4 /*yield*/, this.plugin.managers.structure.component.updateRepresentationsTheme(s.components, { color: 'uniform', colorParams: { value: this.normalizeColor(params.nonSelectedColor) } })];\n                        case 7:\n                            _l.sent();\n                            return [3 /*break*/, 9];\n                        case 8:\n                            _a = true;\n                            return [7 /*endfinally*/];\n                        case 9: return [3 /*break*/, 4];\n                        case 10: return [3 /*break*/, 17];\n                        case 11:\n                            e_2_1 = _l.sent();\n                            e_2 = { error: e_2_1 };\n                            return [3 /*break*/, 17];\n                        case 12:\n                            _l.trys.push([12, , 15, 16]);\n                            if (!(!_a && !_e && (_f = structureData_2.return))) return [3 /*break*/, 14];\n                            return [4 /*yield*/, _f.call(structureData_2)];\n                        case 13:\n                            _l.sent();\n                            _l.label = 14;\n                        case 14: return [3 /*break*/, 16];\n                        case 15:\n                            if (e_2) throw e_2.error;\n                            return [7 /*endfinally*/];\n                        case 16: return [7 /*endfinally*/];\n                        case 17:\n                            _l.trys.push([17, 27, 28, 33]);\n                            _b = true, _c = tslib_1.__asyncValues(params.data);\n                            _l.label = 18;\n                        case 18: return [4 /*yield*/, _c.next()];\n                        case 19:\n                            if (!(_d = _l.sent(), _h = _d.done, !_h)) return [3 /*break*/, 26];\n                            _k = _d.value;\n                            _b = false;\n                            _l.label = 20;\n                        case 20:\n                            _l.trys.push([20, , 24, 25]);\n                            param = _k;\n                            loci = this.getLociForParams([param], params.structureNumber);\n                            if (loci_1.Loci.isEmpty(loci))\n                                return [2 /*return*/];\n                            // set default selection color to minimise change display\n                            this.visual.setColor({ select: param.color ? param.color : { r: 255, g: 255, b: 255 } });\n                            // apply selection\n                            this.plugin.managers.interactivity.lociSelects.selectOnly({ loci: loci });\n                            themeParams = component_1.StructureComponentManager.getThemeParams(this.plugin, this.plugin.managers.structure.component.pivotStructure);\n                            colorValue = param_definition_1.ParamDefinition.getDefaultValues(themeParams);\n                            colorValue.action.params = { color: param.color ? this.normalizeColor(param.color) : color_1.Color.fromRgb(255, 255, 255), opacity: 1 };\n                            return [4 /*yield*/, this.plugin.managers.structure.component.applyTheme(colorValue, structureData)];\n                        case 21:\n                            _l.sent();\n                            if (!(param.sideChain || param.representation)) return [3 /*break*/, 23];\n                            repr = 'ball-and-stick';\n                            if (param.representation)\n                                repr = param.representation;\n                            defaultParams = component_1.StructureComponentManager.getAddParams(this.plugin, { allowNone: false, hideSelection: true, checkExisting: true });\n                            defaultValues = param_definition_1.ParamDefinition.getDefaultValues(defaultParams);\n                            defaultValues.options = { label: 'selection-by-script', checkExisting: params.structureNumber ? false : true };\n                            values = tslib_1.__assign(tslib_1.__assign({}, defaultValues), { representation: repr });\n                            structures = this.plugin.managers.structure.hierarchy.getStructuresWithSelection();\n                            return [4 /*yield*/, this.plugin.managers.structure.component.add(values, structures)];\n                        case 22:\n                            _l.sent();\n                            // Apply uniform theme\n                            if (param.representationColor) {\n                                updatedStructureData = this.plugin.managers.structure.hierarchy.current.structures;\n                                if (params.structureNumber) {\n                                    updatedStructureData = [this.plugin.managers.structure.hierarchy.current.structures[params.structureNumber - 1]];\n                                }\n                                comps = updatedStructureData[0].components;\n                                lastCompsIndex = comps.length - 1;\n                                recentRepComp = [comps[lastCompsIndex]];\n                                uniformColor = param.representationColor ? this.normalizeColor(param.representationColor) : color_1.Color.fromRgb(255, 255, 255);\n                                this.plugin.managers.structure.component.updateRepresentationsTheme(recentRepComp, { color: 'uniform', colorParams: { value: uniformColor } });\n                            }\n                            params.addedRepr = true;\n                            _l.label = 23;\n                        case 23:\n                            // focus loci\n                            if (param.focus)\n                                this.plugin.managers.camera.focusLoci(loci);\n                            // remove selection\n                            this.plugin.managers.interactivity.lociSelects.deselect({ loci: loci });\n                            return [3 /*break*/, 25];\n                        case 24:\n                            _b = true;\n                            return [7 /*endfinally*/];\n                        case 25: return [3 /*break*/, 18];\n                        case 26: return [3 /*break*/, 33];\n                        case 27:\n                            e_3_1 = _l.sent();\n                            e_3 = { error: e_3_1 };\n                            return [3 /*break*/, 33];\n                        case 28:\n                            _l.trys.push([28, , 31, 32]);\n                            if (!(!_b && !_h && (_j = _c.return))) return [3 /*break*/, 30];\n                            return [4 /*yield*/, _j.call(_c)];\n                        case 29:\n                            _l.sent();\n                            _l.label = 30;\n                        case 30: return [3 /*break*/, 32];\n                        case 31:\n                            if (e_3) throw e_3.error;\n                            return [7 /*endfinally*/];\n                        case 32: return [7 /*endfinally*/];\n                        case 33:\n                            // reset selection color\n                            this.visual.reset({ selectColor: true });\n                            // save selection params to optimise clear\n                            this.selectedParams = params;\n                            return [2 /*return*/];\n                    }\n                });\n            }); },\n            clearSelection: function (structureNumber) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                var structIndex, selReprCells, _i, _a, c, _b, selReprCells_1, selReprCells_1_1, selReprCell, e_4_1;\n                var _c, e_4, _d, _e;\n                return tslib_1.__generator(this, function (_f) {\n                    switch (_f.label) {\n                        case 0:\n                            structIndex = structureNumber ? structureNumber - 1 : 0;\n                            this.plugin.managers.interactivity.lociSelects.deselectAll();\n                            // reset theme to default\n                            if (this.selectedParams && this.selectedParams.nonSelectedColor) {\n                                this.visual.reset({ theme: true });\n                            }\n                            // remove overpaints\n                            return [4 /*yield*/, (0, structure_overpaint_1.clearStructureOverpaint)(this.plugin, this.plugin.managers.structure.hierarchy.current.structures[structIndex].components)];\n                        case 1:\n                            // remove overpaints\n                            _f.sent();\n                            if (!(this.selectedParams && this.selectedParams.addedRepr)) return [3 /*break*/, 17];\n                            selReprCells = [];\n                            for (_i = 0, _a = this.plugin.managers.structure.hierarchy.current.structures[structIndex].components; _i < _a.length; _i++) {\n                                c = _a[_i];\n                                if (c.cell && c.cell.params && c.cell.params.values && c.cell.params.values.label === 'selection-by-script')\n                                    selReprCells.push(c.cell);\n                            }\n                            if (!(selReprCells.length > 0)) return [3 /*break*/, 17];\n                            _f.label = 2;\n                        case 2:\n                            _f.trys.push([2, 10, 11, 16]);\n                            _b = true, selReprCells_1 = tslib_1.__asyncValues(selReprCells);\n                            _f.label = 3;\n                        case 3: return [4 /*yield*/, selReprCells_1.next()];\n                        case 4:\n                            if (!(selReprCells_1_1 = _f.sent(), _c = selReprCells_1_1.done, !_c)) return [3 /*break*/, 9];\n                            _e = selReprCells_1_1.value;\n                            _b = false;\n                            _f.label = 5;\n                        case 5:\n                            _f.trys.push([5, , 7, 8]);\n                            selReprCell = _e;\n                            return [4 /*yield*/, commands_1.PluginCommands.State.RemoveObject(this.plugin, { state: selReprCell.parent, ref: selReprCell.transform.ref })];\n                        case 6:\n                            _f.sent();\n                            return [3 /*break*/, 8];\n                        case 7:\n                            _b = true;\n                            return [7 /*endfinally*/];\n                        case 8: return [3 /*break*/, 3];\n                        case 9: return [3 /*break*/, 16];\n                        case 10:\n                            e_4_1 = _f.sent();\n                            e_4 = { error: e_4_1 };\n                            return [3 /*break*/, 16];\n                        case 11:\n                            _f.trys.push([11, , 14, 15]);\n                            if (!(!_b && !_c && (_d = selReprCells_1.return))) return [3 /*break*/, 13];\n                            return [4 /*yield*/, _d.call(selReprCells_1)];\n                        case 12:\n                            _f.sent();\n                            _f.label = 13;\n                        case 13: return [3 /*break*/, 15];\n                        case 14:\n                            if (e_4) throw e_4.error;\n                            return [7 /*endfinally*/];\n                        case 15: return [7 /*endfinally*/];\n                        case 16:\n                            ;\n                            _f.label = 17;\n                        case 17:\n                            this.selectedParams = undefined;\n                            return [2 /*return*/];\n                    }\n                });\n            }); },\n            update: function (options, fullLoad) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                var param, param, settings, dataSource;\n                return tslib_1.__generator(this, function (_a) {\n                    if (!options)\n                        return [2 /*return*/];\n                    for (param in this.initParams) {\n                        if (options[param])\n                            this.initParams[param] = options[param];\n                    }\n                    this.initParams = tslib_1.__assign({}, spec_1.DefaultParams);\n                    for (param in spec_1.DefaultParams) {\n                        if (typeof options[param] !== 'undefined')\n                            this.initParams[param] = options[param];\n                    }\n                    if (!this.initParams.moleculeId && !this.initParams.customData)\n                        return [2 /*return*/, false];\n                    if (this.initParams.customData && this.initParams.customData.url && !this.initParams.customData.format)\n                        return [2 /*return*/, false];\n                    this.plugin.customState.initParams = this.initParams;\n                    // Set background colour\n                    if (this.initParams.bgColor || this.initParams.lighting) {\n                        settings = {};\n                        if (this.initParams.bgColor)\n                            settings.color = this.initParams.bgColor;\n                        if (this.initParams.lighting)\n                            settings.lighting = this.initParams.lighting;\n                        this.canvas.applySettings(settings);\n                    }\n                    dataSource = this.getMoleculeSrcUrl();\n                    if (dataSource) {\n                        this.load({ url: dataSource.url, format: dataSource.format, assemblyId: this.initParams.assemblyId, isBinary: dataSource.isBinary }, fullLoad);\n                    }\n                    return [2 /*return*/];\n                });\n            }); },\n            visibility: function (data) {\n                if (!data)\n                    return;\n                var refMap = {\n                    polymer: 'structure-component-static-polymer',\n                    het: 'structure-component-static-ligand',\n                    water: 'structure-component-static-water',\n                    carbs: 'structure-component-static-branched',\n                    maps: 'volume-streaming-info'\n                };\n                for (var visual in data) {\n                    var tagName = refMap[visual];\n                    var componentRef = mol_state_2.StateSelection.findTagInSubtree(_this.plugin.state.data.tree, mol_state_1.StateTransform.RootRef, tagName);\n                    if (componentRef) {\n                        var compVisual = _this.plugin.state.data.select(componentRef)[0];\n                        if (compVisual && compVisual.obj) {\n                            var currentlyVisible = (compVisual.state && compVisual.state.isHidden) ? false : true;\n                            if (data[visual] !== currentlyVisible) {\n                                commands_1.PluginCommands.State.ToggleVisibility(_this.plugin, { state: _this.state, ref: componentRef });\n                            }\n                        }\n                    }\n                }\n            },\n            toggleSpin: function (isSpinning, resetCamera) {\n                if (!_this.plugin.canvas3d)\n                    return;\n                var trackball = _this.plugin.canvas3d.props.trackball;\n                var toggleSpinParam = trackball.animate.name === 'spin' ? { name: 'off', params: {} } : { name: 'spin', params: { speed: 1 } };\n                if (typeof isSpinning !== 'undefined') {\n                    toggleSpinParam = { name: 'off', params: {} };\n                    if (isSpinning)\n                        toggleSpinParam = { name: 'spin', params: { speed: 1 } };\n                }\n                commands_1.PluginCommands.Canvas3D.SetSettings(_this.plugin, { settings: { trackball: tslib_1.__assign(tslib_1.__assign({}, trackball), { animate: toggleSpinParam }) } });\n                if (resetCamera)\n                    commands_1.PluginCommands.Camera.Reset(_this.plugin, {});\n            },\n            focus: function (params, structureNumber) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                var loci;\n                return tslib_1.__generator(this, function (_a) {\n                    loci = this.getLociForParams(params, structureNumber);\n                    this.plugin.managers.camera.focusLoci(loci);\n                    return [2 /*return*/];\n                });\n            }); },\n            setColor: function (param) {\n                if (!_this.plugin.canvas3d)\n                    return;\n                var renderer = _this.plugin.canvas3d.props.renderer;\n                var rParam = {};\n                if (param.highlight)\n                    rParam['highlightColor'] = _this.normalizeColor(param.highlight);\n                if (param.select)\n                    rParam['selectColor'] = _this.normalizeColor(param.select);\n                commands_1.PluginCommands.Canvas3D.SetSettings(_this.plugin, { settings: { renderer: tslib_1.__assign(tslib_1.__assign({}, renderer), rParam) } });\n                if (rParam.highlightColor)\n                    _this.isHighlightColorUpdated = true;\n            },\n            reset: function (params) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                var defaultTheme_1, componentGroups, renderer, rParam;\n                var _this = this;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            if (!params.camera) return [3 /*break*/, 2];\n                            return [4 /*yield*/, commands_1.PluginCommands.Camera.Reset(this.plugin, { durationMs: 250 })];\n                        case 1:\n                            _a.sent();\n                            _a.label = 2;\n                        case 2:\n                            if (params.theme) {\n                                defaultTheme_1 = { color: this.initParams.alphafoldView ? 'plddt-confidence' : 'default' };\n                                componentGroups = this.plugin.managers.structure.hierarchy.currentComponentGroups;\n                                componentGroups.forEach(function (compGrp) {\n                                    _this.plugin.managers.structure.component.updateRepresentationsTheme(compGrp, defaultTheme_1);\n                                });\n                            }\n                            if (params.highlightColor || params.selectColor) {\n                                if (!this.plugin.canvas3d)\n                                    return [2 /*return*/];\n                                renderer = this.plugin.canvas3d.props.renderer;\n                                rParam = {};\n                                if (params.highlightColor)\n                                    rParam['highlightColor'] = this.defaultRendererProps.highlightColor;\n                                if (params.selectColor)\n                                    rParam['selectColor'] = this.defaultRendererProps.selectColor;\n                                commands_1.PluginCommands.Canvas3D.SetSettings(this.plugin, { settings: { renderer: tslib_1.__assign(tslib_1.__assign({}, renderer), rParam) } });\n                                if (rParam.highlightColor)\n                                    this.isHighlightColorUpdated = false;\n                            }\n                            return [2 /*return*/];\n                    }\n                });\n            }); }\n        };\n    }\n    PDBeMolstarPlugin.prototype.visual1 = function (_style, partial) {\n        //const structure = this.getObj<PluginStateObject.Molecule.Structure>(StateElements.Assembly);\n        var structure = this.getObj(this.assemblyRef);\n        if (!structure)\n            return;\n        var style = _style || {};\n        var update = this.state.build();\n        if (!partial || (partial && style.sequence)) {\n            var root = update.to(helpers_2.StateElements.Sequence);\n            if (style.sequence && style.sequence.hide) {\n                root.delete(helpers_2.StateElements.SequenceVisual);\n            }\n            else {\n                root.applyOrUpdate(helpers_2.StateElements.SequenceVisual, transforms_1.StateTransforms.Representation.StructureRepresentation3D, (0, structure_representation_params_1.createStructureRepresentationParams)(this.plugin, structure, {\n                    type: (style.sequence && style.sequence.kind) || 'cartoon',\n                    color: (style.sequence && style.sequence.coloring) || 'unit-index'\n                }));\n            }\n        }\n        if (!partial || (partial && style.hetGroups)) {\n            var root = update.to(helpers_2.StateElements.Het);\n            if (style.hetGroups && style.hetGroups.hide) {\n                root.delete(helpers_2.StateElements.HetVisual);\n            }\n            else {\n                if (style.hetGroups && style.hetGroups.hide) {\n                    root.delete(helpers_2.StateElements.HetVisual);\n                }\n                else {\n                    root.applyOrUpdate(helpers_2.StateElements.HetVisual, transforms_1.StateTransforms.Representation.StructureRepresentation3D, (0, structure_representation_params_1.createStructureRepresentationParams)(this.plugin, structure, {\n                        type: (style.hetGroups && style.hetGroups.kind) || 'ball-and-stick',\n                        color: style.hetGroups && style.hetGroups.coloring\n                    }));\n                }\n            }\n        }\n        if (!partial || (partial && style.snfg3d)) {\n            var root = update.to(helpers_2.StateElements.Het);\n            if (style.hetGroups && style.hetGroups.hide) {\n                root.delete(helpers_2.StateElements.HetVisual);\n            }\n            else {\n                if (style.snfg3d && style.snfg3d.hide) {\n                    root.delete(helpers_2.StateElements.Het3DSNFG);\n                }\n                else {\n                    root.applyOrUpdate(helpers_2.StateElements.Het3DSNFG, transforms_1.StateTransforms.Representation.StructureRepresentation3D, (0, structure_representation_params_1.createStructureRepresentationParams)(this.plugin, structure, { type: 'carbohydrate' }));\n                }\n            }\n        }\n        if (!partial || (partial && style.water)) {\n            var root = update.to(helpers_2.StateElements.Water);\n            if (style.water && style.water.hide) {\n                root.delete(helpers_2.StateElements.WaterVisual);\n            }\n            else {\n                root.applyOrUpdate(helpers_2.StateElements.WaterVisual, transforms_1.StateTransforms.Representation.StructureRepresentation3D, (0, structure_representation_params_1.createStructureRepresentationParams)(this.plugin, structure, {\n                    type: (style.water && style.water.kind) || 'ball-and-stick',\n                    typeParams: { alpha: 0.51 },\n                    color: style.water && style.water.coloring\n                }));\n            }\n        }\n        return update;\n    };\n    PDBeMolstarPlugin.prototype.render = function (target, options) {\n        var _a;\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var param, defaultPDBeSpec, pdbePluginSpec, _b, settings, dataSource;\n            return tslib_1.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        if (!options)\n                            return [2 /*return*/];\n                        this.initParams = tslib_1.__assign({}, spec_1.DefaultParams);\n                        for (param in spec_1.DefaultParams) {\n                            if (typeof options[param] !== 'undefined')\n                                this.initParams[param] = options[param];\n                        }\n                        if (!this.initParams.moleculeId && !this.initParams.customData)\n                            return [2 /*return*/, false];\n                        if (this.initParams.customData && this.initParams.customData.url && !this.initParams.customData.format)\n                            return [2 /*return*/, false];\n                        defaultPDBeSpec = (0, spec_1.DefaultPluginUISpec)();\n                        pdbePluginSpec = {\n                            actions: tslib_1.__spreadArray([], defaultPDBeSpec.actions || [], true),\n                            behaviors: tslib_1.__spreadArray([], defaultPDBeSpec.behaviors, true),\n                            animations: tslib_1.__spreadArray([], defaultPDBeSpec.animations || [], true),\n                            customParamEditors: defaultPDBeSpec.customParamEditors,\n                            config: defaultPDBeSpec.config\n                        };\n                        if (!this.initParams.ligandView && !this.initParams.superposition && this.initParams.selectInteraction) {\n                            pdbePluginSpec.behaviors.push(spec_2.PluginSpec.Behavior(structure_focus_representation_1.StructureFocusRepresentation));\n                        }\n                        if (this.initParams.superposition) {\n                            pdbePluginSpec.behaviors.push(spec_2.PluginSpec.Behavior(superposition_focus_representation_1.SuperpositionFocusRepresentation), spec_2.PluginSpec.Behavior(behavior_2.MAQualityAssessment, { autoAttach: true, showTooltip: true }));\n                        }\n                        // Add custom properties\n                        if (this.initParams.domainAnnotation) {\n                            pdbePluginSpec.behaviors.push(spec_2.PluginSpec.Behavior(behavior_1.PDBeDomainAnnotations, { autoAttach: true, showTooltip: false }));\n                        }\n                        if (this.initParams.validationAnnotation) {\n                            pdbePluginSpec.behaviors.push(spec_2.PluginSpec.Behavior(pdbe_1.PDBeStructureQualityReport, { autoAttach: true, showTooltip: false }));\n                        }\n                        pdbePluginSpec.layout = {\n                            initial: {\n                                isExpanded: this.initParams.landscape ? false : this.initParams.expanded,\n                                showControls: !this.initParams.hideControls\n                            }\n                        };\n                        pdbePluginSpec.components = {\n                            controls: {\n                                left: pdbe_left_panel_1.LeftPanelControls,\n                                // right: DefaultStructureTools,\n                                top: 'none',\n                                bottom: 'none'\n                            },\n                            viewport: {\n                                controls: pdbe_viewport_controls_1.PDBeViewportControls,\n                                view: this.initParams.superposition ? superposition_viewport_1.SuperpostionViewport : void 0\n                            },\n                            remoteState: 'none',\n                            structureTools: this.initParams.superposition ? pdbe_structure_controls_1.PDBeSuperpositionStructureTools : this.initParams.ligandView ? pdbe_structure_controls_1.PDBeLigandViewStructureTools : pdbe_structure_controls_1.PDBeStructureTools\n                        };\n                        if (this.initParams.alphafoldView) {\n                            pdbePluginSpec.behaviors.push(spec_2.PluginSpec.Behavior(behavior_2.MAQualityAssessment, { autoAttach: true, showTooltip: true }));\n                            pdbePluginSpec.components.controls = {\n                                left: 'none',\n                                right: 'none',\n                                // top: 'none',\n                                bottom: 'none'\n                            };\n                        }\n                        if (this.initParams.sequencePanel) {\n                            if ((_a = pdbePluginSpec.components.controls) === null || _a === void 0 ? void 0 : _a.top)\n                                delete pdbePluginSpec.components.controls.top;\n                        }\n                        pdbePluginSpec.config = [\n                            [\n                                config_1.PluginConfig.Structure.DefaultRepresentationPresetParams,\n                                {\n                                    theme: {\n                                        globalName: (this.initParams.alphafoldView) ? 'plddt-confidence' : undefined,\n                                        carbonColor: { name: 'element-symbol', params: {} },\n                                        focus: {\n                                            name: 'element-symbol',\n                                            params: { carbonColor: { name: 'element-symbol', params: {} } }\n                                        }\n                                    }\n                                }\n                            ]\n                        ];\n                        element_symbol_1.ElementSymbolColorThemeParams.carbonColor.defaultValue = { name: 'element-symbol', params: {} };\n                        // Add animation props\n                        if (!this.initParams.ligandView && !this.initParams.superposition) {\n                            pdbePluginSpec['animations'] = [model_index_1.AnimateModelIndex, camera_spin_1.AnimateCameraSpin, camera_rock_1.AnimateCameraRock, state_snapshots_1.AnimateStateSnapshots, assembly_unwind_1.AnimateAssemblyUnwind, spin_structure_1.AnimateStructureSpin, state_interpolation_1.AnimateStateInterpolation];\n                            pdbePluginSpec.behaviors.push(spec_2.PluginSpec.Behavior(mp4_export_1.Mp4Export));\n                            pdbePluginSpec.behaviors.push(spec_2.PluginSpec.Behavior(geo_export_1.GeometryExport));\n                        }\n                        if (this.initParams.hideCanvasControls) {\n                            if (this.initParams.hideCanvasControls.indexOf('expand') > -1)\n                                pdbePluginSpec.config.push([config_1.PluginConfig.Viewport.ShowExpand, false]);\n                            if (this.initParams.hideCanvasControls.indexOf('selection') > -1)\n                                pdbePluginSpec.config.push([config_1.PluginConfig.Viewport.ShowSelectionMode, false]);\n                            if (this.initParams.hideCanvasControls.indexOf('animation') > -1)\n                                pdbePluginSpec.config.push([config_1.PluginConfig.Viewport.ShowAnimation, false]);\n                        }\n                        ;\n                        if (this.initParams.landscape && pdbePluginSpec.layout && pdbePluginSpec.layout.initial)\n                            pdbePluginSpec.layout.initial['controlsDisplay'] = 'landscape';\n                        // override default event bindings\n                        if (this.initParams.selectBindings) {\n                            pdbePluginSpec.behaviors.push(spec_2.PluginSpec.Behavior(representation_1.SelectLoci, { bindings: this.initParams.selectBindings }));\n                        }\n                        if (this.initParams.focusBindings) {\n                            pdbePluginSpec.behaviors.push(spec_2.PluginSpec.Behavior(camera_1.FocusLoci, { bindings: this.initParams.focusBindings }));\n                        }\n                        this.targetElement = typeof target === 'string' ? document.getElementById(target) : target;\n                        // Create/ Initialise Plugin\n                        _b = this;\n                        return [4 /*yield*/, (0, spec_1.createPluginUI)(this.targetElement, pdbePluginSpec)];\n                    case 1:\n                        // Create/ Initialise Plugin\n                        _b.plugin = _c.sent();\n                        this.plugin.customState.initParams = tslib_1.__assign({}, this.initParams);\n                        this.plugin.customState.events = {\n                            segmentUpdate: this._ev(),\n                            superpositionInit: this._ev(),\n                            isBusy: this._ev()\n                        };\n                        // Set background colour\n                        if (this.initParams.bgColor || this.initParams.lighting) {\n                            settings = {};\n                            if (this.initParams.bgColor)\n                                settings.color = this.initParams.bgColor;\n                            if (this.initParams.lighting)\n                                settings.lighting = this.initParams.lighting;\n                            this.canvas.applySettings(settings);\n                        }\n                        // Set selection granularity\n                        if (this.initParams.granularity) {\n                            this.plugin.managers.interactivity.setProps({ granularity: this.initParams.granularity });\n                        }\n                        // Set default highlight and selection colors\n                        if (this.initParams.highlightColor || this.initParams.selectColor) {\n                            this.visual.setColor({ highlight: this.initParams.highlightColor, select: this.initParams.selectColor });\n                        }\n                        this.plugin.representation.structure.themes.colorThemeRegistry.add(annotation_1.ShannonEntropy.colorThemeProvider);\n                        this.plugin.managers.lociLabels.addProvider(annotation_1.ShannonEntropy.labelProvider);\n                        this.plugin.customModelProperties.register(annotation_1.ShannonEntropy.propertyProvider, true);\n                        this.plugin.representation.structure.themes.colorThemeRegistry.add(annotation_2.TwinConsData.colorThemeProvider);\n                        this.plugin.managers.lociLabels.addProvider(annotation_2.TwinConsData.labelProvider);\n                        this.plugin.customModelProperties.register(annotation_2.TwinConsData.propertyProvider, true);\n                        // Save renderer defaults\n                        this.defaultRendererProps = tslib_1.__assign({}, this.plugin.canvas3d.props.renderer);\n                        if (this.initParams.superposition) {\n                            // Set left panel tab\n                            this.plugin.behaviors.layout.leftPanelTabName.next('segments');\n                            // Initialise superposition\n                            (0, superposition_1.initSuperposition)(this.plugin);\n                        }\n                        else {\n                            // Collapse left panel and set left panel tab to none\n                            commands_1.PluginCommands.Layout.Update(this.plugin, { state: { regionState: tslib_1.__assign(tslib_1.__assign({}, this.plugin.layout.state.regionState), { left: 'collapsed' }) } });\n                            this.plugin.behaviors.layout.leftPanelTabName.next('none');\n                            dataSource = this.getMoleculeSrcUrl();\n                            if (dataSource) {\n                                this.load({ url: dataSource.url, format: dataSource.format, assemblyId: this.initParams.assemblyId, isBinary: dataSource.isBinary });\n                            }\n                            // Binding to other PDB Component events\n                            if (this.initParams.subscribeEvents) {\n                                (0, subscribe_events_1.subscribeToComponentEvents)(this);\n                            }\n                            // Event handling\n                            custom_events_1.CustomEvents.add(this.plugin, this.targetElement);\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    PDBeMolstarPlugin.prototype.getMoleculeSrcUrl = function () {\n        var supportedFormats = ['mmcif', 'pdb', 'sdf'];\n        var id = this.initParams.moleculeId;\n        if (!id && !this.initParams.customData) {\n            throw new Error(\"Mandatory parameters missing!\");\n        }\n        var query = 'full';\n        var sep = '?';\n        if (this.initParams.ligandView) {\n            var queryParams = ['data_source=pdb-h'];\n            if (!this.initParams.ligandView.label_comp_id_list) {\n                if (this.initParams.ligandView.label_comp_id) {\n                    queryParams.push('label_comp_id=' + this.initParams.ligandView.label_comp_id);\n                }\n                else if (this.initParams.ligandView.auth_seq_id) {\n                    queryParams.push('auth_seq_id=' + this.initParams.ligandView.auth_seq_id);\n                }\n                if (this.initParams.ligandView.auth_asym_id)\n                    queryParams.push('auth_asym_id=' + this.initParams.ligandView.auth_asym_id);\n            }\n            query = 'residueSurroundings?' + queryParams.join('&');\n            sep = '&';\n        }\n        var url = \"\".concat(this.initParams.pdbeUrl, \"model-server/v1/\").concat(id, \"/\").concat(query).concat(sep, \"encoding=\").concat(this.initParams.encoding).concat(this.initParams.lowPrecisionCoords ? '&lowPrecisionCoords=1' : '');\n        var isBinary = this.initParams.encoding === 'bcif' ? true : false;\n        var format = 'mmcif';\n        if (this.initParams.customData) {\n            if (!this.initParams.customData.url || !this.initParams.customData.format) {\n                throw new Error(\"Provide all custom data parameters\");\n            }\n            url = this.initParams.customData.url;\n            format = this.initParams.customData.format;\n            if (format === 'cif' || format === 'bcif')\n                format = 'mmcif';\n            // Validate supported format\n            if (supportedFormats.indexOf(format) === -1) {\n                throw new Error(\"\".concat(format, \" not supported.\"));\n            }\n            isBinary = this.initParams.customData.binary ? this.initParams.customData.binary : false;\n        }\n        return {\n            url: url,\n            format: format,\n            isBinary: isBinary\n        };\n    };\n    Object.defineProperty(PDBeMolstarPlugin.prototype, \"state\", {\n        get: function () {\n            return this.plugin.state.data;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    PDBeMolstarPlugin.prototype.createLigandStructure = function (isBranched) {\n        var _a, e_5, _b, _c;\n        var _d;\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _e, _f, _g, comp, e_5_1, structure, ligandQuery, ligandVis, ligandSurr, ligRef, cell, ligLoci;\n            var _this = this;\n            return tslib_1.__generator(this, function (_h) {\n                switch (_h.label) {\n                    case 0:\n                        if (this.assemblyRef === '')\n                            return [2 /*return*/];\n                        _h.label = 1;\n                    case 1:\n                        _h.trys.push([1, 9, 10, 15]);\n                        _e = true, _f = tslib_1.__asyncValues(this.plugin.managers.structure.hierarchy.currentComponentGroups);\n                        _h.label = 2;\n                    case 2: return [4 /*yield*/, _f.next()];\n                    case 3:\n                        if (!(_g = _h.sent(), _a = _g.done, !_a)) return [3 /*break*/, 8];\n                        _c = _g.value;\n                        _e = false;\n                        _h.label = 4;\n                    case 4:\n                        _h.trys.push([4, , 6, 7]);\n                        comp = _c;\n                        return [4 /*yield*/, commands_1.PluginCommands.State.RemoveObject(this.plugin, { state: comp[0].cell.parent, ref: comp[0].cell.transform.ref, removeParentGhosts: true })];\n                    case 5:\n                        _h.sent();\n                        return [3 /*break*/, 7];\n                    case 6:\n                        _e = true;\n                        return [7 /*endfinally*/];\n                    case 7: return [3 /*break*/, 2];\n                    case 8: return [3 /*break*/, 15];\n                    case 9:\n                        e_5_1 = _h.sent();\n                        e_5 = { error: e_5_1 };\n                        return [3 /*break*/, 15];\n                    case 10:\n                        _h.trys.push([10, , 13, 14]);\n                        if (!(!_e && !_a && (_b = _f.return))) return [3 /*break*/, 12];\n                        return [4 /*yield*/, _b.call(_f)];\n                    case 11:\n                        _h.sent();\n                        _h.label = 12;\n                    case 12: return [3 /*break*/, 14];\n                    case 13:\n                        if (e_5) throw e_5.error;\n                        return [7 /*endfinally*/];\n                    case 14: return [7 /*endfinally*/];\n                    case 15:\n                        structure = this.state.select(this.assemblyRef)[0];\n                        if (isBranched) {\n                            ligandQuery = helpers_1.LigandView.branchedQuery((_d = this.initParams.ligandView) === null || _d === void 0 ? void 0 : _d.label_comp_id_list);\n                        }\n                        else {\n                            ligandQuery = helpers_1.LigandView.query(this.initParams.ligandView);\n                        }\n                        return [4 /*yield*/, this.plugin.builders.structure.tryCreateComponentFromExpression(structure, ligandQuery.core, 'pivot', { label: 'Ligand' })];\n                    case 16:\n                        ligandVis = _h.sent();\n                        if (!ligandVis) return [3 /*break*/, 18];\n                        return [4 /*yield*/, this.plugin.builders.structure.representation.addRepresentation(ligandVis, { type: 'ball-and-stick', color: 'element-symbol', colorParams: { carbonColor: { name: 'element-symbol', params: {} } }, size: 'uniform', sizeParams: { value: 2.5 } }, { tag: 'ligand-vis' })];\n                    case 17:\n                        _h.sent();\n                        _h.label = 18;\n                    case 18: return [4 /*yield*/, this.plugin.builders.structure.tryCreateComponentFromExpression(structure, ligandQuery.surroundings, 'rest', { label: 'Surroundings' })];\n                    case 19:\n                        ligandSurr = _h.sent();\n                        if (!ligandSurr) return [3 /*break*/, 21];\n                        return [4 /*yield*/, this.plugin.builders.structure.representation.addRepresentation(ligandSurr, { type: 'ball-and-stick', color: 'element-symbol', colorParams: { carbonColor: { name: 'element-symbol', params: {} } }, size: 'uniform', sizeParams: { value: 0.8 } })];\n                    case 20:\n                        _h.sent();\n                        _h.label = 21;\n                    case 21:\n                        ligRef = mol_state_2.StateSelection.findTagInSubtree(this.plugin.state.data.tree, mol_state_1.StateTransform.RootRef, 'ligand-vis');\n                        if (!ligRef)\n                            return [2 /*return*/];\n                        cell = this.plugin.state.data.cells.get(ligRef);\n                        if (cell) {\n                            ligLoci = cell.obj.data.repr.getLoci();\n                            this.plugin.managers.structure.focus.setFromLoci(ligLoci);\n                            setTimeout(function () {\n                                var _a;\n                                // focus-add is not handled in camera behavior, doing it here\n                                var current = (_a = _this.plugin.managers.structure.focus.current) === null || _a === void 0 ? void 0 : _a.loci;\n                                if (current)\n                                    _this.plugin.managers.camera.focusLoci(current);\n                            }, 500);\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    //private loadedParams: LoadParams = { url: '', format: 'mmcif', isBinary: false, assemblyId: '' };\n    PDBeMolstarPlugin.prototype.load = function (_a, fullLoad) {\n        var url = _a.url, _b = _a.format, format = _b === void 0 ? 'mmcif' : _b, _c = _a.isBinary, isBinary = _c === void 0 ? false : _c, _d = _a.assemblyId, assemblyId = _d === void 0 ? '' : _d, representationStyle = _a.representationStyle;\n        if (fullLoad === void 0) { fullLoad = true; }\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var isHetView, downloadOptions, isBranchedView, data, trajectory, model, pivotIndex, pivot, asm, defaultMapParams, pdbeMapParams, loadType, state, modelTree, info, asmId, structureTree, tree, info, asmId, props_1;\n            return tslib_1.__generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        if (fullLoad)\n                            this.clear();\n                        isHetView = this.initParams.ligandView ? true : false;\n                        downloadOptions = void 0;\n                        isBranchedView = false;\n                        if (this.initParams.ligandView && this.initParams.ligandView.label_comp_id_list) {\n                            isBranchedView = true;\n                            downloadOptions = { body: JSON.stringify(this.initParams.ligandView.label_comp_id_list), headers: [['Content-type', 'application/json']] };\n                        }\n                        return [4 /*yield*/, this.plugin.builders.data.download({ url: assets_1.Asset.Url(url, downloadOptions), isBinary: isBinary }, { state: { isGhost: true } })];\n                    case 1:\n                        data = _e.sent();\n                        return [4 /*yield*/, this.plugin.builders.structure.parseTrajectory(data, format)];\n                    case 2:\n                        trajectory = _e.sent();\n                        if (!!isHetView) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.plugin.builders.structure.hierarchy.applyPreset(trajectory, this.initParams.defaultPreset, {\n                                structure: assemblyId ? (assemblyId === 'preferred') ? void 0 : { name: 'assembly', params: { id: assemblyId } } : { name: 'model', params: {} },\n                                showUnitcell: false,\n                                representationPreset: 'auto'\n                            })];\n                    case 3:\n                        _e.sent();\n                        if (this.initParams.hideStructure || this.initParams.visualStyle) {\n                            this.applyVisualParams();\n                        }\n                        return [3 /*break*/, 7];\n                    case 4: return [4 /*yield*/, this.plugin.builders.structure.createModel(trajectory)];\n                    case 5:\n                        model = _e.sent();\n                        return [4 /*yield*/, this.plugin.builders.structure.createStructure(model, { name: 'model', params: {} })];\n                    case 6:\n                        _e.sent();\n                        _e.label = 7;\n                    case 7:\n                        // show selection if param is set\n                        if (this.initParams.selection) {\n                            this.visual.select(this.initParams.selection);\n                        }\n                        pivotIndex = this.plugin.managers.structure.hierarchy.selection.structures.length - 1;\n                        pivot = this.plugin.managers.structure.hierarchy.selection.structures[pivotIndex];\n                        if (pivot && pivot.cell.parent)\n                            this.assemblyRef = pivot.cell.transform.ref;\n                        if (!this.initParams.loadMaps) return [3 /*break*/, 9];\n                        if (this.assemblyRef === '')\n                            return [2 /*return*/];\n                        asm = this.state.select(this.assemblyRef)[0].obj;\n                        defaultMapParams = transformers_1.InitVolumeStreaming.createDefaultParams(asm, this.plugin);\n                        pdbeMapParams = helpers_1.PDBeVolumes.mapParams(defaultMapParams, this.initParams.mapSettings, '');\n                        if (!pdbeMapParams) return [3 /*break*/, 9];\n                        return [4 /*yield*/, this.plugin.runTask(this.state.applyAction(transformers_1.InitVolumeStreaming, pdbeMapParams, this.assemblyRef))];\n                    case 8:\n                        _e.sent();\n                        if (pdbeMapParams.method !== 'em' && !this.initParams.ligandView)\n                            helpers_1.PDBeVolumes.displayUsibilityMessage(this.plugin);\n                        _e.label = 9;\n                    case 9:\n                        if (!isHetView) return [3 /*break*/, 11];\n                        return [4 /*yield*/, this.createLigandStructure(isBranchedView)];\n                    case 10:\n                        _e.sent();\n                        _e.label = 11;\n                    case 11:\n                        loadType = 'full';\n                        state = this.plugin.state.data;\n                        /*\n                        if (this.loadedParams.url !== url || this.loadedParams.format !== format) {\n                            loadType = 'full';\n                        } else if (this.loadedParams.url === url) {\n                            //if (state.select(StateElements.Assembly).length > 0) loadType = 'update';\n                            if (state.select(this.assemblyRef).length > 0) loadType = 'update';\n                        }*/\n                        if (fullLoad) {\n                            loadType = 'full';\n                        }\n                        else {\n                            loadType = 'update';\n                        }\n                        if (!(loadType === 'full')) return [3 /*break*/, 16];\n                        return [4 /*yield*/, commands_1.PluginCommands.State.RemoveObject(this.plugin, { state: state, ref: state.tree.root.ref })];\n                    case 12:\n                        _e.sent();\n                        modelTree = this.model(this.download(state.build().toRoot(), url, isBinary), format);\n                        return [4 /*yield*/, this.applyState(modelTree)];\n                    case 13:\n                        _e.sent();\n                        return [4 /*yield*/, this.doInfo(true)];\n                    case 14:\n                        info = _e.sent();\n                        asmId = (assemblyId === 'preferred' && info && info.preferredAssemblyId) || assemblyId;\n                        structureTree = this.structure(asmId);\n                        return [4 /*yield*/, this.applyState(structureTree)];\n                    case 15:\n                        _e.sent();\n                        return [3 /*break*/, 19];\n                    case 16:\n                        tree = state.build();\n                        return [4 /*yield*/, this.doInfo(true)];\n                    case 17:\n                        info = _e.sent();\n                        asmId = (assemblyId === 'preferred' && info && info.preferredAssemblyId) || assemblyId;\n                        props_1 = {\n                            type: assemblyId ? {\n                                name: 'assembly',\n                                params: { id: asmId }\n                            } : {\n                                name: 'model',\n                                params: {}\n                            }\n                        };\n                        //tree.to(StateElements.Assembly).update(StateTransforms.Model.StructureFromModel, p => ({ ...p, ...props }));\n                        tree.to(this.assemblyRef).update(transforms_1.StateTransforms.Model.StructureFromModel, function (p) { return (tslib_1.__assign(tslib_1.__assign({}, p), props_1)); });\n                        return [4 /*yield*/, this.applyState(tree)];\n                    case 18:\n                        _e.sent();\n                        _e.label = 19;\n                    case 19:\n                        ;\n                        return [4 /*yield*/, this.updateStyle(representationStyle)];\n                    case 20:\n                        _e.sent();\n                        this.events.loadComplete.next(true);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    PDBeMolstarPlugin.prototype.model = function (b, format) {\n        var parsed = format === 'mmcif'\n            ? b.apply(transforms_1.StateTransforms.Data.ParseCif).apply(transforms_1.StateTransforms.Model.TrajectoryFromMmCif)\n            : b.apply(transforms_1.StateTransforms.Model.TrajectoryFromPDB);\n        return parsed.apply(transforms_1.StateTransforms.Model.ModelFromTrajectory, { modelIndex: 0 }, { ref: helpers_2.StateElements.Model });\n    };\n    PDBeMolstarPlugin.prototype.download = function (b, url, isBinary) {\n        return b.apply(transforms_1.StateTransforms.Data.Download, { url: assets_1.Asset.Url(url), isBinary: isBinary });\n    };\n    PDBeMolstarPlugin.prototype.structure = function (assemblyId) {\n        var model = this.state.build().to(helpers_2.StateElements.Model);\n        var props = {\n            type: assemblyId ? {\n                name: 'assembly',\n                params: { id: assemblyId }\n            } : {\n                name: 'model',\n                params: {}\n            }\n        };\n        var s = model\n            //    .apply(StateTransforms.Model.StructureFromModel, props, { ref: StateElements.Assembly });\n            .apply(transforms_1.StateTransforms.Model.StructureFromModel, props, { ref: this.assemblyRef });\n        s.apply(transforms_1.StateTransforms.Model.StructureComplexElement, { type: 'atomic-sequence' }, { ref: helpers_2.StateElements.Sequence });\n        s.apply(transforms_1.StateTransforms.Model.StructureComplexElement, { type: 'atomic-het' }, { ref: helpers_2.StateElements.Het });\n        s.apply(transforms_1.StateTransforms.Model.StructureComplexElement, { type: 'water' }, { ref: helpers_2.StateElements.Water });\n        return s;\n    };\n    PDBeMolstarPlugin.prototype.updateStyle = function (style, partial) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var tree;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        tree = this.visual1(style, partial);\n                        if (!tree)\n                            return [2 /*return*/];\n                        return [4 /*yield*/, commands_1.PluginCommands.State.Update(this.plugin, { state: this.plugin.state.data, tree: tree })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    PDBeMolstarPlugin.prototype.doInfo = function (checkPreferredAssembly) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var model, info;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        model = this.getObj('model');\n                        if (!model)\n                            return [2 /*return*/];\n                        return [4 /*yield*/, helpers_2.ModelInfo2.get(this.plugin, model, checkPreferredAssembly)];\n                    case 1:\n                        info = _a.sent();\n                        this.events.modelInfo.next(info);\n                        return [2 /*return*/, info];\n                }\n            });\n        });\n    };\n    PDBeMolstarPlugin.prototype.applyState = function (tree) {\n        return commands_1.PluginCommands.State.Update(this.plugin, { state: this.plugin.state.data, tree: tree });\n    };\n    PDBeMolstarPlugin.prototype.getObj = function (ref) {\n        var state = this.state;\n        var cell = state.select(ref)[0];\n        if (!cell || !cell.obj)\n            return void 0;\n        return cell.obj.data;\n    };\n    PDBeMolstarPlugin.prototype.getLociForParams = function (params, structureNumber) {\n        var assemblyRef = this.assemblyRef;\n        if (structureNumber) {\n            assemblyRef = this.plugin.managers.structure.hierarchy.current.structures[structureNumber - 1].cell.transform.ref;\n        }\n        if (assemblyRef === '')\n            return loci_1.EmptyLoci;\n        //if (this.plugin.state.data.select(assemblyRef).length == 0) return EmptyLoci;\n        var data = this.plugin.state.data.select(assemblyRef)[0].obj.data;\n        if (!data)\n            return loci_1.EmptyLoci;\n        return helpers_1.QueryHelper.getInteractivityLoci(params, data);\n    };\n    PDBeMolstarPlugin.prototype.getLociByPLDDT = function (score, structureNumber) {\n        var assemblyRef = this.assemblyRef;\n        if (structureNumber) {\n            assemblyRef = this.plugin.managers.structure.hierarchy.current.structures[structureNumber - 1].cell.transform.ref;\n        }\n        if (assemblyRef === '')\n            return loci_1.EmptyLoci;\n        var data = this.plugin.state.data.select(assemblyRef)[0].obj.data;\n        if (!data)\n            return loci_1.EmptyLoci;\n        return helpers_1.AlphafoldView.getLociByPLDDT(score, data);\n    };\n    PDBeMolstarPlugin.prototype.normalizeColor = function (colorVal, defaultColor) {\n        var color = color_1.Color.fromRgb(170, 170, 170);\n        try {\n            if (typeof colorVal.r !== 'undefined') {\n                color = color_1.Color.fromRgb(colorVal.r, colorVal.g, colorVal.b);\n            }\n            else if (colorVal[0] === '#') {\n                color = (0, color_1.Color)(Number(\"0x\".concat(colorVal.substr(1))));\n            }\n            else {\n                color = (0, color_1.Color)(colorVal);\n            }\n        }\n        catch (e) {\n            if (defaultColor)\n                color = defaultColor;\n        }\n        return color;\n    };\n    PDBeMolstarPlugin.prototype.clear = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                this.plugin.clear();\n                this.assemblyRef = '';\n                this.selectedParams = void 0;\n                this.isHighlightColorUpdated = false;\n                this.isSelectedColorUpdated = false;\n                return [2 /*return*/];\n            });\n        });\n    };\n    return PDBeMolstarPlugin;\n}());\nwindow.PDBeMolstarPlugin = PDBeMolstarPlugin;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWIvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYyxtQkFBTyxDQUFDLGdEQUFPO0FBQzdCLGFBQWEsbUJBQU8sQ0FBQyw2QkFBUTtBQUM3QixpQkFBaUIsbUJBQU8sQ0FBQyxzRkFBNkI7QUFDdEQsa0JBQWtCLG1CQUFPLENBQUMsd0VBQW1CO0FBQzdDLGFBQWEsbUJBQU8sQ0FBQyw0RUFBd0I7QUFDN0Msd0JBQXdCLG1CQUFPLENBQUMsZ0dBQWtDO0FBQ2xFLGdCQUFnQixtQkFBTyxDQUFDLG1DQUFXO0FBQ25DLGdDQUFnQyxtQkFBTyxDQUFDLHlFQUE4QjtBQUN0RSwrQkFBK0IsbUJBQU8sQ0FBQyx1RUFBNkI7QUFDcEUsa0JBQWtCLG1CQUFPLENBQUMsd0VBQW1CO0FBQzdDLHVDQUF1QyxtQkFBTyxDQUFDLHdMQUE4RTtBQUM3SCxhQUFhLG1CQUFPLENBQUMsOEVBQXlCO0FBQzlDLHFCQUFxQixtQkFBTyxDQUFDLGtLQUFtRTtBQUNoRyx3Q0FBd0MsbUJBQU8sQ0FBQyxnS0FBa0U7QUFDbEgseUJBQXlCLG1CQUFPLENBQUMscURBQW9CO0FBQ3JELHdCQUF3QixtQkFBTyxDQUFDLHlEQUFzQjtBQUN0RCxzQkFBc0IsbUJBQU8sQ0FBQywrQ0FBaUI7QUFDL0Msc0JBQXNCLG1CQUFPLENBQUMsK0NBQWlCO0FBQy9DLGVBQWUsbUJBQU8sQ0FBQyw4RUFBeUI7QUFDaEQsZUFBZSxtQkFBTyxDQUFDLGtGQUEyQjtBQUNsRCxjQUFjLG1CQUFPLENBQUMsd0ZBQThCO0FBQ3BELGtCQUFrQixtQkFBTyxDQUFDLHdJQUFzRDtBQUNoRix5QkFBeUIsbUJBQU8sQ0FBQyxrR0FBbUM7QUFDcEUsaUJBQWlCLG1CQUFPLENBQUMsMkVBQStCO0FBQ3hELGFBQWEsbUJBQU8sQ0FBQyxvRkFBeUI7QUFDOUMsaUJBQWlCLG1CQUFPLENBQUMsd0pBQThEO0FBQ3ZGLDRCQUE0QixtQkFBTyxDQUFDLHdJQUFzRDtBQUMxRiwyQ0FBMkMsbUJBQU8sQ0FBQyx5RkFBc0M7QUFDekYsK0JBQStCLG1CQUFPLENBQUMsdUVBQTZCO0FBQ3BFLHVCQUF1QixtQkFBTyxDQUFDLG9JQUFvRDtBQUNuRixlQUFlLG1CQUFPLENBQUMsd0hBQWdEO0FBQ3ZFLG1CQUFtQixtQkFBTyxDQUFDLGdHQUErQjtBQUMxRCxtQkFBbUIsbUJBQU8sQ0FBQyxnR0FBK0I7QUFDMUQsdUJBQXVCLG1CQUFPLENBQUMsNEdBQXdDO0FBQ3ZFLG9CQUFvQixtQkFBTyxDQUFDLDhJQUF5RDtBQUNyRixvQkFBb0IsbUJBQU8sQ0FBQyw4SUFBeUQ7QUFDckYsd0JBQXdCLG1CQUFPLENBQUMsc0pBQTZEO0FBQzdGLDRCQUE0QixtQkFBTyxDQUFDLDhKQUFpRTtBQUNyRyx1QkFBdUIsbUJBQU8sQ0FBQyxvSkFBNEQ7QUFDM0Ysb0JBQW9CLG1CQUFPLENBQUMsOElBQXlEO0FBQ3JGLHdCQUF3QixtQkFBTyxDQUFDLHNKQUE2RDtBQUM3RixXQUFXLDRCQUE0QjtBQUN2QyxtQkFBbUIsbUJBQU8sQ0FBQyx5Q0FBYztBQUN6QyxtQkFBbUIsbUJBQU8sQ0FBQyx5Q0FBYztBQUN6QyxXQUFXLGlEQUFpRDtBQUM1RCxnQkFBZ0IsbUJBQU8sQ0FBQyxtQ0FBVztBQUNuQyxXQUFXLGdCQUFnQjtBQUMzQixXQUFXLHFDQUFxQztBQUNoRCxtQkFBbUIsbUJBQU8sQ0FBQyxzR0FBcUM7QUFDaEUsbUJBQU8sQ0FBQyxxR0FBc0M7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtSkFBbUosb0NBQW9DO0FBQ3ZMO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSxTQUFTLDJCQUEyQjtBQUM1RyxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFLFNBQVMsMEJBQTBCO0FBQzNHLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsY0FBYztBQUMzRCxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQSwrRUFBK0UsWUFBWSw4Q0FBOEMsZ0NBQWdDO0FBQ3pLO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELFlBQVkscUJBQXFCO0FBQzdGO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBLCtLQUErSyw0Q0FBNEMsVUFBVSx3QkFBd0IsS0FBSztBQUNsUTtBQUNBO0FBQ0EsMEtBQTBLLDRDQUE0QyxVQUFVLHdCQUF3QixLQUFLO0FBQzdQO0FBQ0EsdUdBQXVHLDBCQUEwQjtBQUNqSTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhLElBQUk7QUFDakIsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsWUFBWSxxQkFBcUI7QUFDN0Y7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0EsK0tBQStLLDRDQUE0QyxVQUFVLHdCQUF3QixLQUFLO0FBQ2xRO0FBQ0E7QUFDQSwwS0FBMEssNENBQTRDLFVBQVUsd0JBQXdCLEtBQUs7QUFDN1A7QUFDQSx1R0FBdUcsMEJBQTBCO0FBQ2pJO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMseUJBQXlCO0FBQ3JFO0FBQ0EsbUZBQW1GLFlBQVk7QUFDL0Y7QUFDQTtBQUNBLGFBQWE7QUFDYiw2Q0FBNkM7QUFDN0M7QUFDQSxzRkFBc0Ysd0JBQXdCO0FBQzlHO0FBQ0EsNENBQTRDLHNCQUFzQjtBQUNsRTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhLElBQUk7QUFDakIsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3SEFBd0gsaUNBQWlDLHVEQUF1RDtBQUNoTixxSUFBcUksaUNBQWlDLHFDQUFxQztBQUMzTTtBQUNBLHdIQUF3SCxpQ0FBaUMsdURBQXVEO0FBQ2hOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYSxJQUFJO0FBQ2pCLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxSUFBcUksaUNBQWlDLHVEQUF1RDtBQUM3TjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsc0NBQXNDLDBCQUEwQjtBQUNuSDtBQUNBLHdGQUF3RixZQUFZO0FBQ3BHO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4R0FBOEcsNERBQTREO0FBQzFLO0FBQ0Esc0RBQXNEO0FBQ3RELHlFQUF5RSxvQkFBb0Isc0JBQXNCO0FBQ25IO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxSEFBcUgsaUNBQWlDLHVCQUF1QjtBQUM3SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0ZBQXNGLFlBQVk7QUFDbEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsbUJBQW1CO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWEsSUFBSTtBQUNqQix5REFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGFBQWE7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1JQUFtSSxnQkFBZ0I7QUFDbko7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2R0FBNkcsMkRBQTJEO0FBQ3hLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYSxJQUFJO0FBQ2pCLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsdUhBQXVIO0FBQzNKO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYSxJQUFJO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlHQUFpRyx1Q0FBdUM7QUFDeEk7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0RUFBNEUsMEJBQTBCLElBQUksd0JBQXdCO0FBQ2xJO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0EsNENBQTRDLHdCQUF3QjtBQUNwRTtBQUNBLCtFQUErRSxZQUFZLCtDQUErQyxnQkFBZ0IsMEJBQTBCLEtBQUs7QUFDekw7QUFDQSwyRUFBMkU7QUFDM0UsYUFBYTtBQUNiLHdEQUF3RDtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWEsSUFBSTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0UsWUFBWSw4Q0FBOEMsd0JBQXdCO0FBQ2pLO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVHQUF1RyxpQkFBaUI7QUFDeEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RkFBOEYsWUFBWSw4Q0FBOEMsd0JBQXdCO0FBQ2hMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzUEFBc1Asc0JBQXNCO0FBQzVRO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsYUFBYTtBQUMvQztBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RDtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsME5BQTBOLHFDQUFxQztBQUMvUDtBQUNBO0FBQ0E7QUFDQSx5SEFBeUgsc0NBQXNDO0FBQy9KO0FBQ0E7QUFDQSwwSEFBMEgsc0NBQXNDO0FBQ2hLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVIQUF1SCxxQ0FBcUM7QUFDNUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxvQ0FBb0M7QUFDM0Y7QUFDQTtBQUNBLHNEQUFzRCxlQUFlO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvR0FBb0c7QUFDcEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvSEFBb0gsMENBQTBDO0FBQzlKO0FBQ0E7QUFDQSwyR0FBMkcseUNBQXlDO0FBQ3BKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFBZ0Y7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEUsMENBQTBDO0FBQ3BIO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxnRkFBZ0Y7QUFDbkk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVFQUF1RTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUZBQW1GLFNBQVMsaURBQWlELDJDQUEyQyxtQkFBbUIsS0FBSztBQUNoTjtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsdUhBQXVIO0FBQ25LO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5R0FBeUcsdUZBQXVGO0FBQ2hNO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFKQUFxSixpQkFBaUI7QUFDdEs7QUFDQTtBQUNBO0FBQ0EsMEhBQTBILGdFQUFnRSxlQUFlLHNDQUFzQyxpQ0FBaUMsY0FBYyxJQUFJLG1CQUFtQjtBQUNyVDtBQUNBO0FBQ0E7QUFDQSxpS0FBaUssdUJBQXVCO0FBQ3hMO0FBQ0E7QUFDQTtBQUNBLDJIQUEySCxnRUFBZ0UsZUFBZSxzQ0FBc0MsaUNBQWlDLGNBQWM7QUFDL1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0Esa0ZBQWtGLG1FQUFtRSxJQUFJLFNBQVMsaUJBQWlCO0FBQ25MO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0dBQWtHLDRCQUE0QixtQkFBbUIsSUFBSSwyQkFBMkI7QUFDaEw7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxR0FBcUcsMkJBQTJCO0FBQ2hJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5R0FBeUcsd0NBQXdDO0FBQ2pKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQyw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtSEFBbUgsZ0JBQWdCO0FBQ25JLCtIQUErSCw0Q0FBNEMsa0JBQWtCO0FBQzdMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNGQUFzRixlQUFlLElBQUksb0NBQW9DO0FBQzdJO0FBQ0E7QUFDQSxxRUFBcUUsa0RBQWtEO0FBQ3ZIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RSw2QkFBNkI7QUFDekcsbUZBQW1GLHVCQUF1QjtBQUMxRyw4RUFBOEUseUJBQXlCLElBQUksdUNBQXVDO0FBQ2xKLDhFQUE4RSxvQkFBb0IsSUFBSSxrQ0FBa0M7QUFDeEksOEVBQThFLGVBQWUsSUFBSSxvQ0FBb0M7QUFDckk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1HQUFtRywyQ0FBMkM7QUFDOUk7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0EscUVBQXFFLDJDQUEyQztBQUNoSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGRiZS1tb2xzdGFyLy4vbGliL2luZGV4LmpzPzliMGEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnZhciBzcGVjXzEgPSByZXF1aXJlKFwiLi9zcGVjXCIpO1xudmFyIGNvbW1hbmRzXzEgPSByZXF1aXJlKFwiTW9sc3Rhci9tb2wtcGx1Z2luL2NvbW1hbmRzXCIpO1xudmFyIG1vbF9zdGF0ZV8xID0gcmVxdWlyZShcIk1vbHN0YXIvbW9sLXN0YXRlXCIpO1xudmFyIGxvY2lfMSA9IHJlcXVpcmUoXCJNb2xzdGFyL21vbC1tb2RlbC9sb2NpXCIpO1xudmFyIHJ4X2V2ZW50X2hlbHBlcl8xID0gcmVxdWlyZShcIk1vbHN0YXIvbW9sLXV0aWwvcngtZXZlbnQtaGVscGVyXCIpO1xudmFyIGhlbHBlcnNfMSA9IHJlcXVpcmUoXCIuL2hlbHBlcnNcIik7XG52YXIgcGRiZV9zdHJ1Y3R1cmVfY29udHJvbHNfMSA9IHJlcXVpcmUoXCIuL3VpL3BkYmUtc3RydWN0dXJlLWNvbnRyb2xzXCIpO1xudmFyIHBkYmVfdmlld3BvcnRfY29udHJvbHNfMSA9IHJlcXVpcmUoXCIuL3VpL3BkYmUtdmlld3BvcnQtY29udHJvbHNcIik7XG52YXIgbW9sX3N0YXRlXzIgPSByZXF1aXJlKFwiTW9sc3Rhci9tb2wtc3RhdGVcIik7XG52YXIgc3RydWN0dXJlX2ZvY3VzX3JlcHJlc2VudGF0aW9uXzEgPSByZXF1aXJlKFwiTW9sc3Rhci9tb2wtcGx1Z2luL2JlaGF2aW9yL2R5bmFtaWMvc2VsZWN0aW9uL3N0cnVjdHVyZS1mb2N1cy1yZXByZXNlbnRhdGlvblwiKTtcbnZhciBzcGVjXzIgPSByZXF1aXJlKFwiTW9sc3Rhci9tb2wtcGx1Z2luL3NwZWNcIik7XG52YXIgdHJhbnNmb3JtZXJzXzEgPSByZXF1aXJlKFwiTW9sc3Rhci9tb2wtcGx1Z2luL2JlaGF2aW9yL2R5bmFtaWMvdm9sdW1lLXN0cmVhbWluZy90cmFuc2Zvcm1lcnNcIik7XG52YXIgc3RydWN0dXJlX3JlcHJlc2VudGF0aW9uX3BhcmFtc18xID0gcmVxdWlyZShcIk1vbHN0YXIvbW9sLXBsdWdpbi1zdGF0ZS9oZWxwZXJzL3N0cnVjdHVyZS1yZXByZXNlbnRhdGlvbi1wYXJhbXNcIik7XG52YXIgc3Vic2NyaWJlX2V2ZW50c18xID0gcmVxdWlyZShcIi4vc3Vic2NyaWJlLWV2ZW50c1wiKTtcbnZhciBwZGJlX2xlZnRfcGFuZWxfMSA9IHJlcXVpcmUoXCIuL3VpL3BkYmUtbGVmdC1wYW5lbFwiKTtcbnZhciBzdXBlcnBvc2l0aW9uXzEgPSByZXF1aXJlKFwiLi9zdXBlcnBvc2l0aW9uXCIpO1xudmFyIGN1c3RvbV9ldmVudHNfMSA9IHJlcXVpcmUoXCIuL2N1c3RvbS1ldmVudHNcIik7XG52YXIgYXNzZXRzXzEgPSByZXF1aXJlKFwiTW9sc3Rhci9tb2wtdXRpbC9hc3NldHNcIik7XG52YXIgY29uZmlnXzEgPSByZXF1aXJlKFwiTW9sc3Rhci9tb2wtcGx1Z2luL2NvbmZpZ1wiKTtcbnZhciBjb2xvcl8xID0gcmVxdWlyZShcIk1vbHN0YXIvbW9sLXV0aWwvY29sb3IvY29sb3JcIik7XG52YXIgY29tcG9uZW50XzEgPSByZXF1aXJlKFwiTW9sc3Rhci9tb2wtcGx1Z2luLXN0YXRlL21hbmFnZXIvc3RydWN0dXJlL2NvbXBvbmVudFwiKTtcbnZhciBwYXJhbV9kZWZpbml0aW9uXzEgPSByZXF1aXJlKFwiTW9sc3Rhci9tb2wtdXRpbC9wYXJhbS1kZWZpbml0aW9uXCIpO1xudmFyIGJlaGF2aW9yXzEgPSByZXF1aXJlKFwiLi9kb21haW4tYW5ub3RhdGlvbnMvYmVoYXZpb3JcIik7XG52YXIgcGRiZV8xID0gcmVxdWlyZShcIk1vbHN0YXIvZXh0ZW5zaW9ucy9wZGJlXCIpO1xudmFyIGJlaGF2aW9yXzIgPSByZXF1aXJlKFwiTW9sc3Rhci9leHRlbnNpb25zL21vZGVsLWFyY2hpdmUvcXVhbGl0eS1hc3Nlc3NtZW50L2JlaGF2aW9yXCIpO1xudmFyIHN0cnVjdHVyZV9vdmVycGFpbnRfMSA9IHJlcXVpcmUoXCJNb2xzdGFyL21vbC1wbHVnaW4tc3RhdGUvaGVscGVycy9zdHJ1Y3R1cmUtb3ZlcnBhaW50XCIpO1xudmFyIHN1cGVycG9zaXRpb25fZm9jdXNfcmVwcmVzZW50YXRpb25fMSA9IHJlcXVpcmUoXCIuL3N1cGVycG9zaXRpb24tZm9jdXMtcmVwcmVzZW50YXRpb25cIik7XG52YXIgc3VwZXJwb3NpdGlvbl92aWV3cG9ydF8xID0gcmVxdWlyZShcIi4vdWkvc3VwZXJwb3NpdGlvbi12aWV3cG9ydFwiKTtcbnZhciByZXByZXNlbnRhdGlvbl8xID0gcmVxdWlyZShcIk1vbHN0YXIvbW9sLXBsdWdpbi9iZWhhdmlvci9keW5hbWljL3JlcHJlc2VudGF0aW9uXCIpO1xudmFyIGNhbWVyYV8xID0gcmVxdWlyZShcIm1vbHN0YXIvbGliL21vbC1wbHVnaW4vYmVoYXZpb3IvZHluYW1pYy9jYW1lcmFcIik7XG52YXIgbXA0X2V4cG9ydF8xID0gcmVxdWlyZShcIk1vbHN0YXIvZXh0ZW5zaW9ucy9tcDQtZXhwb3J0XCIpO1xudmFyIGdlb19leHBvcnRfMSA9IHJlcXVpcmUoXCJNb2xzdGFyL2V4dGVuc2lvbnMvZ2VvLWV4cG9ydFwiKTtcbnZhciBlbGVtZW50X3N5bWJvbF8xID0gcmVxdWlyZShcIk1vbHN0YXIvbW9sLXRoZW1lL2NvbG9yL2VsZW1lbnQtc3ltYm9sXCIpO1xudmFyIG1vZGVsX2luZGV4XzEgPSByZXF1aXJlKFwiTW9sc3Rhci9tb2wtcGx1Z2luLXN0YXRlL2FuaW1hdGlvbi9idWlsdC1pbi9tb2RlbC1pbmRleFwiKTtcbnZhciBjYW1lcmFfc3Bpbl8xID0gcmVxdWlyZShcIk1vbHN0YXIvbW9sLXBsdWdpbi1zdGF0ZS9hbmltYXRpb24vYnVpbHQtaW4vY2FtZXJhLXNwaW5cIik7XG52YXIgc3RhdGVfc25hcHNob3RzXzEgPSByZXF1aXJlKFwiTW9sc3Rhci9tb2wtcGx1Z2luLXN0YXRlL2FuaW1hdGlvbi9idWlsdC1pbi9zdGF0ZS1zbmFwc2hvdHNcIik7XG52YXIgc3RhdGVfaW50ZXJwb2xhdGlvbl8xID0gcmVxdWlyZShcIk1vbHN0YXIvbW9sLXBsdWdpbi1zdGF0ZS9hbmltYXRpb24vYnVpbHQtaW4vc3RhdGUtaW50ZXJwb2xhdGlvblwiKTtcbnZhciBzcGluX3N0cnVjdHVyZV8xID0gcmVxdWlyZShcIk1vbHN0YXIvbW9sLXBsdWdpbi1zdGF0ZS9hbmltYXRpb24vYnVpbHQtaW4vc3Bpbi1zdHJ1Y3R1cmVcIik7XG52YXIgY2FtZXJhX3JvY2tfMSA9IHJlcXVpcmUoXCJNb2xzdGFyL21vbC1wbHVnaW4tc3RhdGUvYW5pbWF0aW9uL2J1aWx0LWluL2NhbWVyYS1yb2NrXCIpO1xudmFyIGFzc2VtYmx5X3Vud2luZF8xID0gcmVxdWlyZShcIk1vbHN0YXIvbW9sLXBsdWdpbi1zdGF0ZS9hbmltYXRpb24vYnVpbHQtaW4vYXNzZW1ibHktdW53aW5kXCIpO1xuLy9pbXBvcnQgeyBNb2RlbEluZm8yLCBTdGF0ZUVsZW1lbnRzIH0gZnJvbSAnLi9oZWxwZXJzJztcbnZhciBhbm5vdGF0aW9uXzEgPSByZXF1aXJlKFwiLi9hbm5vdGF0aW9uXCIpO1xudmFyIGFubm90YXRpb25fMiA9IHJlcXVpcmUoXCIuL2Fubm90YXRpb25cIik7XG4vL2ltcG9ydCB7IE1vZGVsSW5mbzIsIFN0YXRlRWxlbWVudHMsIFJlcHJlc2VudGF0aW9uU3R5bGUgfSBmcm9tICcuL2hlbHBlcnMnO1xudmFyIGhlbHBlcnNfMiA9IHJlcXVpcmUoXCIuL2hlbHBlcnNcIik7XG4vL2ltcG9ydCB7IFN0YXRlRWxlbWVudHMgfSBmcm9tICcuL2hlbHBlcnMnO1xuLy9pbXBvcnQgeyBTdGF0ZUVsZW1lbnRzLCBSZXByZXNlbnRhdGlvblN0eWxlIH0gZnJvbSAnLi9oZWxwZXJzJztcbnZhciB0cmFuc2Zvcm1zXzEgPSByZXF1aXJlKFwiTW9sc3Rhci9tb2wtcGx1Z2luLXN0YXRlL3RyYW5zZm9ybXNcIik7XG5yZXF1aXJlKCdNb2xzdGFyL21vbC1wbHVnaW4tdWkvc2tpbi9kYXJrLnNjc3MnKTtcbnZhciBQREJlTW9sc3RhclBsdWdpbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQREJlTW9sc3RhclBsdWdpbigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5fZXYgPSByeF9ldmVudF9oZWxwZXJfMS5SeEV2ZW50SGVscGVyLmNyZWF0ZSgpO1xuICAgICAgICB0aGlzLmV2ZW50cyA9IHtcbiAgICAgICAgICAgIGxvYWRDb21wbGV0ZTogdGhpcy5fZXYoKSxcbiAgICAgICAgICAgIG1vZGVsSW5mbzogdGhpcy5fZXYoKVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFzc2VtYmx5UmVmID0gJyc7XG4gICAgICAgIHRoaXMuaXNIaWdobGlnaHRDb2xvclVwZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1NlbGVjdGVkQ29sb3JVcGRhdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYXBwbHlWaXN1YWxQYXJhbXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgVGFnUmVmcyA9IHtcbiAgICAgICAgICAgICAgICAnc3RydWN0dXJlLWNvbXBvbmVudC1zdGF0aWMtcG9seW1lcic6ICdwb2x5bWVyJyxcbiAgICAgICAgICAgICAgICAnc3RydWN0dXJlLWNvbXBvbmVudC1zdGF0aWMtbGlnYW5kJzogJ2hldCcsXG4gICAgICAgICAgICAgICAgJ3N0cnVjdHVyZS1jb21wb25lbnQtc3RhdGljLWJyYW5jaGVkJzogJ2NhcmJzJyxcbiAgICAgICAgICAgICAgICAnc3RydWN0dXJlLWNvbXBvbmVudC1zdGF0aWMtd2F0ZXInOiAnd2F0ZXInLFxuICAgICAgICAgICAgICAgICdzdHJ1Y3R1cmUtY29tcG9uZW50LXN0YXRpYy1jb2Fyc2UnOiAnY29hcnNlJyxcbiAgICAgICAgICAgICAgICAnbm9uLXN0YW5kYXJkJzogJ25vblN0YW5kYXJkJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBjb21wb25lbnRHcm91cHMgPSBfdGhpcy5wbHVnaW4ubWFuYWdlcnMuc3RydWN0dXJlLmhpZXJhcmNoeS5jdXJyZW50Q29tcG9uZW50R3JvdXBzO1xuICAgICAgICAgICAgY29tcG9uZW50R3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKGNvbXBHcnApIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgdmFyIGNvbXBHcnBJbmRleCA9IGNvbXBHcnAubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gY29tcEdycFtjb21wR3JwSW5kZXhdLmtleTtcbiAgICAgICAgICAgICAgICB2YXIgcm0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICYmIF90aGlzLmluaXRQYXJhbXMuaGlkZVN0cnVjdHVyZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RydWN0VHlwZSA9IFRhZ1JlZnNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0cnVjdFR5cGUgJiYgKChfYSA9IF90aGlzLmluaXRQYXJhbXMuaGlkZVN0cnVjdHVyZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmluZGV4T2Yoc3RydWN0VHlwZSkpID4gLTEpXG4gICAgICAgICAgICAgICAgICAgICAgICBybSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChybSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5wbHVnaW4ubWFuYWdlcnMuc3RydWN0dXJlLmhpZXJhcmNoeS5yZW1vdmUoW2NvbXBHcnBbY29tcEdycEluZGV4XV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXJtICYmIF90aGlzLmluaXRQYXJhbXMudmlzdWFsU3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBHcnBbY29tcEdycEluZGV4XSAmJiBjb21wR3JwW2NvbXBHcnBJbmRleF0ucmVwcmVzZW50YXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wR3JwW2NvbXBHcnBJbmRleF0ucmVwcmVzZW50YXRpb25zLmZvckVhY2goZnVuY3Rpb24gKHJlcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50UGFyYW1zID0gKDAsIHN0cnVjdHVyZV9yZXByZXNlbnRhdGlvbl9wYXJhbXNfMS5jcmVhdGVTdHJ1Y3R1cmVSZXByZXNlbnRhdGlvblBhcmFtcykoX3RoaXMucGx1Z2luLCB2b2lkIDAsIHsgdHlwZTogX3RoaXMuaW5pdFBhcmFtcy52aXN1YWxTdHlsZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wbHVnaW4ubWFuYWdlcnMuc3RydWN0dXJlLmNvbXBvbmVudC51cGRhdGVSZXByZXNlbnRhdGlvbnMoW2NvbXBHcnBbY29tcEdycEluZGV4XV0sIHJlcCwgY3VycmVudFBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNhbnZhcyA9IHtcbiAgICAgICAgICAgIHRvZ2dsZUNvbnRyb2xzOiBmdW5jdGlvbiAoaXNWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpc1Zpc2libGUgPT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgICAgICAgICBpc1Zpc2libGUgPSAhX3RoaXMucGx1Z2luLmxheW91dC5zdGF0ZS5zaG93Q29udHJvbHM7XG4gICAgICAgICAgICAgICAgY29tbWFuZHNfMS5QbHVnaW5Db21tYW5kcy5MYXlvdXQuVXBkYXRlKF90aGlzLnBsdWdpbiwgeyBzdGF0ZTogeyBzaG93Q29udHJvbHM6IGlzVmlzaWJsZSB9IH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvZ2dsZUV4cGFuZGVkOiBmdW5jdGlvbiAoaXNFeHBhbmRlZCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaXNFeHBhbmRlZCA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICAgICAgICAgIGlzRXhwYW5kZWQgPSAhX3RoaXMucGx1Z2luLmxheW91dC5zdGF0ZS5pc0V4cGFuZGVkO1xuICAgICAgICAgICAgICAgIGNvbW1hbmRzXzEuUGx1Z2luQ29tbWFuZHMuTGF5b3V0LlVwZGF0ZShfdGhpcy5wbHVnaW4sIHsgc3RhdGU6IHsgaXNFeHBhbmRlZDogaXNFeHBhbmRlZCB9IH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldEJnQ29sb3I6IGZ1bmN0aW9uIChjb2xvcikge1xuICAgICAgICAgICAgICAgIGlmICghY29sb3IpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBfdGhpcy5jYW52YXMuYXBwbHlTZXR0aW5ncyh7IGNvbG9yOiBjb2xvciB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhcHBseVNldHRpbmdzOiBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNldHRpbmdzKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgdmFyIHJlbmRlcmVyUGFyYW1zID0ge307XG4gICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLmNvbG9yKVxuICAgICAgICAgICAgICAgICAgICByZW5kZXJlclBhcmFtc1snYmFja2dyb3VuZENvbG9yJ10gPSBjb2xvcl8xLkNvbG9yLmZyb21SZ2Ioc2V0dGluZ3MuY29sb3Iuciwgc2V0dGluZ3MuY29sb3IuZywgc2V0dGluZ3MuY29sb3IuYik7XG4gICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLmxpZ2h0aW5nKVxuICAgICAgICAgICAgICAgICAgICByZW5kZXJlclBhcmFtc1snc3R5bGUnXSA9IHsgbmFtZTogc2V0dGluZ3MubGlnaHRpbmcgfTtcbiAgICAgICAgICAgICAgICB2YXIgcmVuZGVyZXIgPSBfdGhpcy5wbHVnaW4uY2FudmFzM2QucHJvcHMucmVuZGVyZXI7XG4gICAgICAgICAgICAgICAgY29tbWFuZHNfMS5QbHVnaW5Db21tYW5kcy5DYW52YXMzRC5TZXRTZXR0aW5ncyhfdGhpcy5wbHVnaW4sIHsgc2V0dGluZ3M6IHsgcmVuZGVyZXI6IHRzbGliXzEuX19hc3NpZ24odHNsaWJfMS5fX2Fzc2lnbih7fSwgcmVuZGVyZXIpLCByZW5kZXJlclBhcmFtcykgfSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jb2xvcmluZyA9IHtcbiAgICAgICAgICAgIHNoYW5ub25FbnRyb3B5OiBmdW5jdGlvbiAocGFyYW1zKSB7IHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGUsIHRyZWUsIGNvbG9yVGhlbWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcmFtcyB8fCAhcGFyYW1zLmtlZXBTdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhd2FpdCB0aGlzLnVwZGF0ZVN0eWxlKHsgc2VxdWVuY2U6IHsga2luZDogJ3NwYWNlZmlsbCcgfSB9LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyZWUgPSBzdGF0ZS5idWlsZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yVGhlbWUgPSB7IG5hbWU6IGFubm90YXRpb25fMS5TaGFubm9uRW50cm9weS5wcm9wZXJ0eVByb3ZpZGVyLmRlc2NyaXB0b3IubmFtZSwgcGFyYW1zOiB0aGlzLnBsdWdpbi5yZXByZXNlbnRhdGlvbi5zdHJ1Y3R1cmUudGhlbWVzLmNvbG9yVGhlbWVSZWdpc3RyeS5nZXQoYW5ub3RhdGlvbl8xLlNoYW5ub25FbnRyb3B5LnByb3BlcnR5UHJvdmlkZXIuZGVzY3JpcHRvci5uYW1lKS5kZWZhdWx0VmFsdWVzIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwYXJhbXMgfHwgISFwYXJhbXMuc2VxdWVuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJlZS50byhoZWxwZXJzXzIuU3RhdGVFbGVtZW50cy5TZXF1ZW5jZVZpc3VhbCkudXBkYXRlKHRyYW5zZm9ybXNfMS5TdGF0ZVRyYW5zZm9ybXMuUmVwcmVzZW50YXRpb24uU3RydWN0dXJlUmVwcmVzZW50YXRpb24zRCwgZnVuY3Rpb24gKG9sZCkgeyByZXR1cm4gKHRzbGliXzEuX19hc3NpZ24odHNsaWJfMS5fX2Fzc2lnbih7fSwgb2xkKSwgeyBjb2xvclRoZW1lOiBjb2xvclRoZW1lIH0pKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMgJiYgISFwYXJhbXMuaGV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyZWUudG8oaGVscGVyc18yLlN0YXRlRWxlbWVudHMuSGV0VmlzdWFsKS51cGRhdGUodHJhbnNmb3Jtc18xLlN0YXRlVHJhbnNmb3Jtcy5SZXByZXNlbnRhdGlvbi5TdHJ1Y3R1cmVSZXByZXNlbnRhdGlvbjNELCBmdW5jdGlvbiAob2xkKSB7IHJldHVybiAodHNsaWJfMS5fX2Fzc2lnbih0c2xpYl8xLl9fYXNzaWduKHt9LCBvbGQpLCB7IGNvbG9yVGhlbWU6IGNvbG9yVGhlbWUgfSkpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgY29tbWFuZHNfMS5QbHVnaW5Db21tYW5kcy5TdGF0ZS5VcGRhdGUodGhpcy5wbHVnaW4sIHsgc3RhdGU6IHN0YXRlLCB0cmVlOiB0cmVlIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTsgfSxcbiAgICAgICAgICAgIHR3aW5Db25zOiBmdW5jdGlvbiAocGFyYW1zKSB7IHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGUsIHRyZWUsIGNvbG9yVGhlbWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcmFtcyB8fCAhcGFyYW1zLmtlZXBTdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhd2FpdCB0aGlzLnVwZGF0ZVN0eWxlKHsgc2VxdWVuY2U6IHsga2luZDogJ3NwYWNlZmlsbCcgfSB9LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyZWUgPSBzdGF0ZS5idWlsZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yVGhlbWUgPSB7IG5hbWU6IGFubm90YXRpb25fMi5Ud2luQ29uc0RhdGEucHJvcGVydHlQcm92aWRlci5kZXNjcmlwdG9yLm5hbWUsIHBhcmFtczogdGhpcy5wbHVnaW4ucmVwcmVzZW50YXRpb24uc3RydWN0dXJlLnRoZW1lcy5jb2xvclRoZW1lUmVnaXN0cnkuZ2V0KGFubm90YXRpb25fMi5Ud2luQ29uc0RhdGEucHJvcGVydHlQcm92aWRlci5kZXNjcmlwdG9yLm5hbWUpLmRlZmF1bHRWYWx1ZXMgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcmFtcyB8fCAhIXBhcmFtcy5zZXF1ZW5jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmVlLnRvKGhlbHBlcnNfMi5TdGF0ZUVsZW1lbnRzLlNlcXVlbmNlVmlzdWFsKS51cGRhdGUodHJhbnNmb3Jtc18xLlN0YXRlVHJhbnNmb3Jtcy5SZXByZXNlbnRhdGlvbi5TdHJ1Y3R1cmVSZXByZXNlbnRhdGlvbjNELCBmdW5jdGlvbiAob2xkKSB7IHJldHVybiAodHNsaWJfMS5fX2Fzc2lnbih0c2xpYl8xLl9fYXNzaWduKHt9LCBvbGQpLCB7IGNvbG9yVGhlbWU6IGNvbG9yVGhlbWUgfSkpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtcyAmJiAhIXBhcmFtcy5oZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJlZS50byhoZWxwZXJzXzIuU3RhdGVFbGVtZW50cy5IZXRWaXN1YWwpLnVwZGF0ZSh0cmFuc2Zvcm1zXzEuU3RhdGVUcmFuc2Zvcm1zLlJlcHJlc2VudGF0aW9uLlN0cnVjdHVyZVJlcHJlc2VudGF0aW9uM0QsIGZ1bmN0aW9uIChvbGQpIHsgcmV0dXJuICh0c2xpYl8xLl9fYXNzaWduKHRzbGliXzEuX19hc3NpZ24oe30sIG9sZCksIHsgY29sb3JUaGVtZTogY29sb3JUaGVtZSB9KSk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBjb21tYW5kc18xLlBsdWdpbkNvbW1hbmRzLlN0YXRlLlVwZGF0ZSh0aGlzLnBsdWdpbiwgeyBzdGF0ZTogc3RhdGUsIHRyZWU6IHRyZWUgfSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pOyB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudmlzdWFsID0ge1xuICAgICAgICAgICAgaGlnaGxpZ2h0aW5nOiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxvY2kgPSBfdGhpcy5nZXRMb2NpRm9yUGFyYW1zKHBhcmFtcy5kYXRhLCBwYXJhbXMuc3RydWN0dXJlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICBwYXJhbXMuY29sb3IgPSB7IHI6IDY1LCBnOiA5NiwgYjogOTEgfTtcbiAgICAgICAgICAgICAgICBpZiAobG9jaV8xLkxvY2kuaXNFbXB0eShsb2NpKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuY29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudmlzdWFsLnNldENvbG9yKHsgaGlnaGxpZ2h0OiBwYXJhbXMuY29sb3IgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLnBsdWdpbi5tYW5hZ2Vycy5pbnRlcmFjdGl2aXR5LmxvY2lIaWdobGlnaHRzLmhpZ2hsaWdodE9ubHkoeyBsb2NpOiBsb2NpIH0pO1xuICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuZm9jdXMpXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnBsdWdpbi5tYW5hZ2Vycy5jYW1lcmEuZm9jdXNMb2NpKGxvY2kpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsZWFySGlnaGxpZ2h0aW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4ubWFuYWdlcnMuaW50ZXJhY3Rpdml0eS5sb2NpSGlnaGxpZ2h0cy5oaWdobGlnaHRPbmx5KHsgbG9jaTogbG9jaV8xLkVtcHR5TG9jaSB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNIaWdobGlnaHRDb2xvclVwZGF0ZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpc3VhbC5yZXNldCh7IGhpZ2hsaWdodENvbG9yOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTsgfSxcbiAgICAgICAgICAgIGNvbG9yQnlDaGFpbjogZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBzdHJ1Y3R1cmVEYXRhLCBpLCBfYSwgc3RydWN0dXJlRGF0YV8xLCBzdHJ1Y3R1cmVEYXRhXzFfMSwgcywgY29sb3IsIGVfMV8xO1xuICAgICAgICAgICAgICAgIHZhciBfYiwgZV8xLCBfYywgX2Q7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9lKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2UubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJ1Y3R1cmVEYXRhID0gdGhpcy5wbHVnaW4ubWFuYWdlcnMuc3RydWN0dXJlLmhpZXJhcmNoeS5jdXJyZW50LnN0cnVjdHVyZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2UubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9lLnRyeXMucHVzaChbMSwgMTAsIDExLCAxNl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdHJ1ZSwgc3RydWN0dXJlRGF0YV8xID0gdHNsaWJfMS5fX2FzeW5jVmFsdWVzKHN0cnVjdHVyZURhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9lLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIFs0IC8qeWllbGQqLywgc3RydWN0dXJlRGF0YV8xLm5leHQoKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoc3RydWN0dXJlRGF0YV8xXzEgPSBfZS5zZW50KCksIF9iID0gc3RydWN0dXJlRGF0YV8xXzEuZG9uZSwgIV9iKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2QgPSBzdHJ1Y3R1cmVEYXRhXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9lLmxhYmVsID0gNDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZS50cnlzLnB1c2goWzQsICwgNywgOF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBfZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShpID4gMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDZdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gZGF0YVtpIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9hd2FpdCB0aGlzLnBsdWdpbi5tYW5hZ2Vycy5zdHJ1Y3R1cmUuY29tcG9uZW50LnVwZGF0ZVJlcHJlc2VudGF0aW9uc1RoZW1lKHMuY29tcG9uZW50cywgeyBjb2xvcjogJ3VuaWZvcm0nLCBjb2xvclBhcmFtczogeyB2YWx1ZTogdGhpcy5ub3JtYWxpemVDb2xvcihwYXJhbXMubm9uU2VsZWN0ZWRDb2xvcikgfSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnBsdWdpbi5tYW5hZ2Vycy5zdHJ1Y3R1cmUuY29tcG9uZW50LnVwZGF0ZVJlcHJlc2VudGF0aW9uc1RoZW1lKHMuY29tcG9uZW50cywgeyBjb2xvcjogJ3VuaWZvcm0nLCBjb2xvclBhcmFtczogeyB2YWx1ZTogdGhpcy5ub3JtYWxpemVDb2xvcihjb2xvcikgfSB9KV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9hd2FpdCB0aGlzLnBsdWdpbi5tYW5hZ2Vycy5zdHJ1Y3R1cmUuY29tcG9uZW50LnVwZGF0ZVJlcHJlc2VudGF0aW9uc1RoZW1lKHMuY29tcG9uZW50cywgeyBjb2xvcjogJ3VuaWZvcm0nLCBjb2xvclBhcmFtczogeyB2YWx1ZTogdGhpcy5ub3JtYWxpemVDb2xvcihwYXJhbXMubm9uU2VsZWN0ZWRDb2xvcikgfSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2UubGFiZWwgPSA2O1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3IC8qZW5kZmluYWxseSovXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDk6IHJldHVybiBbMyAvKmJyZWFrKi8sIDE2XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZV8xXzEgPSBfZS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZV8xID0geyBlcnJvcjogZV8xXzEgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAxNl07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9lLnRyeXMucHVzaChbMTEsICwgMTQsIDE1XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoIV9hICYmICFfYiAmJiAoX2MgPSBzdHJ1Y3R1cmVEYXRhXzEucmV0dXJuKSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDEzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBfYy5jYWxsKHN0cnVjdHVyZURhdGFfMSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2UubGFiZWwgPSAxMztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTM6IHJldHVybiBbMyAvKmJyZWFrKi8sIDE1XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNyAvKmVuZGZpbmFsbHkqL107XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE1OiByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNjogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTsgfSxcbiAgICAgICAgICAgIHNlbGVjdDogZnVuY3Rpb24gKHBhcmFtcykgeyByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0cnVjdHVyZURhdGEsIF9hLCBzdHJ1Y3R1cmVEYXRhXzIsIHN0cnVjdHVyZURhdGFfMl8xLCBzLCBlXzJfMSwgX2IsIF9jLCBfZCwgcGFyYW0sIGxvY2ksIHRoZW1lUGFyYW1zLCBjb2xvclZhbHVlLCByZXByLCBkZWZhdWx0UGFyYW1zLCBkZWZhdWx0VmFsdWVzLCB2YWx1ZXMsIHN0cnVjdHVyZXMsIHVwZGF0ZWRTdHJ1Y3R1cmVEYXRhLCBjb21wcywgbGFzdENvbXBzSW5kZXgsIHJlY2VudFJlcENvbXAsIHVuaWZvcm1Db2xvciwgZV8zXzE7XG4gICAgICAgICAgICAgICAgdmFyIF9lLCBlXzIsIF9mLCBfZywgX2gsIGVfMywgX2osIF9rO1xuICAgICAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfbCkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9sLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNlbGVjdGVkUGFyYW1zKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnZpc3VhbC5jbGVhclNlbGVjdGlvbihwYXJhbXMuc3RydWN0dXJlTnVtYmVyKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2wuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJ1Y3R1cmVEYXRhID0gdGhpcy5wbHVnaW4ubWFuYWdlcnMuc3RydWN0dXJlLmhpZXJhcmNoeS5jdXJyZW50LnN0cnVjdHVyZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5zdHJ1Y3R1cmVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RydWN0dXJlRGF0YSA9IFt0aGlzLnBsdWdpbi5tYW5hZ2Vycy5zdHJ1Y3R1cmUuaGllcmFyY2h5LmN1cnJlbnQuc3RydWN0dXJlc1twYXJhbXMuc3RydWN0dXJlTnVtYmVyIC0gMV1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcmFtcy5ub25TZWxlY3RlZENvbG9yKSByZXR1cm4gWzMgLypicmVhayovLCAxN107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2wubGFiZWwgPSAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sLnRyeXMucHVzaChbMywgMTEsIDEyLCAxN10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdHJ1ZSwgc3RydWN0dXJlRGF0YV8yID0gdHNsaWJfMS5fX2FzeW5jVmFsdWVzKHN0cnVjdHVyZURhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sLmxhYmVsID0gNDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFs0IC8qeWllbGQqLywgc3RydWN0dXJlRGF0YV8yLm5leHQoKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoc3RydWN0dXJlRGF0YV8yXzEgPSBfbC5zZW50KCksIF9lID0gc3RydWN0dXJlRGF0YV8yXzEuZG9uZSwgIV9lKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMTBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9nID0gc3RydWN0dXJlRGF0YV8yXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbC5sYWJlbCA9IDY7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2wudHJ5cy5wdXNoKFs2LCAsIDgsIDldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gX2c7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5wbHVnaW4ubWFuYWdlcnMuc3RydWN0dXJlLmNvbXBvbmVudC51cGRhdGVSZXByZXNlbnRhdGlvbnNUaGVtZShzLmNvbXBvbmVudHMsIHsgY29sb3I6ICd1bmlmb3JtJywgY29sb3JQYXJhbXM6IHsgdmFsdWU6IHRoaXMubm9ybWFsaXplQ29sb3IocGFyYW1zLm5vblNlbGVjdGVkQ29sb3IpIH0gfSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3IC8qZW5kZmluYWxseSovXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgOTogcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOiByZXR1cm4gWzMgLypicmVhayovLCAxN107XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVfMl8xID0gX2wuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMTddO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbC50cnlzLnB1c2goWzEyLCAsIDE1LCAxNl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKCFfYSAmJiAhX2UgJiYgKF9mID0gc3RydWN0dXJlRGF0YV8yLnJldHVybikpKSByZXR1cm4gWzMgLypicmVhayovLCAxNF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgX2YuY2FsbChzdHJ1Y3R1cmVEYXRhXzIpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2wuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sLmxhYmVsID0gMTQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE0OiByZXR1cm4gWzMgLypicmVhayovLCAxNl07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNjogcmV0dXJuIFs3IC8qZW5kZmluYWxseSovXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2wudHJ5cy5wdXNoKFsxNywgMjcsIDI4LCAzM10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gdHJ1ZSwgX2MgPSB0c2xpYl8xLl9fYXN5bmNWYWx1ZXMocGFyYW1zLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sLmxhYmVsID0gMTg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE4OiByZXR1cm4gWzQgLyp5aWVsZCovLCBfYy5uZXh0KCldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShfZCA9IF9sLnNlbnQoKSwgX2ggPSBfZC5kb25lLCAhX2gpKSByZXR1cm4gWzMgLypicmVhayovLCAyNl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2sgPSBfZC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sLmxhYmVsID0gMjA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDIwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sLnRyeXMucHVzaChbMjAsICwgMjQsIDI1XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW0gPSBfaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NpID0gdGhpcy5nZXRMb2NpRm9yUGFyYW1zKFtwYXJhbV0sIHBhcmFtcy5zdHJ1Y3R1cmVOdW1iZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2NpXzEuTG9jaS5pc0VtcHR5KGxvY2kpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGRlZmF1bHQgc2VsZWN0aW9uIGNvbG9yIHRvIG1pbmltaXNlIGNoYW5nZSBkaXNwbGF5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aXN1YWwuc2V0Q29sb3IoeyBzZWxlY3Q6IHBhcmFtLmNvbG9yID8gcGFyYW0uY29sb3IgOiB7IHI6IDI1NSwgZzogMjU1LCBiOiAyNTUgfSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhcHBseSBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5tYW5hZ2Vycy5pbnRlcmFjdGl2aXR5LmxvY2lTZWxlY3RzLnNlbGVjdE9ubHkoeyBsb2NpOiBsb2NpIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW1lUGFyYW1zID0gY29tcG9uZW50XzEuU3RydWN0dXJlQ29tcG9uZW50TWFuYWdlci5nZXRUaGVtZVBhcmFtcyh0aGlzLnBsdWdpbiwgdGhpcy5wbHVnaW4ubWFuYWdlcnMuc3RydWN0dXJlLmNvbXBvbmVudC5waXZvdFN0cnVjdHVyZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JWYWx1ZSA9IHBhcmFtX2RlZmluaXRpb25fMS5QYXJhbURlZmluaXRpb24uZ2V0RGVmYXVsdFZhbHVlcyh0aGVtZVBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JWYWx1ZS5hY3Rpb24ucGFyYW1zID0geyBjb2xvcjogcGFyYW0uY29sb3IgPyB0aGlzLm5vcm1hbGl6ZUNvbG9yKHBhcmFtLmNvbG9yKSA6IGNvbG9yXzEuQ29sb3IuZnJvbVJnYigyNTUsIDI1NSwgMjU1KSwgb3BhY2l0eTogMSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucGx1Z2luLm1hbmFnZXJzLnN0cnVjdHVyZS5jb21wb25lbnQuYXBwbHlUaGVtZShjb2xvclZhbHVlLCBzdHJ1Y3R1cmVEYXRhKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDIxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShwYXJhbS5zaWRlQ2hhaW4gfHwgcGFyYW0ucmVwcmVzZW50YXRpb24pKSByZXR1cm4gWzMgLypicmVhayovLCAyM107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwciA9ICdiYWxsLWFuZC1zdGljayc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtLnJlcHJlc2VudGF0aW9uKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXByID0gcGFyYW0ucmVwcmVzZW50YXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFBhcmFtcyA9IGNvbXBvbmVudF8xLlN0cnVjdHVyZUNvbXBvbmVudE1hbmFnZXIuZ2V0QWRkUGFyYW1zKHRoaXMucGx1Z2luLCB7IGFsbG93Tm9uZTogZmFsc2UsIGhpZGVTZWxlY3Rpb246IHRydWUsIGNoZWNrRXhpc3Rpbmc6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlcyA9IHBhcmFtX2RlZmluaXRpb25fMS5QYXJhbURlZmluaXRpb24uZ2V0RGVmYXVsdFZhbHVlcyhkZWZhdWx0UGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWVzLm9wdGlvbnMgPSB7IGxhYmVsOiAnc2VsZWN0aW9uLWJ5LXNjcmlwdCcsIGNoZWNrRXhpc3Rpbmc6IHBhcmFtcy5zdHJ1Y3R1cmVOdW1iZXIgPyBmYWxzZSA6IHRydWUgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgPSB0c2xpYl8xLl9fYXNzaWduKHRzbGliXzEuX19hc3NpZ24oe30sIGRlZmF1bHRWYWx1ZXMpLCB7IHJlcHJlc2VudGF0aW9uOiByZXByIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cnVjdHVyZXMgPSB0aGlzLnBsdWdpbi5tYW5hZ2Vycy5zdHJ1Y3R1cmUuaGllcmFyY2h5LmdldFN0cnVjdHVyZXNXaXRoU2VsZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5wbHVnaW4ubWFuYWdlcnMuc3RydWN0dXJlLmNvbXBvbmVudC5hZGQodmFsdWVzLCBzdHJ1Y3R1cmVzKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDIyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBcHBseSB1bmlmb3JtIHRoZW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtLnJlcHJlc2VudGF0aW9uQ29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFN0cnVjdHVyZURhdGEgPSB0aGlzLnBsdWdpbi5tYW5hZ2Vycy5zdHJ1Y3R1cmUuaGllcmFyY2h5LmN1cnJlbnQuc3RydWN0dXJlcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5zdHJ1Y3R1cmVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRTdHJ1Y3R1cmVEYXRhID0gW3RoaXMucGx1Z2luLm1hbmFnZXJzLnN0cnVjdHVyZS5oaWVyYXJjaHkuY3VycmVudC5zdHJ1Y3R1cmVzW3BhcmFtcy5zdHJ1Y3R1cmVOdW1iZXIgLSAxXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcHMgPSB1cGRhdGVkU3RydWN0dXJlRGF0YVswXS5jb21wb25lbnRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0Q29tcHNJbmRleCA9IGNvbXBzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VudFJlcENvbXAgPSBbY29tcHNbbGFzdENvbXBzSW5kZXhdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pZm9ybUNvbG9yID0gcGFyYW0ucmVwcmVzZW50YXRpb25Db2xvciA/IHRoaXMubm9ybWFsaXplQ29sb3IocGFyYW0ucmVwcmVzZW50YXRpb25Db2xvcikgOiBjb2xvcl8xLkNvbG9yLmZyb21SZ2IoMjU1LCAyNTUsIDI1NSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLm1hbmFnZXJzLnN0cnVjdHVyZS5jb21wb25lbnQudXBkYXRlUmVwcmVzZW50YXRpb25zVGhlbWUocmVjZW50UmVwQ29tcCwgeyBjb2xvcjogJ3VuaWZvcm0nLCBjb2xvclBhcmFtczogeyB2YWx1ZTogdW5pZm9ybUNvbG9yIH0gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5hZGRlZFJlcHIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sLmxhYmVsID0gMjM7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDIzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvY3VzIGxvY2lcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW0uZm9jdXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLm1hbmFnZXJzLmNhbWVyYS5mb2N1c0xvY2kobG9jaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHNlbGVjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLm1hbmFnZXJzLmludGVyYWN0aXZpdHkubG9jaVNlbGVjdHMuZGVzZWxlY3QoeyBsb2NpOiBsb2NpIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDI1XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNyAvKmVuZGZpbmFsbHkqL107XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI1OiByZXR1cm4gWzMgLypicmVhayovLCAxOF07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI2OiByZXR1cm4gWzMgLypicmVhayovLCAzM107XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVfM18xID0gX2wuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVfMyA9IHsgZXJyb3I6IGVfM18xIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMzNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyODpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbC50cnlzLnB1c2goWzI4LCAsIDMxLCAzMl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKCFfYiAmJiAhX2ggJiYgKF9qID0gX2MucmV0dXJuKSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDMwXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBfai5jYWxsKF9jKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI5OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbC5sYWJlbCA9IDMwO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzMDogcmV0dXJuIFszIC8qYnJlYWsqLywgMzJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZV8zKSB0aHJvdyBlXzMuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3IC8qZW5kZmluYWxseSovXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzI6IHJldHVybiBbNyAvKmVuZGZpbmFsbHkqL107XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDMzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlc2V0IHNlbGVjdGlvbiBjb2xvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlzdWFsLnJlc2V0KHsgc2VsZWN0Q29sb3I6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2F2ZSBzZWxlY3Rpb24gcGFyYW1zIHRvIG9wdGltaXNlIGNsZWFyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFBhcmFtcyA9IHBhcmFtcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pOyB9LFxuICAgICAgICAgICAgY2xlYXJTZWxlY3Rpb246IGZ1bmN0aW9uIChzdHJ1Y3R1cmVOdW1iZXIpIHsgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBzdHJ1Y3RJbmRleCwgc2VsUmVwckNlbGxzLCBfaSwgX2EsIGMsIF9iLCBzZWxSZXByQ2VsbHNfMSwgc2VsUmVwckNlbGxzXzFfMSwgc2VsUmVwckNlbGwsIGVfNF8xO1xuICAgICAgICAgICAgICAgIHZhciBfYywgZV80LCBfZCwgX2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9mKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2YubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJ1Y3RJbmRleCA9IHN0cnVjdHVyZU51bWJlciA/IHN0cnVjdHVyZU51bWJlciAtIDEgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLm1hbmFnZXJzLmludGVyYWN0aXZpdHkubG9jaVNlbGVjdHMuZGVzZWxlY3RBbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXNldCB0aGVtZSB0byBkZWZhdWx0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRQYXJhbXMgJiYgdGhpcy5zZWxlY3RlZFBhcmFtcy5ub25TZWxlY3RlZENvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlzdWFsLnJlc2V0KHsgdGhlbWU6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBvdmVycGFpbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgKDAsIHN0cnVjdHVyZV9vdmVycGFpbnRfMS5jbGVhclN0cnVjdHVyZU92ZXJwYWludCkodGhpcy5wbHVnaW4sIHRoaXMucGx1Z2luLm1hbmFnZXJzLnN0cnVjdHVyZS5oaWVyYXJjaHkuY3VycmVudC5zdHJ1Y3R1cmVzW3N0cnVjdEluZGV4XS5jb21wb25lbnRzKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIG92ZXJwYWludHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodGhpcy5zZWxlY3RlZFBhcmFtcyAmJiB0aGlzLnNlbGVjdGVkUGFyYW1zLmFkZGVkUmVwcikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDE3XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxSZXByQ2VsbHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKF9pID0gMCwgX2EgPSB0aGlzLnBsdWdpbi5tYW5hZ2Vycy5zdHJ1Y3R1cmUuaGllcmFyY2h5LmN1cnJlbnQuc3RydWN0dXJlc1tzdHJ1Y3RJbmRleF0uY29tcG9uZW50czsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMuY2VsbCAmJiBjLmNlbGwucGFyYW1zICYmIGMuY2VsbC5wYXJhbXMudmFsdWVzICYmIGMuY2VsbC5wYXJhbXMudmFsdWVzLmxhYmVsID09PSAnc2VsZWN0aW9uLWJ5LXNjcmlwdCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxSZXByQ2VsbHMucHVzaChjLmNlbGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShzZWxSZXByQ2VsbHMubGVuZ3RoID4gMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDE3XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZi5sYWJlbCA9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2YudHJ5cy5wdXNoKFsyLCAxMCwgMTEsIDE2XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSB0cnVlLCBzZWxSZXByQ2VsbHNfMSA9IHRzbGliXzEuX19hc3luY1ZhbHVlcyhzZWxSZXByQ2VsbHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9mLmxhYmVsID0gMztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgc2VsUmVwckNlbGxzXzEubmV4dCgpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShzZWxSZXByQ2VsbHNfMV8xID0gX2Yuc2VudCgpLCBfYyA9IHNlbFJlcHJDZWxsc18xXzEuZG9uZSwgIV9jKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2UgPSBzZWxSZXByQ2VsbHNfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2YubGFiZWwgPSA1O1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9mLnRyeXMucHVzaChbNSwgLCA3LCA4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsUmVwckNlbGwgPSBfZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBjb21tYW5kc18xLlBsdWdpbkNvbW1hbmRzLlN0YXRlLlJlbW92ZU9iamVjdCh0aGlzLnBsdWdpbiwgeyBzdGF0ZTogc2VsUmVwckNlbGwucGFyZW50LCByZWY6IHNlbFJlcHJDZWxsLnRyYW5zZm9ybS5yZWYgfSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9mLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3IC8qZW5kZmluYWxseSovXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIFszIC8qYnJlYWsqLywgM107XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDk6IHJldHVybiBbMyAvKmJyZWFrKi8sIDE2XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZV80XzEgPSBfZi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZV80ID0geyBlcnJvcjogZV80XzEgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAxNl07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9mLnRyeXMucHVzaChbMTEsICwgMTQsIDE1XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoIV9iICYmICFfYyAmJiAoX2QgPSBzZWxSZXByQ2VsbHNfMS5yZXR1cm4pKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMTNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIF9kLmNhbGwoc2VsUmVwckNlbGxzXzEpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Yuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9mLmxhYmVsID0gMTM7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEzOiByZXR1cm4gWzMgLypicmVhayovLCAxNV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlXzQpIHRocm93IGVfNC5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNTogcmV0dXJuIFs3IC8qZW5kZmluYWxseSovXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9mLmxhYmVsID0gMTc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRQYXJhbXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTsgfSxcbiAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKG9wdGlvbnMsIGZ1bGxMb2FkKSB7IHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW0sIHBhcmFtLCBzZXR0aW5ncywgZGF0YVNvdXJjZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHBhcmFtIGluIHRoaXMuaW5pdFBhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnNbcGFyYW1dKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdFBhcmFtc1twYXJhbV0gPSBvcHRpb25zW3BhcmFtXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluaXRQYXJhbXMgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBzcGVjXzEuRGVmYXVsdFBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAocGFyYW0gaW4gc3BlY18xLkRlZmF1bHRQYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc1twYXJhbV0gIT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdFBhcmFtc1twYXJhbV0gPSBvcHRpb25zW3BhcmFtXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaW5pdFBhcmFtcy5tb2xlY3VsZUlkICYmICF0aGlzLmluaXRQYXJhbXMuY3VzdG9tRGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWxzZV07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmluaXRQYXJhbXMuY3VzdG9tRGF0YSAmJiB0aGlzLmluaXRQYXJhbXMuY3VzdG9tRGF0YS51cmwgJiYgIXRoaXMuaW5pdFBhcmFtcy5jdXN0b21EYXRhLmZvcm1hdClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWxzZV07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmN1c3RvbVN0YXRlLmluaXRQYXJhbXMgPSB0aGlzLmluaXRQYXJhbXM7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCBiYWNrZ3JvdW5kIGNvbG91clxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbml0UGFyYW1zLmJnQ29sb3IgfHwgdGhpcy5pbml0UGFyYW1zLmxpZ2h0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5pdFBhcmFtcy5iZ0NvbG9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLmNvbG9yID0gdGhpcy5pbml0UGFyYW1zLmJnQ29sb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbml0UGFyYW1zLmxpZ2h0aW5nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLmxpZ2h0aW5nID0gdGhpcy5pbml0UGFyYW1zLmxpZ2h0aW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXMuYXBwbHlTZXR0aW5ncyhzZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGF0YVNvdXJjZSA9IHRoaXMuZ2V0TW9sZWN1bGVTcmNVcmwoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZCh7IHVybDogZGF0YVNvdXJjZS51cmwsIGZvcm1hdDogZGF0YVNvdXJjZS5mb3JtYXQsIGFzc2VtYmx5SWQ6IHRoaXMuaW5pdFBhcmFtcy5hc3NlbWJseUlkLCBpc0JpbmFyeTogZGF0YVNvdXJjZS5pc0JpbmFyeSB9LCBmdWxsTG9hZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7IH0sXG4gICAgICAgICAgICB2aXNpYmlsaXR5OiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmICghZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHZhciByZWZNYXAgPSB7XG4gICAgICAgICAgICAgICAgICAgIHBvbHltZXI6ICdzdHJ1Y3R1cmUtY29tcG9uZW50LXN0YXRpYy1wb2x5bWVyJyxcbiAgICAgICAgICAgICAgICAgICAgaGV0OiAnc3RydWN0dXJlLWNvbXBvbmVudC1zdGF0aWMtbGlnYW5kJyxcbiAgICAgICAgICAgICAgICAgICAgd2F0ZXI6ICdzdHJ1Y3R1cmUtY29tcG9uZW50LXN0YXRpYy13YXRlcicsXG4gICAgICAgICAgICAgICAgICAgIGNhcmJzOiAnc3RydWN0dXJlLWNvbXBvbmVudC1zdGF0aWMtYnJhbmNoZWQnLFxuICAgICAgICAgICAgICAgICAgICBtYXBzOiAndm9sdW1lLXN0cmVhbWluZy1pbmZvJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdmlzdWFsIGluIGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhZ05hbWUgPSByZWZNYXBbdmlzdWFsXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbXBvbmVudFJlZiA9IG1vbF9zdGF0ZV8yLlN0YXRlU2VsZWN0aW9uLmZpbmRUYWdJblN1YnRyZWUoX3RoaXMucGx1Z2luLnN0YXRlLmRhdGEudHJlZSwgbW9sX3N0YXRlXzEuU3RhdGVUcmFuc2Zvcm0uUm9vdFJlZiwgdGFnTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21wb25lbnRSZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb21wVmlzdWFsID0gX3RoaXMucGx1Z2luLnN0YXRlLmRhdGEuc2VsZWN0KGNvbXBvbmVudFJlZilbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29tcFZpc3VhbCAmJiBjb21wVmlzdWFsLm9iaikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50bHlWaXNpYmxlID0gKGNvbXBWaXN1YWwuc3RhdGUgJiYgY29tcFZpc3VhbC5zdGF0ZS5pc0hpZGRlbikgPyBmYWxzZSA6IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFbdmlzdWFsXSAhPT0gY3VycmVudGx5VmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kc18xLlBsdWdpbkNvbW1hbmRzLlN0YXRlLlRvZ2dsZVZpc2liaWxpdHkoX3RoaXMucGx1Z2luLCB7IHN0YXRlOiBfdGhpcy5zdGF0ZSwgcmVmOiBjb21wb25lbnRSZWYgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvZ2dsZVNwaW46IGZ1bmN0aW9uIChpc1NwaW5uaW5nLCByZXNldENhbWVyYSkge1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMucGx1Z2luLmNhbnZhczNkKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgdmFyIHRyYWNrYmFsbCA9IF90aGlzLnBsdWdpbi5jYW52YXMzZC5wcm9wcy50cmFja2JhbGw7XG4gICAgICAgICAgICAgICAgdmFyIHRvZ2dsZVNwaW5QYXJhbSA9IHRyYWNrYmFsbC5hbmltYXRlLm5hbWUgPT09ICdzcGluJyA/IHsgbmFtZTogJ29mZicsIHBhcmFtczoge30gfSA6IHsgbmFtZTogJ3NwaW4nLCBwYXJhbXM6IHsgc3BlZWQ6IDEgfSB9O1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaXNTcGlubmluZyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlU3BpblBhcmFtID0geyBuYW1lOiAnb2ZmJywgcGFyYW1zOiB7fSB9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTcGlubmluZylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZVNwaW5QYXJhbSA9IHsgbmFtZTogJ3NwaW4nLCBwYXJhbXM6IHsgc3BlZWQ6IDEgfSB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb21tYW5kc18xLlBsdWdpbkNvbW1hbmRzLkNhbnZhczNELlNldFNldHRpbmdzKF90aGlzLnBsdWdpbiwgeyBzZXR0aW5nczogeyB0cmFja2JhbGw6IHRzbGliXzEuX19hc3NpZ24odHNsaWJfMS5fX2Fzc2lnbih7fSwgdHJhY2tiYWxsKSwgeyBhbmltYXRlOiB0b2dnbGVTcGluUGFyYW0gfSkgfSB9KTtcbiAgICAgICAgICAgICAgICBpZiAocmVzZXRDYW1lcmEpXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmRzXzEuUGx1Z2luQ29tbWFuZHMuQ2FtZXJhLlJlc2V0KF90aGlzLnBsdWdpbiwge30pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZvY3VzOiBmdW5jdGlvbiAocGFyYW1zLCBzdHJ1Y3R1cmVOdW1iZXIpIHsgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBsb2NpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICBsb2NpID0gdGhpcy5nZXRMb2NpRm9yUGFyYW1zKHBhcmFtcywgc3RydWN0dXJlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4ubWFuYWdlcnMuY2FtZXJhLmZvY3VzTG9jaShsb2NpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7IH0sXG4gICAgICAgICAgICBzZXRDb2xvcjogZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5wbHVnaW4uY2FudmFzM2QpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB2YXIgcmVuZGVyZXIgPSBfdGhpcy5wbHVnaW4uY2FudmFzM2QucHJvcHMucmVuZGVyZXI7XG4gICAgICAgICAgICAgICAgdmFyIHJQYXJhbSA9IHt9O1xuICAgICAgICAgICAgICAgIGlmIChwYXJhbS5oaWdobGlnaHQpXG4gICAgICAgICAgICAgICAgICAgIHJQYXJhbVsnaGlnaGxpZ2h0Q29sb3InXSA9IF90aGlzLm5vcm1hbGl6ZUNvbG9yKHBhcmFtLmhpZ2hsaWdodCk7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtLnNlbGVjdClcbiAgICAgICAgICAgICAgICAgICAgclBhcmFtWydzZWxlY3RDb2xvciddID0gX3RoaXMubm9ybWFsaXplQ29sb3IocGFyYW0uc2VsZWN0KTtcbiAgICAgICAgICAgICAgICBjb21tYW5kc18xLlBsdWdpbkNvbW1hbmRzLkNhbnZhczNELlNldFNldHRpbmdzKF90aGlzLnBsdWdpbiwgeyBzZXR0aW5nczogeyByZW5kZXJlcjogdHNsaWJfMS5fX2Fzc2lnbih0c2xpYl8xLl9fYXNzaWduKHt9LCByZW5kZXJlciksIHJQYXJhbSkgfSB9KTtcbiAgICAgICAgICAgICAgICBpZiAoclBhcmFtLmhpZ2hsaWdodENvbG9yKVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5pc0hpZ2hsaWdodENvbG9yVXBkYXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uIChwYXJhbXMpIHsgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0VGhlbWVfMSwgY29tcG9uZW50R3JvdXBzLCByZW5kZXJlciwgclBhcmFtO1xuICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcmFtcy5jYW1lcmEpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGNvbW1hbmRzXzEuUGx1Z2luQ29tbWFuZHMuQ2FtZXJhLlJlc2V0KHRoaXMucGx1Z2luLCB7IGR1cmF0aW9uTXM6IDI1MCB9KV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zLnRoZW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRUaGVtZV8xID0geyBjb2xvcjogdGhpcy5pbml0UGFyYW1zLmFscGhhZm9sZFZpZXcgPyAncGxkZHQtY29uZmlkZW5jZScgOiAnZGVmYXVsdCcgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50R3JvdXBzID0gdGhpcy5wbHVnaW4ubWFuYWdlcnMuc3RydWN0dXJlLmhpZXJhcmNoeS5jdXJyZW50Q29tcG9uZW50R3JvdXBzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRHcm91cHMuZm9yRWFjaChmdW5jdGlvbiAoY29tcEdycCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucGx1Z2luLm1hbmFnZXJzLnN0cnVjdHVyZS5jb21wb25lbnQudXBkYXRlUmVwcmVzZW50YXRpb25zVGhlbWUoY29tcEdycCwgZGVmYXVsdFRoZW1lXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5oaWdobGlnaHRDb2xvciB8fCBwYXJhbXMuc2VsZWN0Q29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnBsdWdpbi5jYW52YXMzZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIgPSB0aGlzLnBsdWdpbi5jYW52YXMzZC5wcm9wcy5yZW5kZXJlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgclBhcmFtID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuaGlnaGxpZ2h0Q29sb3IpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByUGFyYW1bJ2hpZ2hsaWdodENvbG9yJ10gPSB0aGlzLmRlZmF1bHRSZW5kZXJlclByb3BzLmhpZ2hsaWdodENvbG9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zLnNlbGVjdENvbG9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgclBhcmFtWydzZWxlY3RDb2xvciddID0gdGhpcy5kZWZhdWx0UmVuZGVyZXJQcm9wcy5zZWxlY3RDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZHNfMS5QbHVnaW5Db21tYW5kcy5DYW52YXMzRC5TZXRTZXR0aW5ncyh0aGlzLnBsdWdpbiwgeyBzZXR0aW5nczogeyByZW5kZXJlcjogdHNsaWJfMS5fX2Fzc2lnbih0c2xpYl8xLl9fYXNzaWduKHt9LCByZW5kZXJlciksIHJQYXJhbSkgfSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJQYXJhbS5oaWdobGlnaHRDb2xvcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNIaWdobGlnaHRDb2xvclVwZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTsgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBQREJlTW9sc3RhclBsdWdpbi5wcm90b3R5cGUudmlzdWFsMSA9IGZ1bmN0aW9uIChfc3R5bGUsIHBhcnRpYWwpIHtcbiAgICAgICAgLy9jb25zdCBzdHJ1Y3R1cmUgPSB0aGlzLmdldE9iajxQbHVnaW5TdGF0ZU9iamVjdC5Nb2xlY3VsZS5TdHJ1Y3R1cmU+KFN0YXRlRWxlbWVudHMuQXNzZW1ibHkpO1xuICAgICAgICB2YXIgc3RydWN0dXJlID0gdGhpcy5nZXRPYmoodGhpcy5hc3NlbWJseVJlZik7XG4gICAgICAgIGlmICghc3RydWN0dXJlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgc3R5bGUgPSBfc3R5bGUgfHwge307XG4gICAgICAgIHZhciB1cGRhdGUgPSB0aGlzLnN0YXRlLmJ1aWxkKCk7XG4gICAgICAgIGlmICghcGFydGlhbCB8fCAocGFydGlhbCAmJiBzdHlsZS5zZXF1ZW5jZSkpIHtcbiAgICAgICAgICAgIHZhciByb290ID0gdXBkYXRlLnRvKGhlbHBlcnNfMi5TdGF0ZUVsZW1lbnRzLlNlcXVlbmNlKTtcbiAgICAgICAgICAgIGlmIChzdHlsZS5zZXF1ZW5jZSAmJiBzdHlsZS5zZXF1ZW5jZS5oaWRlKSB7XG4gICAgICAgICAgICAgICAgcm9vdC5kZWxldGUoaGVscGVyc18yLlN0YXRlRWxlbWVudHMuU2VxdWVuY2VWaXN1YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcm9vdC5hcHBseU9yVXBkYXRlKGhlbHBlcnNfMi5TdGF0ZUVsZW1lbnRzLlNlcXVlbmNlVmlzdWFsLCB0cmFuc2Zvcm1zXzEuU3RhdGVUcmFuc2Zvcm1zLlJlcHJlc2VudGF0aW9uLlN0cnVjdHVyZVJlcHJlc2VudGF0aW9uM0QsICgwLCBzdHJ1Y3R1cmVfcmVwcmVzZW50YXRpb25fcGFyYW1zXzEuY3JlYXRlU3RydWN0dXJlUmVwcmVzZW50YXRpb25QYXJhbXMpKHRoaXMucGx1Z2luLCBzdHJ1Y3R1cmUsIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogKHN0eWxlLnNlcXVlbmNlICYmIHN0eWxlLnNlcXVlbmNlLmtpbmQpIHx8ICdjYXJ0b29uJyxcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IChzdHlsZS5zZXF1ZW5jZSAmJiBzdHlsZS5zZXF1ZW5jZS5jb2xvcmluZykgfHwgJ3VuaXQtaW5kZXgnXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghcGFydGlhbCB8fCAocGFydGlhbCAmJiBzdHlsZS5oZXRHcm91cHMpKSB7XG4gICAgICAgICAgICB2YXIgcm9vdCA9IHVwZGF0ZS50byhoZWxwZXJzXzIuU3RhdGVFbGVtZW50cy5IZXQpO1xuICAgICAgICAgICAgaWYgKHN0eWxlLmhldEdyb3VwcyAmJiBzdHlsZS5oZXRHcm91cHMuaGlkZSkge1xuICAgICAgICAgICAgICAgIHJvb3QuZGVsZXRlKGhlbHBlcnNfMi5TdGF0ZUVsZW1lbnRzLkhldFZpc3VhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoc3R5bGUuaGV0R3JvdXBzICYmIHN0eWxlLmhldEdyb3Vwcy5oaWRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvb3QuZGVsZXRlKGhlbHBlcnNfMi5TdGF0ZUVsZW1lbnRzLkhldFZpc3VhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByb290LmFwcGx5T3JVcGRhdGUoaGVscGVyc18yLlN0YXRlRWxlbWVudHMuSGV0VmlzdWFsLCB0cmFuc2Zvcm1zXzEuU3RhdGVUcmFuc2Zvcm1zLlJlcHJlc2VudGF0aW9uLlN0cnVjdHVyZVJlcHJlc2VudGF0aW9uM0QsICgwLCBzdHJ1Y3R1cmVfcmVwcmVzZW50YXRpb25fcGFyYW1zXzEuY3JlYXRlU3RydWN0dXJlUmVwcmVzZW50YXRpb25QYXJhbXMpKHRoaXMucGx1Z2luLCBzdHJ1Y3R1cmUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IChzdHlsZS5oZXRHcm91cHMgJiYgc3R5bGUuaGV0R3JvdXBzLmtpbmQpIHx8ICdiYWxsLWFuZC1zdGljaycsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogc3R5bGUuaGV0R3JvdXBzICYmIHN0eWxlLmhldEdyb3Vwcy5jb2xvcmluZ1xuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghcGFydGlhbCB8fCAocGFydGlhbCAmJiBzdHlsZS5zbmZnM2QpKSB7XG4gICAgICAgICAgICB2YXIgcm9vdCA9IHVwZGF0ZS50byhoZWxwZXJzXzIuU3RhdGVFbGVtZW50cy5IZXQpO1xuICAgICAgICAgICAgaWYgKHN0eWxlLmhldEdyb3VwcyAmJiBzdHlsZS5oZXRHcm91cHMuaGlkZSkge1xuICAgICAgICAgICAgICAgIHJvb3QuZGVsZXRlKGhlbHBlcnNfMi5TdGF0ZUVsZW1lbnRzLkhldFZpc3VhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoc3R5bGUuc25mZzNkICYmIHN0eWxlLnNuZmczZC5oaWRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvb3QuZGVsZXRlKGhlbHBlcnNfMi5TdGF0ZUVsZW1lbnRzLkhldDNEU05GRyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByb290LmFwcGx5T3JVcGRhdGUoaGVscGVyc18yLlN0YXRlRWxlbWVudHMuSGV0M0RTTkZHLCB0cmFuc2Zvcm1zXzEuU3RhdGVUcmFuc2Zvcm1zLlJlcHJlc2VudGF0aW9uLlN0cnVjdHVyZVJlcHJlc2VudGF0aW9uM0QsICgwLCBzdHJ1Y3R1cmVfcmVwcmVzZW50YXRpb25fcGFyYW1zXzEuY3JlYXRlU3RydWN0dXJlUmVwcmVzZW50YXRpb25QYXJhbXMpKHRoaXMucGx1Z2luLCBzdHJ1Y3R1cmUsIHsgdHlwZTogJ2NhcmJvaHlkcmF0ZScgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXBhcnRpYWwgfHwgKHBhcnRpYWwgJiYgc3R5bGUud2F0ZXIpKSB7XG4gICAgICAgICAgICB2YXIgcm9vdCA9IHVwZGF0ZS50byhoZWxwZXJzXzIuU3RhdGVFbGVtZW50cy5XYXRlcik7XG4gICAgICAgICAgICBpZiAoc3R5bGUud2F0ZXIgJiYgc3R5bGUud2F0ZXIuaGlkZSkge1xuICAgICAgICAgICAgICAgIHJvb3QuZGVsZXRlKGhlbHBlcnNfMi5TdGF0ZUVsZW1lbnRzLldhdGVyVmlzdWFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJvb3QuYXBwbHlPclVwZGF0ZShoZWxwZXJzXzIuU3RhdGVFbGVtZW50cy5XYXRlclZpc3VhbCwgdHJhbnNmb3Jtc18xLlN0YXRlVHJhbnNmb3Jtcy5SZXByZXNlbnRhdGlvbi5TdHJ1Y3R1cmVSZXByZXNlbnRhdGlvbjNELCAoMCwgc3RydWN0dXJlX3JlcHJlc2VudGF0aW9uX3BhcmFtc18xLmNyZWF0ZVN0cnVjdHVyZVJlcHJlc2VudGF0aW9uUGFyYW1zKSh0aGlzLnBsdWdpbiwgc3RydWN0dXJlLCB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IChzdHlsZS53YXRlciAmJiBzdHlsZS53YXRlci5raW5kKSB8fCAnYmFsbC1hbmQtc3RpY2snLFxuICAgICAgICAgICAgICAgICAgICB0eXBlUGFyYW1zOiB7IGFscGhhOiAwLjUxIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBzdHlsZS53YXRlciAmJiBzdHlsZS53YXRlci5jb2xvcmluZ1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXBkYXRlO1xuICAgIH07XG4gICAgUERCZU1vbHN0YXJQbHVnaW4ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBwYXJhbSwgZGVmYXVsdFBEQmVTcGVjLCBwZGJlUGx1Z2luU3BlYywgX2IsIHNldHRpbmdzLCBkYXRhU291cmNlO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbml0UGFyYW1zID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgc3BlY18xLkRlZmF1bHRQYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChwYXJhbSBpbiBzcGVjXzEuRGVmYXVsdFBhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc1twYXJhbV0gIT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluaXRQYXJhbXNbcGFyYW1dID0gb3B0aW9uc1twYXJhbV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaW5pdFBhcmFtcy5tb2xlY3VsZUlkICYmICF0aGlzLmluaXRQYXJhbXMuY3VzdG9tRGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZmFsc2VdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5pdFBhcmFtcy5jdXN0b21EYXRhICYmIHRoaXMuaW5pdFBhcmFtcy5jdXN0b21EYXRhLnVybCAmJiAhdGhpcy5pbml0UGFyYW1zLmN1c3RvbURhdGEuZm9ybWF0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmYWxzZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UERCZVNwZWMgPSAoMCwgc3BlY18xLkRlZmF1bHRQbHVnaW5VSVNwZWMpKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZGJlUGx1Z2luU3BlYyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25zOiB0c2xpYl8xLl9fc3ByZWFkQXJyYXkoW10sIGRlZmF1bHRQREJlU3BlYy5hY3Rpb25zIHx8IFtdLCB0cnVlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWhhdmlvcnM6IHRzbGliXzEuX19zcHJlYWRBcnJheShbXSwgZGVmYXVsdFBEQmVTcGVjLmJlaGF2aW9ycywgdHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uczogdHNsaWJfMS5fX3NwcmVhZEFycmF5KFtdLCBkZWZhdWx0UERCZVNwZWMuYW5pbWF0aW9ucyB8fCBbXSwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tUGFyYW1FZGl0b3JzOiBkZWZhdWx0UERCZVNwZWMuY3VzdG9tUGFyYW1FZGl0b3JzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzogZGVmYXVsdFBEQmVTcGVjLmNvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pbml0UGFyYW1zLmxpZ2FuZFZpZXcgJiYgIXRoaXMuaW5pdFBhcmFtcy5zdXBlcnBvc2l0aW9uICYmIHRoaXMuaW5pdFBhcmFtcy5zZWxlY3RJbnRlcmFjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBkYmVQbHVnaW5TcGVjLmJlaGF2aW9ycy5wdXNoKHNwZWNfMi5QbHVnaW5TcGVjLkJlaGF2aW9yKHN0cnVjdHVyZV9mb2N1c19yZXByZXNlbnRhdGlvbl8xLlN0cnVjdHVyZUZvY3VzUmVwcmVzZW50YXRpb24pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmluaXRQYXJhbXMuc3VwZXJwb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBkYmVQbHVnaW5TcGVjLmJlaGF2aW9ycy5wdXNoKHNwZWNfMi5QbHVnaW5TcGVjLkJlaGF2aW9yKHN1cGVycG9zaXRpb25fZm9jdXNfcmVwcmVzZW50YXRpb25fMS5TdXBlcnBvc2l0aW9uRm9jdXNSZXByZXNlbnRhdGlvbiksIHNwZWNfMi5QbHVnaW5TcGVjLkJlaGF2aW9yKGJlaGF2aW9yXzIuTUFRdWFsaXR5QXNzZXNzbWVudCwgeyBhdXRvQXR0YWNoOiB0cnVlLCBzaG93VG9vbHRpcDogdHJ1ZSB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgY3VzdG9tIHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmluaXRQYXJhbXMuZG9tYWluQW5ub3RhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBkYmVQbHVnaW5TcGVjLmJlaGF2aW9ycy5wdXNoKHNwZWNfMi5QbHVnaW5TcGVjLkJlaGF2aW9yKGJlaGF2aW9yXzEuUERCZURvbWFpbkFubm90YXRpb25zLCB7IGF1dG9BdHRhY2g6IHRydWUsIHNob3dUb29sdGlwOiBmYWxzZSB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbml0UGFyYW1zLnZhbGlkYXRpb25Bbm5vdGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGRiZVBsdWdpblNwZWMuYmVoYXZpb3JzLnB1c2goc3BlY18yLlBsdWdpblNwZWMuQmVoYXZpb3IocGRiZV8xLlBEQmVTdHJ1Y3R1cmVRdWFsaXR5UmVwb3J0LCB7IGF1dG9BdHRhY2g6IHRydWUsIHNob3dUb29sdGlwOiBmYWxzZSB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBwZGJlUGx1Z2luU3BlYy5sYXlvdXQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0V4cGFuZGVkOiB0aGlzLmluaXRQYXJhbXMubGFuZHNjYXBlID8gZmFsc2UgOiB0aGlzLmluaXRQYXJhbXMuZXhwYW5kZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDb250cm9sczogIXRoaXMuaW5pdFBhcmFtcy5oaWRlQ29udHJvbHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgcGRiZVBsdWdpblNwZWMuY29tcG9uZW50cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBwZGJlX2xlZnRfcGFuZWxfMS5MZWZ0UGFuZWxDb250cm9scyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmlnaHQ6IERlZmF1bHRTdHJ1Y3R1cmVUb29scyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbTogJ25vbmUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3cG9ydDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sczogcGRiZV92aWV3cG9ydF9jb250cm9sc18xLlBEQmVWaWV3cG9ydENvbnRyb2xzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3OiB0aGlzLmluaXRQYXJhbXMuc3VwZXJwb3NpdGlvbiA/IHN1cGVycG9zaXRpb25fdmlld3BvcnRfMS5TdXBlcnBvc3Rpb25WaWV3cG9ydCA6IHZvaWQgMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3RlU3RhdGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJ1Y3R1cmVUb29sczogdGhpcy5pbml0UGFyYW1zLnN1cGVycG9zaXRpb24gPyBwZGJlX3N0cnVjdHVyZV9jb250cm9sc18xLlBEQmVTdXBlcnBvc2l0aW9uU3RydWN0dXJlVG9vbHMgOiB0aGlzLmluaXRQYXJhbXMubGlnYW5kVmlldyA/IHBkYmVfc3RydWN0dXJlX2NvbnRyb2xzXzEuUERCZUxpZ2FuZFZpZXdTdHJ1Y3R1cmVUb29scyA6IHBkYmVfc3RydWN0dXJlX2NvbnRyb2xzXzEuUERCZVN0cnVjdHVyZVRvb2xzXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5pdFBhcmFtcy5hbHBoYWZvbGRWaWV3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGRiZVBsdWdpblNwZWMuYmVoYXZpb3JzLnB1c2goc3BlY18yLlBsdWdpblNwZWMuQmVoYXZpb3IoYmVoYXZpb3JfMi5NQVF1YWxpdHlBc3Nlc3NtZW50LCB7IGF1dG9BdHRhY2g6IHRydWUsIHNob3dUb29sdGlwOiB0cnVlIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZGJlUGx1Z2luU3BlYy5jb21wb25lbnRzLmNvbnRyb2xzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvcDogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3R0b206ICdub25lJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbml0UGFyYW1zLnNlcXVlbmNlUGFuZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKF9hID0gcGRiZVBsdWdpblNwZWMuY29tcG9uZW50cy5jb250cm9scykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRvcClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHBkYmVQbHVnaW5TcGVjLmNvbXBvbmVudHMuY29udHJvbHMudG9wO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcGRiZVBsdWdpblNwZWMuY29uZmlnID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnXzEuUGx1Z2luQ29uZmlnLlN0cnVjdHVyZS5EZWZhdWx0UmVwcmVzZW50YXRpb25QcmVzZXRQYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW1lOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsTmFtZTogKHRoaXMuaW5pdFBhcmFtcy5hbHBoYWZvbGRWaWV3KSA/ICdwbGRkdC1jb25maWRlbmNlJyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJib25Db2xvcjogeyBuYW1lOiAnZWxlbWVudC1zeW1ib2wnLCBwYXJhbXM6IHt9IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2VsZW1lbnQtc3ltYm9sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7IGNhcmJvbkNvbG9yOiB7IG5hbWU6ICdlbGVtZW50LXN5bWJvbCcsIHBhcmFtczoge30gfSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRfc3ltYm9sXzEuRWxlbWVudFN5bWJvbENvbG9yVGhlbWVQYXJhbXMuY2FyYm9uQ29sb3IuZGVmYXVsdFZhbHVlID0geyBuYW1lOiAnZWxlbWVudC1zeW1ib2wnLCBwYXJhbXM6IHt9IH07XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgYW5pbWF0aW9uIHByb3BzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaW5pdFBhcmFtcy5saWdhbmRWaWV3ICYmICF0aGlzLmluaXRQYXJhbXMuc3VwZXJwb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBkYmVQbHVnaW5TcGVjWydhbmltYXRpb25zJ10gPSBbbW9kZWxfaW5kZXhfMS5BbmltYXRlTW9kZWxJbmRleCwgY2FtZXJhX3NwaW5fMS5BbmltYXRlQ2FtZXJhU3BpbiwgY2FtZXJhX3JvY2tfMS5BbmltYXRlQ2FtZXJhUm9jaywgc3RhdGVfc25hcHNob3RzXzEuQW5pbWF0ZVN0YXRlU25hcHNob3RzLCBhc3NlbWJseV91bndpbmRfMS5BbmltYXRlQXNzZW1ibHlVbndpbmQsIHNwaW5fc3RydWN0dXJlXzEuQW5pbWF0ZVN0cnVjdHVyZVNwaW4sIHN0YXRlX2ludGVycG9sYXRpb25fMS5BbmltYXRlU3RhdGVJbnRlcnBvbGF0aW9uXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZGJlUGx1Z2luU3BlYy5iZWhhdmlvcnMucHVzaChzcGVjXzIuUGx1Z2luU3BlYy5CZWhhdmlvcihtcDRfZXhwb3J0XzEuTXA0RXhwb3J0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGRiZVBsdWdpblNwZWMuYmVoYXZpb3JzLnB1c2goc3BlY18yLlBsdWdpblNwZWMuQmVoYXZpb3IoZ2VvX2V4cG9ydF8xLkdlb21ldHJ5RXhwb3J0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbml0UGFyYW1zLmhpZGVDYW52YXNDb250cm9scykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmluaXRQYXJhbXMuaGlkZUNhbnZhc0NvbnRyb2xzLmluZGV4T2YoJ2V4cGFuZCcpID4gLTEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBkYmVQbHVnaW5TcGVjLmNvbmZpZy5wdXNoKFtjb25maWdfMS5QbHVnaW5Db25maWcuVmlld3BvcnQuU2hvd0V4cGFuZCwgZmFsc2VdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbml0UGFyYW1zLmhpZGVDYW52YXNDb250cm9scy5pbmRleE9mKCdzZWxlY3Rpb24nKSA+IC0xKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZGJlUGx1Z2luU3BlYy5jb25maWcucHVzaChbY29uZmlnXzEuUGx1Z2luQ29uZmlnLlZpZXdwb3J0LlNob3dTZWxlY3Rpb25Nb2RlLCBmYWxzZV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmluaXRQYXJhbXMuaGlkZUNhbnZhc0NvbnRyb2xzLmluZGV4T2YoJ2FuaW1hdGlvbicpID4gLTEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBkYmVQbHVnaW5TcGVjLmNvbmZpZy5wdXNoKFtjb25maWdfMS5QbHVnaW5Db25maWcuVmlld3BvcnQuU2hvd0FuaW1hdGlvbiwgZmFsc2VdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmluaXRQYXJhbXMubGFuZHNjYXBlICYmIHBkYmVQbHVnaW5TcGVjLmxheW91dCAmJiBwZGJlUGx1Z2luU3BlYy5sYXlvdXQuaW5pdGlhbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZGJlUGx1Z2luU3BlYy5sYXlvdXQuaW5pdGlhbFsnY29udHJvbHNEaXNwbGF5J10gPSAnbGFuZHNjYXBlJztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG92ZXJyaWRlIGRlZmF1bHQgZXZlbnQgYmluZGluZ3NcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmluaXRQYXJhbXMuc2VsZWN0QmluZGluZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZGJlUGx1Z2luU3BlYy5iZWhhdmlvcnMucHVzaChzcGVjXzIuUGx1Z2luU3BlYy5CZWhhdmlvcihyZXByZXNlbnRhdGlvbl8xLlNlbGVjdExvY2ksIHsgYmluZGluZ3M6IHRoaXMuaW5pdFBhcmFtcy5zZWxlY3RCaW5kaW5ncyB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbml0UGFyYW1zLmZvY3VzQmluZGluZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZGJlUGx1Z2luU3BlYy5iZWhhdmlvcnMucHVzaChzcGVjXzIuUGx1Z2luU3BlYy5CZWhhdmlvcihjYW1lcmFfMS5Gb2N1c0xvY2ksIHsgYmluZGluZ3M6IHRoaXMuaW5pdFBhcmFtcy5mb2N1c0JpbmRpbmdzIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0RWxlbWVudCA9IHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFyZ2V0KSA6IHRhcmdldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZS8gSW5pdGlhbGlzZSBQbHVnaW5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sICgwLCBzcGVjXzEuY3JlYXRlUGx1Z2luVUkpKHRoaXMudGFyZ2V0RWxlbWVudCwgcGRiZVBsdWdpblNwZWMpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlLyBJbml0aWFsaXNlIFBsdWdpblxuICAgICAgICAgICAgICAgICAgICAgICAgX2IucGx1Z2luID0gX2Muc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uY3VzdG9tU3RhdGUuaW5pdFBhcmFtcyA9IHRzbGliXzEuX19hc3NpZ24oe30sIHRoaXMuaW5pdFBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5jdXN0b21TdGF0ZS5ldmVudHMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudFVwZGF0ZTogdGhpcy5fZXYoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXBlcnBvc2l0aW9uSW5pdDogdGhpcy5fZXYoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0J1c3k6IHRoaXMuX2V2KClcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgYmFja2dyb3VuZCBjb2xvdXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmluaXRQYXJhbXMuYmdDb2xvciB8fCB0aGlzLmluaXRQYXJhbXMubGlnaHRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmluaXRQYXJhbXMuYmdDb2xvcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3MuY29sb3IgPSB0aGlzLmluaXRQYXJhbXMuYmdDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbml0UGFyYW1zLmxpZ2h0aW5nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5saWdodGluZyA9IHRoaXMuaW5pdFBhcmFtcy5saWdodGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy5hcHBseVNldHRpbmdzKHNldHRpbmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCBzZWxlY3Rpb24gZ3JhbnVsYXJpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmluaXRQYXJhbXMuZ3JhbnVsYXJpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5tYW5hZ2Vycy5pbnRlcmFjdGl2aXR5LnNldFByb3BzKHsgZ3JhbnVsYXJpdHk6IHRoaXMuaW5pdFBhcmFtcy5ncmFudWxhcml0eSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCBkZWZhdWx0IGhpZ2hsaWdodCBhbmQgc2VsZWN0aW9uIGNvbG9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5pdFBhcmFtcy5oaWdobGlnaHRDb2xvciB8fCB0aGlzLmluaXRQYXJhbXMuc2VsZWN0Q29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpc3VhbC5zZXRDb2xvcih7IGhpZ2hsaWdodDogdGhpcy5pbml0UGFyYW1zLmhpZ2hsaWdodENvbG9yLCBzZWxlY3Q6IHRoaXMuaW5pdFBhcmFtcy5zZWxlY3RDb2xvciB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnJlcHJlc2VudGF0aW9uLnN0cnVjdHVyZS50aGVtZXMuY29sb3JUaGVtZVJlZ2lzdHJ5LmFkZChhbm5vdGF0aW9uXzEuU2hhbm5vbkVudHJvcHkuY29sb3JUaGVtZVByb3ZpZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLm1hbmFnZXJzLmxvY2lMYWJlbHMuYWRkUHJvdmlkZXIoYW5ub3RhdGlvbl8xLlNoYW5ub25FbnRyb3B5LmxhYmVsUHJvdmlkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uY3VzdG9tTW9kZWxQcm9wZXJ0aWVzLnJlZ2lzdGVyKGFubm90YXRpb25fMS5TaGFubm9uRW50cm9weS5wcm9wZXJ0eVByb3ZpZGVyLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnJlcHJlc2VudGF0aW9uLnN0cnVjdHVyZS50aGVtZXMuY29sb3JUaGVtZVJlZ2lzdHJ5LmFkZChhbm5vdGF0aW9uXzIuVHdpbkNvbnNEYXRhLmNvbG9yVGhlbWVQcm92aWRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5tYW5hZ2Vycy5sb2NpTGFiZWxzLmFkZFByb3ZpZGVyKGFubm90YXRpb25fMi5Ud2luQ29uc0RhdGEubGFiZWxQcm92aWRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5jdXN0b21Nb2RlbFByb3BlcnRpZXMucmVnaXN0ZXIoYW5ub3RhdGlvbl8yLlR3aW5Db25zRGF0YS5wcm9wZXJ0eVByb3ZpZGVyLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhdmUgcmVuZGVyZXIgZGVmYXVsdHNcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdFJlbmRlcmVyUHJvcHMgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCB0aGlzLnBsdWdpbi5jYW52YXMzZC5wcm9wcy5yZW5kZXJlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbml0UGFyYW1zLnN1cGVycG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgbGVmdCBwYW5lbCB0YWJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5iZWhhdmlvcnMubGF5b3V0LmxlZnRQYW5lbFRhYk5hbWUubmV4dCgnc2VnbWVudHMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbml0aWFsaXNlIHN1cGVycG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgc3VwZXJwb3NpdGlvbl8xLmluaXRTdXBlcnBvc2l0aW9uKSh0aGlzLnBsdWdpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb2xsYXBzZSBsZWZ0IHBhbmVsIGFuZCBzZXQgbGVmdCBwYW5lbCB0YWIgdG8gbm9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmRzXzEuUGx1Z2luQ29tbWFuZHMuTGF5b3V0LlVwZGF0ZSh0aGlzLnBsdWdpbiwgeyBzdGF0ZTogeyByZWdpb25TdGF0ZTogdHNsaWJfMS5fX2Fzc2lnbih0c2xpYl8xLl9fYXNzaWduKHt9LCB0aGlzLnBsdWdpbi5sYXlvdXQuc3RhdGUucmVnaW9uU3RhdGUpLCB7IGxlZnQ6ICdjb2xsYXBzZWQnIH0pIH0gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uYmVoYXZpb3JzLmxheW91dC5sZWZ0UGFuZWxUYWJOYW1lLm5leHQoJ25vbmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhU291cmNlID0gdGhpcy5nZXRNb2xlY3VsZVNyY1VybCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhU291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZCh7IHVybDogZGF0YVNvdXJjZS51cmwsIGZvcm1hdDogZGF0YVNvdXJjZS5mb3JtYXQsIGFzc2VtYmx5SWQ6IHRoaXMuaW5pdFBhcmFtcy5hc3NlbWJseUlkLCBpc0JpbmFyeTogZGF0YVNvdXJjZS5pc0JpbmFyeSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmluZGluZyB0byBvdGhlciBQREIgQ29tcG9uZW50IGV2ZW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmluaXRQYXJhbXMuc3Vic2NyaWJlRXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBzdWJzY3JpYmVfZXZlbnRzXzEuc3Vic2NyaWJlVG9Db21wb25lbnRFdmVudHMpKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFdmVudCBoYW5kbGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbV9ldmVudHNfMS5DdXN0b21FdmVudHMuYWRkKHRoaXMucGx1Z2luLCB0aGlzLnRhcmdldEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFBEQmVNb2xzdGFyUGx1Z2luLnByb3RvdHlwZS5nZXRNb2xlY3VsZVNyY1VybCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN1cHBvcnRlZEZvcm1hdHMgPSBbJ21tY2lmJywgJ3BkYicsICdzZGYnXTtcbiAgICAgICAgdmFyIGlkID0gdGhpcy5pbml0UGFyYW1zLm1vbGVjdWxlSWQ7XG4gICAgICAgIGlmICghaWQgJiYgIXRoaXMuaW5pdFBhcmFtcy5jdXN0b21EYXRhKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNYW5kYXRvcnkgcGFyYW1ldGVycyBtaXNzaW5nIVwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcXVlcnkgPSAnZnVsbCc7XG4gICAgICAgIHZhciBzZXAgPSAnPyc7XG4gICAgICAgIGlmICh0aGlzLmluaXRQYXJhbXMubGlnYW5kVmlldykge1xuICAgICAgICAgICAgdmFyIHF1ZXJ5UGFyYW1zID0gWydkYXRhX3NvdXJjZT1wZGItaCddO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmluaXRQYXJhbXMubGlnYW5kVmlldy5sYWJlbF9jb21wX2lkX2xpc3QpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbml0UGFyYW1zLmxpZ2FuZFZpZXcubGFiZWxfY29tcF9pZCkge1xuICAgICAgICAgICAgICAgICAgICBxdWVyeVBhcmFtcy5wdXNoKCdsYWJlbF9jb21wX2lkPScgKyB0aGlzLmluaXRQYXJhbXMubGlnYW5kVmlldy5sYWJlbF9jb21wX2lkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5pbml0UGFyYW1zLmxpZ2FuZFZpZXcuYXV0aF9zZXFfaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlQYXJhbXMucHVzaCgnYXV0aF9zZXFfaWQ9JyArIHRoaXMuaW5pdFBhcmFtcy5saWdhbmRWaWV3LmF1dGhfc2VxX2lkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5pdFBhcmFtcy5saWdhbmRWaWV3LmF1dGhfYXN5bV9pZClcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlQYXJhbXMucHVzaCgnYXV0aF9hc3ltX2lkPScgKyB0aGlzLmluaXRQYXJhbXMubGlnYW5kVmlldy5hdXRoX2FzeW1faWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcXVlcnkgPSAncmVzaWR1ZVN1cnJvdW5kaW5ncz8nICsgcXVlcnlQYXJhbXMuam9pbignJicpO1xuICAgICAgICAgICAgc2VwID0gJyYnO1xuICAgICAgICB9XG4gICAgICAgIHZhciB1cmwgPSBcIlwiLmNvbmNhdCh0aGlzLmluaXRQYXJhbXMucGRiZVVybCwgXCJtb2RlbC1zZXJ2ZXIvdjEvXCIpLmNvbmNhdChpZCwgXCIvXCIpLmNvbmNhdChxdWVyeSkuY29uY2F0KHNlcCwgXCJlbmNvZGluZz1cIikuY29uY2F0KHRoaXMuaW5pdFBhcmFtcy5lbmNvZGluZykuY29uY2F0KHRoaXMuaW5pdFBhcmFtcy5sb3dQcmVjaXNpb25Db29yZHMgPyAnJmxvd1ByZWNpc2lvbkNvb3Jkcz0xJyA6ICcnKTtcbiAgICAgICAgdmFyIGlzQmluYXJ5ID0gdGhpcy5pbml0UGFyYW1zLmVuY29kaW5nID09PSAnYmNpZicgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIHZhciBmb3JtYXQgPSAnbW1jaWYnO1xuICAgICAgICBpZiAodGhpcy5pbml0UGFyYW1zLmN1c3RvbURhdGEpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5pbml0UGFyYW1zLmN1c3RvbURhdGEudXJsIHx8ICF0aGlzLmluaXRQYXJhbXMuY3VzdG9tRGF0YS5mb3JtYXQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQcm92aWRlIGFsbCBjdXN0b20gZGF0YSBwYXJhbWV0ZXJzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXJsID0gdGhpcy5pbml0UGFyYW1zLmN1c3RvbURhdGEudXJsO1xuICAgICAgICAgICAgZm9ybWF0ID0gdGhpcy5pbml0UGFyYW1zLmN1c3RvbURhdGEuZm9ybWF0O1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2NpZicgfHwgZm9ybWF0ID09PSAnYmNpZicpXG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gJ21tY2lmJztcbiAgICAgICAgICAgIC8vIFZhbGlkYXRlIHN1cHBvcnRlZCBmb3JtYXRcbiAgICAgICAgICAgIGlmIChzdXBwb3J0ZWRGb3JtYXRzLmluZGV4T2YoZm9ybWF0KSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcIi5jb25jYXQoZm9ybWF0LCBcIiBub3Qgc3VwcG9ydGVkLlwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpc0JpbmFyeSA9IHRoaXMuaW5pdFBhcmFtcy5jdXN0b21EYXRhLmJpbmFyeSA/IHRoaXMuaW5pdFBhcmFtcy5jdXN0b21EYXRhLmJpbmFyeSA6IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgIGZvcm1hdDogZm9ybWF0LFxuICAgICAgICAgICAgaXNCaW5hcnk6IGlzQmluYXJ5XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUERCZU1vbHN0YXJQbHVnaW4ucHJvdG90eXBlLCBcInN0YXRlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wbHVnaW4uc3RhdGUuZGF0YTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFBEQmVNb2xzdGFyUGx1Z2luLnByb3RvdHlwZS5jcmVhdGVMaWdhbmRTdHJ1Y3R1cmUgPSBmdW5jdGlvbiAoaXNCcmFuY2hlZCkge1xuICAgICAgICB2YXIgX2EsIGVfNSwgX2IsIF9jO1xuICAgICAgICB2YXIgX2Q7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9lLCBfZiwgX2csIGNvbXAsIGVfNV8xLCBzdHJ1Y3R1cmUsIGxpZ2FuZFF1ZXJ5LCBsaWdhbmRWaXMsIGxpZ2FuZFN1cnIsIGxpZ1JlZiwgY2VsbCwgbGlnTG9jaTtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2gpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9oLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFzc2VtYmx5UmVmID09PSAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgICAgICBfaC5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9oLnRyeXMucHVzaChbMSwgOSwgMTAsIDE1XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZSA9IHRydWUsIF9mID0gdHNsaWJfMS5fX2FzeW5jVmFsdWVzKHRoaXMucGx1Z2luLm1hbmFnZXJzLnN0cnVjdHVyZS5oaWVyYXJjaHkuY3VycmVudENvbXBvbmVudEdyb3Vwcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaC5sYWJlbCA9IDI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIFs0IC8qeWllbGQqLywgX2YubmV4dCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoX2cgPSBfaC5zZW50KCksIF9hID0gX2cuZG9uZSwgIV9hKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgOF07XG4gICAgICAgICAgICAgICAgICAgICAgICBfYyA9IF9nLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9oLmxhYmVsID0gNDtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgX2gudHJ5cy5wdXNoKFs0LCAsIDYsIDddKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXAgPSBfYztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGNvbW1hbmRzXzEuUGx1Z2luQ29tbWFuZHMuU3RhdGUuUmVtb3ZlT2JqZWN0KHRoaXMucGx1Z2luLCB7IHN0YXRlOiBjb21wWzBdLmNlbGwucGFyZW50LCByZWY6IGNvbXBbMF0uY2VsbC50cmFuc2Zvcm0ucmVmLCByZW1vdmVQYXJlbnRHaG9zdHM6IHRydWUgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICBfaC5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA3XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgX2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3IC8qZW5kZmluYWxseSovXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OiByZXR1cm4gWzMgLypicmVhayovLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzMgLypicmVhayovLCAxNV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGVfNV8xID0gX2guc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZV81ID0geyBlcnJvcjogZV81XzEgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDE1XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9oLnRyeXMucHVzaChbMTAsICwgMTMsIDE0XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISghX2UgJiYgIV9hICYmIChfYiA9IF9mLnJldHVybikpKSByZXR1cm4gWzMgLypicmVhayovLCAxMl07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBfYi5jYWxsKF9mKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfaC5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaC5sYWJlbCA9IDEyO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDEyOiByZXR1cm4gWzMgLypicmVhayovLCAxNF07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZV81KSB0aHJvdyBlXzUuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE0OiByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgICAgICAgICAgICAgICAgc3RydWN0dXJlID0gdGhpcy5zdGF0ZS5zZWxlY3QodGhpcy5hc3NlbWJseVJlZilbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNCcmFuY2hlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2FuZFF1ZXJ5ID0gaGVscGVyc18xLkxpZ2FuZFZpZXcuYnJhbmNoZWRRdWVyeSgoX2QgPSB0aGlzLmluaXRQYXJhbXMubGlnYW5kVmlldykgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmxhYmVsX2NvbXBfaWRfbGlzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWdhbmRRdWVyeSA9IGhlbHBlcnNfMS5MaWdhbmRWaWV3LnF1ZXJ5KHRoaXMuaW5pdFBhcmFtcy5saWdhbmRWaWV3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucGx1Z2luLmJ1aWxkZXJzLnN0cnVjdHVyZS50cnlDcmVhdGVDb21wb25lbnRGcm9tRXhwcmVzc2lvbihzdHJ1Y3R1cmUsIGxpZ2FuZFF1ZXJ5LmNvcmUsICdwaXZvdCcsIHsgbGFiZWw6ICdMaWdhbmQnIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2FuZFZpcyA9IF9oLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGlnYW5kVmlzKSByZXR1cm4gWzMgLypicmVhayovLCAxOF07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnBsdWdpbi5idWlsZGVycy5zdHJ1Y3R1cmUucmVwcmVzZW50YXRpb24uYWRkUmVwcmVzZW50YXRpb24obGlnYW5kVmlzLCB7IHR5cGU6ICdiYWxsLWFuZC1zdGljaycsIGNvbG9yOiAnZWxlbWVudC1zeW1ib2wnLCBjb2xvclBhcmFtczogeyBjYXJib25Db2xvcjogeyBuYW1lOiAnZWxlbWVudC1zeW1ib2wnLCBwYXJhbXM6IHt9IH0gfSwgc2l6ZTogJ3VuaWZvcm0nLCBzaXplUGFyYW1zOiB7IHZhbHVlOiAyLjUgfSB9LCB7IHRhZzogJ2xpZ2FuZC12aXMnIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9oLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9oLmxhYmVsID0gMTg7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTg6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucGx1Z2luLmJ1aWxkZXJzLnN0cnVjdHVyZS50cnlDcmVhdGVDb21wb25lbnRGcm9tRXhwcmVzc2lvbihzdHJ1Y3R1cmUsIGxpZ2FuZFF1ZXJ5LnN1cnJvdW5kaW5ncywgJ3Jlc3QnLCB7IGxhYmVsOiAnU3Vycm91bmRpbmdzJyB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTk6XG4gICAgICAgICAgICAgICAgICAgICAgICBsaWdhbmRTdXJyID0gX2guc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsaWdhbmRTdXJyKSByZXR1cm4gWzMgLypicmVhayovLCAyMV07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnBsdWdpbi5idWlsZGVycy5zdHJ1Y3R1cmUucmVwcmVzZW50YXRpb24uYWRkUmVwcmVzZW50YXRpb24obGlnYW5kU3VyciwgeyB0eXBlOiAnYmFsbC1hbmQtc3RpY2snLCBjb2xvcjogJ2VsZW1lbnQtc3ltYm9sJywgY29sb3JQYXJhbXM6IHsgY2FyYm9uQ29sb3I6IHsgbmFtZTogJ2VsZW1lbnQtc3ltYm9sJywgcGFyYW1zOiB7fSB9IH0sIHNpemU6ICd1bmlmb3JtJywgc2l6ZVBhcmFtczogeyB2YWx1ZTogMC44IH0gfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDIwOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2guc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2gubGFiZWwgPSAyMTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpZ1JlZiA9IG1vbF9zdGF0ZV8yLlN0YXRlU2VsZWN0aW9uLmZpbmRUYWdJblN1YnRyZWUodGhpcy5wbHVnaW4uc3RhdGUuZGF0YS50cmVlLCBtb2xfc3RhdGVfMS5TdGF0ZVRyYW5zZm9ybS5Sb290UmVmLCAnbGlnYW5kLXZpcycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsaWdSZWYpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbCA9IHRoaXMucGx1Z2luLnN0YXRlLmRhdGEuY2VsbHMuZ2V0KGxpZ1JlZik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2VsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpZ0xvY2kgPSBjZWxsLm9iai5kYXRhLnJlcHIuZ2V0TG9jaSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLm1hbmFnZXJzLnN0cnVjdHVyZS5mb2N1cy5zZXRGcm9tTG9jaShsaWdMb2NpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb2N1cy1hZGQgaXMgbm90IGhhbmRsZWQgaW4gY2FtZXJhIGJlaGF2aW9yLCBkb2luZyBpdCBoZXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gKF9hID0gX3RoaXMucGx1Z2luLm1hbmFnZXJzLnN0cnVjdHVyZS5mb2N1cy5jdXJyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubG9jaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wbHVnaW4ubWFuYWdlcnMuY2FtZXJhLmZvY3VzTG9jaShjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8vcHJpdmF0ZSBsb2FkZWRQYXJhbXM6IExvYWRQYXJhbXMgPSB7IHVybDogJycsIGZvcm1hdDogJ21tY2lmJywgaXNCaW5hcnk6IGZhbHNlLCBhc3NlbWJseUlkOiAnJyB9O1xuICAgIFBEQmVNb2xzdGFyUGx1Z2luLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKF9hLCBmdWxsTG9hZCkge1xuICAgICAgICB2YXIgdXJsID0gX2EudXJsLCBfYiA9IF9hLmZvcm1hdCwgZm9ybWF0ID0gX2IgPT09IHZvaWQgMCA/ICdtbWNpZicgOiBfYiwgX2MgPSBfYS5pc0JpbmFyeSwgaXNCaW5hcnkgPSBfYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYywgX2QgPSBfYS5hc3NlbWJseUlkLCBhc3NlbWJseUlkID0gX2QgPT09IHZvaWQgMCA/ICcnIDogX2QsIHJlcHJlc2VudGF0aW9uU3R5bGUgPSBfYS5yZXByZXNlbnRhdGlvblN0eWxlO1xuICAgICAgICBpZiAoZnVsbExvYWQgPT09IHZvaWQgMCkgeyBmdWxsTG9hZCA9IHRydWU7IH1cbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaXNIZXRWaWV3LCBkb3dubG9hZE9wdGlvbnMsIGlzQnJhbmNoZWRWaWV3LCBkYXRhLCB0cmFqZWN0b3J5LCBtb2RlbCwgcGl2b3RJbmRleCwgcGl2b3QsIGFzbSwgZGVmYXVsdE1hcFBhcmFtcywgcGRiZU1hcFBhcmFtcywgbG9hZFR5cGUsIHN0YXRlLCBtb2RlbFRyZWUsIGluZm8sIGFzbUlkLCBzdHJ1Y3R1cmVUcmVlLCB0cmVlLCBpbmZvLCBhc21JZCwgcHJvcHNfMTtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfZSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2UubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZ1bGxMb2FkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzSGV0VmlldyA9IHRoaXMuaW5pdFBhcmFtcy5saWdhbmRWaWV3ID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRPcHRpb25zID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNCcmFuY2hlZFZpZXcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmluaXRQYXJhbXMubGlnYW5kVmlldyAmJiB0aGlzLmluaXRQYXJhbXMubGlnYW5kVmlldy5sYWJlbF9jb21wX2lkX2xpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0JyYW5jaGVkVmlldyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRPcHRpb25zID0geyBib2R5OiBKU09OLnN0cmluZ2lmeSh0aGlzLmluaXRQYXJhbXMubGlnYW5kVmlldy5sYWJlbF9jb21wX2lkX2xpc3QpLCBoZWFkZXJzOiBbWydDb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24vanNvbiddXSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5wbHVnaW4uYnVpbGRlcnMuZGF0YS5kb3dubG9hZCh7IHVybDogYXNzZXRzXzEuQXNzZXQuVXJsKHVybCwgZG93bmxvYWRPcHRpb25zKSwgaXNCaW5hcnk6IGlzQmluYXJ5IH0sIHsgc3RhdGU6IHsgaXNHaG9zdDogdHJ1ZSB9IH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IF9lLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucGx1Z2luLmJ1aWxkZXJzLnN0cnVjdHVyZS5wYXJzZVRyYWplY3RvcnkoZGF0YSwgZm9ybWF0KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWplY3RvcnkgPSBfZS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISFpc0hldFZpZXcpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5wbHVnaW4uYnVpbGRlcnMuc3RydWN0dXJlLmhpZXJhcmNoeS5hcHBseVByZXNldCh0cmFqZWN0b3J5LCB0aGlzLmluaXRQYXJhbXMuZGVmYXVsdFByZXNldCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJ1Y3R1cmU6IGFzc2VtYmx5SWQgPyAoYXNzZW1ibHlJZCA9PT0gJ3ByZWZlcnJlZCcpID8gdm9pZCAwIDogeyBuYW1lOiAnYXNzZW1ibHknLCBwYXJhbXM6IHsgaWQ6IGFzc2VtYmx5SWQgfSB9IDogeyBuYW1lOiAnbW9kZWwnLCBwYXJhbXM6IHt9IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dVbml0Y2VsbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcHJlc2VudGF0aW9uUHJlc2V0OiAnYXV0bydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9lLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmluaXRQYXJhbXMuaGlkZVN0cnVjdHVyZSB8fCB0aGlzLmluaXRQYXJhbXMudmlzdWFsU3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGx5VmlzdWFsUGFyYW1zKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA3XTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnBsdWdpbi5idWlsZGVycy5zdHJ1Y3R1cmUuY3JlYXRlTW9kZWwodHJhamVjdG9yeSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbCA9IF9lLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucGx1Z2luLmJ1aWxkZXJzLnN0cnVjdHVyZS5jcmVhdGVTdHJ1Y3R1cmUobW9kZWwsIHsgbmFtZTogJ21vZGVsJywgcGFyYW1zOiB7fSB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9lLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9lLmxhYmVsID0gNztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2hvdyBzZWxlY3Rpb24gaWYgcGFyYW0gaXMgc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbml0UGFyYW1zLnNlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlzdWFsLnNlbGVjdCh0aGlzLmluaXRQYXJhbXMuc2VsZWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBpdm90SW5kZXggPSB0aGlzLnBsdWdpbi5tYW5hZ2Vycy5zdHJ1Y3R1cmUuaGllcmFyY2h5LnNlbGVjdGlvbi5zdHJ1Y3R1cmVzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBwaXZvdCA9IHRoaXMucGx1Z2luLm1hbmFnZXJzLnN0cnVjdHVyZS5oaWVyYXJjaHkuc2VsZWN0aW9uLnN0cnVjdHVyZXNbcGl2b3RJbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGl2b3QgJiYgcGl2b3QuY2VsbC5wYXJlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hc3NlbWJseVJlZiA9IHBpdm90LmNlbGwudHJhbnNmb3JtLnJlZjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pbml0UGFyYW1zLmxvYWRNYXBzKSByZXR1cm4gWzMgLypicmVhayovLCA5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFzc2VtYmx5UmVmID09PSAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgICAgICBhc20gPSB0aGlzLnN0YXRlLnNlbGVjdCh0aGlzLmFzc2VtYmx5UmVmKVswXS5vYmo7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0TWFwUGFyYW1zID0gdHJhbnNmb3JtZXJzXzEuSW5pdFZvbHVtZVN0cmVhbWluZy5jcmVhdGVEZWZhdWx0UGFyYW1zKGFzbSwgdGhpcy5wbHVnaW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGRiZU1hcFBhcmFtcyA9IGhlbHBlcnNfMS5QREJlVm9sdW1lcy5tYXBQYXJhbXMoZGVmYXVsdE1hcFBhcmFtcywgdGhpcy5pbml0UGFyYW1zLm1hcFNldHRpbmdzLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBkYmVNYXBQYXJhbXMpIHJldHVybiBbMyAvKmJyZWFrKi8sIDldO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5wbHVnaW4ucnVuVGFzayh0aGlzLnN0YXRlLmFwcGx5QWN0aW9uKHRyYW5zZm9ybWVyc18xLkluaXRWb2x1bWVTdHJlYW1pbmcsIHBkYmVNYXBQYXJhbXMsIHRoaXMuYXNzZW1ibHlSZWYpKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9lLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZGJlTWFwUGFyYW1zLm1ldGhvZCAhPT0gJ2VtJyAmJiAhdGhpcy5pbml0UGFyYW1zLmxpZ2FuZFZpZXcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVyc18xLlBEQmVWb2x1bWVzLmRpc3BsYXlVc2liaWxpdHlNZXNzYWdlKHRoaXMucGx1Z2luKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9lLmxhYmVsID0gOTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0hldFZpZXcpIHJldHVybiBbMyAvKmJyZWFrKi8sIDExXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuY3JlYXRlTGlnYW5kU3RydWN0dXJlKGlzQnJhbmNoZWRWaWV3KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgICAgICBfZS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZS5sYWJlbCA9IDExO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZFR5cGUgPSAnZnVsbCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXMucGx1Z2luLnN0YXRlLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubG9hZGVkUGFyYW1zLnVybCAhPT0gdXJsIHx8IHRoaXMubG9hZGVkUGFyYW1zLmZvcm1hdCAhPT0gZm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZFR5cGUgPSAnZnVsbCc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubG9hZGVkUGFyYW1zLnVybCA9PT0gdXJsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiAoc3RhdGUuc2VsZWN0KFN0YXRlRWxlbWVudHMuQXNzZW1ibHkpLmxlbmd0aCA+IDApIGxvYWRUeXBlID0gJ3VwZGF0ZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLnNlbGVjdCh0aGlzLmFzc2VtYmx5UmVmKS5sZW5ndGggPiAwKSBsb2FkVHlwZSA9ICd1cGRhdGUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSovXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnVsbExvYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkVHlwZSA9ICdmdWxsJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRUeXBlID0gJ3VwZGF0ZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShsb2FkVHlwZSA9PT0gJ2Z1bGwnKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMTZdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgY29tbWFuZHNfMS5QbHVnaW5Db21tYW5kcy5TdGF0ZS5SZW1vdmVPYmplY3QodGhpcy5wbHVnaW4sIHsgc3RhdGU6IHN0YXRlLCByZWY6IHN0YXRlLnRyZWUucm9vdC5yZWYgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Uuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxUcmVlID0gdGhpcy5tb2RlbCh0aGlzLmRvd25sb2FkKHN0YXRlLmJ1aWxkKCkudG9Sb290KCksIHVybCwgaXNCaW5hcnkpLCBmb3JtYXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5hcHBseVN0YXRlKG1vZGVsVHJlZSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Uuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5kb0luZm8odHJ1ZSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgICAgICAgICAgICAgICAgaW5mbyA9IF9lLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzbUlkID0gKGFzc2VtYmx5SWQgPT09ICdwcmVmZXJyZWQnICYmIGluZm8gJiYgaW5mby5wcmVmZXJyZWRBc3NlbWJseUlkKSB8fCBhc3NlbWJseUlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RydWN0dXJlVHJlZSA9IHRoaXMuc3RydWN0dXJlKGFzbUlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuYXBwbHlTdGF0ZShzdHJ1Y3R1cmVUcmVlKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgICAgICAgICAgICAgICBfZS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAxOV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTY6XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmVlID0gc3RhdGUuYnVpbGQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZG9JbmZvKHRydWUpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZm8gPSBfZS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc21JZCA9IChhc3NlbWJseUlkID09PSAncHJlZmVycmVkJyAmJiBpbmZvICYmIGluZm8ucHJlZmVycmVkQXNzZW1ibHlJZCkgfHwgYXNzZW1ibHlJZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzXzEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXNzZW1ibHlJZCA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2Fzc2VtYmx5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7IGlkOiBhc21JZCB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ21vZGVsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAvL3RyZWUudG8oU3RhdGVFbGVtZW50cy5Bc3NlbWJseSkudXBkYXRlKFN0YXRlVHJhbnNmb3Jtcy5Nb2RlbC5TdHJ1Y3R1cmVGcm9tTW9kZWwsIHAgPT4gKHsgLi4ucCwgLi4ucHJvcHMgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJlZS50byh0aGlzLmFzc2VtYmx5UmVmKS51cGRhdGUodHJhbnNmb3Jtc18xLlN0YXRlVHJhbnNmb3Jtcy5Nb2RlbC5TdHJ1Y3R1cmVGcm9tTW9kZWwsIGZ1bmN0aW9uIChwKSB7IHJldHVybiAodHNsaWJfMS5fX2Fzc2lnbih0c2xpYl8xLl9fYXNzaWduKHt9LCBwKSwgcHJvcHNfMSkpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuYXBwbHlTdGF0ZSh0cmVlKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTg6XG4gICAgICAgICAgICAgICAgICAgICAgICBfZS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZS5sYWJlbCA9IDE5O1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE5OlxuICAgICAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy51cGRhdGVTdHlsZShyZXByZXNlbnRhdGlvblN0eWxlKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjA6XG4gICAgICAgICAgICAgICAgICAgICAgICBfZS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cy5sb2FkQ29tcGxldGUubmV4dCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBQREJlTW9sc3RhclBsdWdpbi5wcm90b3R5cGUubW9kZWwgPSBmdW5jdGlvbiAoYiwgZm9ybWF0KSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSBmb3JtYXQgPT09ICdtbWNpZidcbiAgICAgICAgICAgID8gYi5hcHBseSh0cmFuc2Zvcm1zXzEuU3RhdGVUcmFuc2Zvcm1zLkRhdGEuUGFyc2VDaWYpLmFwcGx5KHRyYW5zZm9ybXNfMS5TdGF0ZVRyYW5zZm9ybXMuTW9kZWwuVHJhamVjdG9yeUZyb21NbUNpZilcbiAgICAgICAgICAgIDogYi5hcHBseSh0cmFuc2Zvcm1zXzEuU3RhdGVUcmFuc2Zvcm1zLk1vZGVsLlRyYWplY3RvcnlGcm9tUERCKTtcbiAgICAgICAgcmV0dXJuIHBhcnNlZC5hcHBseSh0cmFuc2Zvcm1zXzEuU3RhdGVUcmFuc2Zvcm1zLk1vZGVsLk1vZGVsRnJvbVRyYWplY3RvcnksIHsgbW9kZWxJbmRleDogMCB9LCB7IHJlZjogaGVscGVyc18yLlN0YXRlRWxlbWVudHMuTW9kZWwgfSk7XG4gICAgfTtcbiAgICBQREJlTW9sc3RhclBsdWdpbi5wcm90b3R5cGUuZG93bmxvYWQgPSBmdW5jdGlvbiAoYiwgdXJsLCBpc0JpbmFyeSkge1xuICAgICAgICByZXR1cm4gYi5hcHBseSh0cmFuc2Zvcm1zXzEuU3RhdGVUcmFuc2Zvcm1zLkRhdGEuRG93bmxvYWQsIHsgdXJsOiBhc3NldHNfMS5Bc3NldC5VcmwodXJsKSwgaXNCaW5hcnk6IGlzQmluYXJ5IH0pO1xuICAgIH07XG4gICAgUERCZU1vbHN0YXJQbHVnaW4ucHJvdG90eXBlLnN0cnVjdHVyZSA9IGZ1bmN0aW9uIChhc3NlbWJseUlkKSB7XG4gICAgICAgIHZhciBtb2RlbCA9IHRoaXMuc3RhdGUuYnVpbGQoKS50byhoZWxwZXJzXzIuU3RhdGVFbGVtZW50cy5Nb2RlbCk7XG4gICAgICAgIHZhciBwcm9wcyA9IHtcbiAgICAgICAgICAgIHR5cGU6IGFzc2VtYmx5SWQgPyB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2Fzc2VtYmx5JyxcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHsgaWQ6IGFzc2VtYmx5SWQgfVxuICAgICAgICAgICAgfSA6IHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnbW9kZWwnLFxuICAgICAgICAgICAgICAgIHBhcmFtczoge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHMgPSBtb2RlbFxuICAgICAgICAgICAgLy8gICAgLmFwcGx5KFN0YXRlVHJhbnNmb3Jtcy5Nb2RlbC5TdHJ1Y3R1cmVGcm9tTW9kZWwsIHByb3BzLCB7IHJlZjogU3RhdGVFbGVtZW50cy5Bc3NlbWJseSB9KTtcbiAgICAgICAgICAgIC5hcHBseSh0cmFuc2Zvcm1zXzEuU3RhdGVUcmFuc2Zvcm1zLk1vZGVsLlN0cnVjdHVyZUZyb21Nb2RlbCwgcHJvcHMsIHsgcmVmOiB0aGlzLmFzc2VtYmx5UmVmIH0pO1xuICAgICAgICBzLmFwcGx5KHRyYW5zZm9ybXNfMS5TdGF0ZVRyYW5zZm9ybXMuTW9kZWwuU3RydWN0dXJlQ29tcGxleEVsZW1lbnQsIHsgdHlwZTogJ2F0b21pYy1zZXF1ZW5jZScgfSwgeyByZWY6IGhlbHBlcnNfMi5TdGF0ZUVsZW1lbnRzLlNlcXVlbmNlIH0pO1xuICAgICAgICBzLmFwcGx5KHRyYW5zZm9ybXNfMS5TdGF0ZVRyYW5zZm9ybXMuTW9kZWwuU3RydWN0dXJlQ29tcGxleEVsZW1lbnQsIHsgdHlwZTogJ2F0b21pYy1oZXQnIH0sIHsgcmVmOiBoZWxwZXJzXzIuU3RhdGVFbGVtZW50cy5IZXQgfSk7XG4gICAgICAgIHMuYXBwbHkodHJhbnNmb3Jtc18xLlN0YXRlVHJhbnNmb3Jtcy5Nb2RlbC5TdHJ1Y3R1cmVDb21wbGV4RWxlbWVudCwgeyB0eXBlOiAnd2F0ZXInIH0sIHsgcmVmOiBoZWxwZXJzXzIuU3RhdGVFbGVtZW50cy5XYXRlciB9KTtcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfTtcbiAgICBQREJlTW9sc3RhclBsdWdpbi5wcm90b3R5cGUudXBkYXRlU3R5bGUgPSBmdW5jdGlvbiAoc3R5bGUsIHBhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdHJlZTtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgdHJlZSA9IHRoaXMudmlzdWFsMShzdHlsZSwgcGFydGlhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRyZWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgY29tbWFuZHNfMS5QbHVnaW5Db21tYW5kcy5TdGF0ZS5VcGRhdGUodGhpcy5wbHVnaW4sIHsgc3RhdGU6IHRoaXMucGx1Z2luLnN0YXRlLmRhdGEsIHRyZWU6IHRyZWUgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgUERCZU1vbHN0YXJQbHVnaW4ucHJvdG90eXBlLmRvSW5mbyA9IGZ1bmN0aW9uIChjaGVja1ByZWZlcnJlZEFzc2VtYmx5KSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG1vZGVsLCBpbmZvO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbCA9IHRoaXMuZ2V0T2JqKCdtb2RlbCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtb2RlbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBoZWxwZXJzXzIuTW9kZWxJbmZvMi5nZXQodGhpcy5wbHVnaW4sIG1vZGVsLCBjaGVja1ByZWZlcnJlZEFzc2VtYmx5KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZm8gPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cy5tb2RlbEluZm8ubmV4dChpbmZvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBpbmZvXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBQREJlTW9sc3RhclBsdWdpbi5wcm90b3R5cGUuYXBwbHlTdGF0ZSA9IGZ1bmN0aW9uICh0cmVlKSB7XG4gICAgICAgIHJldHVybiBjb21tYW5kc18xLlBsdWdpbkNvbW1hbmRzLlN0YXRlLlVwZGF0ZSh0aGlzLnBsdWdpbiwgeyBzdGF0ZTogdGhpcy5wbHVnaW4uc3RhdGUuZGF0YSwgdHJlZTogdHJlZSB9KTtcbiAgICB9O1xuICAgIFBEQmVNb2xzdGFyUGx1Z2luLnByb3RvdHlwZS5nZXRPYmogPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIHZhciBjZWxsID0gc3RhdGUuc2VsZWN0KHJlZilbMF07XG4gICAgICAgIGlmICghY2VsbCB8fCAhY2VsbC5vYmopXG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICByZXR1cm4gY2VsbC5vYmouZGF0YTtcbiAgICB9O1xuICAgIFBEQmVNb2xzdGFyUGx1Z2luLnByb3RvdHlwZS5nZXRMb2NpRm9yUGFyYW1zID0gZnVuY3Rpb24gKHBhcmFtcywgc3RydWN0dXJlTnVtYmVyKSB7XG4gICAgICAgIHZhciBhc3NlbWJseVJlZiA9IHRoaXMuYXNzZW1ibHlSZWY7XG4gICAgICAgIGlmIChzdHJ1Y3R1cmVOdW1iZXIpIHtcbiAgICAgICAgICAgIGFzc2VtYmx5UmVmID0gdGhpcy5wbHVnaW4ubWFuYWdlcnMuc3RydWN0dXJlLmhpZXJhcmNoeS5jdXJyZW50LnN0cnVjdHVyZXNbc3RydWN0dXJlTnVtYmVyIC0gMV0uY2VsbC50cmFuc2Zvcm0ucmVmO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhc3NlbWJseVJlZiA9PT0gJycpXG4gICAgICAgICAgICByZXR1cm4gbG9jaV8xLkVtcHR5TG9jaTtcbiAgICAgICAgLy9pZiAodGhpcy5wbHVnaW4uc3RhdGUuZGF0YS5zZWxlY3QoYXNzZW1ibHlSZWYpLmxlbmd0aCA9PSAwKSByZXR1cm4gRW1wdHlMb2NpO1xuICAgICAgICB2YXIgZGF0YSA9IHRoaXMucGx1Z2luLnN0YXRlLmRhdGEuc2VsZWN0KGFzc2VtYmx5UmVmKVswXS5vYmouZGF0YTtcbiAgICAgICAgaWYgKCFkYXRhKVxuICAgICAgICAgICAgcmV0dXJuIGxvY2lfMS5FbXB0eUxvY2k7XG4gICAgICAgIHJldHVybiBoZWxwZXJzXzEuUXVlcnlIZWxwZXIuZ2V0SW50ZXJhY3Rpdml0eUxvY2kocGFyYW1zLCBkYXRhKTtcbiAgICB9O1xuICAgIFBEQmVNb2xzdGFyUGx1Z2luLnByb3RvdHlwZS5nZXRMb2NpQnlQTEREVCA9IGZ1bmN0aW9uIChzY29yZSwgc3RydWN0dXJlTnVtYmVyKSB7XG4gICAgICAgIHZhciBhc3NlbWJseVJlZiA9IHRoaXMuYXNzZW1ibHlSZWY7XG4gICAgICAgIGlmIChzdHJ1Y3R1cmVOdW1iZXIpIHtcbiAgICAgICAgICAgIGFzc2VtYmx5UmVmID0gdGhpcy5wbHVnaW4ubWFuYWdlcnMuc3RydWN0dXJlLmhpZXJhcmNoeS5jdXJyZW50LnN0cnVjdHVyZXNbc3RydWN0dXJlTnVtYmVyIC0gMV0uY2VsbC50cmFuc2Zvcm0ucmVmO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhc3NlbWJseVJlZiA9PT0gJycpXG4gICAgICAgICAgICByZXR1cm4gbG9jaV8xLkVtcHR5TG9jaTtcbiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLnBsdWdpbi5zdGF0ZS5kYXRhLnNlbGVjdChhc3NlbWJseVJlZilbMF0ub2JqLmRhdGE7XG4gICAgICAgIGlmICghZGF0YSlcbiAgICAgICAgICAgIHJldHVybiBsb2NpXzEuRW1wdHlMb2NpO1xuICAgICAgICByZXR1cm4gaGVscGVyc18xLkFscGhhZm9sZFZpZXcuZ2V0TG9jaUJ5UExERFQoc2NvcmUsIGRhdGEpO1xuICAgIH07XG4gICAgUERCZU1vbHN0YXJQbHVnaW4ucHJvdG90eXBlLm5vcm1hbGl6ZUNvbG9yID0gZnVuY3Rpb24gKGNvbG9yVmFsLCBkZWZhdWx0Q29sb3IpIHtcbiAgICAgICAgdmFyIGNvbG9yID0gY29sb3JfMS5Db2xvci5mcm9tUmdiKDE3MCwgMTcwLCAxNzApO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb2xvclZhbC5yICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGNvbG9yID0gY29sb3JfMS5Db2xvci5mcm9tUmdiKGNvbG9yVmFsLnIsIGNvbG9yVmFsLmcsIGNvbG9yVmFsLmIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY29sb3JWYWxbMF0gPT09ICcjJykge1xuICAgICAgICAgICAgICAgIGNvbG9yID0gKDAsIGNvbG9yXzEuQ29sb3IpKE51bWJlcihcIjB4XCIuY29uY2F0KGNvbG9yVmFsLnN1YnN0cigxKSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbG9yID0gKDAsIGNvbG9yXzEuQ29sb3IpKGNvbG9yVmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGRlZmF1bHRDb2xvcilcbiAgICAgICAgICAgICAgICBjb2xvciA9IGRlZmF1bHRDb2xvcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sb3I7XG4gICAgfTtcbiAgICBQREJlTW9sc3RhclBsdWdpbi5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uY2xlYXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFzc2VtYmx5UmVmID0gJyc7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFBhcmFtcyA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICB0aGlzLmlzSGlnaGxpZ2h0Q29sb3JVcGRhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1NlbGVjdGVkQ29sb3JVcGRhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFBEQmVNb2xzdGFyUGx1Z2luO1xufSgpKTtcbndpbmRvdy5QREJlTW9sc3RhclBsdWdpbiA9IFBEQmVNb2xzdGFyUGx1Z2luO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./lib/index.js\n");
  
  /***/ }),
  
  /***/ "./lib/labels.js":
  /*!***********************!*\
    !*** ./lib/labels.js ***!
    \***********************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PDBeLociLabelProvider = void 0;\nvar behavior_1 = __webpack_require__(/*! Molstar/mol-plugin/behavior */ \"./node_modules/molstar/lib/mol-plugin/behavior.js\");\nvar structure_1 = __webpack_require__(/*! Molstar/mol-model/structure */ \"./node_modules/molstar/lib/mol-model/structure.js\");\nvar label_1 = __webpack_require__(/*! Molstar/mol-theme/label */ \"./node_modules/molstar/lib/mol-theme/label.js\");\nexports.PDBeLociLabelProvider = behavior_1.PluginBehavior.create({\n    name: 'pdbe-loci-label-provider',\n    category: 'interaction',\n    ctor: /** @class */ (function () {\n        function class_1(ctx) {\n            var _this = this;\n            this.ctx = ctx;\n            this.f = {\n                label: function (loci) {\n                    var customState = (_this.ctx.customState);\n                    var superpositionView = (customState && customState.initParams.superposition) ? true : false;\n                    var label = [];\n                    if (!superpositionView && structure_1.StructureElement.Loci.is(loci) && loci.elements.length === 1) {\n                        var entityNames = new Set();\n                        for (var _i = 0, _a = loci.elements; _i < _a.length; _i++) {\n                            var u = _a[_i].unit;\n                            var l = structure_1.StructureElement.Location.create(loci.structure, u, u.elements[0]);\n                            var name_1 = structure_1.StructureProperties.entity.pdbx_description(l).join(', ');\n                            entityNames.add(name_1);\n                        }\n                        if (entityNames.size === 1)\n                            entityNames.forEach(function (name) { return label.push(name); });\n                    }\n                    label.push((0, label_1.lociLabel)(loci));\n                    return label.filter(function (l) { return !!l; }).join('</br>');\n                },\n                group: function (label) { return label.toString().replace(/Model [0-9]+/g, 'Models'); },\n                priority: 100\n            };\n        }\n        class_1.prototype.register = function () { this.ctx.managers.lociLabels.addProvider(this.f); };\n        class_1.prototype.unregister = function () { this.ctx.managers.lociLabels.removeProvider(this.f); };\n        return class_1;\n    }()),\n    display: { name: 'Provide PDBe Loci Label' }\n});\n//# sourceMappingURL=labels.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWIvbGFiZWxzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3QixpQkFBaUIsbUJBQU8sQ0FBQyxzRkFBNkI7QUFDdEQsa0JBQWtCLG1CQUFPLENBQUMsc0ZBQTZCO0FBQ3ZELGNBQWMsbUJBQU8sQ0FBQyw4RUFBeUI7QUFDL0MsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELGdCQUFnQjtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsMEJBQTBCO0FBQzVGO0FBQ0E7QUFDQSx1REFBdUQsYUFBYTtBQUNwRSxpQkFBaUI7QUFDakIsMENBQTBDLDZEQUE2RDtBQUN2RztBQUNBO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQscURBQXFEO0FBQ3JEO0FBQ0EsS0FBSztBQUNMLGVBQWU7QUFDZixDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZGJlLW1vbHN0YXIvLi9saWIvbGFiZWxzLmpzP2I1MzMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBEQmVMb2NpTGFiZWxQcm92aWRlciA9IHZvaWQgMDtcbnZhciBiZWhhdmlvcl8xID0gcmVxdWlyZShcIk1vbHN0YXIvbW9sLXBsdWdpbi9iZWhhdmlvclwiKTtcbnZhciBzdHJ1Y3R1cmVfMSA9IHJlcXVpcmUoXCJNb2xzdGFyL21vbC1tb2RlbC9zdHJ1Y3R1cmVcIik7XG52YXIgbGFiZWxfMSA9IHJlcXVpcmUoXCJNb2xzdGFyL21vbC10aGVtZS9sYWJlbFwiKTtcbmV4cG9ydHMuUERCZUxvY2lMYWJlbFByb3ZpZGVyID0gYmVoYXZpb3JfMS5QbHVnaW5CZWhhdmlvci5jcmVhdGUoe1xuICAgIG5hbWU6ICdwZGJlLWxvY2ktbGFiZWwtcHJvdmlkZXInLFxuICAgIGNhdGVnb3J5OiAnaW50ZXJhY3Rpb24nLFxuICAgIGN0b3I6IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gY2xhc3NfMShjdHgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICAgICAgICAgIHRoaXMuZiA9IHtcbiAgICAgICAgICAgICAgICBsYWJlbDogZnVuY3Rpb24gKGxvY2kpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1c3RvbVN0YXRlID0gKF90aGlzLmN0eC5jdXN0b21TdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdXBlcnBvc2l0aW9uVmlldyA9IChjdXN0b21TdGF0ZSAmJiBjdXN0b21TdGF0ZS5pbml0UGFyYW1zLnN1cGVycG9zaXRpb24pID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGFiZWwgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzdXBlcnBvc2l0aW9uVmlldyAmJiBzdHJ1Y3R1cmVfMS5TdHJ1Y3R1cmVFbGVtZW50LkxvY2kuaXMobG9jaSkgJiYgbG9jaS5lbGVtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbnRpdHlOYW1lcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBsb2NpLmVsZW1lbnRzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1ID0gX2FbX2ldLnVuaXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSBzdHJ1Y3R1cmVfMS5TdHJ1Y3R1cmVFbGVtZW50LkxvY2F0aW9uLmNyZWF0ZShsb2NpLnN0cnVjdHVyZSwgdSwgdS5lbGVtZW50c1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWVfMSA9IHN0cnVjdHVyZV8xLlN0cnVjdHVyZVByb3BlcnRpZXMuZW50aXR5LnBkYnhfZGVzY3JpcHRpb24obCkuam9pbignLCAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHlOYW1lcy5hZGQobmFtZV8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbnRpdHlOYW1lcy5zaXplID09PSAxKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eU5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIGxhYmVsLnB1c2gobmFtZSk7IH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsLnB1c2goKDAsIGxhYmVsXzEubG9jaUxhYmVsKShsb2NpKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsYWJlbC5maWx0ZXIoZnVuY3Rpb24gKGwpIHsgcmV0dXJuICEhbDsgfSkuam9pbignPC9icj4nKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdyb3VwOiBmdW5jdGlvbiAobGFiZWwpIHsgcmV0dXJuIGxhYmVsLnRvU3RyaW5nKCkucmVwbGFjZSgvTW9kZWwgWzAtOV0rL2csICdNb2RlbHMnKTsgfSxcbiAgICAgICAgICAgICAgICBwcmlvcml0eTogMTAwXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNsYXNzXzEucHJvdG90eXBlLnJlZ2lzdGVyID0gZnVuY3Rpb24gKCkgeyB0aGlzLmN0eC5tYW5hZ2Vycy5sb2NpTGFiZWxzLmFkZFByb3ZpZGVyKHRoaXMuZik7IH07XG4gICAgICAgIGNsYXNzXzEucHJvdG90eXBlLnVucmVnaXN0ZXIgPSBmdW5jdGlvbiAoKSB7IHRoaXMuY3R4Lm1hbmFnZXJzLmxvY2lMYWJlbHMucmVtb3ZlUHJvdmlkZXIodGhpcy5mKTsgfTtcbiAgICAgICAgcmV0dXJuIGNsYXNzXzE7XG4gICAgfSgpKSxcbiAgICBkaXNwbGF5OiB7IG5hbWU6ICdQcm92aWRlIFBEQmUgTG9jaSBMYWJlbCcgfVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sYWJlbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./lib/labels.js\n");
  
  /***/ }),
  
  /***/ "./lib/loci-details.js":
  /*!*****************************!*\
    !*** ./lib/loci-details.js ***!
    \*****************************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports._bundleLabel = exports.bondLabel = exports.lociDetails = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar structure_1 = __webpack_require__(/*! Molstar/mol-model/structure */ \"./node_modules/molstar/lib/mol-model/structure.js\");\nvar int_1 = __webpack_require__(/*! Molstar/mol-data/int */ \"./node_modules/molstar/lib/mol-data/int.js\");\nvar sifts_mapping_1 = __webpack_require__(/*! Molstar/mol-model-props/sequence/sifts-mapping */ \"./node_modules/molstar/lib/mol-model-props/sequence/sifts-mapping.js\");\nfunction lociDetails(loci) {\n    switch (loci.kind) {\n        case 'structure-loci':\n            return { models: loci.structure.models.map(function (m) { return m.entry; }).filter(function (l) { return !!l; }) };\n        case 'element-loci':\n            return structureElementStatsDetail(structure_1.StructureElement.Stats.ofLoci(loci));\n        case 'bond-loci':\n            var bond = loci.bonds[0];\n            return bond ? bondLabel(bond, 'element') : '';\n        default:\n            return void 0;\n    }\n}\nexports.lociDetails = lociDetails;\nfunction structureElementStatsDetail(stats) {\n    var chainCount = stats.chainCount, residueCount = stats.residueCount, elementCount = stats.elementCount;\n    if (elementCount === 1 && residueCount === 0 && chainCount === 0) {\n        return getElementDetails(stats.firstElementLoc, 'element');\n    }\n    else if (elementCount === 0 && residueCount === 1 && chainCount === 0) {\n        return getElementDetails(stats.firstResidueLoc, 'residue');\n    }\n    else {\n        return void 0;\n    }\n}\nfunction getElementDetails(location, granularity) {\n    if (granularity === void 0) { granularity = 'element'; }\n    var basicDetails = {};\n    var entry = location.unit.model.entry;\n    if (entry.length > 30)\n        entry = entry.substr(0, 27) + '\\u2026'; // ellipsis\n    basicDetails['entry_id'] = entry; // entry\n    if (granularity !== 'structure') {\n        basicDetails['model'] = location.unit.model.modelNum; // model\n        basicDetails['instance'] = location.unit.conformation.operator.name; // instance\n    }\n    var elementDetails;\n    if (structure_1.Unit.isAtomic(location.unit)) {\n        elementDetails = atomicElementDetails(location, granularity);\n    }\n    else if (structure_1.Unit.isCoarse(location.unit)) {\n        elementDetails = coarseElementDetails(location, granularity);\n    }\n    return tslib_1.__assign(tslib_1.__assign({}, basicDetails), elementDetails);\n}\nfunction atomicElementDetails(location, granularity) {\n    var elementDetails = {\n        entity_id: structure_1.StructureProperties.chain.label_entity_id(location),\n        label_asym_id: structure_1.StructureProperties.chain.label_asym_id(location),\n        auth_asym_id: structure_1.StructureProperties.chain.auth_asym_id(location),\n        unp_accession: undefined,\n        unp_seq_id: undefined,\n        seq_id: structure_1.StructureProperties.residue.label_seq_id(location),\n        auth_seq_id: structure_1.StructureProperties.residue.auth_seq_id(location),\n        ins_code: structure_1.StructureProperties.residue.pdbx_PDB_ins_code(location),\n        comp_id: structure_1.StructureProperties.atom.label_comp_id(location),\n        atom_id: [structure_1.StructureProperties.atom.label_atom_id(location)],\n        alt_id: structure_1.StructureProperties.atom.label_alt_id(location)\n    };\n    var unpLabel = sifts_mapping_1.SIFTSMapping.getLabel(location);\n    if (unpLabel) {\n        var unpLabelDetails = unpLabel.split(' ');\n        if (unpLabelDetails[0] === 'UNP') {\n            elementDetails.unp_accession = unpLabelDetails[1];\n            elementDetails.unp_seq_id = +unpLabelDetails[2];\n        }\n    }\n    var microHetCompIds = structure_1.StructureProperties.residue.microheterogeneityCompIds(location);\n    elementDetails['micro_het_comp_ids'] = granularity === 'residue' && microHetCompIds.length > 1 ?\n        microHetCompIds : [elementDetails['comp_id']];\n    return elementDetails;\n}\nfunction coarseElementDetails(location, granularity) {\n    var elementDetails = {\n        asym_id: structure_1.StructureProperties.coarse.asym_id(location),\n        seq_id_begin: structure_1.StructureProperties.coarse.seq_id_begin(location),\n        seq_id_end: structure_1.StructureProperties.coarse.seq_id_end(location)\n    };\n    if (granularity === 'residue') {\n        if (elementDetails.seq_id_begin === elementDetails.seq_id_end) {\n            var entityIndex = structure_1.StructureProperties.coarse.entityKey(location);\n            var seq = location.unit.model.sequence.byEntityKey[entityIndex];\n            elementDetails['comp_id'] = seq.sequence.compId.value(elementDetails.seq_id_begin - 1); // 1-indexed\n        }\n    }\n    return elementDetails;\n}\nfunction bondLabel(bond, granularity) {\n    return _bundleLabel({ loci: [\n            structure_1.StructureElement.Loci(bond.aStructure, [{ unit: bond.aUnit, indices: int_1.OrderedSet.ofSingleton(bond.aIndex) }]),\n            structure_1.StructureElement.Loci(bond.bStructure, [{ unit: bond.bUnit, indices: int_1.OrderedSet.ofSingleton(bond.bIndex) }])\n        ] }, granularity);\n}\nexports.bondLabel = bondLabel;\nfunction _bundleLabel(bundle, granularity) {\n    var isSingleElements = true;\n    for (var _i = 0, _a = bundle.loci; _i < _a.length; _i++) {\n        var l = _a[_i];\n        if (!structure_1.StructureElement.Loci.is(l) || structure_1.StructureElement.Loci.size(l) !== 1) {\n            isSingleElements = false;\n            break;\n        }\n    }\n    if (isSingleElements) {\n        var locations = bundle.loci.map(function (l) {\n            var _a = l.elements[0], unit = _a.unit, indices = _a.indices;\n            return structure_1.StructureElement.Location.create(l.structure, unit, unit.elements[int_1.OrderedSet.start(indices)]);\n        });\n        var elementDetailsArr = locations.map(function (l) { return getElementDetails(l, granularity); });\n        var atomIds = [elementDetailsArr[0].atom_id[0], elementDetailsArr[1].atom_id[0]];\n        var elementDetails = elementDetailsArr[0];\n        elementDetails['atom_id'] = atomIds;\n        return elementDetails;\n    }\n    else {\n        var elementDetails = bundle.loci.map(function (l) { return lociDetails(l); });\n        return elementDetails;\n    }\n}\nexports._bundleLabel = _bundleLabel;\n//# sourceMappingURL=loci-details.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/loci-details.js\n");
  
  /***/ }),
  
  /***/ "./lib/spec.js":
  /*!*********************!*\
    !*** ./lib/spec.js ***!
    \*********************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DefaultParams = exports.createPluginUI = exports.DefaultPluginUISpec = exports.DefaultPluginSpec = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar React = tslib_1.__importStar(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\nvar ReactDOM = tslib_1.__importStar(__webpack_require__(/*! react-dom */ \"./node_modules/react-dom/index.js\"));\nvar volume_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/custom/volume */ \"./node_modules/molstar/lib/mol-plugin-ui/custom/volume.js\");\nvar plugin_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/plugin */ \"./node_modules/molstar/lib/mol-plugin-ui/plugin.js\");\nvar behavior_1 = __webpack_require__(/*! Molstar/mol-plugin/behavior */ \"./node_modules/molstar/lib/mol-plugin/behavior.js\");\nvar transformers_1 = __webpack_require__(/*! Molstar/mol-plugin/behavior/dynamic/volume-streaming/transformers */ \"./node_modules/molstar/lib/mol-plugin/behavior/dynamic/volume-streaming/transformers.js\");\nvar context_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/context */ \"./node_modules/molstar/lib/mol-plugin-ui/context.js\");\nvar spec_1 = __webpack_require__(/*! Molstar/mol-plugin/spec */ \"./node_modules/molstar/lib/mol-plugin/spec.js\");\nvar config_1 = __webpack_require__(/*! Molstar/mol-plugin/config */ \"./node_modules/molstar/lib/mol-plugin/config.js\");\nvar actions_1 = __webpack_require__(/*! Molstar/mol-plugin-state/actions */ \"./node_modules/molstar/lib/mol-plugin-state/actions.js\");\nvar labels_1 = __webpack_require__(/*! ./labels */ \"./lib/labels.js\");\nvar DefaultPluginSpec = function () { return ({\n    actions: [\n        spec_1.PluginSpec.Action(actions_1.StateActions.Structure.EnableStructureCustomProps)\n    ],\n    behaviors: [\n        spec_1.PluginSpec.Behavior(behavior_1.PluginBehaviors.Representation.HighlightLoci),\n        spec_1.PluginSpec.Behavior(behavior_1.PluginBehaviors.Representation.SelectLoci),\n        spec_1.PluginSpec.Behavior(labels_1.PDBeLociLabelProvider),\n        spec_1.PluginSpec.Behavior(behavior_1.PluginBehaviors.Representation.FocusLoci),\n        spec_1.PluginSpec.Behavior(behavior_1.PluginBehaviors.Camera.FocusLoci),\n        spec_1.PluginSpec.Behavior(behavior_1.PluginBehaviors.Camera.CameraAxisHelper),\n        spec_1.PluginSpec.Behavior(behavior_1.PluginBehaviors.CustomProps.StructureInfo),\n        spec_1.PluginSpec.Behavior(behavior_1.PluginBehaviors.CustomProps.AccessibleSurfaceArea),\n        spec_1.PluginSpec.Behavior(behavior_1.PluginBehaviors.CustomProps.BestDatabaseSequenceMapping, { autoAttach: true, showTooltip: true }),\n        spec_1.PluginSpec.Behavior(behavior_1.PluginBehaviors.CustomProps.Interactions),\n        spec_1.PluginSpec.Behavior(behavior_1.PluginBehaviors.CustomProps.SecondaryStructure),\n        spec_1.PluginSpec.Behavior(behavior_1.PluginBehaviors.CustomProps.ValenceModel),\n        spec_1.PluginSpec.Behavior(behavior_1.PluginBehaviors.CustomProps.CrossLinkRestraint),\n    ],\n    // animations: [],\n    config: [\n        [config_1.PluginConfig.VolumeStreaming.DefaultServer, 'https://www.ebi.ac.uk/pdbe/volume-server']\n    ]\n}); };\nexports.DefaultPluginSpec = DefaultPluginSpec;\nvar DefaultPluginUISpec = function () { return (tslib_1.__assign(tslib_1.__assign({}, (0, exports.DefaultPluginSpec)()), { customParamEditors: [\n        [transformers_1.CreateVolumeStreamingBehavior, volume_1.VolumeStreamingCustomControls]\n    ] })); };\nexports.DefaultPluginUISpec = DefaultPluginUISpec;\nfunction createPluginUI(target, spec, options) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var ctx;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    ctx = new context_1.PluginUIContext(spec || (0, exports.DefaultPluginUISpec)());\n                    return [4 /*yield*/, ctx.init()];\n                case 1:\n                    _a.sent();\n                    if (!(options === null || options === void 0 ? void 0 : options.onBeforeUIRender)) return [3 /*break*/, 3];\n                    return [4 /*yield*/, options.onBeforeUIRender(ctx)];\n                case 2:\n                    _a.sent();\n                    _a.label = 3;\n                case 3:\n                    ReactDOM.render(React.createElement(plugin_1.Plugin, { plugin: ctx }), target);\n                    return [2 /*return*/, ctx];\n            }\n        });\n    });\n}\nexports.createPluginUI = createPluginUI;\nexports.DefaultParams = {\n    moleculeId: undefined,\n    superposition: undefined,\n    superpositionParams: undefined,\n    customData: undefined,\n    ligandView: undefined,\n    assemblyId: undefined,\n    visualStyle: undefined,\n    highlightColor: undefined,\n    selectColor: undefined,\n    hideStructure: undefined,\n    hideCanvasControls: undefined,\n    granularity: undefined,\n    selection: undefined,\n    mapSettings: undefined,\n    selectBindings: undefined,\n    focusBindings: undefined,\n    defaultPreset: 'default',\n    pdbeUrl: 'https://www.ebi.ac.uk/pdbe/',\n    bgColor: { r: 0, g: 0, b: 0 },\n    lighting: undefined,\n    encoding: 'bcif',\n    selectInteraction: true,\n    loadMaps: false,\n    validationAnnotation: false,\n    domainAnnotation: false,\n    lowPrecisionCoords: false,\n    expanded: false,\n    hideControls: false,\n    pdbeLink: true,\n    loadCartoonsOnly: false,\n    landscape: false,\n    subscribeEvents: false,\n    alphafoldView: false,\n    sequencePanel: false\n};\n//# sourceMappingURL=spec.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/spec.js\n");
  
  /***/ }),
  
  /***/ "./lib/subscribe-events.js":
  /*!*********************************!*\
    !*** ./lib/subscribe-events.js ***!
    \*********************************/
  /***/ ((__unused_webpack_module, exports) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.subscribeToComponentEvents = void 0;\nfunction subscribeToComponentEvents(wrapperCtx) {\n    document.addEventListener('PDB.interactions.click', function (e) {\n        if (typeof e.detail !== 'undefined') {\n            var data = e.detail.interacting_nodes ? { data: e.detail.interacting_nodes } : { data: [e.detail.selected_node] };\n            data.data[0]['focus'] = true;\n            wrapperCtx.visual.select(data);\n        }\n    });\n    document.addEventListener('PDB.interactions.mouseover', function (e) {\n        if (typeof e.detail !== 'undefined') {\n            var data = e.detail.interacting_nodes ? { data: e.detail.interacting_nodes } : { data: [e.detail.selected_node] };\n            wrapperCtx.visual.highlighting(data);\n        }\n    });\n    document.addEventListener('PDB.interactions.mouseout', function (e) {\n        wrapperCtx.visual.clearHighlighting();\n    });\n    document.addEventListener(\"PDB.RNA.viewer.mouseover\", function (e) {\n        if (void 0 !== e.eventData) {\n            var highlightQuery = {\n                entity_id: e.eventData.entityId,\n                start_residue_number: e.eventData.label_seq_id,\n                end_residue_number: e.eventData.label_seq_id\n            };\n            wrapperCtx.visual.highlighting({\n                data: [highlightQuery],\n                structureNumber: 1\n            });\n        }\n    });\n    document.addEventListener(\"PDB.RNA.viewer.mouseout\", function (e) {\n        wrapperCtx.visual.clearHighlighting();\n    });\n    document.addEventListener('PDB.topologyViewer.click', function (e) {\n        if (typeof e.eventData !== 'undefined') {\n            // Create query object from event data\n            var highlightQuery = {\n                entity_id: e.eventData.entityId,\n                struct_asym_id: e.eventData.structAsymId,\n                start_residue_number: e.eventData.residueNumber,\n                end_residue_number: e.eventData.residueNumber,\n                sideChain: true,\n                focus: true\n            };\n            // Call highlightAnnotation\n            wrapperCtx.visual.select({ data: [highlightQuery] });\n        }\n    });\n    document.addEventListener('PDB.topologyViewer.mouseover', function (e) {\n        if (typeof e.eventData !== 'undefined') {\n            // Abort if entryid do not match or viewer type is unipdb\n            // if(e.eventData.entryId != scope.pdbId) return;\n            // Create query object from event data\n            var highlightQuery = {\n                entity_id: e.eventData.entityId,\n                struct_asym_id: e.eventData.structAsymId,\n                start_residue_number: e.eventData.residueNumber,\n                end_residue_number: e.eventData.residueNumber\n            };\n            // Call highlightAnnotation\n            wrapperCtx.visual.highlighting({ data: [highlightQuery] });\n        }\n    });\n    document.addEventListener('PDB.topologyViewer.mouseout', function (e) {\n        wrapperCtx.visual.clearHighlighting();\n    });\n    document.addEventListener('protvista-mouseover', function (e) {\n        if (typeof e.detail !== 'undefined') {\n            var highlightQuery = undefined;\n            // Create query object from event data\n            if (e.detail.start && e.detail.end) {\n                highlightQuery = {\n                    start_residue_number: parseInt(e.detail.start),\n                    end_residue_number: parseInt(e.detail.end)\n                };\n            }\n            if (e.detail.feature && e.detail.feature.entityId)\n                highlightQuery['entity_id'] = e.detail.feature.entityId + '';\n            if (e.detail.feature && e.detail.feature.bestChainId)\n                highlightQuery['struct_asym_id'] = e.detail.feature.bestChainId;\n            if (e.detail.feature && e.detail.feature.chainId)\n                highlightQuery['struct_asym_id'] = e.detail.feature.chainId;\n            if (highlightQuery)\n                wrapperCtx.visual.highlighting({ data: [highlightQuery] });\n        }\n    });\n    document.addEventListener('protvista-mouseout', function (e) {\n        wrapperCtx.visual.clearHighlighting();\n    });\n    document.addEventListener('protvista-click', function (e) {\n        if (typeof e.detail !== 'undefined') {\n            var showInteraction = false;\n            var highlightQuery = undefined;\n            // Create query object from event data\n            if (e.detail.start && e.detail.end) {\n                highlightQuery = {\n                    start_residue_number: parseInt(e.detail.start),\n                    end_residue_number: parseInt(e.detail.end)\n                };\n            }\n            if (e.detail.feature && e.detail.feature.entityId)\n                highlightQuery['entity_id'] = e.detail.feature.entityId + '';\n            if (e.detail.feature && e.detail.feature.bestChainId)\n                highlightQuery['struct_asym_id'] = e.detail.feature.bestChainId;\n            if (e.detail.feature && e.detail.feature.chainId)\n                highlightQuery['struct_asym_id'] = e.detail.feature.chainId;\n            if (e.detail.feature && e.detail.feature.accession && e.detail.feature.accession.split(' ')[0] === 'Chain' || e.detail.feature.tooltipContent === 'Ligand binding site') {\n                showInteraction = true;\n            }\n            if (e.detail.start === e.detail.end)\n                showInteraction = true;\n            if (highlightQuery) {\n                if (showInteraction) {\n                    highlightQuery['sideChain'] = true;\n                }\n                else {\n                    var selColor = undefined;\n                    if (e.detail.trackIndex > -1 && e.detail.feature.locations && e.detail.feature.locations[0].fragments[e.detail.trackIndex].color)\n                        selColor = e.detail.feature.locations[0].fragments[e.detail.trackIndex].color;\n                    if (typeof selColor == 'undefined' && e.detail.feature.color)\n                        selColor = e.detail.feature.color;\n                    if (typeof selColor == 'undefined' && e.detail.color)\n                        selColor = e.detail.color;\n                    if (typeof selColor == 'undefined') {\n                        selColor = { r: 65, g: 96, b: 91 };\n                    }\n                    else {\n                        var isRgb = /rgb/g;\n                        if (isRgb.test(selColor)) {\n                            var rgbArr = selColor.substring(4, selColor.length - 1).split(',');\n                            selColor = { r: rgbArr[0], g: rgbArr[1], b: rgbArr[2] };\n                        }\n                    }\n                    highlightQuery['color'] = selColor;\n                }\n                highlightQuery['focus'] = true;\n                wrapperCtx.visual.select({ data: [highlightQuery] });\n            }\n        }\n    });\n    var elementTypeArrForRange = ['uniprot', 'pfam', 'cath', 'scop', 'strand', 'helice'];\n    var elementTypeArrForSingle = ['chain', 'quality', 'quality_outlier', 'binding site', 'alternate conformer'];\n    document.addEventListener('PDB.seqViewer.click', function (e) {\n        if (typeof e.eventData !== 'undefined') {\n            // Abort if entryid and entityid do not match or viewer type is unipdb\n            // if(e.eventData.entryId != scope.pdbId) return;\n            if (typeof e.eventData.elementData !== 'undefined' && elementTypeArrForSingle.indexOf(e.eventData.elementData.elementType) > -1) {\n                // Create query object from event data\n                var highlightQuery = {\n                    entity_id: e.eventData.entityId,\n                    struct_asym_id: e.eventData.elementData.pathData.struct_asym_id,\n                    start_residue_number: e.eventData.residueNumber,\n                    end_residue_number: e.eventData.residueNumber,\n                    sideChain: true,\n                    focus: true\n                };\n                // Call highlightAnnotation\n                wrapperCtx.visual.select({ data: [highlightQuery] });\n            }\n            else if (typeof e.eventData.elementData !== 'undefined' && elementTypeArrForRange.indexOf(e.eventData.elementData.elementType) > -1) {\n                var seqColorArray = e.eventData.elementData.color;\n                // Create query object from event data\n                var highlightQuery = {\n                    entity_id: e.eventData.entityId,\n                    struct_asym_id: e.eventData.elementData.pathData.struct_asym_id,\n                    start_residue_number: e.eventData.elementData.pathData.start.residue_number,\n                    end_residue_number: e.eventData.elementData.pathData.end.residue_number,\n                    color: { r: seqColorArray[0], g: seqColorArray[1], b: seqColorArray[2] },\n                    focus: true\n                };\n                wrapperCtx.visual.select({ data: [highlightQuery] });\n            }\n        }\n    });\n    document.addEventListener('PDB.seqViewer.mouseover', function (e) {\n        if (typeof e.eventData !== 'undefined') {\n            // Abort if entryid and entityid do not match or viewer type is unipdb\n            // if(e.eventData.entryId != scope.pdbId) return;\n            if (typeof e.eventData.elementData !== 'undefined' && elementTypeArrForSingle.indexOf(e.eventData.elementData.elementType) > -1) {\n                // Create query object from event data\n                var highlightQuery = {\n                    entity_id: e.eventData.entityId,\n                    struct_asym_id: e.eventData.elementData.pathData.struct_asym_id,\n                    start_residue_number: e.eventData.residueNumber,\n                    end_residue_number: e.eventData.residueNumber,\n                    focus: true\n                };\n                wrapperCtx.visual.select({ data: [highlightQuery] });\n            }\n            else if (typeof e.eventData.elementData !== 'undefined' && elementTypeArrForRange.indexOf(e.eventData.elementData.elementType) > -1) {\n                // Create query object from event data\n                var highlightQuery = {\n                    entity_id: e.eventData.entityId,\n                    struct_asym_id: e.eventData.elementData.pathData.struct_asym_id,\n                    start_residue_number: e.eventData.elementData.pathData.start.residue_number,\n                    end_residue_number: e.eventData.elementData.pathData.end.residue_number\n                };\n                // Call highlightAnnotation\n                wrapperCtx.visual.highlighting({ data: [highlightQuery] });\n            }\n        }\n    });\n    document.addEventListener('PDB.seqViewer.mouseout', function (e) {\n        wrapperCtx.visual.clearHighlighting();\n    });\n}\nexports.subscribeToComponentEvents = subscribeToComponentEvents;\n//# sourceMappingURL=subscribe-events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/subscribe-events.js\n");
  
  /***/ }),
  
  /***/ "./lib/superposition-export.js":
  /*!*************************************!*\
    !*** ./lib/superposition-export.js ***!
    \*************************************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.superpositionExportHierarchy = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar utf8_1 = __webpack_require__(/*! Molstar/mol-io/common/utf8 */ \"./node_modules/molstar/lib/mol-io/common/utf8.js\");\nvar structure_1 = __webpack_require__(/*! Molstar/mol-model/structure */ \"./node_modules/molstar/lib/mol-model/structure.js\");\nvar mol_task_1 = __webpack_require__(/*! Molstar/mol-task */ \"./node_modules/molstar/lib/mol-task/index.js\");\nvar date_1 = __webpack_require__(/*! Molstar/mol-util/date */ \"./node_modules/molstar/lib/mol-util/date.js\");\nvar download_1 = __webpack_require__(/*! Molstar/mol-util/download */ \"./node_modules/molstar/lib/mol-util/download.js\");\nvar zip_1 = __webpack_require__(/*! Molstar/mol-util/zip/zip */ \"./node_modules/molstar/lib/mol-util/zip/zip.js\");\nvar commands_1 = __webpack_require__(/*! Molstar/mol-plugin/commands */ \"./node_modules/molstar/lib/mol-plugin/commands.js\");\nfunction superpositionExportHierarchy(plugin, options) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var e_1;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    _a.trys.push([0, 2, , 3]);\n                    return [4 /*yield*/, plugin.runTask(_superpositionExportHierarchy(plugin, options), { useOverlay: true })];\n                case 1:\n                    _a.sent();\n                    return [3 /*break*/, 3];\n                case 2:\n                    e_1 = _a.sent();\n                    console.error(e_1);\n                    plugin.log.error(\"Model export failed. See console for details.\");\n                    return [3 /*break*/, 3];\n                case 3: return [2 /*return*/];\n            }\n        });\n    });\n}\nexports.superpositionExportHierarchy = superpositionExportHierarchy;\nfunction _superpositionExportHierarchy(plugin, options) {\n    var _this = this;\n    return mol_task_1.Task.create('Export', function (ctx) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        var format, customState, superpositionState, segmentIndex, files, entryMap, structures, _i, structures_1, molId, modelRef, isStrHidden, _s, _a, _b, strComp, s, name_1, zipData, _c, files_1, _d, fn, data, bytes, buffer;\n        var _e, _f, _g, _h, _j, _k, _l, _m;\n        return tslib_1.__generator(this, function (_o) {\n            switch (_o.label) {\n                case 0: return [4 /*yield*/, ctx.update({ message: 'Exporting...', isIndeterminate: true, canAbort: false })];\n                case 1:\n                    _o.sent();\n                    format = (_e = options === null || options === void 0 ? void 0 : options.format) !== null && _e !== void 0 ? _e : 'cif';\n                    customState = plugin.customState;\n                    superpositionState = customState.superpositionState;\n                    segmentIndex = superpositionState.activeSegment - 1;\n                    files = [];\n                    entryMap = new Map();\n                    structures = superpositionState.loadedStructs[segmentIndex].slice();\n                    if (superpositionState.alphafold.ref)\n                        structures.push(\"AF-\".concat(customState.initParams.moleculeId));\n                    _i = 0, structures_1 = structures;\n                    _o.label = 2;\n                case 2:\n                    if (!(_i < structures_1.length)) return [3 /*break*/, 7];\n                    molId = structures_1[_i];\n                    modelRef = superpositionState.models[molId];\n                    if (!modelRef)\n                        return [3 /*break*/, 6];\n                    isStrHidden = false;\n                    _s = plugin.managers.structure.hierarchy.current.refs.get(modelRef);\n                    if (_s.cell.state.isHidden)\n                        isStrHidden = true;\n                    for (_a = 0, _b = _s.components; _a < _b.length; _a++) {\n                        strComp = _b[_a];\n                        if (strComp.cell.state.isHidden)\n                            isStrHidden = true;\n                    }\n                    if (isStrHidden)\n                        return [3 /*break*/, 6];\n                    s = (_h = (_g = (_f = _s.transform) === null || _f === void 0 ? void 0 : _f.cell.obj) === null || _g === void 0 ? void 0 : _g.data) !== null && _h !== void 0 ? _h : (_j = _s.cell.obj) === null || _j === void 0 ? void 0 : _j.data;\n                    if (!s)\n                        return [3 /*break*/, 6];\n                    if (s.models.length > 1) {\n                        plugin.log.warn(\"[Export] Skipping \".concat((_k = _s.cell.obj) === null || _k === void 0 ? void 0 : _k.label, \": Multimodel exports not supported.\"));\n                        return [3 /*break*/, 6];\n                    }\n                    if (s.units.some(function (u) { return !structure_1.Unit.isAtomic(u); })) {\n                        plugin.log.warn(\"[Export] Skipping \".concat((_l = _s.cell.obj) === null || _l === void 0 ? void 0 : _l.label, \": Non-atomic model exports not supported.\"));\n                        return [3 /*break*/, 6];\n                    }\n                    name_1 = entryMap.has(s.model.entryId)\n                        ? \"\".concat(s.model.entryId, \"_\").concat(entryMap.get(s.model.entryId) + 1, \".\").concat(format)\n                        : \"\".concat(s.model.entryId, \".\").concat(format);\n                    entryMap.set(s.model.entryId, ((_m = entryMap.get(s.model.entryId)) !== null && _m !== void 0 ? _m : 0) + 1);\n                    return [4 /*yield*/, ctx.update({ message: \"Exporting \".concat(s.model.entryId, \"...\"), isIndeterminate: true, canAbort: false })];\n                case 3:\n                    _o.sent();\n                    if (!(s.elementCount > 100000)) return [3 /*break*/, 5];\n                    // Give UI chance to update, only needed for larger structures.\n                    return [4 /*yield*/, new Promise(function (res) { return setTimeout(res, 50); })];\n                case 4:\n                    // Give UI chance to update, only needed for larger structures.\n                    _o.sent();\n                    _o.label = 5;\n                case 5:\n                    try {\n                        files.push([name_1, (0, structure_1.to_mmCIF)(s.model.entryId, s, format === 'bcif', { copyAllCategories: true })]);\n                    }\n                    catch (e) {\n                        if (format === 'cif' && s.elementCount > 2000000) {\n                            plugin.log.warn(\"[Export] The structure might be too big to be exported as Text CIF, consider using the BinaryCIF format instead.\");\n                        }\n                        throw e;\n                    }\n                    _o.label = 6;\n                case 6:\n                    _i++;\n                    return [3 /*break*/, 2];\n                case 7:\n                    if (files.length === 0) {\n                        commands_1.PluginCommands.Toast.Show(plugin, {\n                            title: 'Export Models',\n                            message: 'No visible structure in the 3D view to export!',\n                            key: 'superposition-toast-1',\n                            timeoutMs: 7000\n                        });\n                        return [2 /*return*/];\n                    }\n                    if (!(files.length === 1)) return [3 /*break*/, 8];\n                    (0, download_1.download)(new Blob([files[0][1]]), files[0][0]);\n                    return [3 /*break*/, 11];\n                case 8:\n                    if (!(files.length > 1)) return [3 /*break*/, 11];\n                    zipData = {};\n                    for (_c = 0, files_1 = files; _c < files_1.length; _c++) {\n                        _d = files_1[_c], fn = _d[0], data = _d[1];\n                        if (data instanceof Uint8Array) {\n                            zipData[fn] = data;\n                        }\n                        else {\n                            bytes = new Uint8Array((0, utf8_1.utf8ByteCount)(data));\n                            (0, utf8_1.utf8Write)(bytes, 0, data);\n                            zipData[fn] = bytes;\n                        }\n                    }\n                    return [4 /*yield*/, ctx.update({ message: \"Compressing Data...\", isIndeterminate: true, canAbort: false })];\n                case 9:\n                    _o.sent();\n                    return [4 /*yield*/, (0, zip_1.zip)(ctx, zipData)];\n                case 10:\n                    buffer = _o.sent();\n                    (0, download_1.download)(new Blob([new Uint8Array(buffer, 0, buffer.byteLength)]), \"structures_\".concat((0, date_1.getFormattedTime)(), \".zip\"));\n                    _o.label = 11;\n                case 11:\n                    plugin.log.info(\"[Export] Done.\");\n                    return [2 /*return*/];\n            }\n        });\n    }); });\n}\n//# sourceMappingURL=superposition-export.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/superposition-export.js\n");
  
  /***/ }),
  
  /***/ "./lib/superposition-focus-representation.js":
  /*!***************************************************!*\
    !*** ./lib/superposition-focus-representation.js ***!
    \***************************************************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SuperpositionFocusRepresentation = exports.SuperpositionFocusRepresentationTags = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar structure_1 = __webpack_require__(/*! Molstar/mol-model/structure */ \"./node_modules/molstar/lib/mol-model/structure.js\");\nvar structure_representation_params_1 = __webpack_require__(/*! Molstar/mol-plugin-state/helpers/structure-representation-params */ \"./node_modules/molstar/lib/mol-plugin-state/helpers/structure-representation-params.js\");\nvar transforms_1 = __webpack_require__(/*! Molstar/mol-plugin-state/transforms */ \"./node_modules/molstar/lib/mol-plugin-state/transforms.js\");\nvar behavior_1 = __webpack_require__(/*! Molstar/mol-plugin/behavior */ \"./node_modules/molstar/lib/mol-plugin/behavior.js\");\nvar builder_1 = __webpack_require__(/*! Molstar/mol-script/language/builder */ \"./node_modules/molstar/lib/mol-script/language/builder.js\");\nvar mol_state_1 = __webpack_require__(/*! Molstar/mol-state */ \"./node_modules/molstar/lib/mol-state/index.js\");\nvar param_definition_1 = __webpack_require__(/*! Molstar/mol-util/param-definition */ \"./node_modules/molstar/lib/mol-util/param-definition.js\");\nvar commands_1 = __webpack_require__(/*! Molstar/mol-plugin/commands */ \"./node_modules/molstar/lib/mol-plugin/commands.js\");\nvar loci_details_1 = __webpack_require__(/*! ./loci-details */ \"./lib/loci-details.js\");\nvar SuperpositionFocusRepresentationParams = function (plugin) {\n    var reprParams = transforms_1.StateTransforms.Representation.StructureRepresentation3D.definition.params(void 0, plugin);\n    return {\n        expandRadius: param_definition_1.ParamDefinition.Numeric(5, { min: 1, max: 10, step: 1 }),\n        surroundingsParams: param_definition_1.ParamDefinition.Group(reprParams, {\n            label: 'Surroundings',\n            customDefault: (0, structure_representation_params_1.createStructureRepresentationParams)(plugin, void 0, { type: 'ball-and-stick', size: 'physical', typeParams: { sizeFactor: 0.16 }, sizeParams: { scale: 0.3 } })\n        })\n    };\n};\nvar SuperpositionFocusRepresentationTags;\n(function (SuperpositionFocusRepresentationTags) {\n    SuperpositionFocusRepresentationTags[\"SurrSel\"] = \"superposition-focus-surr-sel\";\n    SuperpositionFocusRepresentationTags[\"SurrRepr\"] = \"superposition-focus-surr-repr\";\n})(SuperpositionFocusRepresentationTags = exports.SuperpositionFocusRepresentationTags || (exports.SuperpositionFocusRepresentationTags = {}));\nvar TagSet = new Set([SuperpositionFocusRepresentationTags.SurrSel, SuperpositionFocusRepresentationTags.SurrRepr]);\nvar SuperpositionFocusRepresentationBehavior = /** @class */ (function (_super) {\n    tslib_1.__extends(SuperpositionFocusRepresentationBehavior, _super);\n    function SuperpositionFocusRepresentationBehavior() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(SuperpositionFocusRepresentationBehavior.prototype, \"surrLabel\", {\n        get: function () { return \"[Focus] Surroundings (\".concat(this.params.expandRadius, \" \\u00C5)\"); },\n        enumerable: false,\n        configurable: true\n    });\n    SuperpositionFocusRepresentationBehavior.prototype.ensureShape = function (cell) {\n        var state = this.plugin.state.data, tree = state.tree;\n        var builder = state.build();\n        var refs = mol_state_1.StateSelection.findUniqueTagsInSubtree(tree, cell.transform.ref, TagSet);\n        // Selections\n        if (!refs[SuperpositionFocusRepresentationTags.SurrSel]) {\n            refs[SuperpositionFocusRepresentationTags.SurrSel] = builder\n                .to(cell)\n                .apply(transforms_1.StateTransforms.Model.StructureSelectionFromExpression, { expression: builder_1.MolScriptBuilder.struct.generator.empty(), label: this.surrLabel }, { tags: SuperpositionFocusRepresentationTags.SurrSel }).ref;\n        }\n        // Representations\n        if (!refs[SuperpositionFocusRepresentationTags.SurrRepr]) {\n            refs[SuperpositionFocusRepresentationTags.SurrRepr] = builder\n                .to(refs[SuperpositionFocusRepresentationTags.SurrSel])\n                .apply(transforms_1.StateTransforms.Representation.StructureRepresentation3D, this.params.surroundingsParams, { tags: SuperpositionFocusRepresentationTags.SurrRepr }).ref;\n        }\n        return { state: state, builder: builder, refs: refs };\n    };\n    SuperpositionFocusRepresentationBehavior.prototype.clear = function (root) {\n        var state = this.plugin.state.data;\n        var surrs = state.select(mol_state_1.StateSelection.Generators.byRef(root).subtree().withTag(SuperpositionFocusRepresentationTags.SurrSel));\n        if (surrs.length === 0)\n            return;\n        var update = state.build();\n        var expression = builder_1.MolScriptBuilder.struct.generator.empty();\n        for (var _i = 0, surrs_1 = surrs; _i < surrs_1.length; _i++) {\n            var s = surrs_1[_i];\n            update.to(s).update(transforms_1.StateTransforms.Model.StructureSelectionFromExpression, function (old) { return (tslib_1.__assign(tslib_1.__assign({}, old), { expression: expression })); });\n        }\n        return commands_1.PluginCommands.State.Update(this.plugin, { state: state, tree: update, options: { doNotLogTiming: true, doNotUpdateCurrent: true } });\n    };\n    SuperpositionFocusRepresentationBehavior.prototype.focus = function (sourceLoci) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var parent, loci, residueLoci, residueBundle, target, surroundings, lociDeatils, _a, state, builder, refs;\n            var _this = this;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        parent = this.plugin.helpers.substructureParent.get(sourceLoci.structure);\n                        if (!parent || !parent.obj)\n                            return [2 /*return*/];\n                        loci = structure_1.StructureElement.Loci.remap(sourceLoci, parent.obj.data);\n                        residueLoci = structure_1.StructureElement.Loci.extendToWholeResidues(loci);\n                        residueBundle = structure_1.StructureElement.Bundle.fromLoci(residueLoci);\n                        target = structure_1.StructureElement.Bundle.toExpression(residueBundle);\n                        surroundings = builder_1.MolScriptBuilder.struct.modifier.includeSurroundings({\n                            0: target,\n                            radius: this.params.expandRadius,\n                            'as-whole-residues': true\n                        });\n                        lociDeatils = (0, loci_details_1.lociDetails)(sourceLoci);\n                        if (!lociDeatils) {\n                            surroundings = builder_1.MolScriptBuilder.struct.modifier.exceptBy({\n                                0: surroundings,\n                                by: target\n                            });\n                        }\n                        _a = this.ensureShape(parent), state = _a.state, builder = _a.builder, refs = _a.refs;\n                        builder.to(refs[SuperpositionFocusRepresentationTags.SurrSel]).update(transforms_1.StateTransforms.Model.StructureSelectionFromExpression, function (old) { return (tslib_1.__assign(tslib_1.__assign({}, old), { expression: surroundings, label: _this.surrLabel })); });\n                        return [4 /*yield*/, commands_1.PluginCommands.State.Update(this.plugin, { state: state, tree: builder, options: { doNotLogTiming: true, doNotUpdateCurrent: true } })];\n                    case 1:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    SuperpositionFocusRepresentationBehavior.prototype.register = function (ref) {\n        var _this = this;\n        this.subscribeObservable(this.plugin.managers.structure.focus.behaviors.current, function (entry) {\n            // if (entry) this.focus(entry.loci);\n            // else this.clear(StateTransform.RootRef);\n            _this.clear(mol_state_1.StateTransform.RootRef);\n            if (entry)\n                _this.focus(entry.loci);\n        });\n    };\n    SuperpositionFocusRepresentationBehavior.prototype.update = function (params) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var old, state, builder, all, _i, _a, repr;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        old = this.params;\n                        this.params = params;\n                        state = this.plugin.state.data;\n                        builder = state.build();\n                        all = mol_state_1.StateSelection.Generators.root.subtree();\n                        for (_i = 0, _a = state.select(all.withTag(SuperpositionFocusRepresentationTags.SurrRepr)); _i < _a.length; _i++) {\n                            repr = _a[_i];\n                            builder.to(repr).update(this.params.surroundingsParams);\n                        }\n                        return [4 /*yield*/, commands_1.PluginCommands.State.Update(this.plugin, { state: state, tree: builder, options: { doNotLogTiming: true, doNotUpdateCurrent: true } })];\n                    case 1:\n                        _b.sent();\n                        if (!(params.expandRadius !== old.expandRadius)) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.clear(mol_state_1.StateTransform.RootRef)];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3: return [2 /*return*/, true];\n                }\n            });\n        });\n    };\n    return SuperpositionFocusRepresentationBehavior;\n}(behavior_1.PluginBehavior.WithSubscribers));\nexports.SuperpositionFocusRepresentation = behavior_1.PluginBehavior.create({\n    name: 'create-superposition-focus-representation',\n    display: { name: 'Superposition Focus Representation' },\n    category: 'interaction',\n    ctor: SuperpositionFocusRepresentationBehavior,\n    params: function (_, plugin) { return SuperpositionFocusRepresentationParams(plugin); }\n});\n//# sourceMappingURL=superposition-focus-representation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/superposition-focus-representation.js\n");
  
  /***/ }),
  
  /***/ "./lib/superposition-sifts-mapping.js":
  /*!********************************************!*\
    !*** ./lib/superposition-sifts-mapping.js ***!
    \********************************************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.alignAndSuperposeWithSIFTSMapping = void 0;\nvar int_1 = __webpack_require__(/*! Molstar/mol-data/int */ \"./node_modules/molstar/lib/mol-data/int.js\");\nvar minimize_rmsd_1 = __webpack_require__(/*! Molstar/mol-math/linear-algebra/3d/minimize-rmsd */ \"./node_modules/molstar/lib/mol-math/linear-algebra/3d/minimize-rmsd.js\");\nvar sifts_mapping_1 = __webpack_require__(/*! Molstar/mol-model-props/sequence/sifts-mapping */ \"./node_modules/molstar/lib/mol-model-props/sequence/sifts-mapping.js\");\nvar element_1 = __webpack_require__(/*! Molstar/mol-model/structure/structure/element */ \"./node_modules/molstar/lib/mol-model/structure/structure/element.js\");\nfunction alignAndSuperposeWithSIFTSMapping(structures, options) {\n    var _a, _b;\n    var indexMap = new Map();\n    for (var i = 0; i < structures.length; i++) {\n        var includeResidueTest = (_a = options === null || options === void 0 ? void 0 : options.includeResidueTest) !== null && _a !== void 0 ? _a : _includeAllResidues;\n        if ((options === null || options === void 0 ? void 0 : options.applyTestIndex) && !options.applyTestIndex.includes(i))\n            includeResidueTest = _includeAllResidues;\n        buildIndex(structures[i], indexMap, i, (_b = options === null || options === void 0 ? void 0 : options.traceOnly) !== null && _b !== void 0 ? _b : true, includeResidueTest);\n    }\n    var index = Array.from(indexMap.values());\n    // TODO: support non-first structure pivots\n    var pairs = findPairs(structures.length, index);\n    var zeroOverlapPairs = [];\n    var failedPairs = [];\n    var entries = [];\n    for (var _i = 0, pairs_1 = pairs; _i < pairs_1.length; _i++) {\n        var p = pairs_1[_i];\n        if (p.count === 0) {\n            zeroOverlapPairs.push([p.i, p.j]);\n        }\n        else {\n            var _c = getPositionTables(index, p.i, p.j, p.count), a = _c[0], b = _c[1];\n            var transform = minimize_rmsd_1.MinimizeRmsd.compute({ a: a, b: b });\n            if (Number.isNaN(transform.rmsd)) {\n                failedPairs.push([p.i, p.j]);\n            }\n            else {\n                entries.push({ transform: transform, pivot: p.i, other: p.j });\n            }\n        }\n    }\n    return { entries: entries, zeroOverlapPairs: zeroOverlapPairs, failedPairs: failedPairs };\n}\nexports.alignAndSuperposeWithSIFTSMapping = alignAndSuperposeWithSIFTSMapping;\nfunction getPositionTables(index, pivot, other, N) {\n    var xs = minimize_rmsd_1.MinimizeRmsd.Positions.empty(N);\n    var ys = minimize_rmsd_1.MinimizeRmsd.Positions.empty(N);\n    var o = 0;\n    for (var _i = 0, index_1 = index; _i < index_1.length; _i++) {\n        var pivots = index_1[_i].pivots;\n        var a = pivots[pivot];\n        var b = pivots[other];\n        if (!a || !b)\n            continue;\n        var l = Math.min(a[2] - a[1], b[2] - b[1]);\n        // TODO: check if residue types match?\n        for (var i = 0; i < l; i++) {\n            var eI = (a[1] + i);\n            xs.x[o] = a[0].conformation.x(eI);\n            xs.y[o] = a[0].conformation.y(eI);\n            xs.z[o] = a[0].conformation.z(eI);\n            eI = (b[1] + i);\n            ys.x[o] = b[0].conformation.x(eI);\n            ys.y[o] = b[0].conformation.y(eI);\n            ys.z[o] = b[0].conformation.z(eI);\n            o++;\n        }\n    }\n    return [xs, ys];\n}\nfunction findPairs(N, index) {\n    var pairwiseCounts = [];\n    for (var i = 0; i < N; i++) {\n        pairwiseCounts[i] = [];\n        for (var j = 0; j < N; j++)\n            pairwiseCounts[i][j] = 0;\n    }\n    for (var _i = 0, index_2 = index; _i < index_2.length; _i++) {\n        var pivots = index_2[_i].pivots;\n        for (var i = 0; i < N; i++) {\n            if (!pivots[i])\n                continue;\n            var lI = pivots[i][2] - pivots[i][1];\n            for (var j = i + 1; j < N; j++) {\n                if (!pivots[j])\n                    continue;\n                var lJ = pivots[j][2] - pivots[j][1];\n                pairwiseCounts[i][j] = pairwiseCounts[i][j] + Math.min(lI, lJ);\n            }\n        }\n    }\n    var ret = [];\n    for (var j = 1; j < N; j++) {\n        ret[j - 1] = { i: 0, j: j, count: pairwiseCounts[0][j] };\n    }\n    // TODO: support non-first structure pivots\n    // for (let i = 0; i < N - 1; i++) {\n    //     let max = 0, maxJ = i;\n    //     for (let j = i + 1; j < N; j++) {\n    //         if (pairwiseCounts[i][j] > max) {\n    //             maxJ = j;\n    //             max = pairwiseCounts[i][j];\n    //         }\n    //     }\n    //     ret[i] = { i, j: maxJ, count: max };\n    // }\n    return ret;\n}\nfunction _includeAllResidues() { return true; }\nfunction buildIndex(structure, index, sI, traceOnly, includeTest) {\n    var _a;\n    var loc = element_1.StructureElement.Location.create(structure);\n    for (var _i = 0, _b = structure.units; _i < _b.length; _i++) {\n        var unit = _b[_i];\n        if (unit.kind !== 0 /* Unit.Kind.Atomic */)\n            continue;\n        var elements = unit.elements, model = unit.model;\n        loc.unit = unit;\n        var map = sifts_mapping_1.SIFTSMapping.Provider.get(model).value;\n        if (!map)\n            return;\n        var dbName = map.dbName, accession = map.accession, num = map.num;\n        var chainsIt = int_1.Segmentation.transientSegments(unit.model.atomicHierarchy.chainAtomSegments, elements);\n        var residuesIt = int_1.Segmentation.transientSegments(unit.model.atomicHierarchy.residueAtomSegments, elements);\n        var traceElementIndex = unit.model.atomicHierarchy.derived.residue.traceElementIndex;\n        while (chainsIt.hasNext) {\n            var chainSegment = chainsIt.move();\n            residuesIt.setSegment(chainSegment);\n            while (residuesIt.hasNext) {\n                var residueSegment = residuesIt.move();\n                var rI = residueSegment.index;\n                if (!dbName[rI])\n                    continue;\n                var traceElement = traceElementIndex[rI];\n                var start = void 0, end = void 0;\n                if (traceOnly) {\n                    start = traceElement;\n                    if (start === -1)\n                        continue;\n                    end = start + 1;\n                }\n                else {\n                    start = elements[residueSegment.start];\n                    end = elements[residueSegment.end - 1] + 1;\n                }\n                loc.element = (traceElement >= 0 ? traceElement : start);\n                if (!includeTest(loc, rI, start, end))\n                    continue;\n                var key = \"\".concat(dbName[rI], \"-\").concat(accession[rI].split('-')[0], \"-\").concat(num[rI]);\n                if (!index.has(key)) {\n                    index.set(key, { key: key, pivots: (_a = {}, _a[sI] = [unit, start, end], _a) });\n                }\n                else {\n                    var entry = index.get(key);\n                    if (!entry.pivots[sI]) {\n                        entry.pivots[sI] = [unit, start, end];\n                    }\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=superposition-sifts-mapping.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/superposition-sifts-mapping.js\n");
  
  /***/ }),
  
  /***/ "./lib/superposition.js":
  /*!******************************!*\
    !*** ./lib/superposition.js ***!
    \******************************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.renderSuperposition = exports.superposeAf = exports.loadAfStructure = exports.initSuperposition = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar linear_algebra_1 = __webpack_require__(/*! Molstar/mol-math/linear-algebra */ \"./node_modules/molstar/lib/mol-math/linear-algebra.js\");\nvar builder_1 = __webpack_require__(/*! Molstar/mol-script/language/builder */ \"./node_modules/molstar/lib/mol-script/language/builder.js\");\nvar mol_state_1 = __webpack_require__(/*! Molstar/mol-state */ \"./node_modules/molstar/lib/mol-state/index.js\");\nvar transforms_1 = __webpack_require__(/*! Molstar/mol-plugin-state/transforms */ \"./node_modules/molstar/lib/mol-plugin-state/transforms.js\");\nvar assets_1 = __webpack_require__(/*! Molstar/mol-util/assets */ \"./node_modules/molstar/lib/mol-util/assets.js\");\nvar helpers_1 = __webpack_require__(/*! ./helpers */ \"./lib/helpers.js\");\nvar lists_1 = __webpack_require__(/*! Molstar/mol-util/color/lists */ \"./node_modules/molstar/lib/mol-util/color/lists.js\");\nvar color_1 = __webpack_require__(/*! Molstar/mol-util/color/color */ \"./node_modules/molstar/lib/mol-util/color/color.js\");\nvar script_1 = __webpack_require__(/*! Molstar/mol-script/script */ \"./node_modules/molstar/lib/mol-script/script.js\");\nvar mol_task_1 = __webpack_require__(/*! Molstar/mol-task */ \"./node_modules/molstar/lib/mol-task/index.js\");\nvar superposition_sifts_mapping_1 = __webpack_require__(/*! ./superposition-sifts-mapping */ \"./lib/superposition-sifts-mapping.js\");\nvar alphafold_transparency_1 = __webpack_require__(/*! ./alphafold-transparency */ \"./lib/alphafold-transparency.js\");\nvar structure_1 = __webpack_require__(/*! Molstar/mol-model/structure */ \"./node_modules/molstar/lib/mol-model/structure.js\");\nfunction getRandomColor(plugin, segmentIndex) {\n    var clList = lists_1.ColorLists;\n    var spState = plugin.customState.superpositionState;\n    var palleteIndex = spState.colorState[segmentIndex].palleteIndex;\n    var colorIndex = spState.colorState[segmentIndex].colorIndex;\n    if (clList[spState.colorPalette[palleteIndex]].list[colorIndex + 1]) {\n        colorIndex += 1;\n    }\n    else {\n        colorIndex = 0;\n        palleteIndex = spState.colorPalette[palleteIndex + 1] ? palleteIndex + 1 : 0;\n    }\n    var palleteName = spState.colorPalette[palleteIndex];\n    plugin.customState.superpositionState.colorState[segmentIndex].palleteIndex = palleteIndex;\n    plugin.customState.superpositionState.colorState[segmentIndex].colorIndex = colorIndex;\n    return clList[palleteName].list[colorIndex];\n}\nfunction initSuperposition(plugin) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var customState, superpositionParams, segmentData, afStrUrls, segmentIndex, clusterIndexs, entryList, clusters;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, plugin.clear()];\n                case 1:\n                    _a.sent();\n                    customState = plugin.customState;\n                    superpositionParams = customState.initParams.superpositionParams;\n                    plugin.customState.superpositionState = {\n                        models: {},\n                        entries: {},\n                        refMaps: {},\n                        segmentData: void 0,\n                        matrixData: {},\n                        activeSegment: 0,\n                        loadedStructs: [],\n                        visibleRefs: [],\n                        invalidStruct: [],\n                        noMatrixStruct: [],\n                        hets: {},\n                        colorPalette: ['dark-2', 'red-yellow-green', 'paired', 'set-1', 'accent', 'set-2', 'rainbow'],\n                        colorState: [],\n                        alphafold: {\n                            apiData: {\n                                cif: '',\n                                pae: '',\n                                length: 0\n                            },\n                            length: 0,\n                            ref: '',\n                            traceOnly: true,\n                            visibility: [],\n                            transforms: [],\n                            rmsds: [],\n                            coordinateSystems: []\n                        }\n                    };\n                    // Get segment and cluster information for the given uniprot accession\n                    return [4 /*yield*/, getSegmentData(plugin)];\n                case 2:\n                    // Get segment and cluster information for the given uniprot accession\n                    _a.sent();\n                    segmentData = plugin.customState.superpositionState.segmentData;\n                    if (!segmentData)\n                        return [2 /*return*/];\n                    // Load Matrix Data\n                    return [4 /*yield*/, getMatrixData(plugin)];\n                case 3:\n                    // Load Matrix Data\n                    _a.sent();\n                    if (!plugin.customState.superpositionState.segmentData)\n                        return [2 /*return*/];\n                    return [4 /*yield*/, getAfUrl(plugin, customState.initParams.moleculeId)];\n                case 4:\n                    afStrUrls = _a.sent();\n                    if (afStrUrls)\n                        customState.superpositionState.alphafold.apiData = afStrUrls;\n                    segmentData.forEach(function () {\n                        plugin.customState.superpositionState.loadedStructs.push([]);\n                        plugin.customState.superpositionState.visibleRefs.push([]);\n                        plugin.customState.superpositionState.colorState.push({ palleteIndex: 0, colorIndex: -1 });\n                    });\n                    segmentIndex = (superpositionParams && superpositionParams.segment) ? superpositionParams.segment - 1 : 0;\n                    plugin.customState.superpositionState.activeSegment = segmentIndex + 1;\n                    clusterIndexs = (superpositionParams && superpositionParams.cluster) ? superpositionParams.cluster : void 0;\n                    // Emit segment API data load event\n                    plugin.customState.events.superpositionInit.next(true);\n                    entryList = [];\n                    clusters = segmentData[segmentIndex].clusters;\n                    clusters.forEach(function (cluster, clusterIndex) {\n                        // Validate for cluster index if provided in superPositionParams\n                        if (clusterIndexs && clusterIndexs.indexOf(clusterIndex) === -1)\n                            return;\n                        // Add respresentative structure to the list\n                        if (superpositionParams && superpositionParams.superposeAll) {\n                            entryList = entryList.concat(cluster);\n                        }\n                        else {\n                            entryList.push(cluster[0]);\n                        }\n                    });\n                    return [4 /*yield*/, renderSuperposition(plugin, segmentIndex, entryList)];\n                case 5:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    });\n}\nexports.initSuperposition = initSuperposition;\nfunction createCarbVisLabel(carbLigNamesAndCount) {\n    var compList = [];\n    for (var carbCompId in carbLigNamesAndCount) {\n        compList.push(\"\".concat(carbCompId, \" (\").concat(carbLigNamesAndCount[carbCompId], \")\"));\n    }\n    return compList.join(', ');\n}\nfunction getAfUrl(plugin, accession) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var apiResponse, apiData;\n        var _this = this;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, plugin.runTask(mol_task_1.Task.create('Get AlphaFold URL', function (ctx) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                        var e_1;\n                        return tslib_1.__generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    _a.trys.push([0, 2, , 3]);\n                                    return [4 /*yield*/, plugin.fetch({ url: \"https://alphafold.ebi.ac.uk/api/prediction/\".concat(accession), type: 'json' }).runInContext(ctx)];\n                                case 1:\n                                    apiResponse = _a.sent();\n                                    if (apiResponse && (apiResponse === null || apiResponse === void 0 ? void 0 : apiResponse[0].bcifUrl)) {\n                                        apiData = {\n                                            cif: apiResponse === null || apiResponse === void 0 ? void 0 : apiResponse[0].cifUrl,\n                                            pae: apiResponse === null || apiResponse === void 0 ? void 0 : apiResponse[0].paeImageUrl,\n                                            length: apiResponse === null || apiResponse === void 0 ? void 0 : apiResponse[0].uniprotEnd\n                                        };\n                                    }\n                                    return [3 /*break*/, 3];\n                                case 2:\n                                    e_1 = _a.sent();\n                                    return [3 /*break*/, 3];\n                                case 3: return [2 /*return*/];\n                            }\n                        });\n                    }); }))];\n                case 1:\n                    _a.sent();\n                    return [2 /*return*/, apiData];\n            }\n        });\n    });\n}\nfunction loadAfStructure(plugin) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var customState, structure, strInstance, spState, chainSel;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    customState = plugin.customState;\n                    return [4 /*yield*/, loadStructure(plugin, customState.superpositionState.alphafold.apiData.cif, 'mmcif', false)];\n                case 1:\n                    structure = (_a.sent()).structure;\n                    strInstance = structure;\n                    if (!strInstance)\n                        return [2 /*return*/, false];\n                    spState = plugin.customState.superpositionState;\n                    spState.alphafold.ref = strInstance === null || strInstance === void 0 ? void 0 : strInstance.ref;\n                    spState.models[\"AF-\".concat(customState.initParams.moleculeId)] = strInstance === null || strInstance === void 0 ? void 0 : strInstance.ref;\n                    return [4 /*yield*/, plugin.builders.structure.tryCreateComponentStatic(strInstance, 'polymer', { label: \"AlphaFold Structure\", tags: [\"alphafold-chain\", \"superposition-sel\"] })];\n                case 2:\n                    chainSel = _a.sent();\n                    if (!chainSel) return [3 /*break*/, 4];\n                    return [4 /*yield*/, plugin.builders.structure.representation.addRepresentation(chainSel, { type: 'putty', color: 'plddt-confidence', size: 'uniform', sizeParams: { value: 1.5 } }, { tag: \"af-superposition-visual\" })];\n                case 3:\n                    _a.sent();\n                    return [2 /*return*/, strInstance === null || strInstance === void 0 ? void 0 : strInstance.ref];\n                case 4: return [2 /*return*/, false];\n            }\n        });\n    });\n}\nexports.loadAfStructure = loadAfStructure;\nfunction superposeAf(plugin, traceOnly, segmentIndex) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var customState, spState, afStrRef, _a, afStr, segmentNum, mappingResult_1, coordinateSystems_1, failedPairsResult_1, zeroOverlapPairsResult_1, minRmsd_1, minIndex_1, rmsdList_1, segmentClusters;\n        return tslib_1.__generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    customState = plugin.customState;\n                    if (!customState.superpositionState || !customState.superpositionState.segmentData)\n                        return [2 /*return*/];\n                    spState = customState.superpositionState;\n                    _a = spState.alphafold.ref;\n                    if (_a) return [3 /*break*/, 2];\n                    return [4 /*yield*/, loadAfStructure(plugin)];\n                case 1:\n                    _a = (_b.sent());\n                    _b.label = 2;\n                case 2:\n                    afStrRef = _a;\n                    if (!afStrRef)\n                        return [2 /*return*/];\n                    afStr = plugin.managers.structure.hierarchy.current.refs.get(afStrRef);\n                    segmentNum = segmentIndex ? segmentIndex : spState.activeSegment - 1;\n                    if (!spState.alphafold.transforms[segmentNum]) {\n                        mappingResult_1 = [];\n                        coordinateSystems_1 = [];\n                        failedPairsResult_1 = [];\n                        zeroOverlapPairsResult_1 = [];\n                        minRmsd_1 = 0;\n                        minIndex_1 = 0;\n                        rmsdList_1 = [];\n                        segmentClusters = spState.segmentData[segmentNum].clusters;\n                        segmentClusters.forEach(function (cluster) {\n                            var _a, _b, _c;\n                            var modelRef = spState.models[\"\".concat(cluster[0].pdb_id, \"_\").concat(cluster[0].struct_asym_id)];\n                            if (modelRef) {\n                                var structHierarchy = plugin.managers.structure.hierarchy.current.refs.get(modelRef);\n                                if (structHierarchy) {\n                                    var input = [structHierarchy, afStr];\n                                    var structures = input.map(function (s) { var _a; return (_a = s.cell.obj) === null || _a === void 0 ? void 0 : _a.data; });\n                                    var _d = (0, superposition_sifts_mapping_1.alignAndSuperposeWithSIFTSMapping)(structures, { traceOnly: traceOnly, includeResidueTest: function (loc) { return structure_1.StructureProperties.atom.B_iso_or_equiv(loc) > 70; },\n                                        applyTestIndex: [1] }), entries = _d.entries, failedPairs = _d.failedPairs, zeroOverlapPairs = _d.zeroOverlapPairs;\n                                    if (entries.length === 0 || (entries && entries[0] && entries[0].transform.rmsd.toFixed(1) === '0.0')) {\n                                        var alignWithoutPlddt = (0, superposition_sifts_mapping_1.alignAndSuperposeWithSIFTSMapping)(structures, { traceOnly: traceOnly });\n                                        entries = alignWithoutPlddt.entries;\n                                    }\n                                    if (entries && entries[0]) {\n                                        mappingResult_1.push(entries[0]);\n                                        coordinateSystems_1.push((_c = (_b = (_a = input[0]) === null || _a === void 0 ? void 0 : _a.transform) === null || _b === void 0 ? void 0 : _b.cell.obj) === null || _c === void 0 ? void 0 : _c.data.coordinateSystem);\n                                        var totalMappings = mappingResult_1.length;\n                                        if (totalMappings === 1 || entries[0].transform.rmsd < minRmsd_1) {\n                                            minRmsd_1 = entries[0].transform.rmsd;\n                                            minIndex_1 = totalMappings === 1 ? 0 : mappingResult_1.length - 1;\n                                        }\n                                        rmsdList_1.push(\"\".concat(cluster[0].pdb_id, \" chain \").concat(cluster[0].struct_asym_id, \":\").concat(entries[0].transform.rmsd.toFixed(2)));\n                                    }\n                                    else {\n                                        if (failedPairs.length > 0)\n                                            failedPairsResult_1.push(failedPairs);\n                                        if (zeroOverlapPairs.length > 0)\n                                            zeroOverlapPairsResult_1.push(zeroOverlapPairs);\n                                        // rmsdList.push(`${cluster[0].pdb_id} ${cluster[0].struct_asym_id}:-`)\n                                    }\n                                }\n                            }\n                        });\n                        // console.log(failedPairsResult);\n                        // console.log(zeroOverlapPairsResult);\n                        if (mappingResult_1.length > 0) {\n                            spState.alphafold.visibility[segmentNum] = true;\n                            spState.alphafold.transforms[segmentNum] = mappingResult_1[minIndex_1].transform.bTransform;\n                            spState.alphafold.coordinateSystems[segmentNum] = coordinateSystems_1[minIndex_1];\n                            spState.alphafold.rmsds[segmentNum] = rmsdList_1.sort(function (a, b) { return parseFloat(a.split(':')[1]) - parseFloat(b.split(':')[1]); });\n                        }\n                    }\n                    return [4 /*yield*/, afTransform(plugin, afStr.cell, spState.alphafold.transforms[segmentNum], spState.alphafold.coordinateSystems[segmentNum])];\n                case 3:\n                    _b.sent();\n                    (0, alphafold_transparency_1.applyAFTransparency)(plugin, afStr, 0.8, 70);\n                    return [2 /*return*/, true];\n            }\n        });\n    });\n}\nexports.superposeAf = superposeAf;\nfunction renderSuperposition(plugin, segmentIndex, entryList) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var customState, superpositionParams, busyFlagOn;\n        var _this = this;\n        return tslib_1.__generator(this, function (_a) {\n            customState = plugin.customState;\n            superpositionParams = customState.initParams.superpositionParams;\n            busyFlagOn = false;\n            if (entryList.length > 1) {\n                busyFlagOn = true;\n                customState.events.isBusy.next(true);\n            }\n            // Load Coordinates and render respresentations\n            return [2 /*return*/, plugin.dataTransaction(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                    var spState, _a, entryList_1, entryList_1_1, s, strUrl, strInstance, modelRef, clearOnFail, polymerInstance, modelInstance, isBinary, _b, model, structure, matrix, chainSel, uniformColor1, uniformColor2, invalidStruct, state, hetInfo, hets, _c, hets_1, hets_1_1, het, ligand, labelTagParams, hetColor, _d, r, g, b, ligandExp, e_2_1, carbEntityCount, allCarbPolymers, polymerChainWithSurroundings, i, _i, _e, carbEntityChainId, carbEntityChain, carbEntityChainInVicinity, data, carbChainSel, carbLigands, carbLigNamesAndCount, carbLigList, _f, _g, carbLigs, ligResDetails, carbVisLabel, branchedEntity, labelTagParams, ligandExp, loadedStructIndex, e_3_1;\n                    var _h, e_3, _j, _k, _l, e_2, _m, _o;\n                    return tslib_1.__generator(this, function (_p) {\n                        switch (_p.label) {\n                            case 0:\n                                spState = plugin.customState.superpositionState;\n                                _p.label = 1;\n                            case 1:\n                                _p.trys.push([1, 47, 48, 53]);\n                                _a = true, entryList_1 = tslib_1.__asyncValues(entryList);\n                                _p.label = 2;\n                            case 2: return [4 /*yield*/, entryList_1.next()];\n                            case 3:\n                                if (!(entryList_1_1 = _p.sent(), _h = entryList_1_1.done, !_h)) return [3 /*break*/, 46];\n                                _k = entryList_1_1.value;\n                                _a = false;\n                                _p.label = 4;\n                            case 4:\n                                _p.trys.push([4, , 44, 45]);\n                                s = _k;\n                                // validate matrix availability\n                                if (!spState.matrixData[\"\".concat(s.pdb_id, \"_\").concat(s.auth_asym_id)]) {\n                                    spState.noMatrixStruct.push(\"\".concat(s.pdb_id, \"_\").concat(s.struct_asym_id));\n                                    spState.invalidStruct.push(\"\".concat(s.pdb_id, \"_\").concat(s.struct_asym_id));\n                                    return [3 /*break*/, 45];\n                                }\n                                spState.loadedStructs[segmentIndex].push(\"\".concat(s.pdb_id, \"_\").concat(s.struct_asym_id));\n                                strUrl = \"\".concat(customState.initParams.pdbeUrl, \"model-server/v1/\").concat(s.pdb_id, \"/atoms?auth_asym_id=\").concat(s.auth_asym_id, \"&encoding=\").concat(customState.initParams.encoding);\n                                if (superpositionParams && superpositionParams.ligandView)\n                                    strUrl = \"https://www.ebi.ac.uk/pdbe/entry-files/download/\".concat(s.pdb_id, \".bcif\");\n                                strInstance = void 0;\n                                modelRef = void 0;\n                                clearOnFail = true;\n                                if (!(superpositionParams && superpositionParams.ligandView && spState.entries[s.pdb_id])) return [3 /*break*/, 6];\n                                polymerInstance = plugin.state.data.select(spState.entries[s.pdb_id])[0];\n                                modelRef = polymerInstance.transform.parent;\n                                modelInstance = plugin.state.data.select(modelRef)[0];\n                                return [4 /*yield*/, plugin.builders.structure.createStructure(modelInstance, { name: 'model', params: {} })];\n                            case 5:\n                                strInstance = _p.sent();\n                                clearOnFail = false;\n                                return [3 /*break*/, 8];\n                            case 6:\n                                isBinary = customState.initParams.encoding === 'bcif' ? true : false;\n                                return [4 /*yield*/, loadStructure(plugin, strUrl, 'mmcif', isBinary)];\n                            case 7:\n                                _b = _p.sent(), model = _b.model, structure = _b.structure;\n                                strInstance = structure;\n                                modelRef = model.ref;\n                                _p.label = 8;\n                            case 8:\n                                if (!strInstance)\n                                    return [3 /*break*/, 45];\n                                // Store Refs in state\n                                if (!spState.models[\"\".concat(s.pdb_id, \"_\").concat(s.struct_asym_id)])\n                                    spState.models[\"\".concat(s.pdb_id, \"_\").concat(s.struct_asym_id)] = strInstance === null || strInstance === void 0 ? void 0 : strInstance.ref;\n                                if (superpositionParams && superpositionParams.ligandView && !spState.entries[s.pdb_id])\n                                    spState.entries[s.pdb_id] = strInstance === null || strInstance === void 0 ? void 0 : strInstance.ref;\n                                matrix = linear_algebra_1.Mat4.ofRows(plugin.customState.superpositionState.matrixData[\"\".concat(s.pdb_id, \"_\").concat(s.auth_asym_id)].matrix);\n                                return [4 /*yield*/, transform(plugin, strInstance, matrix)];\n                            case 9:\n                                _p.sent();\n                                chainSel = void 0;\n                                if (!((superpositionParams && superpositionParams.ligandView) && s.is_representative)) return [3 /*break*/, 13];\n                                uniformColor1 = getRandomColor(plugin, segmentIndex);\n                                return [4 /*yield*/, plugin.builders.structure.tryCreateComponentFromExpression(strInstance, chainSelection(s.struct_asym_id), \"Chain-\".concat(segmentIndex), { label: \"Chain\", tags: [\"superposition-sel\"] })];\n                            case 10:\n                                chainSel = _p.sent();\n                                if (!chainSel) return [3 /*break*/, 12];\n                                return [4 /*yield*/, plugin.builders.structure.representation.addRepresentation(chainSel, { type: 'putty', color: 'uniform', colorParams: { value: uniformColor1 }, size: 'uniform' }, { tag: \"superposition-visual\" })];\n                            case 11:\n                                _p.sent();\n                                spState.refMaps[chainSel.ref] = \"\".concat(s.pdb_id, \"_\").concat(s.struct_asym_id);\n                                _p.label = 12;\n                            case 12: return [3 /*break*/, 17];\n                            case 13:\n                                if (!((superpositionParams && superpositionParams.ligandView) && !s.is_representative)) return [3 /*break*/, 14];\n                                return [3 /*break*/, 17];\n                            case 14:\n                                uniformColor2 = getRandomColor(plugin, segmentIndex);\n                                return [4 /*yield*/, plugin.builders.structure.tryCreateComponentStatic(strInstance, 'polymer', { label: \"Chain\", tags: [\"Chain-\".concat(segmentIndex), \"superposition-sel\"] })];\n                            case 15:\n                                chainSel = _p.sent();\n                                if (!chainSel) return [3 /*break*/, 17];\n                                return [4 /*yield*/, plugin.builders.structure.representation.addRepresentation(chainSel, { type: 'putty', color: 'uniform', colorParams: { value: uniformColor2 }, size: 'uniform' }, { tag: \"superposition-visual\" })];\n                            case 16:\n                                _p.sent();\n                                spState.refMaps[chainSel.ref] = \"\".concat(s.pdb_id, \"_\").concat(s.struct_asym_id);\n                                _p.label = 17;\n                            case 17:\n                                invalidStruct = chainSel ? false : true;\n                                if (!(superpositionParams && superpositionParams.ligandView)) return [3 /*break*/, 43];\n                                state = plugin.state.data;\n                                return [4 /*yield*/, getLigandNamesFromModelData(plugin, state, modelRef)];\n                            case 18:\n                                hetInfo = _p.sent();\n                                hets = hetInfo ? hetInfo.hetNames : [];\n                                if (!(hets && hets.length > 0)) return [3 /*break*/, 35];\n                                _p.label = 19;\n                            case 19:\n                                _p.trys.push([19, 29, 30, 35]);\n                                _c = true, hets_1 = (e_2 = void 0, tslib_1.__asyncValues(hets));\n                                _p.label = 20;\n                            case 20: return [4 /*yield*/, hets_1.next()];\n                            case 21:\n                                if (!(hets_1_1 = _p.sent(), _l = hets_1_1.done, !_l)) return [3 /*break*/, 28];\n                                _o = hets_1_1.value;\n                                _c = false;\n                                _p.label = 22;\n                            case 22:\n                                _p.trys.push([22, , 26, 27]);\n                                het = _o;\n                                ligand = builder_1.MolScriptBuilder.struct.generator.atomGroups({\n                                    'chain-test': builder_1.MolScriptBuilder.core.rel.eq([builder_1.MolScriptBuilder.struct.atomProperty.macromolecular.auth_asym_id(), s.auth_asym_id]),\n                                    'residue-test': builder_1.MolScriptBuilder.core.rel.eq([builder_1.MolScriptBuilder.struct.atomProperty.macromolecular.label_comp_id(), het]),\n                                    'group-by': builder_1.MolScriptBuilder.core.str.concat([builder_1.MolScriptBuilder.struct.atomProperty.core.operatorName(), builder_1.MolScriptBuilder.struct.atomProperty.macromolecular.residueKey()])\n                                });\n                                labelTagParams = { label: \"\".concat(het), tags: [\"superposition-ligand-sel\"] };\n                                hetColor = color_1.Color.fromRgb(253, 3, 253);\n                                if (superpositionParams && superpositionParams.ligandColor) {\n                                    _d = superpositionParams.ligandColor, r = _d.r, g = _d.g, b = _d.b;\n                                    hetColor = color_1.Color.fromRgb(r, g, b);\n                                }\n                                return [4 /*yield*/, plugin.builders.structure.tryCreateComponentFromExpression(strInstance, ligand, \"\".concat(het, \"-\").concat(segmentIndex), labelTagParams)];\n                            case 23:\n                                ligandExp = _p.sent();\n                                if (!ligandExp) return [3 /*break*/, 25];\n                                return [4 /*yield*/, plugin.builders.structure.representation.addRepresentation(ligandExp, { type: 'ball-and-stick', color: 'uniform', colorParams: { value: hetColor } }, { tag: \"superposition-ligand-visual\" })];\n                            case 24:\n                                _p.sent();\n                                spState.refMaps[ligandExp.ref] = \"\".concat(s.pdb_id, \"_\").concat(s.struct_asym_id);\n                                invalidStruct = false;\n                                _p.label = 25;\n                            case 25: return [3 /*break*/, 27];\n                            case 26:\n                                _c = true;\n                                return [7 /*endfinally*/];\n                            case 27: return [3 /*break*/, 20];\n                            case 28: return [3 /*break*/, 35];\n                            case 29:\n                                e_2_1 = _p.sent();\n                                e_2 = { error: e_2_1 };\n                                return [3 /*break*/, 35];\n                            case 30:\n                                _p.trys.push([30, , 33, 34]);\n                                if (!(!_c && !_l && (_m = hets_1.return))) return [3 /*break*/, 32];\n                                return [4 /*yield*/, _m.call(hets_1)];\n                            case 31:\n                                _p.sent();\n                                _p.label = 32;\n                            case 32: return [3 /*break*/, 34];\n                            case 33:\n                                if (e_2) throw e_2.error;\n                                return [7 /*endfinally*/];\n                            case 34: return [7 /*endfinally*/];\n                            case 35:\n                                carbEntityCount = hetInfo ? hetInfo.carbEntityCount : 0;\n                                if (!(carbEntityCount > 0)) return [3 /*break*/, 42];\n                                return [4 /*yield*/, getCarbPolymerDetailsFromApi(plugin, s.pdb_id)];\n                            case 36:\n                                allCarbPolymers = _p.sent();\n                                polymerChainWithSurroundings = builder_1.MolScriptBuilder.struct.modifier.includeSurroundings({\n                                    0: builder_1.MolScriptBuilder.struct.generator.atomGroups({\n                                        'entity-test': builder_1.MolScriptBuilder.core.rel.eq([builder_1.MolScriptBuilder.ammp('entityType'), 'polymer']),\n                                        'chain-test': builder_1.MolScriptBuilder.core.rel.eq([builder_1.MolScriptBuilder.struct.atomProperty.macromolecular.auth_asym_id(), s.auth_asym_id]),\n                                        'group-by': builder_1.MolScriptBuilder.core.str.concat([builder_1.MolScriptBuilder.struct.atomProperty.core.operatorName(), builder_1.MolScriptBuilder.struct.atomProperty.macromolecular.residueKey()])\n                                    }),\n                                    radius: 5,\n                                    'as-whole-residues': true\n                                });\n                                i = 0;\n                                _i = 0, _e = allCarbPolymers.branchedChains;\n                                _p.label = 37;\n                            case 37:\n                                if (!(_i < _e.length)) return [3 /*break*/, 42];\n                                carbEntityChainId = _e[_i];\n                                carbEntityChain = builder_1.MolScriptBuilder.struct.generator.atomGroups({\n                                    'entity-test': builder_1.MolScriptBuilder.core.rel.eq([builder_1.MolScriptBuilder.ammp('entityType'), 'branched']),\n                                    'chain-test': builder_1.MolScriptBuilder.core.rel.eq([builder_1.MolScriptBuilder.struct.atomProperty.macromolecular.auth_asym_id(), carbEntityChainId]),\n                                    'group-by': builder_1.MolScriptBuilder.core.str.concat([builder_1.MolScriptBuilder.struct.atomProperty.core.operatorName(), builder_1.MolScriptBuilder.struct.atomProperty.macromolecular.residueKey()])\n                                });\n                                carbEntityChainInVicinity = builder_1.MolScriptBuilder.struct.filter.intersectedBy({\n                                    0: polymerChainWithSurroundings,\n                                    by: carbEntityChain\n                                });\n                                data = (plugin.state.data.select(strInstance.ref)[0].obj).data;\n                                carbChainSel = script_1.Script.getStructureSelection(carbEntityChainInVicinity, data);\n                                if (!(carbChainSel && carbChainSel.kind === 'sequence')) return [3 /*break*/, 40];\n                                carbLigands = [];\n                                carbLigNamesAndCount = {};\n                                carbLigList = [];\n                                for (_f = 0, _g = allCarbPolymers.branchedLigands[i]; _f < _g.length; _f++) {\n                                    carbLigs = _g[_f];\n                                    ligResDetails = carbLigs.split('-');\n                                    carbLigands.push(builder_1.MolScriptBuilder.core.rel.eq([builder_1.MolScriptBuilder.struct.atomProperty.macromolecular.auth_seq_id(), +ligResDetails[1]]));\n                                    if (carbLigNamesAndCount[ligResDetails[0]]) {\n                                        carbLigNamesAndCount[ligResDetails[0]]++;\n                                    }\n                                    else {\n                                        carbLigNamesAndCount[ligResDetails[0]] = 1;\n                                    }\n                                    carbLigList.push(ligResDetails[0]);\n                                }\n                                carbVisLabel = createCarbVisLabel(carbLigNamesAndCount);\n                                branchedEntity = builder_1.MolScriptBuilder.struct.generator.atomGroups({\n                                    'entity-test': builder_1.MolScriptBuilder.core.rel.eq([builder_1.MolScriptBuilder.ammp('entityType'), 'branched']),\n                                    'group-by': builder_1.MolScriptBuilder.core.str.concat([builder_1.MolScriptBuilder.struct.atomProperty.core.operatorName(), builder_1.MolScriptBuilder.struct.atomProperty.macromolecular.residueKey()]),\n                                    'chain-test': builder_1.MolScriptBuilder.core.rel.eq([builder_1.MolScriptBuilder.struct.atomProperty.macromolecular.auth_asym_id(), carbEntityChainId]),\n                                    'residue-test': builder_1.MolScriptBuilder.core.logic.or(carbLigands)\n                                });\n                                labelTagParams = { label: \"\".concat(carbVisLabel), tags: [\"superposition-carb-sel\"] };\n                                return [4 /*yield*/, plugin.builders.structure.tryCreateComponentFromExpression(strInstance, branchedEntity, \"\".concat(carbLigList.join('-'), \"-\").concat(segmentIndex), labelTagParams)];\n                            case 38:\n                                ligandExp = _p.sent();\n                                if (!ligandExp) return [3 /*break*/, 40];\n                                return [4 /*yield*/, plugin.builders.structure.representation.addRepresentation(ligandExp, { type: 'carbohydrate' }, { tag: \"superposition-carb-visual\" })];\n                            case 39:\n                                _p.sent();\n                                spState.refMaps[ligandExp.ref] = \"\".concat(s.pdb_id, \"_\").concat(s.struct_asym_id);\n                                invalidStruct = false;\n                                _p.label = 40;\n                            case 40:\n                                i++;\n                                _p.label = 41;\n                            case 41:\n                                _i++;\n                                return [3 /*break*/, 37];\n                            case 42:\n                                if (invalidStruct) {\n                                    spState.invalidStruct.push(\"\".concat(s.pdb_id, \"_\").concat(s.struct_asym_id));\n                                    loadedStructIndex = spState.loadedStructs[segmentIndex].indexOf(\"\".concat(s.pdb_id, \"_\").concat(s.struct_asym_id));\n                                    if (loadedStructIndex > -1)\n                                        spState.loadedStructs[segmentIndex].splice(loadedStructIndex, 1);\n                                    // remove downloaded data\n                                    if (clearOnFail) {\n                                        // const m = plugin.state.data.select(modelRef)[0];\n                                        // const t = plugin.state.data.select(m.transform.parent)[0];\n                                        // const d = plugin.state.data.select(t.transform.parent)[0];\n                                        // PluginCommands.State.RemoveObject(plugin, { state: d.parent!, ref: d.transform.parent, removeParentGhosts: true });\n                                    }\n                                }\n                                else {\n                                    // if(interactingHets.length > 0) spState.hets[`${s.pdb_id}_${s.struct_asym_id}`] = interactingHets;\n                                }\n                                _p.label = 43;\n                            case 43: return [3 /*break*/, 45];\n                            case 44:\n                                _a = true;\n                                return [7 /*endfinally*/];\n                            case 45: return [3 /*break*/, 2];\n                            case 46: return [3 /*break*/, 53];\n                            case 47:\n                                e_3_1 = _p.sent();\n                                e_3 = { error: e_3_1 };\n                                return [3 /*break*/, 53];\n                            case 48:\n                                _p.trys.push([48, , 51, 52]);\n                                if (!(!_a && !_h && (_j = entryList_1.return))) return [3 /*break*/, 50];\n                                return [4 /*yield*/, _j.call(entryList_1)];\n                            case 49:\n                                _p.sent();\n                                _p.label = 50;\n                            case 50: return [3 /*break*/, 52];\n                            case 51:\n                                if (e_3) throw e_3.error;\n                                return [7 /*endfinally*/];\n                            case 52: return [7 /*endfinally*/];\n                            case 53:\n                                if (busyFlagOn) {\n                                    busyFlagOn = false;\n                                    customState.events.isBusy.next(false);\n                                }\n                                return [2 /*return*/];\n                        }\n                    });\n                }); })];\n        });\n    });\n}\nexports.renderSuperposition = renderSuperposition;\nfunction getLigandNamesFromModelData(plugin, state, modelRef) {\n    var _a;\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var cell, model, structures, _i, _b, s, structure, info;\n        return tslib_1.__generator(this, function (_c) {\n            switch (_c.label) {\n                case 0:\n                    cell = state.select(modelRef)[0];\n                    if (!cell || !cell.obj)\n                        return [2 /*return*/, void 0];\n                    model = cell.obj.data;\n                    if (!model)\n                        return [2 /*return*/];\n                    structures = [];\n                    for (_i = 0, _b = plugin.managers.structure.hierarchy.selection.structures; _i < _b.length; _i++) {\n                        s = _b[_i];\n                        structure = (_a = s.cell.obj) === null || _a === void 0 ? void 0 : _a.data;\n                        if (structure)\n                            structures.push(structure);\n                    }\n                    return [4 /*yield*/, helpers_1.ModelInfo.get(model, structures)];\n                case 1:\n                    info = _c.sent();\n                    return [2 /*return*/, info];\n            }\n        });\n    });\n}\nfunction loadStructure(plugin, url, format, isBinary) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var data, trajectory, model, modelProperties, structure, e_4;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    _a.trys.push([0, 7, , 8]);\n                    return [4 /*yield*/, plugin.builders.data.download({ url: assets_1.Asset.Url(url), isBinary: isBinary })];\n                case 1:\n                    data = _a.sent();\n                    return [4 /*yield*/, plugin.builders.structure.parseTrajectory(data, format)];\n                case 2:\n                    trajectory = _a.sent();\n                    return [4 /*yield*/, plugin.builders.structure.createModel(trajectory)];\n                case 3:\n                    model = _a.sent();\n                    return [4 /*yield*/, plugin.builders.structure.insertModelProperties(model)];\n                case 4:\n                    modelProperties = _a.sent();\n                    return [4 /*yield*/, plugin.builders.structure.createStructure(modelProperties || model, { name: 'model', params: {} })];\n                case 5:\n                    structure = _a.sent();\n                    return [4 /*yield*/, plugin.builders.structure.insertStructureProperties(structure)];\n                case 6:\n                    _a.sent();\n                    return [2 /*return*/, { data: data, trajectory: trajectory, model: model, structure: structure }];\n                case 7:\n                    e_4 = _a.sent();\n                    return [2 /*return*/, { structure: void 0 }];\n                case 8: return [2 /*return*/];\n            }\n        });\n    });\n}\nfunction chainSelection(struct_asym_id) {\n    return builder_1.MolScriptBuilder.struct.generator.atomGroups({\n        'chain-test': builder_1.MolScriptBuilder.core.rel.eq([builder_1.MolScriptBuilder.struct.atomProperty.macromolecular.label_asym_id(), struct_asym_id])\n    });\n}\nfunction transform(plugin, s, matrix) {\n    var b = plugin.state.data.build().to(s)\n        .insert(transforms_1.StateTransforms.Model.TransformStructureConformation, { transform: { name: 'matrix', params: { data: matrix, transpose: false } } });\n    return plugin.runTask(plugin.state.data.updateTree(b));\n}\nfunction afTransform(plugin, s, matrix, coordinateSystem) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var r, o, transform, params, b;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    r = mol_state_1.StateObjectRef.resolveAndCheck(plugin.state.data, s);\n                    if (!r)\n                        return [2 /*return*/];\n                    o = plugin.state.data.selectQ(function (q) { return q.byRef(r.transform.ref).subtree().withTransformer(transforms_1.StateTransforms.Model.TransformStructureConformation); })[0];\n                    transform = coordinateSystem && !linear_algebra_1.Mat4.isIdentity(coordinateSystem.matrix)\n                        ? linear_algebra_1.Mat4.mul((0, linear_algebra_1.Mat4)(), coordinateSystem.matrix, matrix)\n                        : matrix;\n                    params = {\n                        transform: {\n                            name: 'matrix',\n                            params: { data: transform, transpose: false }\n                        }\n                    };\n                    b = o\n                        ? plugin.state.data.build().to(o).update(params)\n                        : plugin.state.data.build().to(s)\n                            .insert(transforms_1.StateTransforms.Model.TransformStructureConformation, params, { tags: 'SuperpositionTransform' });\n                    return [4 /*yield*/, plugin.runTask(plugin.state.data.updateTree(b))];\n                case 1:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    });\n}\nfunction getMatrixData(plugin) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var customState, matrixAccession, clusterRecUrlStr, assetManager, clusterRecUrl, clusterRecData, e_5;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    customState = plugin.customState;\n                    matrixAccession = customState.initParams.superpositionParams.matrixAccession ? customState.initParams.superpositionParams.matrixAccession : customState.initParams.moleculeId;\n                    clusterRecUrlStr = \"\".concat(customState.initParams.pdbeUrl, \"static/superpose/matrices/\").concat(matrixAccession);\n                    assetManager = plugin.managers.asset;\n                    clusterRecUrl = assets_1.Asset.getUrlAsset(assetManager, clusterRecUrlStr);\n                    _a.label = 1;\n                case 1:\n                    _a.trys.push([1, 3, , 4]);\n                    return [4 /*yield*/, plugin.runTask(assetManager.resolve(clusterRecUrl, 'json', false))];\n                case 2:\n                    clusterRecData = _a.sent();\n                    if (clusterRecData && clusterRecData.data) {\n                        plugin.customState.superpositionState.matrixData = clusterRecData.data;\n                    }\n                    return [3 /*break*/, 4];\n                case 3:\n                    e_5 = _a.sent();\n                    customState['superpositionError'] = \"Matrix data not available for \".concat(matrixAccession);\n                    plugin.customState.events.superpositionInit.next(true); // Emit segment API data load event\n                    return [3 /*break*/, 4];\n                case 4: return [2 /*return*/];\n            }\n        });\n    });\n}\nfunction getSegmentData(plugin) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var customState, segmentsUrl, assetManager, url, result, e_6;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    customState = plugin.customState;\n                    segmentsUrl = \"\".concat(customState.initParams.pdbeUrl, \"graph-api/uniprot/superposition/\").concat(customState.initParams.moleculeId);\n                    assetManager = plugin.managers.asset;\n                    url = assets_1.Asset.getUrlAsset(assetManager, segmentsUrl);\n                    _a.label = 1;\n                case 1:\n                    _a.trys.push([1, 3, , 4]);\n                    return [4 /*yield*/, plugin.runTask(assetManager.resolve(url, 'json', false))];\n                case 2:\n                    result = _a.sent();\n                    if (result && result.data) {\n                        customState.superpositionState.segmentData = result.data[customState.initParams.moleculeId];\n                    }\n                    return [3 /*break*/, 4];\n                case 3:\n                    e_6 = _a.sent();\n                    customState['superpositionError'] = \"Superposition data not available for \".concat(customState.initParams.moleculeId);\n                    plugin.customState.events.superpositionInit.next(true); // Emit segment API data load event\n                    return [3 /*break*/, 4];\n                case 4: return [2 /*return*/];\n            }\n        });\n    });\n}\nfunction getChainLigands(carbEntity) {\n    var ligandChain = [];\n    var ligandLabels = [];\n    var ligands = [];\n    var labelValueArr = [];\n    var ligNameStr = '';\n    for (var _i = 0, _a = carbEntity.chem_comp_list; _i < _a.length; _i++) {\n        var chemComp = _a[_i];\n        labelValueArr.push(\"\".concat(chemComp.chem_comp_id, \" (\").concat(chemComp.count, \")\"));\n    }\n    ligNameStr = labelValueArr.join(', ');\n    for (var _b = 0, _c = carbEntity.chains; _b < _c.length; _b++) {\n        var chain = _c[_b];\n        ligandChain.push(chain.chain_id);\n        ligandLabels.push(ligNameStr);\n        var chainLigands = [];\n        for (var _d = 0, _e = chain.residues; _d < _e.length; _d++) {\n            var residue = _e[_d];\n            chainLigands.push(residue.chem_comp_id + '-' + residue.residue_number);\n        }\n        ligands.push(chainLigands);\n    }\n    return {\n        ligands: ligands,\n        ligandChain: ligandChain,\n        ligandLabels: ligandLabels\n    };\n}\nfunction getCarbPolymerDetailsFromApi(plugin, pdb_id) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var customState, apiUrl, assetManager, url, branchedLigands, branchedChains, branchedlabels, result, carbEntities, _i, carbEntities_1, carbEntity, carbLigData, e_7;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    customState = plugin.customState;\n                    apiUrl = \"\".concat(customState.initParams.pdbeUrl, \"api/pdb/entry/carbohydrate_polymer/\").concat(pdb_id);\n                    assetManager = plugin.managers.asset;\n                    url = assets_1.Asset.getUrlAsset(assetManager, apiUrl);\n                    branchedLigands = [];\n                    branchedChains = [];\n                    branchedlabels = [];\n                    _a.label = 1;\n                case 1:\n                    _a.trys.push([1, 3, , 4]);\n                    return [4 /*yield*/, plugin.runTask(assetManager.resolve(url, 'json', false))];\n                case 2:\n                    result = _a.sent();\n                    if (result && result.data) {\n                        carbEntities = result.data[pdb_id];\n                        for (_i = 0, carbEntities_1 = carbEntities; _i < carbEntities_1.length; _i++) {\n                            carbEntity = carbEntities_1[_i];\n                            carbLigData = getChainLigands(carbEntity);\n                            branchedLigands = branchedLigands.concat(carbLigData.ligands);\n                            branchedChains = branchedChains.concat(carbLigData.ligandChain);\n                            branchedlabels = branchedlabels.concat(carbLigData.ligandLabels);\n                        }\n                    }\n                    return [3 /*break*/, 4];\n                case 3:\n                    e_7 = _a.sent();\n                    return [3 /*break*/, 4];\n                case 4: return [2 /*return*/, {\n                        branchedChains: branchedChains,\n                        branchedLigands: branchedLigands,\n                        branchedlabels: branchedlabels\n                    }];\n            }\n        });\n    });\n}\n//# sourceMappingURL=superposition.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/superposition.js\n");
  
  /***/ }),
  
  /***/ "./lib/ui/alphafold-superposition.js":
  /*!*******************************************!*\
    !*** ./lib/ui/alphafold-superposition.js ***!
    \*******************************************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AfSuperpositionControls = exports.AlphafoldSuperpositionParams = exports.AlphafoldSuperpositionControls = exports.AlphafoldPaeControls = exports.InfoIconSvg = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar jsx_runtime_1 = __webpack_require__(/*! react/jsx-runtime */ \"./node_modules/react/jsx-runtime.js\");\nvar react_1 = tslib_1.__importDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\nvar base_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/base */ \"./node_modules/molstar/lib/mol-plugin-ui/base.js\");\nvar icons_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/icons */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/icons.js\");\nvar common_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/common */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/common.js\");\nvar param_definition_1 = __webpack_require__(/*! Molstar/mol-util/param-definition */ \"./node_modules/molstar/lib/mol-util/param-definition.js\");\nvar parameters_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/parameters */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/parameters.js\");\nvar superposition_1 = __webpack_require__(/*! ../superposition */ \"./lib/superposition.js\");\nvar d3_scale_1 = __webpack_require__(/*! d3-scale */ \"./node_modules/d3-scale/src/index.js\");\nvar d3_axis_1 = __webpack_require__(/*! d3-axis */ \"./node_modules/d3-axis/src/index.js\");\nvar d3_selection_1 = __webpack_require__(/*! d3-selection */ \"./node_modules/d3-selection/src/index.js\");\nvar _InfoIcon = (0, jsx_runtime_1.jsx)(\"svg\", tslib_1.__assign({ width: '24px', height: '24px', viewBox: '0 0 24 24', strokeWidth: '0.1px' }, { children: (0, jsx_runtime_1.jsx)(\"path\", { fill: \"currentColor\", d: \"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M11,17H13V11H11V17Z\" }) }));\nfunction InfoIconSvg() { return _InfoIcon; }\nexports.InfoIconSvg = InfoIconSvg;\nvar AlphafoldPaeControls = /** @class */ (function (_super) {\n    tslib_1.__extends(AlphafoldPaeControls, _super);\n    function AlphafoldPaeControls(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        _this.axisBoxRef = react_1.default.createRef();\n        return _this;\n    }\n    AlphafoldPaeControls.prototype.defaultState = function () {\n        return {\n            isCollapsed: false,\n            header: 'AlphaFold PAE',\n            brand: { accent: 'gray', svg: icons_1.SuperpositionSvg },\n            isHidden: true\n        };\n    };\n    AlphafoldPaeControls.prototype.componentDidMount = function () {\n        var _this = this;\n        this.subscribe(this.plugin.managers.structure.hierarchy.behaviors.selection, function (sel) {\n            var superpositionState = _this.plugin.customState.superpositionState;\n            if (superpositionState && superpositionState.alphafold.ref && superpositionState.alphafold.apiData.pae && superpositionState.alphafold.apiData.pae !== '' && superpositionState.alphafold.apiData.pae !== '') {\n                _this.setState({ isHidden: false });\n                var domainMax = superpositionState.alphafold.apiData.length;\n                var x = (0, d3_scale_1.scaleLinear)().domain([0, domainMax]).range([0, 200]);\n                var xAxis = (0, d3_axis_1.axisBottom)(x).ticks(6).tickFormat(_this.formatTicks).tickSizeOuter(0);\n                var yAxis = (0, d3_axis_1.axisLeft)(x).ticks(6).tickFormat(_this.formatTicks).tickSizeOuter(0);\n                var axisContainer = (0, d3_selection_1.select)(_this.axisBoxRef.current);\n                axisContainer.append('svg:svg')\n                    .attr('width', 220)\n                    .attr('height', 30)\n                    .attr('class', 'pae-x-axis')\n                    .style('z-index', '1')\n                    .style('position', 'absolute')\n                    .attr('transform', \"translate(-93,202)\")\n                    .append('g')\n                    .attr('transform', \"translate(6,0)\")\n                    .call(xAxis);\n                axisContainer.append('svg:svg')\n                    .attr('width', 50)\n                    .attr('height', 220)\n                    .attr('class', 'pae-y-axis')\n                    .style('z-index', '1')\n                    .style('position', 'absolute')\n                    .attr('transform', \"translate(-123,0)\")\n                    .append('g')\n                    .attr('transform', \"translate(36,4)\")\n                    .call(yAxis);\n            }\n        });\n    };\n    AlphafoldPaeControls.prototype.formatTicks = function (d) {\n        return d > 999 ? d / 1000 + 'k' : d;\n    };\n    AlphafoldPaeControls.prototype.renderControls = function () {\n        var superpositionState = this.plugin.customState.superpositionState;\n        if (!superpositionState || !superpositionState.alphafold)\n            return null;\n        var errorScale = [0, 5, 10, 15, 20, 25, 30];\n        return (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-flex-row', style: { height: 'auto', textAlign: 'center', justifyContent: 'center', padding: '15px 0', position: 'relative', fontSize: '12px' } }, { children: [(0, jsx_runtime_1.jsx)(\"div\", { ref: this.axisBoxRef, className: 'pae-axis-box', style: { position: 'absolute', width: '100%', height: '100%' } }), (0, jsx_runtime_1.jsx)(\"span\", tslib_1.__assign({ style: { transform: 'rotate(270deg)', position: 'absolute', transformOrigin: '0 0', left: '10px', top: '165px', fontWeight: 500 } }, { children: \"Aligned residue\" })), (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-flex-row', style: { height: 'auto', flexDirection: 'column' } }, { children: [(0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ style: { width: '200px', height: '200px', border: '1px solid #6a635a', margin: '2px 0 25px 25px', position: 'relative' } }, { children: (0, jsx_runtime_1.jsx)(\"img\", { style: { width: '100%', height: '100%', position: 'absolute', left: 0, top: 0 }, src: \"\".concat(superpositionState.alphafold.apiData.pae), alt: \"PAE\" }) })), (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ style: { textAlign: 'center', paddingLeft: '30px', marginBottom: '20px', fontWeight: 500 } }, { children: \"Scored residue\" })), (0, jsx_runtime_1.jsx)(\"img\", { style: { width: '200px', height: '10px', border: '1px solid #6a635a', margin: '2px 0 25px 25px', transform: 'rotate(180deg)' }, src: 'https://alphafold.ebi.ac.uk/assets/img/horizontal_colorbar.png', alt: \"PAE Scale\" }), (0, jsx_runtime_1.jsx)(\"ul\", tslib_1.__assign({ style: { listStyleType: 'none', fontWeight: 500, margin: 0, display: 'inline-block', position: 'absolute', top: '292px', marginLeft: '24px' } }, { children: errorScale.map(function (errValue) { return (0, jsx_runtime_1.jsx)(\"li\", tslib_1.__assign({ style: { float: 'left', marginRight: '18px' } }, { children: errValue }), errValue); }) })), (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ style: { textAlign: 'center', paddingLeft: '20px', fontWeight: 500 } }, { children: \"Expected position error (\\u00C5ngstr\\u00F6ms)\" }))] }))] }));\n    };\n    return AlphafoldPaeControls;\n}(base_1.CollapsableControls));\nexports.AlphafoldPaeControls = AlphafoldPaeControls;\nvar AlphafoldSuperpositionControls = /** @class */ (function (_super) {\n    tslib_1.__extends(AlphafoldSuperpositionControls, _super);\n    function AlphafoldSuperpositionControls() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AlphafoldSuperpositionControls.prototype.defaultState = function () {\n        return {\n            isCollapsed: false,\n            header: 'AlphaFold Superposition',\n            brand: { accent: 'gray', svg: icons_1.SuperpositionSvg },\n            isHidden: true\n        };\n    };\n    AlphafoldSuperpositionControls.prototype.componentDidMount = function () {\n        var _this = this;\n        this.subscribe(this.plugin.managers.structure.hierarchy.behaviors.selection, function (sel) {\n            var superpositionState = _this.plugin.customState.superpositionState;\n            if (superpositionState && superpositionState.alphafold.apiData.cif && superpositionState.alphafold.apiData.cif !== '') {\n                _this.setState({ isHidden: false });\n            }\n        });\n    };\n    AlphafoldSuperpositionControls.prototype.rmsdTable = function () {\n        var spData = this.plugin.customState.superpositionState;\n        var activeSegment = spData.activeSegment;\n        var rmsds = spData.alphafold.rmsds;\n        return (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-control-offset' }, { children: [(rmsds.length == 0 || !rmsds[activeSegment - 1]) && (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-flex-row', style: { padding: '5px 0 0 10px' } }, { children: (0, jsx_runtime_1.jsx)(\"strong\", { children: \"No overlap found!\" }) })), rmsds[activeSegment - 1] && (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-flex-row' }, { children: [(0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ style: { width: '40%', borderRight: '1px solid rgb(213 206 196)', padding: '5px 0 0 5px' } }, { children: (0, jsx_runtime_1.jsx)(\"strong\", { children: \"Entry\" }) })), (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ style: { padding: '5px 0 0 5px' } }, { children: (0, jsx_runtime_1.jsx)(\"strong\", { children: \"RMSD (\\u212B)\" }) }))] })), rmsds[activeSegment - 1] && rmsds[activeSegment - 1].map(function (d) {\n                    var details = d.split(':');\n                    return details[1] !== '-' ? (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-flex-row' }, { children: [(0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-control-row-label', style: { width: '40%', borderRight: '1px solid rgb(213 206 196)', padding: '5px 0 0 5px' } }, { children: details[0] })), (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ style: { padding: '5px 0 0 5px' } }, { children: details[1] }))] }), d) : null;\n                })] }));\n    };\n    AlphafoldSuperpositionControls.prototype.renderControls = function () {\n        var superpositionState = this.plugin.customState.superpositionState;\n        return (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [superpositionState.alphafold.ref !== '' && this.rmsdTable(), superpositionState.alphafold.ref === '' && (0, jsx_runtime_1.jsx)(AfSuperpositionControls, {})] });\n    };\n    return AlphafoldSuperpositionControls;\n}(base_1.CollapsableControls));\nexports.AlphafoldSuperpositionControls = AlphafoldSuperpositionControls;\nexports.AlphafoldSuperpositionParams = {\n    // alignSequences: PD.Boolean(true, { isEssential: true, description: 'For Chain-based 3D superposition, perform a sequence alignment and use the aligned residue pairs to guide the 3D superposition.' }),\n    traceOnly: param_definition_1.ParamDefinition.Boolean(true, { description: 'For Chain- and Uniprot-based 3D superposition, base superposition only on CA (and equivalent) atoms.' })\n};\nvar DefaultAlphafoldSuperpositionOptions = param_definition_1.ParamDefinition.getDefaultValues(exports.AlphafoldSuperpositionParams);\nvar AfSuperpositionControls = /** @class */ (function (_super) {\n    tslib_1.__extends(AfSuperpositionControls, _super);\n    function AfSuperpositionControls() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            isBusy: false,\n            canUseDb: true,\n            action: undefined,\n            options: DefaultAlphafoldSuperpositionOptions\n        };\n        _this.superposeDb = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var spData;\n            return tslib_1.__generator(this, function (_a) {\n                this.setState({ isBusy: true });\n                spData = this.plugin.customState.superpositionState;\n                spData.alphafold.traceOnly = this.state.options.traceOnly;\n                (0, superposition_1.superposeAf)(this.plugin, this.state.options.traceOnly);\n                return [2 /*return*/];\n            });\n        }); };\n        _this.toggleOptions = function () { return _this.setState({ action: _this.state.action === 'options' ? void 0 : 'options' }); };\n        _this.setOptions = function (values) {\n            _this.setState({ options: values });\n        };\n        return _this;\n    }\n    AfSuperpositionControls.prototype.componentDidMount = function () {\n        var _this = this;\n        this.subscribe(this.plugin.behaviors.state.isBusy, function (v) {\n            _this.setState({ isBusy: v });\n        });\n    };\n    Object.defineProperty(AfSuperpositionControls.prototype, \"selection\", {\n        get: function () {\n            return this.plugin.managers.structure.selection;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AfSuperpositionControls.prototype, \"customState\", {\n        get: function () {\n            return this.plugin.customState;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    AfSuperpositionControls.prototype.superposeByDbMapping = function () {\n        return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(common_1.Button, tslib_1.__assign({ icon: icons_1.SuperposeChainsSvg, title: 'Superpose AlphaFold structure using intersection of residues from SIFTS UNIPROT mapping.', className: 'msp-btn msp-btn-block', onClick: this.superposeDb, style: { marginTop: '1px', textAlign: 'left' }, disabled: this.state.isBusy }, { children: \"Load AlphaFold structure\" })) });\n    };\n    AfSuperpositionControls.prototype.render = function () {\n        return (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ style: { backgroundColor: '#dce54e', fontWeight: 500, padding: '5px 12px' } }, { children: \"New Feature!\" })), (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-help-text', style: { margin: '2px 0' } }, { children: (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-help-description' }, { children: [(0, jsx_runtime_1.jsx)(icons_1.Icon, { svg: InfoIconSvg, inline: true }), \"Load and superpose AlphaFold structure against representative chains.\"] })) })), (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-flex-row' }, { children: [this.state.canUseDb && this.superposeByDbMapping(), (0, jsx_runtime_1.jsx)(common_1.ToggleButton, { icon: icons_1.TuneSvg, label: '', title: 'Options', toggle: this.toggleOptions, isSelected: this.state.action === 'options', disabled: this.state.isBusy, style: { flex: '0 0 40px', padding: 0 } })] })), this.state.action === 'options' && (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-control-offset' }, { children: (0, jsx_runtime_1.jsx)(parameters_1.ParameterControls, { params: exports.AlphafoldSuperpositionParams, values: this.state.options, onChangeValues: this.setOptions, isDisabled: this.state.isBusy }) }))] });\n    };\n    return AfSuperpositionControls;\n}(base_1.PurePluginUIComponent));\nexports.AfSuperpositionControls = AfSuperpositionControls;\n//# sourceMappingURL=alphafold-superposition.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/ui/alphafold-superposition.js\n");
  
  /***/ }),
  
  /***/ "./lib/ui/alphafold-tranparency.js":
  /*!*****************************************!*\
    !*** ./lib/ui/alphafold-tranparency.js ***!
    \*****************************************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AlphafoldTransparencyControls = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar jsx_runtime_1 = __webpack_require__(/*! react/jsx-runtime */ \"./node_modules/react/jsx-runtime.js\");\nvar base_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/base */ \"./node_modules/molstar/lib/mol-plugin-ui/base.js\");\nvar icons_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/icons */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/icons.js\");\nvar param_definition_1 = __webpack_require__(/*! Molstar/mol-util/param-definition */ \"./node_modules/molstar/lib/mol-util/param-definition.js\");\nvar parameters_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/parameters */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/parameters.js\");\nvar alphafold_transparency_1 = __webpack_require__(/*! ../alphafold-transparency */ \"./lib/alphafold-transparency.js\");\nvar TransparencyParams = {\n    score: param_definition_1.ParamDefinition.Numeric(70, { min: 0, max: 100, step: 1 }, { label: 'pLDDT less than', description: 'pLDDT score value in the range of 0 to 100' }),\n    opacity: param_definition_1.ParamDefinition.Numeric(0.2, { min: 0, max: 1, step: 0.01 }, { description: 'Opacity value in the range 0 to 1' })\n};\nvar AlphafoldTransparencyControls = /** @class */ (function (_super) {\n    tslib_1.__extends(AlphafoldTransparencyControls, _super);\n    function AlphafoldTransparencyControls() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.updateTransparency = function (val) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var superpositionState, afStr;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.setState({ transpareny: val });\n                        superpositionState = this.plugin.customState.superpositionState;\n                        afStr = this.plugin.managers.structure.hierarchy.current.refs.get(superpositionState.alphafold.ref);\n                        return [4 /*yield*/, (0, alphafold_transparency_1.clearStructureTransparency)(this.plugin, afStr.components)];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, (0, alphafold_transparency_1.applyAFTransparency)(this.plugin, afStr, 1 - val.opacity, val.score)];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        }); };\n        return _this;\n    }\n    AlphafoldTransparencyControls.prototype.defaultState = function () {\n        return {\n            isCollapsed: false,\n            header: 'AlphaFold Structure Opacity',\n            brand: { accent: 'gray', svg: icons_1.SuperpositionSvg },\n            isHidden: true,\n            transpareny: {\n                score: 70,\n                opacity: 0.2\n            }\n        };\n    };\n    AlphafoldTransparencyControls.prototype.componentDidMount = function () {\n        var _this = this;\n        this.subscribe(this.plugin.managers.structure.hierarchy.behaviors.selection, function (sel) {\n            var superpositionState = _this.plugin.customState.superpositionState;\n            if (superpositionState && superpositionState.alphafold.ref && superpositionState.alphafold.ref !== '') {\n                _this.setState({ isHidden: false });\n            }\n        });\n    };\n    AlphafoldTransparencyControls.prototype.renderControls = function () {\n        return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(parameters_1.ParameterControls, { params: TransparencyParams, values: this.state.transpareny, onChangeValues: this.updateTransparency }) });\n    };\n    return AlphafoldTransparencyControls;\n}(base_1.CollapsableControls));\nexports.AlphafoldTransparencyControls = AlphafoldTransparencyControls;\n//# sourceMappingURL=alphafold-tranparency.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWIvdWkvYWxwaGFmb2xkLXRyYW5wYXJlbmN5LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFDQUFxQztBQUNyQyxjQUFjLG1CQUFPLENBQUMsZ0RBQU87QUFDN0Isb0JBQW9CLG1CQUFPLENBQUMsOERBQW1CO0FBQy9DLGFBQWEsbUJBQU8sQ0FBQyxvRkFBNEI7QUFDakQsY0FBYyxtQkFBTyxDQUFDLHdHQUFzQztBQUM1RCx5QkFBeUIsbUJBQU8sQ0FBQyxrR0FBbUM7QUFDcEUsbUJBQW1CLG1CQUFPLENBQUMsa0hBQTJDO0FBQ3RFLCtCQUErQixtQkFBTyxDQUFDLGtFQUEyQjtBQUNsRTtBQUNBLDREQUE0RCwyQkFBMkIsSUFBSSxxRkFBcUY7QUFDaEwsK0RBQStELDRCQUE0QixJQUFJLGtEQUFrRDtBQUNqSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLGtCQUFrQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLCtDQUErQztBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsaUJBQWlCO0FBQ2xEO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxnRUFBZ0UsbUVBQW1FLHFHQUFxRyxHQUFHO0FBQzNPO0FBQ0E7QUFDQSxDQUFDO0FBQ0QscUNBQXFDO0FBQ3JDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGRiZS1tb2xzdGFyLy4vbGliL3VpL2FscGhhZm9sZC10cmFucGFyZW5jeS5qcz80NjhhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BbHBoYWZvbGRUcmFuc3BhcmVuY3lDb250cm9scyA9IHZvaWQgMDtcbnZhciB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudmFyIGpzeF9ydW50aW1lXzEgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG52YXIgYmFzZV8xID0gcmVxdWlyZShcIk1vbHN0YXIvbW9sLXBsdWdpbi11aS9iYXNlXCIpO1xudmFyIGljb25zXzEgPSByZXF1aXJlKFwiTW9sc3Rhci9tb2wtcGx1Z2luLXVpL2NvbnRyb2xzL2ljb25zXCIpO1xudmFyIHBhcmFtX2RlZmluaXRpb25fMSA9IHJlcXVpcmUoXCJNb2xzdGFyL21vbC11dGlsL3BhcmFtLWRlZmluaXRpb25cIik7XG52YXIgcGFyYW1ldGVyc18xID0gcmVxdWlyZShcIk1vbHN0YXIvbW9sLXBsdWdpbi11aS9jb250cm9scy9wYXJhbWV0ZXJzXCIpO1xudmFyIGFscGhhZm9sZF90cmFuc3BhcmVuY3lfMSA9IHJlcXVpcmUoXCIuLi9hbHBoYWZvbGQtdHJhbnNwYXJlbmN5XCIpO1xudmFyIFRyYW5zcGFyZW5jeVBhcmFtcyA9IHtcbiAgICBzY29yZTogcGFyYW1fZGVmaW5pdGlvbl8xLlBhcmFtRGVmaW5pdGlvbi5OdW1lcmljKDcwLCB7IG1pbjogMCwgbWF4OiAxMDAsIHN0ZXA6IDEgfSwgeyBsYWJlbDogJ3BMRERUIGxlc3MgdGhhbicsIGRlc2NyaXB0aW9uOiAncExERFQgc2NvcmUgdmFsdWUgaW4gdGhlIHJhbmdlIG9mIDAgdG8gMTAwJyB9KSxcbiAgICBvcGFjaXR5OiBwYXJhbV9kZWZpbml0aW9uXzEuUGFyYW1EZWZpbml0aW9uLk51bWVyaWMoMC4yLCB7IG1pbjogMCwgbWF4OiAxLCBzdGVwOiAwLjAxIH0sIHsgZGVzY3JpcHRpb246ICdPcGFjaXR5IHZhbHVlIGluIHRoZSByYW5nZSAwIHRvIDEnIH0pXG59O1xudmFyIEFscGhhZm9sZFRyYW5zcGFyZW5jeUNvbnRyb2xzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEFscGhhZm9sZFRyYW5zcGFyZW5jeUNvbnRyb2xzLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFscGhhZm9sZFRyYW5zcGFyZW5jeUNvbnRyb2xzKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudXBkYXRlVHJhbnNwYXJlbmN5ID0gZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIoX3RoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3VwZXJwb3NpdGlvblN0YXRlLCBhZlN0cjtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHRyYW5zcGFyZW55OiB2YWwgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdXBlcnBvc2l0aW9uU3RhdGUgPSB0aGlzLnBsdWdpbi5jdXN0b21TdGF0ZS5zdXBlcnBvc2l0aW9uU3RhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZlN0ciA9IHRoaXMucGx1Z2luLm1hbmFnZXJzLnN0cnVjdHVyZS5oaWVyYXJjaHkuY3VycmVudC5yZWZzLmdldChzdXBlcnBvc2l0aW9uU3RhdGUuYWxwaGFmb2xkLnJlZik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCAoMCwgYWxwaGFmb2xkX3RyYW5zcGFyZW5jeV8xLmNsZWFyU3RydWN0dXJlVHJhbnNwYXJlbmN5KSh0aGlzLnBsdWdpbiwgYWZTdHIuY29tcG9uZW50cyldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCAoMCwgYWxwaGFmb2xkX3RyYW5zcGFyZW5jeV8xLmFwcGx5QUZUcmFuc3BhcmVuY3kpKHRoaXMucGx1Z2luLCBhZlN0ciwgMSAtIHZhbC5vcGFjaXR5LCB2YWwuc2NvcmUpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTsgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBbHBoYWZvbGRUcmFuc3BhcmVuY3lDb250cm9scy5wcm90b3R5cGUuZGVmYXVsdFN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaXNDb2xsYXBzZWQ6IGZhbHNlLFxuICAgICAgICAgICAgaGVhZGVyOiAnQWxwaGFGb2xkIFN0cnVjdHVyZSBPcGFjaXR5JyxcbiAgICAgICAgICAgIGJyYW5kOiB7IGFjY2VudDogJ2dyYXknLCBzdmc6IGljb25zXzEuU3VwZXJwb3NpdGlvblN2ZyB9LFxuICAgICAgICAgICAgaXNIaWRkZW46IHRydWUsXG4gICAgICAgICAgICB0cmFuc3BhcmVueToge1xuICAgICAgICAgICAgICAgIHNjb3JlOiA3MCxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9O1xuICAgIEFscGhhZm9sZFRyYW5zcGFyZW5jeUNvbnRyb2xzLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5zdWJzY3JpYmUodGhpcy5wbHVnaW4ubWFuYWdlcnMuc3RydWN0dXJlLmhpZXJhcmNoeS5iZWhhdmlvcnMuc2VsZWN0aW9uLCBmdW5jdGlvbiAoc2VsKSB7XG4gICAgICAgICAgICB2YXIgc3VwZXJwb3NpdGlvblN0YXRlID0gX3RoaXMucGx1Z2luLmN1c3RvbVN0YXRlLnN1cGVycG9zaXRpb25TdGF0ZTtcbiAgICAgICAgICAgIGlmIChzdXBlcnBvc2l0aW9uU3RhdGUgJiYgc3VwZXJwb3NpdGlvblN0YXRlLmFscGhhZm9sZC5yZWYgJiYgc3VwZXJwb3NpdGlvblN0YXRlLmFscGhhZm9sZC5yZWYgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBpc0hpZGRlbjogZmFsc2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQWxwaGFmb2xkVHJhbnNwYXJlbmN5Q29udHJvbHMucHJvdG90eXBlLnJlbmRlckNvbnRyb2xzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIGpzeF9ydW50aW1lXzEuanN4KShqc3hfcnVudGltZV8xLkZyYWdtZW50LCB7IGNoaWxkcmVuOiAoMCwganN4X3J1bnRpbWVfMS5qc3gpKHBhcmFtZXRlcnNfMS5QYXJhbWV0ZXJDb250cm9scywgeyBwYXJhbXM6IFRyYW5zcGFyZW5jeVBhcmFtcywgdmFsdWVzOiB0aGlzLnN0YXRlLnRyYW5zcGFyZW55LCBvbkNoYW5nZVZhbHVlczogdGhpcy51cGRhdGVUcmFuc3BhcmVuY3kgfSkgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gQWxwaGFmb2xkVHJhbnNwYXJlbmN5Q29udHJvbHM7XG59KGJhc2VfMS5Db2xsYXBzYWJsZUNvbnRyb2xzKSk7XG5leHBvcnRzLkFscGhhZm9sZFRyYW5zcGFyZW5jeUNvbnRyb2xzID0gQWxwaGFmb2xkVHJhbnNwYXJlbmN5Q29udHJvbHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbHBoYWZvbGQtdHJhbnBhcmVuY3kuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./lib/ui/alphafold-tranparency.js\n");
  
  /***/ }),
  
  /***/ "./lib/ui/annotation-controls.js":
  /*!***************************************!*\
    !*** ./lib/ui/annotation-controls.js ***!
    \***************************************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AnnotationsComponentControls = exports.TextsmsOutlinedSvg = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar jsx_runtime_1 = __webpack_require__(/*! react/jsx-runtime */ \"./node_modules/react/jsx-runtime.js\");\nvar common_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/common */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/common.js\");\nvar base_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/base */ \"./node_modules/molstar/lib/mol-plugin-ui/base.js\");\nvar color_1 = __webpack_require__(/*! Molstar/extensions/pdbe/structure-quality-report/color */ \"./node_modules/molstar/lib/extensions/pdbe/structure-quality-report/color.js\");\nvar mol_state_1 = __webpack_require__(/*! Molstar/mol-state */ \"./node_modules/molstar/lib/mol-state/index.js\");\nvar parameters_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/parameters */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/parameters.js\");\nvar color_2 = __webpack_require__(/*! ../domain-annotations/color */ \"./lib/domain-annotations/color.js\");\nvar behavior_1 = __webpack_require__(/*! Molstar/extensions/pdbe/structure-quality-report/behavior */ \"./node_modules/molstar/lib/extensions/pdbe/structure-quality-report/behavior.js\");\nvar behavior_2 = __webpack_require__(/*! ../domain-annotations/behavior */ \"./lib/domain-annotations/behavior.js\");\nvar icons_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/icons */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/icons.js\");\nvar hierarchy_1 = __webpack_require__(/*! Molstar/mol-plugin-state/manager/structure/hierarchy */ \"./node_modules/molstar/lib/mol-plugin-state/manager/structure/hierarchy.js\");\nvar _TextsmsOutlined = (0, jsx_runtime_1.jsxs)(\"svg\", tslib_1.__assign({ width: '24px', height: '24px', viewBox: '0 0 24 24' }, { children: [(0, jsx_runtime_1.jsx)(\"path\", { fill: \"none\", d: \"M0 0h24v24H0V0z\" }), (0, jsx_runtime_1.jsxs)(\"g\", { children: [(0, jsx_runtime_1.jsx)(\"path\", { d: \"M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0 14H6l-2 2V4h16v12z\" }), (0, jsx_runtime_1.jsx)(\"path\", { d: \"M7 9h2v2H7zM11 9h2v2h-2zM15 9h2v2h-2z\" })] })] }));\nfunction TextsmsOutlinedSvg() { return _TextsmsOutlined; }\nexports.TextsmsOutlinedSvg = TextsmsOutlinedSvg;\nvar AnnotationsComponentControls = /** @class */ (function (_super) {\n    tslib_1.__extends(AnnotationsComponentControls, _super);\n    function AnnotationsComponentControls() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            isCollapsed: false,\n            validationApplied: false,\n            domainAtnApplied: false,\n            validationOptions: false,\n            domainAtnOptions: false\n        };\n        _this.getOptionParams = function () {\n            var validationAnnotationCtrl = false;\n            var domainAnnotationCtrl = false;\n            var customState = _this.plugin.customState;\n            if (customState && customState.initParams) {\n                if (customState.initParams.validationAnnotation)\n                    validationAnnotationCtrl = true;\n                if (customState.initParams.domainAnnotation)\n                    domainAnnotationCtrl = true;\n            }\n            if ((validationAnnotationCtrl && !_this.state.validationParams) || (domainAnnotationCtrl && !_this.state.domainAtnParams)) {\n                var groupRef = mol_state_1.StateSelection.findTagInSubtree(_this.plugin.state.data.tree, mol_state_1.StateTransform.RootRef, 'structure-component-static-polymer');\n                if (groupRef) {\n                    var struct = _this.plugin.state.data.select(groupRef)[0].obj;\n                    if (struct) {\n                        var themeDataCtx = { structure: struct.data };\n                        if (validationAnnotationCtrl && !_this.state.validationParams) {\n                            var validationActionsParams = color_1.StructureQualityReportColorThemeProvider.getParams(themeDataCtx);\n                            if (validationActionsParams) {\n                                _this.setState({ validationParams: {\n                                        params: validationActionsParams,\n                                        values: { type: validationActionsParams.type.defaultValue }\n                                    } });\n                            }\n                        }\n                        if (domainAnnotationCtrl && !_this.state.domainAtnParams) {\n                            var domainActionsParams = color_2.DomainAnnotationsColorThemeProvider.getParams(themeDataCtx);\n                            if (domainActionsParams) {\n                                _this.setState({ domainAtnParams: {\n                                        params: domainActionsParams,\n                                        values: { type: domainActionsParams.type.defaultValue }\n                                    } });\n                            }\n                        }\n                    }\n                }\n            }\n        };\n        _this.toggleCollapsed = function () {\n            _this.setState({ isCollapsed: !_this.state.isCollapsed });\n        };\n        _this.toggleOptions = function (type) {\n            if (type === 0)\n                _this.setState({ validationOptions: !_this.state.validationOptions });\n            if (type === 1)\n                _this.setState({ domainAtnOptions: !_this.state.domainAtnOptions });\n        };\n        _this.applyAnnotation = function (type, visibleState, params) {\n            // Defaults\n            var themeName = 'polymer-id';\n            var themePropsToAdd = behavior_1.PDBeStructureQualityReport;\n            var themePropsToRemove = _this.state.domainAtnParams ? behavior_2.PDBeDomainAnnotations : void 0;\n            // Set Theme Params\n            if (type === 0) {\n                if (visibleState) {\n                    themeName = 'pdbe-structure-quality-report';\n                }\n                _this.setState({ validationApplied: visibleState });\n                _this.setState({ domainAtnApplied: false });\n            }\n            else {\n                themePropsToAdd = behavior_2.PDBeDomainAnnotations;\n                themePropsToRemove = _this.state.validationParams ? behavior_1.PDBeStructureQualityReport : void 0;\n                if (visibleState)\n                    themeName = 'pdbe-domain-annotations';\n                _this.setState({ domainAtnApplied: visibleState });\n                _this.setState({ validationApplied: false });\n            }\n            // Update Tooltip\n            if (visibleState && themeName !== 'polymer-id') {\n                var addTooltipUpdate = _this.plugin.state.behaviors.build().to(themePropsToAdd.id).update(themePropsToAdd, function (old) { old.showTooltip = true; });\n                _this.plugin.runTask(_this.plugin.state.behaviors.updateTree(addTooltipUpdate));\n                if (themePropsToRemove) {\n                    var removeTooltipUpdate = _this.plugin.state.behaviors.build().to(themePropsToRemove.id).update(themePropsToRemove, function (old) { old.showTooltip = false; });\n                    _this.plugin.runTask(_this.plugin.state.behaviors.updateTree(removeTooltipUpdate));\n                }\n            }\n            var polymerGroup;\n            var componentGroups = _this.plugin.managers.structure.hierarchy.currentComponentGroups;\n            componentGroups.forEach(function (compGrp) {\n                if (compGrp[0].key === 'structure-component-static-polymer')\n                    polymerGroup = compGrp;\n            });\n            if (polymerGroup) {\n                _this.plugin.managers.structure.component.updateRepresentationsTheme(polymerGroup, { color: themeName, colorParams: params ? params : void 0 });\n            }\n        };\n        _this.initApplyAnnotation = function (type) {\n            if (type === 0)\n                _this.applyAnnotation(0, !_this.state.validationApplied, _this.state.validationParams.values);\n            if (type === 1)\n                _this.applyAnnotation(1, !_this.state.domainAtnApplied, _this.state.domainAtnParams.values);\n        };\n        _this.updateValidationParams = function (val) {\n            var updatedParams = tslib_1.__assign({}, _this.state.validationParams);\n            updatedParams.values = val;\n            _this.setState({ validationParams: updatedParams });\n            if (_this.state.validationApplied)\n                _this.applyAnnotation(0, _this.state.validationApplied, val);\n        };\n        _this.updateDomainAtnParams = function (val) {\n            var updatedParams = tslib_1.__assign({}, _this.state.domainAtnParams);\n            updatedParams.values = val;\n            _this.setState({ domainAtnParams: updatedParams });\n            if (_this.state.domainAtnApplied)\n                _this.applyAnnotation(1, _this.state.domainAtnApplied, val);\n        };\n        return _this;\n    }\n    AnnotationsComponentControls.prototype.componentDidMount = function () {\n        var _this = this;\n        this.subscribe(this.plugin.managers.structure.hierarchy.behaviors.selection, function () {\n            _this.getOptionParams();\n            _this.forceUpdate();\n        });\n        this.subscribe(this.plugin.managers.structure.hierarchy.behaviors.selection, function (c) { return _this.setState({\n            description: hierarchy_1.StructureHierarchyManager.getSelectedStructuresDescription(_this.plugin)\n        }); });\n    };\n    AnnotationsComponentControls.prototype.render = function () {\n        var _this = this;\n        if (!this.state.validationParams && !this.state.domainAtnParams)\n            return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, {});\n        var brand = {\n            accent: 'green',\n            svg: TextsmsOutlinedSvg\n        };\n        var wrapClass = this.state.isCollapsed\n            ? 'msp-transform-wrapper msp-transform-wrapper-collapsed'\n            : 'msp-transform-wrapper';\n        return (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: wrapClass }, { children: [(0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-transform-header' }, { children: (0, jsx_runtime_1.jsxs)(common_1.Button, tslib_1.__assign({ icon: brand ? void 0 : this.state.isCollapsed ? icons_1.ArrowRightSvg : icons_1.ArrowDropDownSvg, noOverflow: true, onClick: this.toggleCollapsed, className: brand ? \"msp-transform-header-brand msp-transform-header-brand-\".concat(brand.accent) : void 0, title: \"Click to \".concat(this.state.isCollapsed ? 'expand' : 'collapse') }, { children: [(0, jsx_runtime_1.jsx)(icons_1.Icon, { svg: brand === null || brand === void 0 ? void 0 : brand.svg, inline: true }), \"Annotations\", (0, jsx_runtime_1.jsx)(\"small\", tslib_1.__assign({ style: { margin: '0 6px' } }, { children: this.state.isCollapsed ? '' : this.state.description }))] })) })), !this.state.isCollapsed && this.state.validationParams &&\n                    (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-flex-row' }, { children: [(0, jsx_runtime_1.jsx)(common_1.Button, tslib_1.__assign({ noOverflow: true, className: 'msp-control-button-label', title: \"Validation Report Annotations.\", style: { textAlign: 'left' } }, { children: \"Validation Report\" })), (0, jsx_runtime_1.jsx)(common_1.IconButton, { onClick: function () { return _this.initApplyAnnotation(0); }, toggleState: false, svg: !this.state.validationApplied ? icons_1.VisibilityOffOutlinedSvg : icons_1.VisibilityOutlinedSvg, title: \"Click to \".concat(this.state.validationApplied ? 'Hide' : 'Show', \" Validation Report Annotation\"), small: true, className: 'msp-form-control', flex: true }), (0, jsx_runtime_1.jsx)(common_1.IconButton, { onClick: function () { return _this.toggleOptions(0); }, svg: icons_1.MoreHorizSvg, title: 'Actions', toggleState: this.state.validationOptions, className: 'msp-form-control', flex: true })] })), !this.state.isCollapsed && this.state.validationParams && this.state.validationOptions && (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ style: { marginBottom: '6px' } }, { children: (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: \"msp-accent-offset\" }, { children: (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-representation-entry' }, { children: (0, jsx_runtime_1.jsx)(parameters_1.ParameterControls, { params: this.state.validationParams.params, values: this.state.validationParams.values, onChangeValues: this.updateValidationParams }) })) })) })), !this.state.isCollapsed && this.state.domainAtnParams &&\n                    (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-flex-row' }, { children: [(0, jsx_runtime_1.jsx)(common_1.Button, tslib_1.__assign({ noOverflow: true, className: 'msp-control-button-label', title: \"Domain Annotations.\", style: { textAlign: 'left' } }, { children: \"Domains\" })), (0, jsx_runtime_1.jsx)(common_1.IconButton, { onClick: function () { return _this.initApplyAnnotation(1); }, toggleState: false, svg: !this.state.domainAtnApplied ? icons_1.VisibilityOffOutlinedSvg : icons_1.VisibilityOutlinedSvg, title: \"Click to \".concat(this.state.domainAtnApplied ? 'Hide' : 'Show', \" Domain Annotation\"), small: true, className: 'msp-form-control', flex: true }), (0, jsx_runtime_1.jsx)(common_1.IconButton, { onClick: function () { return _this.toggleOptions(1); }, svg: icons_1.MoreHorizSvg, title: 'Actions', toggleState: this.state.domainAtnOptions, className: 'msp-form-control', flex: true })] })), !this.state.isCollapsed && this.state.domainAtnParams && this.state.domainAtnOptions && (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ style: { marginBottom: '6px' } }, { children: (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: \"msp-accent-offset\" }, { children: (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-representation-entry' }, { children: (0, jsx_runtime_1.jsx)(parameters_1.ParameterControls, { params: this.state.domainAtnParams.params, values: this.state.domainAtnParams.values, onChangeValues: this.updateDomainAtnParams }) })) })) }))] }));\n    };\n    return AnnotationsComponentControls;\n}(base_1.PurePluginUIComponent));\nexports.AnnotationsComponentControls = AnnotationsComponentControls;\n//# sourceMappingURL=annotation-controls.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/ui/annotation-controls.js\n");
  
  /***/ }),
  
  /***/ "./lib/ui/export-superposition.js":
  /*!****************************************!*\
    !*** ./lib/ui/export-superposition.js ***!
    \****************************************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SuperpositionModelExportUI = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar jsx_runtime_1 = __webpack_require__(/*! react/jsx-runtime */ \"./node_modules/react/jsx-runtime.js\");\nvar react_1 = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\nvar base_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/base */ \"./node_modules/molstar/lib/mol-plugin-ui/base.js\");\nvar common_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/common */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/common.js\");\nvar icons_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/icons */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/icons.js\");\nvar parameters_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/parameters */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/parameters.js\");\nvar use_behavior_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/hooks/use-behavior */ \"./node_modules/molstar/lib/mol-plugin-ui/hooks/use-behavior.js\");\nvar param_definition_1 = __webpack_require__(/*! Molstar/mol-util/param-definition */ \"./node_modules/molstar/lib/mol-util/param-definition.js\");\nvar superposition_export_1 = __webpack_require__(/*! ../superposition-export */ \"./lib/superposition-export.js\");\nvar SuperpositionModelExportUI = /** @class */ (function (_super) {\n    tslib_1.__extends(SuperpositionModelExportUI, _super);\n    function SuperpositionModelExportUI() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SuperpositionModelExportUI.prototype.defaultState = function () {\n        return {\n            header: 'Export Models',\n            isCollapsed: true,\n            brand: { accent: 'cyan', svg: icons_1.GetAppSvg }\n        };\n    };\n    SuperpositionModelExportUI.prototype.renderControls = function () {\n        return (0, jsx_runtime_1.jsx)(SuperpositionExportControls, { plugin: this.plugin });\n    };\n    return SuperpositionModelExportUI;\n}(base_1.CollapsableControls));\nexports.SuperpositionModelExportUI = SuperpositionModelExportUI;\nvar Params = {\n    format: param_definition_1.ParamDefinition.Select('cif', [['cif', 'mmCIF'], ['bcif', 'Binary mmCIF']])\n};\nvar DefaultParams = param_definition_1.ParamDefinition.getDefaultValues(Params);\nfunction SuperpositionExportControls(_a) {\n    var _this = this;\n    var plugin = _a.plugin;\n    var _b = (0, react_1.useState)(DefaultParams), params = _b[0], setParams = _b[1];\n    var _c = (0, react_1.useState)(false), exporting = _c[0], setExporting = _c[1];\n    (0, use_behavior_1.useBehavior)(plugin.managers.structure.hierarchy.behaviors.selection); // triggers UI update\n    var isBusy = (0, use_behavior_1.useBehavior)(plugin.behaviors.state.isBusy);\n    var hierarchy = plugin.managers.structure.hierarchy.current;\n    var label = 'Nothing to Export';\n    if (hierarchy.structures.length === 1) {\n        label = 'Export';\n    }\n    if (hierarchy.structures.length > 1) {\n        label = 'Export (as ZIP)';\n    }\n    var onExport = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    setExporting(true);\n                    _a.label = 1;\n                case 1:\n                    _a.trys.push([1, , 3, 4]);\n                    return [4 /*yield*/, (0, superposition_export_1.superpositionExportHierarchy)(plugin, { format: params.format })];\n                case 2:\n                    _a.sent();\n                    return [3 /*break*/, 4];\n                case 3:\n                    setExporting(false);\n                    return [7 /*endfinally*/];\n                case 4: return [2 /*return*/];\n            }\n        });\n    }); };\n    return (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(parameters_1.ParameterControls, { params: Params, values: params, onChangeValues: setParams, isDisabled: isBusy || exporting }), (0, jsx_runtime_1.jsx)(common_1.Button, tslib_1.__assign({ onClick: onExport, style: { marginTop: 1 }, disabled: isBusy || hierarchy.structures.length === 0 || exporting, commit: hierarchy.structures.length ? 'on' : 'off' }, { children: label }))] });\n}\n//# sourceMappingURL=export-superposition.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWIvdWkvZXhwb3J0LXN1cGVycG9zaXRpb24uanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0NBQWtDO0FBQ2xDLGNBQWMsbUJBQU8sQ0FBQyxnREFBTztBQUM3QixvQkFBb0IsbUJBQU8sQ0FBQyw4REFBbUI7QUFDL0MsY0FBYyxtQkFBTyxDQUFDLDRDQUFPO0FBQzdCLGFBQWEsbUJBQU8sQ0FBQyxvRkFBNEI7QUFDakQsZUFBZSxtQkFBTyxDQUFDLDBHQUF1QztBQUM5RCxjQUFjLG1CQUFPLENBQUMsd0dBQXNDO0FBQzVELG1CQUFtQixtQkFBTyxDQUFDLGtIQUEyQztBQUN0RSxxQkFBcUIsbUJBQU8sQ0FBQyxnSEFBMEM7QUFDdkUseUJBQXlCLG1CQUFPLENBQUMsa0dBQW1DO0FBQ3BFLDZCQUE2QixtQkFBTyxDQUFDLDhEQUF5QjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EscUVBQXFFLHFCQUFxQjtBQUMxRjtBQUNBO0FBQ0EsQ0FBQztBQUNELGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RkFBOEY7QUFDOUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEdBQTRHLHVCQUF1QjtBQUNuSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTCw2REFBNkQsb0VBQW9FLDRGQUE0Riw4REFBOEQsNEJBQTRCLGNBQWMsMEhBQTBILElBQUksaUJBQWlCLEtBQUs7QUFDemQ7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3BkYmUtbW9sc3Rhci8uL2xpYi91aS9leHBvcnQtc3VwZXJwb3NpdGlvbi5qcz8yNDRiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdXBlcnBvc2l0aW9uTW9kZWxFeHBvcnRVSSA9IHZvaWQgMDtcbnZhciB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudmFyIGpzeF9ydW50aW1lXzEgPSByZXF1aXJlKFwicmVhY3QvanN4LXJ1bnRpbWVcIik7XG52YXIgcmVhY3RfMSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbnZhciBiYXNlXzEgPSByZXF1aXJlKFwiTW9sc3Rhci9tb2wtcGx1Z2luLXVpL2Jhc2VcIik7XG52YXIgY29tbW9uXzEgPSByZXF1aXJlKFwiTW9sc3Rhci9tb2wtcGx1Z2luLXVpL2NvbnRyb2xzL2NvbW1vblwiKTtcbnZhciBpY29uc18xID0gcmVxdWlyZShcIk1vbHN0YXIvbW9sLXBsdWdpbi11aS9jb250cm9scy9pY29uc1wiKTtcbnZhciBwYXJhbWV0ZXJzXzEgPSByZXF1aXJlKFwiTW9sc3Rhci9tb2wtcGx1Z2luLXVpL2NvbnRyb2xzL3BhcmFtZXRlcnNcIik7XG52YXIgdXNlX2JlaGF2aW9yXzEgPSByZXF1aXJlKFwiTW9sc3Rhci9tb2wtcGx1Z2luLXVpL2hvb2tzL3VzZS1iZWhhdmlvclwiKTtcbnZhciBwYXJhbV9kZWZpbml0aW9uXzEgPSByZXF1aXJlKFwiTW9sc3Rhci9tb2wtdXRpbC9wYXJhbS1kZWZpbml0aW9uXCIpO1xudmFyIHN1cGVycG9zaXRpb25fZXhwb3J0XzEgPSByZXF1aXJlKFwiLi4vc3VwZXJwb3NpdGlvbi1leHBvcnRcIik7XG52YXIgU3VwZXJwb3NpdGlvbk1vZGVsRXhwb3J0VUkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU3VwZXJwb3NpdGlvbk1vZGVsRXhwb3J0VUksIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3VwZXJwb3NpdGlvbk1vZGVsRXhwb3J0VUkoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgU3VwZXJwb3NpdGlvbk1vZGVsRXhwb3J0VUkucHJvdG90eXBlLmRlZmF1bHRTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGhlYWRlcjogJ0V4cG9ydCBNb2RlbHMnLFxuICAgICAgICAgICAgaXNDb2xsYXBzZWQ6IHRydWUsXG4gICAgICAgICAgICBicmFuZDogeyBhY2NlbnQ6ICdjeWFuJywgc3ZnOiBpY29uc18xLkdldEFwcFN2ZyB9XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBTdXBlcnBvc2l0aW9uTW9kZWxFeHBvcnRVSS5wcm90b3R5cGUucmVuZGVyQ29udHJvbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwganN4X3J1bnRpbWVfMS5qc3gpKFN1cGVycG9zaXRpb25FeHBvcnRDb250cm9scywgeyBwbHVnaW46IHRoaXMucGx1Z2luIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFN1cGVycG9zaXRpb25Nb2RlbEV4cG9ydFVJO1xufShiYXNlXzEuQ29sbGFwc2FibGVDb250cm9scykpO1xuZXhwb3J0cy5TdXBlcnBvc2l0aW9uTW9kZWxFeHBvcnRVSSA9IFN1cGVycG9zaXRpb25Nb2RlbEV4cG9ydFVJO1xudmFyIFBhcmFtcyA9IHtcbiAgICBmb3JtYXQ6IHBhcmFtX2RlZmluaXRpb25fMS5QYXJhbURlZmluaXRpb24uU2VsZWN0KCdjaWYnLCBbWydjaWYnLCAnbW1DSUYnXSwgWydiY2lmJywgJ0JpbmFyeSBtbUNJRiddXSlcbn07XG52YXIgRGVmYXVsdFBhcmFtcyA9IHBhcmFtX2RlZmluaXRpb25fMS5QYXJhbURlZmluaXRpb24uZ2V0RGVmYXVsdFZhbHVlcyhQYXJhbXMpO1xuZnVuY3Rpb24gU3VwZXJwb3NpdGlvbkV4cG9ydENvbnRyb2xzKF9hKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgcGx1Z2luID0gX2EucGx1Z2luO1xuICAgIHZhciBfYiA9ICgwLCByZWFjdF8xLnVzZVN0YXRlKShEZWZhdWx0UGFyYW1zKSwgcGFyYW1zID0gX2JbMF0sIHNldFBhcmFtcyA9IF9iWzFdO1xuICAgIHZhciBfYyA9ICgwLCByZWFjdF8xLnVzZVN0YXRlKShmYWxzZSksIGV4cG9ydGluZyA9IF9jWzBdLCBzZXRFeHBvcnRpbmcgPSBfY1sxXTtcbiAgICAoMCwgdXNlX2JlaGF2aW9yXzEudXNlQmVoYXZpb3IpKHBsdWdpbi5tYW5hZ2Vycy5zdHJ1Y3R1cmUuaGllcmFyY2h5LmJlaGF2aW9ycy5zZWxlY3Rpb24pOyAvLyB0cmlnZ2VycyBVSSB1cGRhdGVcbiAgICB2YXIgaXNCdXN5ID0gKDAsIHVzZV9iZWhhdmlvcl8xLnVzZUJlaGF2aW9yKShwbHVnaW4uYmVoYXZpb3JzLnN0YXRlLmlzQnVzeSk7XG4gICAgdmFyIGhpZXJhcmNoeSA9IHBsdWdpbi5tYW5hZ2Vycy5zdHJ1Y3R1cmUuaGllcmFyY2h5LmN1cnJlbnQ7XG4gICAgdmFyIGxhYmVsID0gJ05vdGhpbmcgdG8gRXhwb3J0JztcbiAgICBpZiAoaGllcmFyY2h5LnN0cnVjdHVyZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGxhYmVsID0gJ0V4cG9ydCc7XG4gICAgfVxuICAgIGlmIChoaWVyYXJjaHkuc3RydWN0dXJlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGxhYmVsID0gJ0V4cG9ydCAoYXMgWklQKSc7XG4gICAgfVxuICAgIHZhciBvbkV4cG9ydCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHNldEV4cG9ydGluZyh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgX2EudHJ5cy5wdXNoKFsxLCAsIDMsIDRdKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgKDAsIHN1cGVycG9zaXRpb25fZXhwb3J0XzEuc3VwZXJwb3NpdGlvbkV4cG9ydEhpZXJhcmNoeSkocGx1Z2luLCB7IGZvcm1hdDogcGFyYW1zLmZvcm1hdCB9KV07XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgc2V0RXhwb3J0aW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3IC8qZW5kZmluYWxseSovXTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7IH07XG4gICAgcmV0dXJuICgwLCBqc3hfcnVudGltZV8xLmpzeHMpKGpzeF9ydW50aW1lXzEuRnJhZ21lbnQsIHsgY2hpbGRyZW46IFsoMCwganN4X3J1bnRpbWVfMS5qc3gpKHBhcmFtZXRlcnNfMS5QYXJhbWV0ZXJDb250cm9scywgeyBwYXJhbXM6IFBhcmFtcywgdmFsdWVzOiBwYXJhbXMsIG9uQ2hhbmdlVmFsdWVzOiBzZXRQYXJhbXMsIGlzRGlzYWJsZWQ6IGlzQnVzeSB8fCBleHBvcnRpbmcgfSksICgwLCBqc3hfcnVudGltZV8xLmpzeCkoY29tbW9uXzEuQnV0dG9uLCB0c2xpYl8xLl9fYXNzaWduKHsgb25DbGljazogb25FeHBvcnQsIHN0eWxlOiB7IG1hcmdpblRvcDogMSB9LCBkaXNhYmxlZDogaXNCdXN5IHx8IGhpZXJhcmNoeS5zdHJ1Y3R1cmVzLmxlbmd0aCA9PT0gMCB8fCBleHBvcnRpbmcsIGNvbW1pdDogaGllcmFyY2h5LnN0cnVjdHVyZXMubGVuZ3RoID8gJ29uJyA6ICdvZmYnIH0sIHsgY2hpbGRyZW46IGxhYmVsIH0pKV0gfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHBvcnQtc3VwZXJwb3NpdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./lib/ui/export-superposition.js\n");
  
  /***/ }),
  
  /***/ "./lib/ui/pdbe-left-panel.js":
  /*!***********************************!*\
    !*** ./lib/ui/pdbe-left-panel.js ***!
    \***********************************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LeftPanelControls = exports.WavesIconSvg = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar jsx_runtime_1 = __webpack_require__(/*! react/jsx-runtime */ \"./node_modules/react/jsx-runtime.js\");\nvar canvas3d_1 = __webpack_require__(/*! Molstar/mol-canvas3d/canvas3d */ \"./node_modules/molstar/lib/mol-canvas3d/canvas3d.js\");\nvar commands_1 = __webpack_require__(/*! Molstar/mol-plugin/commands */ \"./node_modules/molstar/lib/mol-plugin/commands.js\");\nvar mol_state_1 = __webpack_require__(/*! Molstar/mol-state */ \"./node_modules/molstar/lib/mol-state/index.js\");\nvar base_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/base */ \"./node_modules/molstar/lib/mol-plugin-ui/base.js\");\nvar common_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/common */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/common.js\");\nvar parameters_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/parameters */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/parameters.js\");\nvar actions_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/state/actions */ \"./node_modules/molstar/lib/mol-plugin-ui/state/actions.js\");\nvar snapshots_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/state/snapshots */ \"./node_modules/molstar/lib/mol-plugin-ui/state/snapshots.js\");\nvar tree_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/state/tree */ \"./node_modules/molstar/lib/mol-plugin-ui/state/tree.js\");\nvar help_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/viewport/help */ \"./node_modules/molstar/lib/mol-plugin-ui/viewport/help.js\");\nvar segment_tree_1 = __webpack_require__(/*! ./segment-tree */ \"./lib/ui/segment-tree.js\");\nvar icons_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/icons */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/icons.js\");\nvar help_2 = __webpack_require__(/*! Molstar/mol-plugin-ui/viewport/help */ \"./node_modules/molstar/lib/mol-plugin-ui/viewport/help.js\");\nvar _WavesIcon = (0, jsx_runtime_1.jsx)(\"svg\", tslib_1.__assign({ width: '24px', height: '24px', viewBox: '0 0 24 24' }, { children: (0, jsx_runtime_1.jsx)(\"path\", { d: \"M17 16.99c-1.35 0-2.2.42-2.95.8-.65.33-1.18.6-2.05.6-.9 0-1.4-.25-2.05-.6-.75-.38-1.57-.8-2.95-.8s-2.2.42-2.95.8c-.65.33-1.17.6-2.05.6v1.95c1.35 0 2.2-.42 2.95-.8.65-.33 1.17-.6 2.05-.6s1.4.25 2.05.6c.75.38 1.57.8 2.95.8s2.2-.42 2.95-.8c.65-.33 1.18-.6 2.05-.6.9 0 1.4.25 2.05.6.75.38 1.58.8 2.95.8v-1.95c-.9 0-1.4-.25-2.05-.6-.75-.38-1.6-.8-2.95-.8zm0-4.45c-1.35 0-2.2.43-2.95.8-.65.32-1.18.6-2.05.6-.9 0-1.4-.25-2.05-.6-.75-.38-1.57-.8-2.95-.8s-2.2.43-2.95.8c-.65.32-1.17.6-2.05.6v1.95c1.35 0 2.2-.43 2.95-.8.65-.35 1.15-.6 2.05-.6s1.4.25 2.05.6c.75.38 1.57.8 2.95.8s2.2-.43 2.95-.8c.65-.35 1.15-.6 2.05-.6s1.4.25 2.05.6c.75.38 1.58.8 2.95.8v-1.95c-.9 0-1.4-.25-2.05-.6-.75-.38-1.6-.8-2.95-.8zm2.95-8.08c-.75-.38-1.58-.8-2.95-.8s-2.2.42-2.95.8c-.65.32-1.18.6-2.05.6-.9 0-1.4-.25-2.05-.6-.75-.37-1.57-.8-2.95-.8s-2.2.42-2.95.8c-.65.33-1.17.6-2.05.6v1.93c1.35 0 2.2-.43 2.95-.8.65-.33 1.17-.6 2.05-.6s1.4.25 2.05.6c.75.38 1.57.8 2.95.8s2.2-.43 2.95-.8c.65-.32 1.18-.6 2.05-.6.9 0 1.4.25 2.05.6.75.38 1.58.8 2.95.8V5.04c-.9 0-1.4-.25-2.05-.58zM17 8.09c-1.35 0-2.2.43-2.95.8-.65.35-1.15.6-2.05.6s-1.4-.25-2.05-.6c-.75-.38-1.57-.8-2.95-.8s-2.2.43-2.95.8c-.65.35-1.15.6-2.05.6v1.95c1.35 0 2.2-.43 2.95-.8.65-.32 1.18-.6 2.05-.6s1.4.25 2.05.6c.75.38 1.57.8 2.95.8s2.2-.43 2.95-.8c.65-.32 1.18-.6 2.05-.6.9 0 1.4.25 2.05.6.75.38 1.58.8 2.95.8V9.49c-.9 0-1.4-.25-2.05-.6-.75-.38-1.6-.8-2.95-.8z\" }) }));\nfunction WavesIconSvg() { return _WavesIcon; }\nexports.WavesIconSvg = WavesIconSvg;\nvar LeftPanelControls = /** @class */ (function (_super) {\n    tslib_1.__extends(LeftPanelControls, _super);\n    function LeftPanelControls() {\n        var _this = this;\n        var _a;\n        _this = _super.apply(this, arguments) || this;\n        _this.state = { tab: _this.plugin.behaviors.layout.leftPanelTabName.value };\n        _this.set = function (tab) {\n            if (_this.state.tab === tab) {\n                _this.setState({ tab: 'none' }, function () { return _this.plugin.behaviors.layout.leftPanelTabName.next('none'); });\n                commands_1.PluginCommands.Layout.Update(_this.plugin, { state: { regionState: tslib_1.__assign(tslib_1.__assign({}, _this.plugin.layout.state.regionState), { left: 'collapsed' }) } });\n                return;\n            }\n            _this.setState({ tab: tab }, function () { return _this.plugin.behaviors.layout.leftPanelTabName.next(tab); });\n            if (_this.plugin.layout.state.regionState.left !== 'full') {\n                commands_1.PluginCommands.Layout.Update(_this.plugin, { state: { regionState: tslib_1.__assign(tslib_1.__assign({}, _this.plugin.layout.state.regionState), { left: 'full' }) } });\n            }\n        };\n        _this.tabs = {\n            'none': (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, {}),\n            'root': (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(common_1.SectionHeader, { icon: icons_1.HomeOutlinedSvg, title: 'Home' }), (0, jsx_runtime_1.jsx)(actions_1.StateObjectActions, { state: _this.plugin.state.data, nodeRef: mol_state_1.StateTransform.RootRef, hideHeader: true, initiallyCollapsed: true, alwaysExpandFirst: true }), ((_a = _this.plugin.spec.components) === null || _a === void 0 ? void 0 : _a.remoteState) !== 'none' && (0, jsx_runtime_1.jsx)(snapshots_1.RemoteStateSnapshots, { listOnly: true })] }),\n            'data': (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(common_1.SectionHeader, { icon: icons_1.AccountTreeOutlinedSvg, title: (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(RemoveAllButton, {}), \" State Tree\"] }) }), (0, jsx_runtime_1.jsx)(tree_1.StateTree, { state: _this.plugin.state.data })] }),\n            'segments': (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(segment_tree_1.SegmentTree, {}) }),\n            'states': (0, jsx_runtime_1.jsx)(snapshots_1.StateSnapshots, {}),\n            'settings': (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(common_1.SectionHeader, { icon: icons_1.TuneSvg, title: 'Plugin Settings' }), (0, jsx_runtime_1.jsx)(FullSettings, {})] }),\n            'help': (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(common_1.SectionHeader, { icon: icons_1.HelpOutlineSvg, title: 'Help' }), (0, jsx_runtime_1.jsx)(help_1.HelpContent, {}), (0, jsx_runtime_1.jsx)(SuperpositionHelpContent, {})] })\n        };\n        return _this;\n    }\n    LeftPanelControls.prototype.componentDidMount = function () {\n        var _this = this;\n        this.subscribe(this.plugin.behaviors.layout.leftPanelTabName, function (tab) {\n            if (_this.state.tab !== tab)\n                _this.setState({ tab: tab });\n            if (tab === 'none' && _this.plugin.layout.state.regionState.left !== 'collapsed') {\n                commands_1.PluginCommands.Layout.Update(_this.plugin, { state: { regionState: tslib_1.__assign(tslib_1.__assign({}, _this.plugin.layout.state.regionState), { left: 'collapsed' }) } });\n            }\n        });\n        this.subscribe(this.plugin.state.data.events.changed, function (_a) {\n            var state = _a.state;\n            if (_this.state.tab !== 'data')\n                return;\n            if (state.cells.size === 1)\n                _this.set('root');\n        });\n    };\n    LeftPanelControls.prototype.render = function () {\n        var _this = this;\n        var tab = this.state.tab;\n        var customState = this.plugin.customState;\n        return (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-left-panel-controls' }, { children: [(0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-left-panel-controls-buttons' }, { children: [(0, jsx_runtime_1.jsx)(common_1.IconButton, { svg: icons_1.HelpOutlineSvg, toggleState: tab === 'help', transparent: true, onClick: function () { return _this.set('help'); }, title: 'Help' }), customState && customState.initParams && customState.initParams.superposition && (0, jsx_runtime_1.jsx)(common_1.IconButton, { svg: WavesIconSvg, toggleState: tab === 'segments', transparent: true, onClick: function () { return _this.set('segments'); }, title: 'Superpose segments' }), (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-left-panel-controls-buttons-bottom' }, { children: (0, jsx_runtime_1.jsx)(common_1.IconButton, { svg: icons_1.TuneSvg, toggleState: tab === 'settings', transparent: true, onClick: function () { return _this.set('settings'); }, title: 'Settings' }) }))] })), (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-scrollable-container' }, { children: this.tabs[tab] }))] }));\n    };\n    return LeftPanelControls;\n}(base_1.PluginUIComponent));\nexports.LeftPanelControls = LeftPanelControls;\n// class DataIcon extends PluginUIComponent<{ set: (tab: LeftPanelTabName) => void }, { changed: boolean }> {\n//     state = { changed: false };\n//     get tab() {\n//         return this.plugin.behaviors.layout.leftPanelTabName.value;\n//     }\n//     componentDidMount() {\n//         this.subscribe(this.plugin.behaviors.layout.leftPanelTabName, tab => {\n//             if (this.tab === 'data') this.setState({ changed: false });\n//             else this.forceUpdate();\n//         });\n//         this.subscribe(this.plugin.state.data.events.changed, state => {\n//             if (this.tab !== 'data') this.setState({ changed: true });\n//         });\n//     }\n//     render() {\n//         return <IconButton\n//             svg={AccountTreeOutlinedSvg} toggleState={this.tab === 'data'} transparent onClick={() => this.props.set('data')} title='State Tree'\n//             style={{ position: 'relative' }} extraContent={this.state.changed ? <div className='msp-left-panel-controls-button-data-dirty' /> : void 0} />;\n//     }\n// }\nvar FullSettings = /** @class */ (function (_super) {\n    tslib_1.__extends(FullSettings, _super);\n    function FullSettings() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.setSettings = function (p) {\n            var _a;\n            commands_1.PluginCommands.Canvas3D.SetSettings(_this.plugin, { settings: (_a = {}, _a[p.name] = p.value, _a) });\n        };\n        return _this;\n    }\n    FullSettings.prototype.componentDidMount = function () {\n        var _this = this;\n        this.subscribe(this.plugin.events.canvas3d.settingsUpdated, function () { return _this.forceUpdate(); });\n        this.subscribe(this.plugin.layout.events.updated, function () { return _this.forceUpdate(); });\n        this.subscribe(this.plugin.canvas3d.camera.stateChanged, function (state) {\n            if (state.radiusMax !== undefined || state.radius !== undefined) {\n                _this.forceUpdate();\n            }\n        });\n    };\n    FullSettings.prototype.render = function () {\n        return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: this.plugin.canvas3d && (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(common_1.SectionHeader, { title: 'Viewport' }), (0, jsx_runtime_1.jsx)(parameters_1.ParameterControls, { params: canvas3d_1.Canvas3DParams, values: this.plugin.canvas3d.props, onChange: this.setSettings })] }) });\n    };\n    return FullSettings;\n}(base_1.PluginUIComponent));\nvar RemoveAllButton = /** @class */ (function (_super) {\n    tslib_1.__extends(RemoveAllButton, _super);\n    function RemoveAllButton() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.remove = function (e) {\n            e.preventDefault();\n            commands_1.PluginCommands.State.RemoveObject(_this.plugin, { state: _this.plugin.state.data, ref: mol_state_1.StateTransform.RootRef });\n        };\n        return _this;\n    }\n    RemoveAllButton.prototype.componentDidMount = function () {\n        var _this = this;\n        this.subscribe(this.plugin.state.events.cell.created, function (e) {\n            if (e.cell.transform.parent === mol_state_1.StateTransform.RootRef)\n                _this.forceUpdate();\n        });\n        this.subscribe(this.plugin.state.events.cell.removed, function (e) {\n            if (e.parent === mol_state_1.StateTransform.RootRef)\n                _this.forceUpdate();\n        });\n    };\n    RemoveAllButton.prototype.render = function () {\n        var count = this.plugin.state.data.tree.children.get(mol_state_1.StateTransform.RootRef).size;\n        if (count === 0)\n            return null;\n        return (0, jsx_runtime_1.jsx)(common_1.IconButton, { svg: icons_1.DeleteOutlinedSvg, onClick: this.remove, title: 'Remove All', style: { display: 'inline-block' }, small: true, className: 'msp-no-hover-outline', transparent: true });\n    };\n    return RemoveAllButton;\n}(base_1.PluginUIComponent));\nfunction HelpSection(props) {\n    return (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-simple-help-section' }, { children: props.header }));\n}\nvar SuperpositionHelpContent = /** @class */ (function (_super) {\n    tslib_1.__extends(SuperpositionHelpContent, _super);\n    function SuperpositionHelpContent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SuperpositionHelpContent.prototype.componentDidMount = function () {\n        var _this = this;\n        this.subscribe(this.plugin.events.canvas3d.settingsUpdated, function () { return _this.forceUpdate(); });\n    };\n    SuperpositionHelpContent.prototype.render = function () {\n        return (0, jsx_runtime_1.jsxs)(\"div\", { children: [(0, jsx_runtime_1.jsx)(HelpSection, { header: 'Superposition' }), (0, jsx_runtime_1.jsx)(help_2.HelpGroup, tslib_1.__assign({ header: 'Segment' }, { children: (0, jsx_runtime_1.jsx)(help_2.HelpText, { children: (0, jsx_runtime_1.jsx)(\"p\", { children: \"Discrete UniProt sequence range mapped to the structure\" }) }) })), (0, jsx_runtime_1.jsx)(help_2.HelpGroup, tslib_1.__assign({ header: 'Cluster' }, { children: (0, jsx_runtime_1.jsx)(help_2.HelpText, { children: (0, jsx_runtime_1.jsx)(\"p\", { children: \"Structural chains that possess significantly close superposition Q-score\" }) }) })), (0, jsx_runtime_1.jsx)(help_2.HelpGroup, tslib_1.__assign({ header: 'Representative chain' }, { children: (0, jsx_runtime_1.jsx)(help_2.HelpText, { children: (0, jsx_runtime_1.jsx)(\"p\", { children: \"The best-ranked chain within a cluster chosen based on the model quality, resolution, observed residues ratio and UniProt sequence coverage\" }) }) }))] });\n    };\n    return SuperpositionHelpContent;\n}(base_1.PluginUIComponent));\n//# sourceMappingURL=pdbe-left-panel.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/ui/pdbe-left-panel.js\n");
  
  /***/ }),
  
  /***/ "./lib/ui/pdbe-screenshot-controls.js":
  /*!********************************************!*\
    !*** ./lib/ui/pdbe-screenshot-controls.js ***!
    \********************************************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DownloadScreenshotControls = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar jsx_runtime_1 = __webpack_require__(/*! react/jsx-runtime */ \"./node_modules/react/jsx-runtime.js\");\nvar parameters_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/parameters */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/parameters.js\");\nvar base_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/base */ \"./node_modules/molstar/lib/mol-plugin-ui/base.js\");\nvar screenshot_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/screenshot */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/screenshot.js\");\nvar common_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/common */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/common.js\");\nvar commands_1 = __webpack_require__(/*! Molstar/mol-plugin/commands */ \"./node_modules/molstar/lib/mol-plugin/commands.js\");\nvar use_behavior_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/hooks/use-behavior */ \"./node_modules/molstar/lib/mol-plugin-ui/hooks/use-behavior.js\");\nvar icons_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/icons */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/icons.js\");\nvar DownloadScreenshotControls = /** @class */ (function (_super) {\n    tslib_1.__extends(DownloadScreenshotControls, _super);\n    function DownloadScreenshotControls() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            showPreview: true,\n            isDisabled: false\n        };\n        _this.download = function () {\n            var _a;\n            (_a = _this.plugin.helpers.viewportScreenshot) === null || _a === void 0 ? void 0 : _a.download();\n            _this.props.close();\n        };\n        _this.copy = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var _a;\n            var _b;\n            return tslib_1.__generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        _c.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, ((_b = this.plugin.helpers.viewportScreenshot) === null || _b === void 0 ? void 0 : _b.copyToClipboard())];\n                    case 1:\n                        _c.sent();\n                        commands_1.PluginCommands.Toast.Show(this.plugin, {\n                            message: 'Copied to clipboard.',\n                            title: 'Screenshot',\n                            timeoutMs: 1500\n                        });\n                        return [3 /*break*/, 3];\n                    case 2:\n                        _a = _c.sent();\n                        return [2 /*return*/, this.copyImg()];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        }); };\n        _this.copyImg = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var src;\n            var _a;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, ((_a = this.plugin.helpers.viewportScreenshot) === null || _a === void 0 ? void 0 : _a.getImageDataUri())];\n                    case 1:\n                        src = _b.sent();\n                        this.setState({ imageData: src });\n                        return [2 /*return*/];\n                }\n            });\n        }); };\n        _this.open = function (e) {\n            if (!e.target.files || !e.target.files[0])\n                return;\n            commands_1.PluginCommands.State.Snapshots.OpenFile(_this.plugin, { file: e.target.files[0] });\n        };\n        return _this;\n    }\n    DownloadScreenshotControls.prototype.componentDidMount = function () {\n        var _this = this;\n        this.subscribe(this.plugin.state.data.behaviors.isUpdating, function (v) {\n            _this.setState({ isDisabled: v });\n        });\n    };\n    DownloadScreenshotControls.prototype.componentWillUnmount = function () {\n        this.setState({ imageData: void 0 });\n    };\n    DownloadScreenshotControls.prototype.render = function () {\n        var _this = this;\n        var _a;\n        var hasClipboardApi = !!((_a = navigator.clipboard) === null || _a === void 0 ? void 0 : _a.write);\n        return (0, jsx_runtime_1.jsxs)(\"div\", { children: [this.state.showPreview && (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-image-preview' }, { children: [(0, jsx_runtime_1.jsx)(screenshot_1.ScreenshotPreview, { plugin: this.plugin }), (0, jsx_runtime_1.jsx)(CropControls, { plugin: this.plugin })] })), (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-flex-row' }, { children: [!this.state.imageData && (0, jsx_runtime_1.jsx)(common_1.Button, tslib_1.__assign({ icon: icons_1.CopySvg, onClick: hasClipboardApi ? this.copy : this.copyImg, disabled: this.state.isDisabled }, { children: \"Copy\" })), this.state.imageData && (0, jsx_runtime_1.jsx)(common_1.Button, tslib_1.__assign({ onClick: function () { return _this.setState({ imageData: void 0 }); }, disabled: this.state.isDisabled }, { children: \"Clear\" })), (0, jsx_runtime_1.jsx)(common_1.Button, tslib_1.__assign({ icon: icons_1.GetAppSvg, onClick: this.download, disabled: this.state.isDisabled }, { children: \"Download\" }))] })), this.state.imageData && (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-row msp-copy-image-wrapper' }, { children: [(0, jsx_runtime_1.jsx)(\"div\", { children: \"Right click below + Copy Image\" }), (0, jsx_runtime_1.jsx)(\"img\", { src: this.state.imageData, style: { width: '100%', height: 32, display: 'block' } })] })), (0, jsx_runtime_1.jsx)(ScreenshotParams, { plugin: this.plugin, isDisabled: this.state.isDisabled })] });\n    };\n    return DownloadScreenshotControls;\n}(base_1.PluginUIComponent));\nexports.DownloadScreenshotControls = DownloadScreenshotControls;\nfunction ScreenshotParams(_a) {\n    var plugin = _a.plugin, isDisabled = _a.isDisabled;\n    var helper = plugin.helpers.viewportScreenshot;\n    var values = (0, use_behavior_1.useBehavior)(helper.behaviors.values);\n    return (0, jsx_runtime_1.jsx)(parameters_1.ParameterControls, { params: helper.params, values: values, onChangeValues: function (v) { return helper.behaviors.values.next(v); }, isDisabled: isDisabled });\n}\nfunction CropControls(_a) {\n    var plugin = _a.plugin;\n    var helper = plugin.helpers.viewportScreenshot;\n    var cropParams = (0, use_behavior_1.useBehavior)(helper === null || helper === void 0 ? void 0 : helper.behaviors.cropParams);\n    (0, use_behavior_1.useBehavior)(helper === null || helper === void 0 ? void 0 : helper.behaviors.relativeCrop);\n    if (!helper)\n        return null;\n    return (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ style: { width: '100%', height: '24px', marginTop: '8px' } }, { children: [(0, jsx_runtime_1.jsx)(common_1.ToggleButton, { icon: icons_1.CropOrginalSvg, title: 'Auto-crop', inline: true, isSelected: cropParams.auto, style: { background: 'transparent', float: 'left', width: 'auto', height: '24px', lineHeight: '24px' }, toggle: function () { return helper.toggleAutocrop(); }, label: 'Auto-crop ' + (cropParams.auto ? 'On' : 'Off') }), !cropParams.auto && (0, jsx_runtime_1.jsx)(common_1.Button, { icon: icons_1.CropSvg, title: 'Crop', style: { background: 'transparent', float: 'right', height: '24px', lineHeight: '24px', width: '24px', padding: '0' }, onClick: function () { return helper.autocrop(); } }), !cropParams.auto && !helper.isFullFrame && (0, jsx_runtime_1.jsx)(common_1.Button, { icon: icons_1.CropFreeSvg, title: 'Reset Crop', style: { background: 'transparent', float: 'right', height: '24px', lineHeight: '24px', width: '24px', padding: '0' }, onClick: function () { return helper.resetCrop(); } })] }));\n}\n//# sourceMappingURL=pdbe-screenshot-controls.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/ui/pdbe-screenshot-controls.js\n");
  
  /***/ }),
  
  /***/ "./lib/ui/pdbe-structure-controls.js":
  /*!*******************************************!*\
    !*** ./lib/ui/pdbe-structure-controls.js ***!
    \*******************************************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PDBeSuperpositionStructureTools = exports.PDBeLigandViewStructureTools = exports.CustomStructureControls = exports.PDBeStructureTools = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar jsx_runtime_1 = __webpack_require__(/*! react/jsx-runtime */ \"./node_modules/react/jsx-runtime.js\");\nvar base_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/base */ \"./node_modules/molstar/lib/mol-plugin-ui/base.js\");\nvar components_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/structure/components */ \"./node_modules/molstar/lib/mol-plugin-ui/structure/components.js\");\nvar measurements_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/structure/measurements */ \"./node_modules/molstar/lib/mol-plugin-ui/structure/measurements.js\");\nvar source_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/structure/source */ \"./node_modules/molstar/lib/mol-plugin-ui/structure/source.js\");\nvar volume_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/structure/volume */ \"./node_modules/molstar/lib/mol-plugin-ui/structure/volume.js\");\nvar annotation_controls_1 = __webpack_require__(/*! ./annotation-controls */ \"./lib/ui/annotation-controls.js\");\nvar icons_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/icons */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/icons.js\");\nvar superposition_components_1 = __webpack_require__(/*! ./superposition-components */ \"./lib/ui/superposition-components.js\");\nvar quick_styles_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/structure/quick-styles */ \"./node_modules/molstar/lib/mol-plugin-ui/structure/quick-styles.js\");\nvar alphafold_superposition_1 = __webpack_require__(/*! ./alphafold-superposition */ \"./lib/ui/alphafold-superposition.js\");\nvar export_superposition_1 = __webpack_require__(/*! ./export-superposition */ \"./lib/ui/export-superposition.js\");\nvar alphafold_tranparency_1 = __webpack_require__(/*! ./alphafold-tranparency */ \"./lib/ui/alphafold-tranparency.js\");\nvar PDBeStructureTools = /** @class */ (function (_super) {\n    tslib_1.__extends(PDBeStructureTools, _super);\n    function PDBeStructureTools() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PDBeStructureTools.prototype.render = function () {\n        return (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-section-header' }, { children: [(0, jsx_runtime_1.jsx)(icons_1.Icon, { svg: icons_1.BuildSvg }), \"Structure Tools\"] })), (0, jsx_runtime_1.jsx)(source_1.StructureSourceControls, {}), (0, jsx_runtime_1.jsx)(annotation_controls_1.AnnotationsComponentControls, {}), (0, jsx_runtime_1.jsx)(quick_styles_1.StructureQuickStylesControls, {}), (0, jsx_runtime_1.jsx)(components_1.StructureComponentControls, {}), (0, jsx_runtime_1.jsx)(volume_1.VolumeStreamingControls, {}), (0, jsx_runtime_1.jsx)(volume_1.VolumeSourceControls, {}), (0, jsx_runtime_1.jsx)(measurements_1.StructureMeasurementsControls, {}), (0, jsx_runtime_1.jsx)(CustomStructureControls, {})] });\n    };\n    return PDBeStructureTools;\n}(base_1.PluginUIComponent));\nexports.PDBeStructureTools = PDBeStructureTools;\nvar CustomStructureControls = /** @class */ (function (_super) {\n    tslib_1.__extends(CustomStructureControls, _super);\n    function CustomStructureControls() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CustomStructureControls.prototype.componentDidMount = function () {\n        var _this = this;\n        this.subscribe(this.plugin.state.behaviors.events.changed, function () { return _this.forceUpdate(); });\n    };\n    CustomStructureControls.prototype.render = function () {\n        var _this = this;\n        var controls = [];\n        this.plugin.customStructureControls.forEach(function (Controls, key) {\n            controls.push((0, jsx_runtime_1.jsx)(Controls, { initiallyCollapsed: _this.props.initiallyCollapsed }, key));\n        });\n        return controls.length > 0 ? (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: controls }) : null;\n    };\n    return CustomStructureControls;\n}(base_1.PluginUIComponent));\nexports.CustomStructureControls = CustomStructureControls;\nvar PDBeLigandViewStructureTools = /** @class */ (function (_super) {\n    tslib_1.__extends(PDBeLigandViewStructureTools, _super);\n    function PDBeLigandViewStructureTools() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PDBeLigandViewStructureTools.prototype.render = function () {\n        return (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-section-header' }, { children: [(0, jsx_runtime_1.jsx)(icons_1.Icon, { svg: icons_1.BuildSvg }), \"Structure Tools\"] })), (0, jsx_runtime_1.jsx)(components_1.StructureComponentControls, {}), (0, jsx_runtime_1.jsx)(volume_1.VolumeStreamingControls, {}), (0, jsx_runtime_1.jsx)(measurements_1.StructureMeasurementsControls, {}), (0, jsx_runtime_1.jsx)(CustomStructureControls, {})] });\n    };\n    return PDBeLigandViewStructureTools;\n}(base_1.PluginUIComponent));\nexports.PDBeLigandViewStructureTools = PDBeLigandViewStructureTools;\nvar PDBeSuperpositionStructureTools = /** @class */ (function (_super) {\n    tslib_1.__extends(PDBeSuperpositionStructureTools, _super);\n    function PDBeSuperpositionStructureTools() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PDBeSuperpositionStructureTools.prototype.render = function () {\n        return (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-section-header' }, { children: [(0, jsx_runtime_1.jsx)(icons_1.Icon, { svg: icons_1.BuildSvg }), \"Structure Tools\"] })), (0, jsx_runtime_1.jsx)(superposition_components_1.SuperpositionComponentControls, {}), (0, jsx_runtime_1.jsx)(alphafold_tranparency_1.AlphafoldTransparencyControls, {}), (0, jsx_runtime_1.jsx)(alphafold_superposition_1.AlphafoldPaeControls, {}), (0, jsx_runtime_1.jsx)(alphafold_superposition_1.AlphafoldSuperpositionControls, {}), (0, jsx_runtime_1.jsx)(measurements_1.StructureMeasurementsControls, {}), (0, jsx_runtime_1.jsx)(export_superposition_1.SuperpositionModelExportUI, {}), (0, jsx_runtime_1.jsx)(CustomStructureControls, {})] });\n    };\n    return PDBeSuperpositionStructureTools;\n}(base_1.PluginUIComponent));\nexports.PDBeSuperpositionStructureTools = PDBeSuperpositionStructureTools;\n//# sourceMappingURL=pdbe-structure-controls.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/ui/pdbe-structure-controls.js\n");
  
  /***/ }),
  
  /***/ "./lib/ui/pdbe-viewport-controls.js":
  /*!******************************************!*\
    !*** ./lib/ui/pdbe-viewport-controls.js ***!
    \******************************************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PDBeViewportControls = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar jsx_runtime_1 = __webpack_require__(/*! react/jsx-runtime */ \"./node_modules/react/jsx-runtime.js\");\nvar config_1 = __webpack_require__(/*! Molstar/mol-plugin/config */ \"./node_modules/molstar/lib/mol-plugin/config.js\");\nvar common_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/common */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/common.js\");\nvar selection_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/structure/selection */ \"./node_modules/molstar/lib/mol-plugin-ui/structure/selection.js\");\nvar pdbe_screenshot_controls_1 = __webpack_require__(/*! ./pdbe-screenshot-controls */ \"./lib/ui/pdbe-screenshot-controls.js\");\nvar simple_settings_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/viewport/simple-settings */ \"./node_modules/molstar/lib/mol-plugin-ui/viewport/simple-settings.js\");\nvar viewport_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/viewport */ \"./node_modules/molstar/lib/mol-plugin-ui/viewport.js\");\nvar icons_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/icons */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/icons.js\");\nvar PDBeViewportControls = /** @class */ (function (_super) {\n    tslib_1.__extends(PDBeViewportControls, _super);\n    function PDBeViewportControls() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PDBeViewportControls.prototype.isBlack = function (customeState) {\n        if (customeState && customeState.initParams && customeState.initParams.bgColor) {\n            var color = customeState.initParams.bgColor;\n            if (color.r === 0 && color.g === 0 && color.b === 0)\n                return true;\n        }\n        return false;\n    };\n    PDBeViewportControls.prototype.render = function () {\n        var customeState = this.plugin.customState;\n        var showPDBeLink = false;\n        var showControlToggle = true;\n        var showControlInfo = true;\n        if (customeState && customeState.initParams && customeState.initParams.moleculeId && customeState.initParams.pdbeLink)\n            showPDBeLink = true;\n        if (customeState && customeState.initParams && customeState.initParams.superposition)\n            showPDBeLink = false;\n        if (customeState && customeState.initParams && customeState.initParams.hideCanvasControls && customeState.initParams.hideCanvasControls.indexOf('controlToggle') > -1)\n            showControlToggle = false;\n        if (customeState && customeState.initParams && customeState.initParams.hideCanvasControls && customeState.initParams.hideCanvasControls.indexOf('controlInfo') > -1)\n            showControlInfo = false;\n        var bgColor = this.isBlack(customeState) ? '#fff' : '#555';\n        var pdbeLink = {\n            parentStyle: { width: 'auto' },\n            bgStyle: { position: 'absolute', height: '27px', width: '54px', marginLeft: '-33px' },\n            containerStyle: { position: 'absolute', right: '10px', top: '10px', padding: '3px 3px 3px 18px' },\n            style: { display: 'inline-block', fontSize: '14px', color: bgColor, borderBottom: 'none', cursor: 'pointer', textDecoration: 'none', position: 'absolute', right: '5px' },\n            pdbeImg: {\n                src: 'https://www.ebi.ac.uk/pdbe/entry/static/images/logos/PDBe/logo_T_64.png',\n                alt: 'PDBe logo',\n                style: { height: '12px', width: '12px', border: 0, position: 'absolute', margin: '4px 0 0 -13px' }\n            }\n        };\n        var vwpBtnsTopMargin = { marginTop: '30px' };\n        return (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [showPDBeLink && (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-viewport-controls-buttons', style: pdbeLink.containerStyle }, { children: [(0, jsx_runtime_1.jsx)(\"div\", { className: 'msp-semi-transparent-background', style: pdbeLink.bgStyle }), (0, jsx_runtime_1.jsxs)(\"a\", tslib_1.__assign({ className: 'msp-pdbe-link', style: pdbeLink.style, target: \"_blank\", href: \"https://pdbe.org/\".concat(customeState.initParams.moleculeId) }, { children: [(0, jsx_runtime_1.jsx)(\"img\", { src: pdbeLink.pdbeImg.src, alt: pdbeLink.pdbeImg.alt, style: pdbeLink.pdbeImg.style }), customeState.initParams.moleculeId] }))] })), (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-viewport-controls', onMouseMove: this.onMouseMove, style: showPDBeLink ? vwpBtnsTopMargin : void 0 }, { children: [(0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-viewport-controls-buttons' }, { children: [(0, jsx_runtime_1.jsxs)(\"div\", { children: [(0, jsx_runtime_1.jsx)(\"div\", { className: 'msp-semi-transparent-background' }), this.icon(icons_1.AutorenewSvg, this.resetCamera, 'Reset Camera')] }), (0, jsx_runtime_1.jsxs)(\"div\", { children: [(0, jsx_runtime_1.jsx)(\"div\", { className: 'msp-semi-transparent-background' }), this.icon(icons_1.CameraOutlinedSvg, this.toggleScreenshotExpanded, 'Screenshot / State Snapshot', this.state.isScreenshotExpanded)] }), (0, jsx_runtime_1.jsxs)(\"div\", { children: [(0, jsx_runtime_1.jsx)(\"div\", { className: 'msp-semi-transparent-background' }), showControlToggle && this.icon(icons_1.BuildOutlinedSvg, this.toggleControls, 'Toggle Controls Panel', this.plugin.layout.state.showControls), this.plugin.config.get(config_1.PluginConfig.Viewport.ShowExpand) && this.icon(icons_1.FullscreenSvg, this.toggleExpanded, 'Toggle Expanded Viewport', this.plugin.layout.state.isExpanded), showControlInfo && this.icon(icons_1.TuneSvg, this.toggleSettingsExpanded, 'Settings / Controls Info', this.state.isSettingsExpanded)] }), this.plugin.config.get(config_1.PluginConfig.Viewport.ShowSelectionMode) && (0, jsx_runtime_1.jsxs)(\"div\", { children: [(0, jsx_runtime_1.jsx)(\"div\", { className: 'msp-semi-transparent-background' }), (0, jsx_runtime_1.jsx)(selection_1.ToggleSelectionModeButton, {})] })] })), this.state.isScreenshotExpanded && (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-viewport-controls-panel' }, { children: (0, jsx_runtime_1.jsx)(common_1.ControlGroup, tslib_1.__assign({ header: 'Screenshot / State', title: 'Click to close.', initialExpanded: true, hideExpander: true, hideOffset: true, onHeaderClick: this.toggleScreenshotExpanded, topRightIcon: icons_1.CloseSvg, noTopMargin: true, childrenClassName: 'msp-viewport-controls-panel-controls' }, { children: (0, jsx_runtime_1.jsx)(pdbe_screenshot_controls_1.DownloadScreenshotControls, { close: this.toggleScreenshotExpanded }) })) })), this.state.isSettingsExpanded && (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-viewport-controls-panel' }, { children: (0, jsx_runtime_1.jsx)(common_1.ControlGroup, tslib_1.__assign({ header: 'Settings / Controls Info', title: 'Click to close.', initialExpanded: true, hideExpander: true, hideOffset: true, onHeaderClick: this.toggleSettingsExpanded, topRightIcon: icons_1.CloseSvg, noTopMargin: true, childrenClassName: 'msp-viewport-controls-panel-controls' }, { children: (0, jsx_runtime_1.jsx)(simple_settings_1.SimpleSettingsControl, {}) })) }))] }))] });\n    };\n    return PDBeViewportControls;\n}(viewport_1.ViewportControls));\nexports.PDBeViewportControls = PDBeViewportControls;\n//# sourceMappingURL=pdbe-viewport-controls.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/ui/pdbe-viewport-controls.js\n");
  
  /***/ }),
  
  /***/ "./lib/ui/segment-tree.js":
  /*!********************************!*\
    !*** ./lib/ui/segment-tree.js ***!
    \********************************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SegmentTree = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar jsx_runtime_1 = __webpack_require__(/*! react/jsx-runtime */ \"./node_modules/react/jsx-runtime.js\");\nvar operators_1 = __webpack_require__(/*! rxjs/operators */ \"./node_modules/rxjs/dist/cjs/operators/index.js\");\nvar commands_1 = __webpack_require__(/*! Molstar/mol-plugin/commands */ \"./node_modules/molstar/lib/mol-plugin/commands.js\");\nvar mol_state_1 = __webpack_require__(/*! Molstar/mol-state */ \"./node_modules/molstar/lib/mol-state/index.js\");\nvar base_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/base */ \"./node_modules/molstar/lib/mol-plugin-ui/base.js\");\nvar common_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/common */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/common.js\");\nvar param_definition_1 = __webpack_require__(/*! Molstar/mol-util/param-definition */ \"./node_modules/molstar/lib/mol-util/param-definition.js\");\nvar parameters_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/parameters */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/parameters.js\");\nvar mol_state_2 = __webpack_require__(/*! Molstar/mol-state */ \"./node_modules/molstar/lib/mol-state/index.js\");\nvar superposition_1 = __webpack_require__(/*! ../superposition */ \"./lib/superposition.js\");\nvar update_transform_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/state/update-transform */ \"./node_modules/molstar/lib/mol-plugin-ui/state/update-transform.js\");\nvar icons_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/icons */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/icons.js\");\nvar lists_1 = __webpack_require__(/*! Molstar/mol-util/color/lists */ \"./node_modules/molstar/lib/mol-util/color/lists.js\");\nvar color_1 = __webpack_require__(/*! Molstar/mol-util/color */ \"./node_modules/molstar/lib/mol-util/color/index.js\");\nvar builder_1 = __webpack_require__(/*! Molstar/mol-script/language/builder */ \"./node_modules/molstar/lib/mol-script/language/builder.js\");\nvar rxjs_1 = __webpack_require__(/*! rxjs */ \"./node_modules/rxjs/dist/cjs/index.js\");\nvar transforms_1 = __webpack_require__(/*! Molstar/mol-plugin-state/transforms */ \"./node_modules/molstar/lib/mol-plugin-state/transforms.js\");\nvar superposition_2 = __webpack_require__(/*! ../superposition */ \"./lib/superposition.js\");\nvar SuperpositionTag = 'SuperpositionTransform';\nvar SegmentTree = /** @class */ (function (_super) {\n    tslib_1.__extends(SegmentTree, _super);\n    function SegmentTree() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.getSegmentParams = function () {\n            var customState = _this.customState;\n            if (!customState.superpositionState || !customState.superpositionState.segmentData)\n                return;\n            var segmentData = customState.superpositionState.segmentData;\n            var segmentArr = segmentData.map(function (segment, i) {\n                var segmentLabel = \"\".concat(i + 1, \" ( \").concat(segment.segment_start, \" - \").concat(segment.segment_end, \" )\");\n                return [segmentLabel, segmentLabel];\n            });\n            var segmentOptions = {\n                segment: param_definition_1.ParamDefinition.Select('', segmentArr, { label: 'Select Segment', description: 'Select segment to view its clusters below' })\n            };\n            var segmentIndex = customState.superpositionState.activeSegment - 1;\n            _this.setState({ segment: {\n                    params: segmentOptions,\n                    value: { segment: segmentArr[segmentIndex][0] }\n                } });\n            _this.setState({ isBusy: false });\n        };\n        _this.updateSegment = function (val) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var customState, updatedParams;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                if (!this.state.segment)\n                    return [2 /*return*/];\n                customState = this.customState;\n                customState.events.isBusy.next(true);\n                // Hide pervious segement structures\n                this.hideStructures(customState.superpositionState.activeSegment - 1);\n                updatedParams = tslib_1.__assign({}, this.state.segment);\n                updatedParams.value = val;\n                this.setState({ segment: updatedParams });\n                setTimeout(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                    var updatedSegmentIndex;\n                    return tslib_1.__generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                updatedSegmentIndex = parseInt(val.segment.split(' ')[0]);\n                                customState.superpositionState.activeSegment = updatedSegmentIndex;\n                                // Display current segment visible structures\n                                return [4 /*yield*/, this.displayStructures(customState.superpositionState.activeSegment - 1)];\n                            case 1:\n                                // Display current segment visible structures\n                                _a.sent();\n                                customState.events.isBusy.next(false);\n                                this.plugin.customState.events.segmentUpdate.next(true);\n                                return [2 /*return*/];\n                        }\n                    });\n                }); }, 100);\n                return [2 /*return*/, false];\n            });\n        }); };\n        _this.hideStructures = function (segmentIndex) {\n            // clear selections\n            _this.plugin.managers.interactivity.lociSelects.deselectAll();\n            // clear Focus\n            _this.plugin.managers.structure.focus.clear();\n            // remove measurements\n            var measurements = _this.plugin.managers.structure.measurement.state;\n            var measureTypes = ['labels', 'distances', 'angles', 'dihedrals'];\n            var measurementCell = void 0;\n            measureTypes.forEach(function (type) {\n                if (measurementCell)\n                    return;\n                if (measurements[type][0]) {\n                    measurementCell = _this.plugin.state.data.cells.get(measurements[type][0].transform.parent);\n                }\n            });\n            if (measurementCell) {\n                commands_1.PluginCommands.State.RemoveObject(_this.plugin, { state: measurementCell.parent, ref: measurementCell.transform.parent, removeParentGhosts: true });\n            }\n            // hide structures\n            var customState = _this.customState;\n            customState.superpositionState.visibleRefs[segmentIndex] = [];\n            for (var _i = 0, _a = customState.superpositionState.loadedStructs[segmentIndex]; _i < _a.length; _i++) {\n                var struct = _a[_i];\n                var structRef = _this.customState.superpositionState.models[struct];\n                if (structRef) {\n                    var structHierarchy = _this.plugin.managers.structure.hierarchy.current.refs.get(structRef);\n                    if (structHierarchy && structHierarchy.components) {\n                        for (var _b = 0, _c = structHierarchy.components; _b < _c.length; _b++) {\n                            var c = _c[_b];\n                            if (c && c.cell && !c.cell.state.isHidden) {\n                                customState.superpositionState.visibleRefs[segmentIndex].push(c.cell.transform.ref);\n                                commands_1.PluginCommands.State.ToggleVisibility(_this.plugin, { state: c.cell.parent, ref: c.cell.transform.ref });\n                            }\n                        }\n                    }\n                }\n            }\n            if (customState.superpositionState.alphafold.ref) {\n                var afStr = _this.plugin.managers.structure.hierarchy.current.refs.get(customState.superpositionState.alphafold.ref);\n                if (afStr && afStr.components) {\n                    for (var _d = 0, _e = afStr.components; _d < _e.length; _d++) {\n                        var c = _e[_d];\n                        if (c && c.cell && !c.cell.state.isHidden) {\n                            commands_1.PluginCommands.State.ToggleVisibility(_this.plugin, { state: c.cell.parent, ref: c.cell.transform.ref });\n                        }\n                    }\n                }\n            }\n        };\n        _this.displayStructures = function (segmentIndex) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var customState, spState, loadStrs_1, _i, _a, ref, cell, afStr, _b, _c, c;\n            var _this = this;\n            return tslib_1.__generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        customState = this.customState;\n                        spState = customState.superpositionState;\n                        if (!(customState.superpositionState.visibleRefs[segmentIndex].length === 0)) return [3 /*break*/, 3];\n                        loadStrs_1 = [];\n                        customState.superpositionState.segmentData[segmentIndex].clusters.forEach(function (cluster) {\n                            var entryList = [cluster[0]];\n                            if (customState.initParams.superpositionParams && customState.initParams.superpositionParams.superposeAll) {\n                                entryList = cluster;\n                            }\n                            entryList.forEach(function (str) {\n                                var structStateId = \"\".concat(str.pdb_id, \"_\").concat(str.struct_asym_id);\n                                var structRef = customState.superpositionState.models[structStateId];\n                                if (structRef) {\n                                    var cell = _this.plugin.state.data.cells.get(structRef);\n                                    var isHidden = cell.state.isHidden ? true : false;\n                                    if (isHidden) {\n                                        commands_1.PluginCommands.State.ToggleVisibility(_this.plugin, { state: cell.parent, ref: structRef });\n                                        // PluginCommands.State.ToggleVisibility(this.plugin, { state: cell.parent!, ref: cell.transform.parent });\n                                    }\n                                }\n                                else {\n                                    loadStrs_1.push(str);\n                                }\n                            });\n                        });\n                        commands_1.PluginCommands.Camera.Reset(this.plugin);\n                        if (!(loadStrs_1.length > 0)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, (0, superposition_1.renderSuperposition)(this.plugin, segmentIndex, loadStrs_1)];\n                    case 1:\n                        _d.sent();\n                        commands_1.PluginCommands.Camera.Reset(this.plugin);\n                        _d.label = 2;\n                    case 2: return [3 /*break*/, 4];\n                    case 3:\n                        for (_i = 0, _a = customState.superpositionState.visibleRefs[segmentIndex]; _i < _a.length; _i++) {\n                            ref = _a[_i];\n                            cell = this.plugin.state.data.cells.get(ref);\n                            if (cell && cell.state.isHidden) {\n                                commands_1.PluginCommands.State.ToggleVisibility(this.plugin, { state: cell.parent, ref: ref });\n                            }\n                        }\n                        commands_1.PluginCommands.Camera.Reset(this.plugin);\n                        _d.label = 4;\n                    case 4:\n                        if (spState.alphafold.ref) {\n                            (0, superposition_2.superposeAf)(this.plugin, spState.alphafold.traceOnly);\n                            commands_1.PluginCommands.Camera.Reset(this.plugin);\n                        }\n                        if (spState.alphafold.ref && spState.alphafold.visibility[segmentIndex]) {\n                            afStr = this.plugin.managers.structure.hierarchy.current.refs.get(customState.superpositionState.alphafold.ref);\n                            if (afStr && afStr.components) {\n                                for (_b = 0, _c = afStr.components; _b < _c.length; _b++) {\n                                    c = _c[_b];\n                                    if (c && c.cell && c.cell.state.isHidden) {\n                                        commands_1.PluginCommands.State.ToggleVisibility(this.plugin, { state: c.cell.parent, ref: c.cell.transform.ref });\n                                    }\n                                }\n                            }\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        }); };\n        return _this;\n    }\n    SegmentTree.prototype.componentDidMount = function () {\n        var _this = this;\n        this.subscribe(this.plugin.customState.events.superpositionInit, function () {\n            var customState = _this.customState;\n            if (customState && !customState.superpositionError) {\n                _this.getSegmentParams();\n            }\n            _this.forceUpdate();\n        });\n        this.subscribe(this.plugin.customState.events.isBusy, function (e) {\n            _this.setState({ isBusy: e });\n            if (e) {\n                commands_1.PluginCommands.Toast.Show(_this.plugin, {\n                    title: 'Process',\n                    message: 'Loading / computing large dataset!',\n                    key: 'is-busy-toast'\n                });\n            }\n            else {\n                commands_1.PluginCommands.Toast.Hide(_this.plugin, { key: 'is-busy-toast' });\n            }\n        });\n        this.subscribe(this.plugin.behaviors.layout.leftPanelTabName, function (e) {\n            if (e !== 'segments')\n                return;\n            _this.getSegmentParams();\n            _this.forceUpdate();\n        });\n    };\n    Object.defineProperty(SegmentTree.prototype, \"customState\", {\n        get: function () {\n            return this.plugin.customState;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    SegmentTree.prototype.transform = function (s, matrix) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var r, o, params, b;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        r = mol_state_2.StateObjectRef.resolveAndCheck(this.plugin.state.data, s);\n                        if (!r)\n                            return [2 /*return*/];\n                        o = mol_state_2.StateSelection.findTagInSubtree(this.plugin.state.data.tree, r.transform.ref, SuperpositionTag);\n                        params = {\n                            transform: {\n                                name: 'matrix',\n                                params: { data: matrix, transpose: false }\n                            }\n                        };\n                        b = o\n                            ? this.plugin.state.data.build().to(o).update(params)\n                            : this.plugin.state.data.build().to(s)\n                                .insert(transforms_1.StateTransforms.Model.TransformStructureConformation, params, { tags: SuperpositionTag });\n                        return [4 /*yield*/, this.plugin.runTask(this.plugin.state.data.updateTree(b))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    SegmentTree.prototype.render = function () {\n        var sectionHeader = (0, jsx_runtime_1.jsx)(common_1.SectionHeader, { title: \"Structure clusters\" });\n        var customState = this.customState;\n        if (customState && customState.initParams && !customState.initParams.superposition) {\n            return (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [sectionHeader, (0, jsx_runtime_1.jsx)(\"div\", { children: \"Functionality unavailable!\" })] });\n        }\n        else {\n            if (customState && customState.initParams && customState.initParams.superposition) {\n                sectionHeader = (0, jsx_runtime_1.jsx)(common_1.SectionHeader, { title: \"Structure clusters - \".concat(customState.initParams.moleculeId) });\n                if (customState.superpositionError) {\n                    return (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [sectionHeader, (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ style: { textAlign: 'center' } }, { children: customState.superpositionError }))] });\n                }\n                else if (!customState.superpositionState || !customState.superpositionState.segmentData) {\n                    return (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [sectionHeader, (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ style: { textAlign: 'center' } }, { children: \"Loading Segment Data!\" }))] });\n                }\n            }\n        }\n        if (this.state) {\n            var segmentIndex_1 = parseInt(this.state.segment.value.segment.split(' ')[0]) - 1;\n            var segmentData_1 = customState.superpositionState.segmentData;\n            var fullSegmentRange = \"( \".concat(segmentData_1[0].segment_start, \" - \").concat(segmentData_1[segmentData_1.length - 1].segment_end, \" )\");\n            sectionHeader = (0, jsx_runtime_1.jsx)(common_1.SectionHeader, { title: \"Structure clusters \".concat(customState.initParams.moleculeId), desc: fullSegmentRange });\n            return (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [sectionHeader, (0, jsx_runtime_1.jsx)(parameters_1.ParameterControls, { params: this.state.segment.params, values: this.state.segment.value, onChangeValues: this.updateSegment, isDisabled: this.state.isBusy }), segmentData_1[segmentIndex_1].clusters.map(function (c, i) { return (0, jsx_runtime_1.jsx)(ClusterNode, { cluster: c, totalClusters: segmentData_1[segmentIndex_1].clusters.length, segmentIndex: segmentIndex_1, clusterIndex: i }, \"cluster-\".concat(segmentIndex_1, \"-\").concat(i)); })] });\n        }\n        return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, {});\n    };\n    return SegmentTree;\n}(base_1.PurePluginUIComponent));\nexports.SegmentTree = SegmentTree;\nvar ClusterNode = /** @class */ (function (_super) {\n    tslib_1.__extends(ClusterNode, _super);\n    function ClusterNode() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            isCollapsed: false,\n            showAll: false,\n            showNone: false,\n            showSearch: false,\n            isBusy: false,\n            cluster: _this.props.cluster,\n            searchText: ''\n        };\n        _this.inputStream = new rxjs_1.Subject();\n        _this.handleInputStream = function (inputStr) {\n            _this.setState({ searchText: inputStr });\n            var filteredRes = _this.props.cluster.filter(function (item) {\n                return item.pdb_id.toLowerCase().indexOf(inputStr.toLowerCase()) >= 0;\n            });\n            _this.setState({ cluster: filteredRes });\n        };\n        _this.toggleExpanded = function (e) {\n            e.preventDefault();\n            _this.setState({ isCollapsed: !_this.state.isCollapsed });\n            e.currentTarget.blur();\n        };\n        _this.selectAll = function (e) {\n            e.preventDefault();\n            _this.setState({ showAll: !_this.state.showAll, showNone: false });\n            e.currentTarget.blur();\n        };\n        _this.selectNone = function (e) {\n            e.preventDefault();\n            _this.setState({ showAll: false, showNone: !_this.state.showNone });\n            e.currentTarget.blur();\n        };\n        _this.applyAction = function (e) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var customState, currentState;\n            var _this = this;\n            return tslib_1.__generator(this, function (_a) {\n                e.preventDefault();\n                e.currentTarget.blur();\n                customState = this.customState;\n                customState.events.isBusy.next(true);\n                currentState = tslib_1.__assign({}, this.state);\n                this.setState({ showAll: false, showNone: false });\n                setTimeout(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                    var loadStrs, _a, _b, _c, str, structStateId, structRef, cell, isHidden, e_1_1;\n                    var _d, e_1, _e, _f;\n                    return tslib_1.__generator(this, function (_g) {\n                        switch (_g.label) {\n                            case 0:\n                                loadStrs = [];\n                                _g.label = 1;\n                            case 1:\n                                _g.trys.push([1, 12, 13, 18]);\n                                _a = true, _b = tslib_1.__asyncValues(this.state.cluster);\n                                _g.label = 2;\n                            case 2: return [4 /*yield*/, _b.next()];\n                            case 3:\n                                if (!(_c = _g.sent(), _d = _c.done, !_d)) return [3 /*break*/, 11];\n                                _f = _c.value;\n                                _a = false;\n                                _g.label = 4;\n                            case 4:\n                                _g.trys.push([4, , 9, 10]);\n                                str = _f;\n                                structStateId = \"\".concat(str.pdb_id, \"_\").concat(str.struct_asym_id);\n                                structRef = undefined;\n                                if (customState && customState.superpositionState && customState.superpositionState.models[structStateId]) {\n                                    structRef = this.customState.superpositionState.models[structStateId];\n                                }\n                                if (!structRef) return [3 /*break*/, 7];\n                                cell = this.plugin.state.data.cells.get(structRef);\n                                if (!cell) return [3 /*break*/, 6];\n                                isHidden = cell.state.isHidden ? true : false;\n                                if (!((isHidden && currentState.showAll) || (!isHidden && currentState.showNone))) return [3 /*break*/, 6];\n                                return [4 /*yield*/, commands_1.PluginCommands.State.ToggleVisibility(this.plugin, { state: cell.parent, ref: structRef })];\n                            case 5:\n                                _g.sent();\n                                _g.label = 6;\n                            case 6: return [3 /*break*/, 8];\n                            case 7:\n                                if (currentState.showAll)\n                                    loadStrs.push(str);\n                                _g.label = 8;\n                            case 8: return [3 /*break*/, 10];\n                            case 9:\n                                _a = true;\n                                return [7 /*endfinally*/];\n                            case 10: return [3 /*break*/, 2];\n                            case 11: return [3 /*break*/, 18];\n                            case 12:\n                                e_1_1 = _g.sent();\n                                e_1 = { error: e_1_1 };\n                                return [3 /*break*/, 18];\n                            case 13:\n                                _g.trys.push([13, , 16, 17]);\n                                if (!(!_a && !_d && (_e = _b.return))) return [3 /*break*/, 15];\n                                return [4 /*yield*/, _e.call(_b)];\n                            case 14:\n                                _g.sent();\n                                _g.label = 15;\n                            case 15: return [3 /*break*/, 17];\n                            case 16:\n                                if (e_1) throw e_1.error;\n                                return [7 /*endfinally*/];\n                            case 17: return [7 /*endfinally*/];\n                            case 18:\n                                ;\n                                commands_1.PluginCommands.Camera.Reset(this.plugin);\n                                if (!(loadStrs.length > 0)) return [3 /*break*/, 20];\n                                return [4 /*yield*/, (0, superposition_1.renderSuperposition)(this.plugin, this.props.segmentIndex, loadStrs)];\n                            case 19:\n                                _g.sent();\n                                _g.label = 20;\n                            case 20:\n                                customState.events.isBusy.next(false);\n                                return [2 /*return*/];\n                        }\n                    });\n                }); });\n                return [2 /*return*/];\n            });\n        }); };\n        _this.cancelAction = function (e) {\n            e.preventDefault();\n            _this.setState({ showAll: false, showNone: false });\n            e.currentTarget.blur();\n        };\n        _this.clearSearch = function (e) {\n            e.preventDefault();\n            _this.setState({ searchText: '' });\n            _this.inputStream.next('');\n            e.currentTarget.blur();\n        };\n        return _this;\n    }\n    ClusterNode.prototype.componentDidMount = function () {\n        var _this = this;\n        this.subscribe(this.plugin.customState.events.isBusy, function (e) {\n            _this.setState({ isBusy: e, showAll: false, showNone: false });\n        });\n        this.subscribe(this.inputStream.pipe((0, operators_1.debounceTime)(1000 / 24)), function (e) { return _this.handleInputStream(e); });\n    };\n    Object.defineProperty(ClusterNode.prototype, \"customState\", {\n        get: function () {\n            return this.plugin.customState;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ClusterNode.prototype.render = function () {\n        var _this = this;\n        var customState = this.customState;\n        if (!customState.superpositionState || !customState.superpositionState.segmentData)\n            return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, {});\n        var expand = (0, jsx_runtime_1.jsx)(common_1.IconButton, { svg: this.state.isCollapsed ? icons_1.ArrowRightSvg : icons_1.ArrowDropDownSvg, flex: '20px', onClick: this.toggleExpanded, transparent: true, disabled: this.state.isBusy, className: 'msp-no-hover-outline' });\n        var title = \"Segment \".concat(customState.superpositionState.activeSegment, \" Cluster \").concat(this.props.clusterIndex + 1);\n        var label = (0, jsx_runtime_1.jsxs)(common_1.Button, tslib_1.__assign({ className: \"msp-btn-tree-label\", noOverflow: true, title: title, disabled: this.state.isBusy }, { children: [(0, jsx_runtime_1.jsxs)(\"span\", { children: [\"Cluster \", this.props.clusterIndex + 1] }), \" \", (0, jsx_runtime_1.jsxs)(\"small\", { children: [this.state.cluster.length < this.props.cluster.length ? \"\".concat(this.state.cluster.length, \" / \") : '', this.props.cluster.length, \" chain\", this.props.cluster.length > 1 ? 's' : ''] })] }));\n        var selectionControls = (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(common_1.Button, tslib_1.__assign({ icon: icons_1.CheckSvg, flex: true, onClick: this.selectAll, style: { flex: '0 0 50px', textAlign: 'center', fontSize: '80%', color: '#9cacc3', padding: 0 }, disabled: this.state.isBusy, title: \"Show all chains\" }, { children: \"All\" })), (0, jsx_runtime_1.jsx)(common_1.Button, tslib_1.__assign({ icon: icons_1.CloseSvg, flex: true, onClick: this.selectNone, style: { flex: '0 0 50px', textAlign: 'center', fontSize: '80%', color: '#9cacc3', padding: 0 }, disabled: this.state.isBusy, title: \"Hide all chains\" }, { children: \"None\" }))] });\n        var mainRow = (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: \"msp-flex-row msp-tree-row\", style: { marginTop: '10px' } }, { children: [expand, label, this.props.cluster.length > 1 && selectionControls] }));\n        var searchControls = (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-mapped-parameter-group', style: { fontSize: '90%' } }, { children: [(0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-control-row msp-transform-header-brand-gray', style: { height: '33px', marginLeft: '30px' } }, { children: [(0, jsx_runtime_1.jsx)(\"span\", tslib_1.__assign({ className: 'msp-control-row-label' }, { children: \"Search PDB ID\" })), (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-control-row-ctrl' }, { children: (0, jsx_runtime_1.jsx)(\"input\", { type: 'text', placeholder: 'Enter PDB ID..', disabled: this.state.isBusy, onChange: function (e) { return _this.inputStream.next(e.target.value); }, value: this.state.searchText, maxLength: 4 }) }))] })), (0, jsx_runtime_1.jsx)(common_1.IconButton, { svg: icons_1.CloseSvg, flex: true, onClick: this.clearSearch, style: { flex: '0 0 24px', padding: 0 }, disabled: this.state.isBusy || this.state.searchText === '', toggleState: this.state.searchText !== '', title: 'Clear search input' })] }));\n        return (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [mainRow, (this.state.showAll || this.state.showNone) && (0, jsx_runtime_1.jsx)(\"div\", { children: (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: \"msp-control-row msp-transform-header-brand-\".concat(this.state.showAll ? 'green' : 'red'), style: { display: 'flex', marginLeft: '20px', height: '35px' } }, { children: [(0, jsx_runtime_1.jsxs)(\"span\", tslib_1.__assign({ className: 'msp-control-row-label', style: { flex: '1 1 auto', textAlign: 'left', fontSize: '85%' } }, { children: [this.state.showAll ? 'Display' : 'Hide', \" \", this.state.cluster.length < this.props.cluster.length ? \"\".concat(this.state.cluster.length, \" / \") : 'all ', this.props.cluster.length, \" chains\"] })), (0, jsx_runtime_1.jsx)(common_1.Button, tslib_1.__assign({ icon: icons_1.CheckSvg, flex: true, onClick: this.applyAction, style: { flex: '0 0 60px', textAlign: 'center', fontSize: '78%', color: '#9cacc3', padding: 0, margin: '0 1px' }, title: \"Apply action\" }, { children: \"Apply\" })), (0, jsx_runtime_1.jsx)(common_1.Button, tslib_1.__assign({ icon: icons_1.CloseSvg, flex: true, onClick: this.cancelAction, style: { flex: '0 0 60px', textAlign: 'center', fontSize: '78%', color: '#9cacc3', padding: 0, margin: '0 1px' }, title: \"Cancel action\" }, { children: \"Cancel\" }))] })) }), (!this.state.isCollapsed && this.props.cluster.length > 5) && searchControls, !this.state.isCollapsed && (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-tree-updates-wrapper', style: { maxHeight: (this.props.totalClusters > 1) ? '330px' : '87%', overflowY: 'auto' } }, { children: this.state.cluster.map(function (s, i) { return (0, jsx_runtime_1.jsx)(StructureNode, { segmentIndex: _this.props.segmentIndex, structure: s, isRep: i === 0 ? true : false }, \"str-\".concat(s.pdb_id).concat(s.struct_asym_id).concat(i)); }) }))] });\n    };\n    return ClusterNode;\n}(base_1.PluginUIComponent));\nvar StructureNode = /** @class */ (function (_super) {\n    tslib_1.__extends(StructureNode, _super);\n    function StructureNode() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            showControls: false,\n            isBusy: false,\n            isProcessing: false,\n            isHidden: true,\n        };\n        _this.toggleVisible = function (e) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var structHierarchy, _i, _a, c, currentHiddenState;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        e.preventDefault();\n                        e.currentTarget.blur();\n                        this.setState({ isProcessing: true, showControls: false });\n                        if (!this.ref) return [3 /*break*/, 1];\n                        structHierarchy = this.plugin.managers.structure.hierarchy.current.refs.get(this.ref);\n                        if (structHierarchy && structHierarchy.components) {\n                            for (_i = 0, _a = structHierarchy.components; _i < _a.length; _i++) {\n                                c = _a[_i];\n                                currentHiddenState = c.cell.state.isHidden ? true : false;\n                                if (currentHiddenState === this.state.isHidden) {\n                                    commands_1.PluginCommands.State.ToggleVisibility(this.plugin, { state: c.cell.parent, ref: c.cell.transform.ref });\n                                }\n                            }\n                            this.setState({ isHidden: !this.state.isHidden });\n                        }\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, (0, superposition_1.renderSuperposition)(this.plugin, this.props.segmentIndex, [this.props.structure])];\n                    case 2:\n                        _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        this.setState({ isProcessing: false });\n                        commands_1.PluginCommands.Camera.Reset(this.plugin);\n                        return [2 /*return*/];\n                }\n            });\n        }); };\n        _this.selectAction = function (item) {\n            if (!item)\n                return;\n            _this.setState({ showControls: false });\n            (item === null || item === void 0 ? void 0 : item.value)();\n        };\n        _this.highlight = function (e) {\n            e.preventDefault();\n            if (_this.ref) {\n                var cell = _this.plugin.state.data.cells.get(_this.ref);\n                commands_1.PluginCommands.Interactivity.Object.Highlight(_this.plugin, { state: cell.parent, ref: _this.ref });\n            }\n            e.currentTarget.blur();\n        };\n        _this.clearHighlight = function (e) {\n            e.preventDefault();\n            commands_1.PluginCommands.Interactivity.ClearHighlights(_this.plugin);\n            e.currentTarget.blur();\n        };\n        _this.toggleControls = function (e) {\n            e.preventDefault();\n            _this.setState({ showControls: !_this.state.showControls });\n            e.currentTarget.blur();\n        };\n        return _this;\n    }\n    Object.defineProperty(StructureNode.prototype, \"customState\", {\n        get: function () {\n            return this.plugin.customState;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StructureNode.prototype, \"ref\", {\n        get: function () {\n            if (this.customState && this.customState.superpositionState && this.customState.superpositionState.models[\"\".concat(this.props.structure.pdb_id, \"_\").concat(this.props.structure.struct_asym_id)]) {\n                return this.customState.superpositionState.models[\"\".concat(this.props.structure.pdb_id, \"_\").concat(this.props.structure.struct_asym_id)];\n            }\n            else {\n                return undefined;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StructureNode.prototype, \"modelCell\", {\n        get: function () {\n            if (this.ref) {\n                return this.plugin.state.data.cells.get(this.ref);\n            }\n            else {\n                return undefined;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StructureNode.prototype, \"isAllHidden\", {\n        get: function () {\n            var isHidden = true;\n            if (this.ref) {\n                var structHierarchy = this.plugin.managers.structure.hierarchy.current.refs.get(this.ref);\n                if (structHierarchy && structHierarchy.components) {\n                    for (var _i = 0, _a = structHierarchy.components; _i < _a.length; _i++) {\n                        var c = _a[_i];\n                        if (c && c.cell && !c.cell.state.isHidden) {\n                            isHidden = false;\n                            break;\n                        }\n                    }\n                }\n                else {\n                    isHidden = false;\n                }\n            }\n            return isHidden;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    StructureNode.prototype.checkRelation = function (ref) {\n        var isRelated = false;\n        var cell = this.plugin.state.data.cells.get(ref);\n        if (cell && cell.transform.parent) {\n            if (cell && cell.transform.parent === this.ref) {\n                isRelated = true;\n            }\n            else {\n                var pcell = this.plugin.state.data.cells.get(cell.transform.parent);\n                if (pcell && pcell.transform.parent === this.ref)\n                    isRelated = true;\n            }\n        }\n        else {\n            var currentNodeCell = this.plugin.state.data.cells.get(this.ref);\n            if (currentNodeCell && currentNodeCell.transform.parent === cell.transform.parent) {\n                isRelated = true;\n            }\n        }\n        return isRelated;\n    };\n    StructureNode.prototype.is = function (e) {\n        if (!this.ref)\n            return false;\n        var isRelated = false;\n        if (this.ref && e.ref !== this.ref) {\n            isRelated = this.checkRelation(e.ref);\n        }\n        if (e.ref === this.ref || isRelated) {\n            return true;\n        }\n        else {\n            var invalidStruct = (this.customState.superpositionState.invalidStruct.indexOf(\"\".concat(this.props.structure.pdb_id, \"_\").concat(this.props.structure.struct_asym_id)) > -1) ? true : false;\n            return invalidStruct ? true : false;\n        }\n    };\n    StructureNode.prototype.componentDidMount = function () {\n        var _this = this;\n        this.setState({ isHidden: this.isAllHidden });\n        this.subscribe(this.plugin.customState.events.isBusy, function (e) {\n            _this.setState({ isBusy: e, showControls: false });\n        });\n        this.subscribe(this.plugin.state.events.cell.stateUpdated.pipe((0, operators_1.filter)(function (e) { return _this.is(e); }), (0, operators_1.debounceTime)(33)), function (e) {\n            _this.setState({ isHidden: _this.isAllHidden });\n            // this.forceUpdate();\n        });\n    };\n    StructureNode.prototype.getTagRefs = function (tags) {\n        var TagSet = new Set(tags);\n        var tree = this.plugin.state.data.tree;\n        return mol_state_2.StateSelection.findUniqueTagsInSubtree(tree, this.modelCell.transform.ref, TagSet);\n    };\n    StructureNode.prototype.getRandomColor = function () {\n        var clList = lists_1.ColorLists;\n        var spState = this.plugin.customState.superpositionState;\n        var palleteIndex = spState.colorState[this.props.segmentIndex].palleteIndex;\n        var colorIndex = spState.colorState[this.props.segmentIndex].colorIndex;\n        if (clList[spState.colorPalette[palleteIndex]].list[colorIndex + 1]) {\n            colorIndex += 1;\n        }\n        else {\n            colorIndex = 0;\n            palleteIndex = spState.colorPalette[palleteIndex + 1] ? palleteIndex + 1 : 0;\n        }\n        var palleteName = spState.colorPalette[palleteIndex];\n        this.plugin.customState.superpositionState.colorState[this.props.segmentIndex].palleteIndex = palleteIndex;\n        this.plugin.customState.superpositionState.colorState[this.props.segmentIndex].colorIndex = colorIndex;\n        return clList[palleteName].list[colorIndex];\n    };\n    StructureNode.prototype.addChainRepr = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var uniformColor1, strInstance, query, chainSel;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        uniformColor1 = this.getRandomColor();\n                        strInstance = this.plugin.state.data.select(this.ref)[0];\n                        query = builder_1.MolScriptBuilder.struct.generator.atomGroups({\n                            'chain-test': builder_1.MolScriptBuilder.core.rel.eq([builder_1.MolScriptBuilder.struct.atomProperty.macromolecular.label_asym_id(), this.props.structure.struct_asym_id])\n                        });\n                        return [4 /*yield*/, this.plugin.builders.structure.tryCreateComponentFromExpression(strInstance, query, \"Chain-\".concat(this.props.segmentIndex), { label: \"Chain\", tags: [\"superposition-sel\"] })];\n                    case 1:\n                        chainSel = _a.sent();\n                        if (!chainSel) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.plugin.builders.structure.representation.addRepresentation(chainSel, { type: 'cartoon', color: 'uniform', colorParams: { value: uniformColor1 } }, { tag: \"superposition-visual\" })];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    StructureNode.prototype.updates = function () {\n        var _this = this;\n        var structHierarchy = this.plugin.managers.structure.hierarchy.current.refs.get(this.ref);\n        if (structHierarchy && structHierarchy.components) {\n            var representations_1 = [];\n            var showAddChainBtn_1 = true;\n            structHierarchy.components.forEach(function (comps) {\n                var gKeys = comps.key.split(',');\n                var cId1Arr = gKeys[0].split('-');\n                if (cId1Arr[2] === 'Chain')\n                    showAddChainBtn_1 = false;\n                if (comps.representations) {\n                    comps.representations.forEach(function (repr) {\n                        representations_1.push(repr);\n                    });\n                }\n            });\n            var customState = this.plugin.customState;\n            if (customState.initParams && customState.initParams.superpositionParams && !customState.initParams.superpositionParams.ligandView) {\n                showAddChainBtn_1 = false;\n            }\n            if (representations_1.length > 0) {\n                return (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-accent-offset', style: { marginLeft: '40px' } }, { children: [representations_1.length > 0 && representations_1.map(function (r, i) { return (0, jsx_runtime_1.jsx)(StructureRepresentationEntry, { group: [structHierarchy], representation: r }, \"\".concat(r.cell.transform.ref, \"-\").concat(i)); }), showAddChainBtn_1 && (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-control-group-header', style: { marginTop: '1px' } }, { children: (0, jsx_runtime_1.jsxs)(common_1.Button, tslib_1.__assign({ noOverflow: true, className: 'msp-control-button-label', title: \"Click to add chain representaion\", onClick: function () { return _this.addChainRepr(); } }, { children: [\"\\u00A0\\u00A0Add Chain \", this.props.structure.struct_asym_id, \" Representation\"] })) }))] }));\n            }\n        }\n        return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, {});\n    };\n    StructureNode.prototype.getSubtitle = function () {\n        var customState = this.plugin.customState;\n        var hetList = customState.superpositionState.hets[\"\".concat(this.props.structure.pdb_id, \"_\").concat(this.props.structure.struct_asym_id)];\n        var subtitle;\n        if (hetList) {\n            var hetLimit = this.props.structure.is_representative ? 1 : 4;\n            var totalHets = hetList.length;\n            var hetStr = hetList.join(', ');\n            if (totalHets > hetLimit) {\n                hetStr = hetList.slice(0, hetLimit).join(', ');\n                hetStr += \" + \".concat(totalHets - hetLimit);\n            }\n            subtitle = \" ( \".concat(hetStr, \" )\");\n            if (this.props.structure.is_representative)\n                subtitle = \" \".concat(subtitle, \" ( Representative )\");\n        }\n        else if (this.props.structure.is_representative) {\n            subtitle = ' ( Representative )';\n        }\n        return subtitle;\n    };\n    Object.defineProperty(StructureNode.prototype, \"panelColor\", {\n        get: function () {\n            var panelColor = '#808080';\n            if (!this.state.isHidden) {\n                if (this.modelCell) {\n                    var refs = this.getTagRefs([\"superposition-visual\", \"superposition-ligand-visual\"]);\n                    var visualRef = refs[\"superposition-ligand-visual\"] ? refs[\"superposition-ligand-visual\"] : refs[\"superposition-visual\"] ? refs[\"superposition-visual\"] : undefined;\n                    if (visualRef) {\n                        var visualCell = this.plugin.state.data.cells.get(visualRef);\n                        if (visualCell.params && visualCell.params.values && visualCell.params.values.colorTheme) {\n                            var colorTheme = visualCell.params.values.colorTheme;\n                            if (colorTheme.params && colorTheme.params.value) {\n                                panelColor = \"\".concat(color_1.Color.toStyle(colorTheme.params.value));\n                            }\n                            else if (colorTheme.params && colorTheme.params.palette) {\n                                var colorList1 = colorTheme.params.palette.params.list.colors;\n                                panelColor = \"\".concat(color_1.Color.toStyle(colorList1[0]));\n                            }\n                            else if (colorTheme.params && colorTheme.params.list) {\n                                var colorList2 = colorTheme.params.list.colors;\n                                panelColor = \"\".concat(color_1.Color.toStyle(colorList2[0]));\n                            }\n                        }\n                    }\n                }\n            }\n            return panelColor;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    StructureNode.prototype.render = function () {\n        var superpositionParams = this.customState.initParams.superpositionParams;\n        var strutStateId = \"\".concat(this.props.structure.pdb_id, \"_\").concat(this.props.structure.struct_asym_id);\n        var invalidStruct = (this.customState.superpositionState.invalidStruct.indexOf(strutStateId) > -1) ? true : false;\n        var noMatrixStruct = (this.customState.superpositionState.noMatrixStruct.indexOf(strutStateId) > -1) ? true : false;\n        var subTitle = invalidStruct ? noMatrixStruct ? \" Matrix not available!\" : \" No Ligand found!\" : this.getSubtitle();\n        var strTitle = \"\".concat(this.props.structure.pdb_id, \" chain \").concat(this.props.structure.auth_asym_id);\n        if (superpositionParams && superpositionParams.ligandView) {\n            strTitle = \"\".concat(this.props.structure.pdb_id, \" \").concat(this.props.structure.struct_asym_id);\n        }\n        var label = (0, jsx_runtime_1.jsxs)(common_1.Button, tslib_1.__assign({ className: \"msp-btn-tree-label\", style: { borderLeftColor: this.panelColor }, noOverflow: true, title: strTitle, disabled: (invalidStruct || this.state.isBusy || this.state.isProcessing) ? true : false, onMouseEnter: this.highlight, onMouseLeave: this.clearHighlight }, { children: [(0, jsx_runtime_1.jsx)(\"span\", { children: strTitle }), subTitle && (0, jsx_runtime_1.jsx)(\"small\", { children: subTitle })] }));\n        var expand = (0, jsx_runtime_1.jsx)(common_1.IconButton, { svg: !this.state.showControls ? icons_1.ArrowRightSvg : icons_1.ArrowDropDownSvg, flex: '20px', onClick: this.toggleControls, transparent: true, className: 'msp-no-hover-outline', disabled: (invalidStruct || this.state.isBusy || this.state.isProcessing) ? true : false });\n        var visibility = (0, jsx_runtime_1.jsx)(common_1.IconButton, { svg: this.state.isHidden ? icons_1.VisibilityOffOutlinedSvg : icons_1.VisibilityOutlinedSvg, toggleState: false, small: true, onClick: this.toggleVisible, disabled: (invalidStruct || this.state.isBusy || this.state.isProcessing) ? true : false, title: this.state.isHidden ? \"Show chain\" : \"Hide chain\" });\n        var row = (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: \"msp-flex-row msp-tree-row\", style: { marginLeft: !this.state.isHidden ? '10px' : '31px' } }, { children: [!this.state.isHidden && expand, label, visibility] }));\n        return (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ style: { marginBottom: '1px' } }, { children: [row, this.state.showControls && this.updates()] }));\n    };\n    return StructureNode;\n}(base_1.PluginUIComponent));\nvar StructureRepresentationEntry = /** @class */ (function (_super) {\n    tslib_1.__extends(StructureRepresentationEntry, _super);\n    function StructureRepresentationEntry() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.toggleVisible = function (e) {\n            e.preventDefault();\n            e.currentTarget.blur();\n            var cell = _this.props.representation.cell;\n            commands_1.PluginCommands.State.ToggleVisibility(_this.plugin, { state: cell.parent, ref: cell.transform.parent });\n        };\n        return _this;\n    }\n    StructureRepresentationEntry.prototype.componentDidMount = function () {\n        var _this = this;\n        this.subscribe(this.plugin.state.events.cell.stateUpdated, function (e) {\n            if (mol_state_1.State.ObjectEvent.isCell(e, _this.props.representation.cell))\n                _this.forceUpdate();\n        });\n    };\n    StructureRepresentationEntry.prototype.render = function () {\n        var _a, _b, _c, _d, _e, _f, _g;\n        var repr = this.props.representation.cell;\n        var label = (_a = repr.obj) === null || _a === void 0 ? void 0 : _a.label;\n        if (((_b = repr.obj) === null || _b === void 0 ? void 0 : _b.data.repr) && ((_c = repr.obj) === null || _c === void 0 ? void 0 : _c.data.repr.label)) {\n            var sourceLabel = (((_d = repr.obj) === null || _d === void 0 ? void 0 : _d.data.repr.label.indexOf('[Focus]')) >= 0) ? '[Focus]' : (_e = repr.obj) === null || _e === void 0 ? void 0 : _e.data.repr.label;\n            var isLargeLabel = sourceLabel.length > 10 ? true : false;\n            sourceLabel = \"\".concat(isLargeLabel ? \"\".concat(sourceLabel.substring(0, 28), \"...\") : sourceLabel);\n            if (isLargeLabel) {\n                label = sourceLabel;\n            }\n            else {\n                label = \"\".concat(sourceLabel, \" \").concat((label && label.length < 21) ? ' - ' + label : '');\n            }\n        }\n        if (((_f = repr.obj) === null || _f === void 0 ? void 0 : _f.data.repr) && ((_g = repr.obj) === null || _g === void 0 ? void 0 : _g.data.repr.label) === 'Custom Selection')\n            label = 'Custom Selection';\n        return (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-representation-entry' }, { children: [repr.parent && (0, jsx_runtime_1.jsx)(common_1.ExpandGroup, tslib_1.__assign({ header: \"\".concat(label || 'Representation'), noOffset: true, headerStyle: { overflow: 'hidden' } }, { children: (0, jsx_runtime_1.jsx)(update_transform_1.UpdateTransformControl, { state: repr.parent, transform: repr.transform, customHeader: 'none', noMargin: true }) })), (0, jsx_runtime_1.jsx)(common_1.IconButton, { svg: this.props.representation.cell.state.isHidden ? icons_1.VisibilityOffOutlinedSvg : icons_1.VisibilityOutlinedSvg, toggleState: false, onClick: this.toggleVisible, title: this.props.representation.cell.state.isHidden ? \"Show representation\" : \"Hide representation\", small: true, className: 'msp-default-bg', style: { position: 'absolute', top: 0, right: 0, lineHeight: '24px', height: '24px', textAlign: 'right', width: '32px', paddingRight: '6px', background: 'none' } })] }));\n    };\n    return StructureRepresentationEntry;\n}(base_1.PurePluginUIComponent));\n//# sourceMappingURL=segment-tree.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/ui/segment-tree.js\n");
  
  /***/ }),
  
  /***/ "./lib/ui/superposition-components.js":
  /*!********************************************!*\
    !*** ./lib/ui/superposition-components.js ***!
    \********************************************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SuperpositionComponentControls = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar jsx_runtime_1 = __webpack_require__(/*! react/jsx-runtime */ \"./node_modules/react/jsx-runtime.js\");\nvar commands_1 = __webpack_require__(/*! Molstar/mol-plugin/commands */ \"./node_modules/molstar/lib/mol-plugin/commands.js\");\nvar mol_state_1 = __webpack_require__(/*! Molstar/mol-state */ \"./node_modules/molstar/lib/mol-state/index.js\");\nvar param_definition_1 = __webpack_require__(/*! Molstar/mol-util/param-definition */ \"./node_modules/molstar/lib/mol-util/param-definition.js\");\nvar base_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/base */ \"./node_modules/molstar/lib/mol-plugin-ui/base.js\");\nvar common_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/common */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/common.js\");\nvar icons_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/icons */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/icons.js\");\nvar parameters_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls/parameters */ \"./node_modules/molstar/lib/mol-plugin-ui/controls/parameters.js\");\nvar operators_1 = __webpack_require__(/*! rxjs/operators */ \"./node_modules/rxjs/dist/cjs/operators/index.js\");\nvar rxjs_1 = __webpack_require__(/*! rxjs */ \"./node_modules/rxjs/dist/cjs/index.js\");\nvar SuperpositionComponentControls = /** @class */ (function (_super) {\n    tslib_1.__extends(SuperpositionComponentControls, _super);\n    function SuperpositionComponentControls() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SuperpositionComponentControls.prototype.defaultState = function () {\n        return {\n            header: 'Components',\n            isCollapsed: false,\n            isDisabled: false,\n            brand: { accent: 'blue', svg: icons_1.CubeOutlineSvg }\n        };\n    };\n    SuperpositionComponentControls.prototype.renderControls = function () {\n        return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(ComponentListControls, {}) });\n    };\n    return SuperpositionComponentControls;\n}(base_1.CollapsableControls));\nexports.SuperpositionComponentControls = SuperpositionComponentControls;\n;\nvar ComponentListControls = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentListControls, _super);\n    function ComponentListControls() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            segmentWatch: false,\n            ligSearchText: '',\n            carbSearchText: '',\n            componentGroups: { nonLigGroups: [], ligGroups: [], carbGroups: [], alphafold: [] },\n            ligGroups: [],\n            isLigCollapsed: false,\n            carbGroups: [],\n            isCarbCollapsed: false,\n            isBusy: false\n        };\n        _this.ligInputStream = new rxjs_1.Subject();\n        _this.handleLigInputStream = function (inputStr) {\n            _this.setState({ ligSearchText: inputStr });\n            var filteredRes = _this.state.componentGroups.ligGroups.filter(function (g) {\n                var gKeys = g[0].key.split(',');\n                var cId1Arr = gKeys[0].split('-');\n                return cId1Arr[2].toLowerCase().indexOf(inputStr.toLowerCase()) >= 0;\n            });\n            _this.setState({ ligGroups: filteredRes });\n        };\n        _this.carbInputStream = new rxjs_1.Subject();\n        _this.handleCarbInputStream = function (inputStr) {\n            _this.setState({ carbSearchText: inputStr });\n            var filteredRes = _this.state.componentGroups.carbGroups.filter(function (g) {\n                var gKeys = g[0].key.split(',');\n                var cId1Arr = gKeys[0].split('-');\n                cId1Arr.splice(0, 2);\n                cId1Arr.pop();\n                return cId1Arr.join('-').toLowerCase().indexOf(inputStr.toLowerCase()) >= 0;\n            });\n            _this.setState({ carbGroups: filteredRes });\n        };\n        _this.toggleVisible = function (e, action, type) {\n            e.preventDefault();\n            e.currentTarget.blur();\n            var customState = _this.plugin.customState;\n            customState.events.isBusy.next(true);\n            var visualEntites = (type === 'ligands') ? _this.state.ligGroups : _this.state.carbGroups;\n            setTimeout(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                var _a, visualEntites_1, visualEntites_1_1, visualEntity, e_1_1;\n                var _b, e_1, _c, _d;\n                return tslib_1.__generator(this, function (_e) {\n                    switch (_e.label) {\n                        case 0:\n                            _e.trys.push([0, 5, 6, 11]);\n                            _a = true, visualEntites_1 = tslib_1.__asyncValues(visualEntites);\n                            _e.label = 1;\n                        case 1: return [4 /*yield*/, visualEntites_1.next()];\n                        case 2:\n                            if (!(visualEntites_1_1 = _e.sent(), _b = visualEntites_1_1.done, !_b)) return [3 /*break*/, 4];\n                            _d = visualEntites_1_1.value;\n                            _a = false;\n                            try {\n                                visualEntity = _d;\n                                this.plugin.managers.structure.hierarchy.toggleVisibility(visualEntity, action);\n                            }\n                            finally {\n                                _a = true;\n                            }\n                            _e.label = 3;\n                        case 3: return [3 /*break*/, 1];\n                        case 4: return [3 /*break*/, 11];\n                        case 5:\n                            e_1_1 = _e.sent();\n                            e_1 = { error: e_1_1 };\n                            return [3 /*break*/, 11];\n                        case 6:\n                            _e.trys.push([6, , 9, 10]);\n                            if (!(!_a && !_b && (_c = visualEntites_1.return))) return [3 /*break*/, 8];\n                            return [4 /*yield*/, _c.call(visualEntites_1)];\n                        case 7:\n                            _e.sent();\n                            _e.label = 8;\n                        case 8: return [3 /*break*/, 10];\n                        case 9:\n                            if (e_1) throw e_1.error;\n                            return [7 /*endfinally*/];\n                        case 10: return [7 /*endfinally*/];\n                        case 11:\n                            ;\n                            customState.events.isBusy.next(false);\n                            return [2 /*return*/];\n                    }\n                });\n            }); });\n        };\n        _this.showHideAllControls = function (type) {\n            return (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(common_1.Button, tslib_1.__assign({ icon: icons_1.CheckSvg, flex: true, onClick: function (e) { return _this.toggleVisible(e, 'show', type); }, style: { flex: '0 0 50px', textAlign: 'center', fontSize: '80%', color: '#9cacc3', padding: 0 }, title: \"Show all \".concat(type), disabled: false }, { children: \"All\" })), (0, jsx_runtime_1.jsx)(common_1.Button, tslib_1.__assign({ icon: icons_1.CloseSvg, flex: true, onClick: function (e) { return _this.toggleVisible(e, 'hide', type); }, style: { flex: '0 0 50px', textAlign: 'center', fontSize: '80%', color: '#9cacc3', padding: 0 }, title: \"Hide all \".concat(type), disabled: false }, { children: \"None\" }))] });\n        };\n        _this.clearLigSearch = function (e) {\n            e.preventDefault();\n            _this.setState({ ligSearchText: '' });\n            _this.ligInputStream.next('');\n            e.currentTarget.blur();\n        };\n        _this.clearCarbSearch = function (e) {\n            e.preventDefault();\n            _this.setState({ carbSearchText: '' });\n            _this.carbInputStream.next('');\n            e.currentTarget.blur();\n        };\n        _this.collapseSection = function (e, type) {\n            e.preventDefault();\n            e.currentTarget.blur();\n            if (type === 'ligands') {\n                _this.setState({ isLigCollapsed: !_this.state.isLigCollapsed });\n            }\n            else {\n                _this.setState({ isCarbCollapsed: !_this.state.isCarbCollapsed });\n            }\n        };\n        _this.sectionHeader = function (type) {\n            var showHideAllControls = (type === 'ligands') ? _this.showHideAllControls('ligands') : _this.showHideAllControls('carbohydrates');\n            var title = (type === 'ligands') ? 'Ligand' : 'Carbohydrates';\n            var visibleVisuals = (type === 'ligands') ? _this.state.ligGroups.length : _this.state.carbGroups.length;\n            var totalVisuals = (type === 'ligands') ? _this.state.componentGroups.ligGroups.length : _this.state.componentGroups.carbGroups.length;\n            return (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-flex-row', style: { marginTop: '6px' } }, { children: [(0, jsx_runtime_1.jsxs)(\"button\", tslib_1.__assign({ className: 'msp-form-control msp-control-button-label msp-transform-header-brand-gray', style: { textAlign: 'left' }, onClick: function (e) { return _this.collapseSection(e, type); } }, { children: [(0, jsx_runtime_1.jsx)(\"span\", { children: (0, jsx_runtime_1.jsx)(\"strong\", { children: title }) }), (0, jsx_runtime_1.jsxs)(\"small\", tslib_1.__assign({ style: { color: '#7d91b0' } }, { children: [\" ( \", visibleVisuals, visibleVisuals < totalVisuals ? \" / \".concat(totalVisuals) : '', \" )\"] }))] })), visibleVisuals > 1 && showHideAllControls] }));\n        };\n        return _this;\n    }\n    ComponentListControls.prototype.componentDidMount = function () {\n        var _this = this;\n        this.subscribe(this.plugin.managers.structure.hierarchy.behaviors.selection, function () {\n            _this.categoriseGroups();\n            _this.forceUpdate();\n        });\n        this.subscribe(this.plugin.behaviors.state.isBusy, function (v) {\n            _this.setState({ isBusy: v });\n        });\n    };\n    ComponentListControls.prototype.componentDidUpdate = function () {\n        var _this = this;\n        var customState = this.plugin.customState;\n        if (customState.events && !this.state.segmentWatch) {\n            this.setState({ segmentWatch: true });\n            this.subscribe(customState.events.segmentUpdate, function () {\n                _this.categoriseGroups();\n                _this.forceUpdate();\n            });\n        }\n        this.subscribe(this.ligInputStream.pipe((0, operators_1.debounceTime)(1000 / 24)), function (e) { return _this.handleLigInputStream(e); });\n        this.subscribe(this.carbInputStream.pipe((0, operators_1.debounceTime)(1000 / 24)), function (e) { return _this.handleCarbInputStream(e); });\n    };\n    ComponentListControls.prototype.categoriseGroups = function () {\n        var componentGroupsVal = { nonLigGroups: [], ligGroups: [], carbGroups: [], alphafold: [] };\n        var componentGroups = this.plugin.managers.structure.hierarchy.currentComponentGroups;\n        var customState = this.plugin.customState;\n        componentGroups.forEach(function (g) {\n            var isLigandView = false;\n            if (customState.initParams && customState.initParams.superpositionParams && customState.initParams.superpositionParams.ligandView) {\n                isLigandView = true;\n            }\n            if (isLigandView) {\n                var gKeys = g[0].key.split(',');\n                var cId1Arr = gKeys[0].split('-');\n                if (gKeys.indexOf('superposition-focus-surr-sel') === -1) {\n                    if (cId1Arr[cId1Arr.length - 1] !== (customState.superpositionState.activeSegment - 1) + '')\n                        return;\n                    if (gKeys.indexOf('superposition-ligand-sel') >= 0) {\n                        componentGroupsVal.ligGroups.push(g);\n                    }\n                    else if (gKeys.indexOf('superposition-carb-sel') >= 0) {\n                        componentGroupsVal.carbGroups.push(g);\n                    }\n                    else if (gKeys.indexOf('alphafold-chain') >= 0) {\n                        componentGroupsVal.alphafold.push(g);\n                    }\n                    else {\n                        componentGroupsVal.nonLigGroups.push(g);\n                    }\n                }\n                else {\n                    componentGroupsVal.nonLigGroups.push(g);\n                }\n            }\n            else {\n                var gKeys = g[0].key.split(',');\n                if (gKeys.indexOf('superposition-focus-surr-sel') >= 0 || gKeys.indexOf(\"Chain-\".concat(customState.superpositionState.activeSegment - 1)) >= 0) {\n                    componentGroupsVal.nonLigGroups.push(g);\n                }\n                else if (gKeys.indexOf('alphafold-chain') >= 0) {\n                    componentGroupsVal.alphafold.push(g);\n                }\n            }\n        });\n        this.setState({ componentGroups: componentGroupsVal, ligGroups: componentGroupsVal.ligGroups, carbGroups: componentGroupsVal.carbGroups, ligSearchText: '', carbSearchText: '' });\n    };\n    ComponentListControls.prototype.render = function () {\n        var _this = this;\n        var ligSearchControls = (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-mapped-parameter-group', style: { fontSize: '90%' } }, { children: [(0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-control-row msp-transform-header-brand-gray', style: { height: '33px' } }, { children: [(0, jsx_runtime_1.jsx)(\"span\", tslib_1.__assign({ className: 'msp-control-row-label' }, { children: \"Search Ligand\" })), (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-control-row-ctrl' }, { children: (0, jsx_runtime_1.jsx)(\"input\", { type: 'text', placeholder: 'Enter HET code', disabled: this.state.isBusy, onChange: function (e) { return _this.ligInputStream.next(e.target.value); }, value: this.state.ligSearchText, maxLength: 3 }) }))] })), (0, jsx_runtime_1.jsx)(common_1.IconButton, { svg: icons_1.CloseSvg, flex: true, onClick: this.clearLigSearch, style: { flex: '0 0 24px', padding: 0 }, disabled: this.state.ligSearchText === '' || this.state.isBusy, toggleState: this.state.ligSearchText !== '', title: 'Clear search input' })] }));\n        var carbSearchControls = (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-mapped-parameter-group', style: { fontSize: '90%' } }, { children: [(0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-control-row msp-transform-header-brand-gray', style: { height: '33px' } }, { children: [(0, jsx_runtime_1.jsx)(\"span\", tslib_1.__assign({ className: 'msp-control-row-label' }, { children: \"Search Carbohydrate\" })), (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-control-row-ctrl' }, { children: (0, jsx_runtime_1.jsx)(\"input\", { type: 'text', placeholder: 'Enter HET code', disabled: this.state.isBusy, onChange: function (e) { return _this.carbInputStream.next(e.target.value); }, value: this.state.carbSearchText, maxLength: 3 }) }))] })), (0, jsx_runtime_1.jsx)(common_1.IconButton, { svg: icons_1.CloseSvg, flex: true, onClick: this.clearCarbSearch, style: { flex: '0 0 24px', padding: 0 }, disabled: this.state.carbSearchText === '' || this.state.isBusy, toggleState: this.state.carbSearchText !== '', title: 'Clear search input' })] }));\n        var ligSectionHeader = this.sectionHeader('ligands');\n        var carbSectionHeader = this.sectionHeader('carbohydrates');\n        return (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(this.state.componentGroups.nonLigGroups.length > 0) && (0, jsx_runtime_1.jsx)(\"div\", { children: this.state.componentGroups.nonLigGroups.map(function (g) { return (0, jsx_runtime_1.jsx)(StructureComponentGroup, { group: g, boldHeader: true }, g[0].cell.transform.ref); }) }), (this.state.componentGroups.alphafold.length > 0) && (0, jsx_runtime_1.jsx)(\"div\", { children: this.state.componentGroups.alphafold.map(function (g) { return (0, jsx_runtime_1.jsx)(StructureComponentGroup, { group: g, boldHeader: true, type: 'alphafold' }, g[0].cell.transform.ref); }) }), (this.state.componentGroups.ligGroups.length > 0) && ligSectionHeader, (!this.state.isLigCollapsed && this.state.componentGroups.ligGroups.length > 5) && ligSearchControls, (this.state.componentGroups.ligGroups.length > 0) && (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-control-offset', style: { maxHeight: '800px', overflowY: 'auto' } }, { children: !this.state.isLigCollapsed && this.state.ligGroups.map(function (g) { return (0, jsx_runtime_1.jsx)(StructureComponentGroup, { group: g, boldHeader: false }, g[0].cell.transform.ref); }) })), (this.state.componentGroups.carbGroups.length > 0) && carbSectionHeader, (!this.state.isCarbCollapsed && this.state.componentGroups.carbGroups.length > 5) && carbSearchControls, (this.state.componentGroups.carbGroups.length > 0) && (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-control-offset', style: { maxHeight: '800px', overflowY: 'auto' } }, { children: !this.state.isCarbCollapsed && this.state.carbGroups.map(function (g) { return (0, jsx_runtime_1.jsx)(StructureComponentGroup, { group: g, boldHeader: false }, g[0].cell.transform.ref); }) }))] });\n    };\n    return ComponentListControls;\n}(base_1.PurePluginUIComponent));\nvar StructureComponentGroup = /** @class */ (function (_super) {\n    tslib_1.__extends(StructureComponentGroup, _super);\n    function StructureComponentGroup() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            action: void 0,\n            isHidden: false,\n            isBusy: false\n        };\n        _this.checkAllHidden = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n            var allHidden, _i, _a, c;\n            return tslib_1.__generator(this, function (_b) {\n                allHidden = true;\n                for (_i = 0, _a = this.props.group; _i < _a.length; _i++) {\n                    c = _a[_i];\n                    if (!c.cell.state.isHidden) {\n                        allHidden = false;\n                        break;\n                    }\n                }\n                if (allHidden)\n                    this.setState({ isHidden: true });\n                return [2 /*return*/];\n            });\n        }); };\n        _this.toggleVisible = function (e) {\n            e.preventDefault();\n            e.currentTarget.blur();\n            _this.plugin.managers.structure.component.toggleVisibility(_this.props.group);\n            _this.setState({ isHidden: !_this.state.isHidden });\n            if (_this.props.type === 'alphafold') {\n                var spState = _this.plugin.customState.superpositionState;\n                spState.alphafold.visibility[spState.activeSegment - 1] = _this.state.isHidden;\n            }\n        };\n        _this.toggleAction = function () { return _this.setState({ action: _this.state.action === 'action' ? void 0 : 'action' }); };\n        _this.highlight = function (e) {\n            e.preventDefault();\n            if (!_this.props.group[0].cell.parent)\n                return;\n            commands_1.PluginCommands.Interactivity.Object.Highlight(_this.plugin, { state: _this.props.group[0].cell.parent, ref: _this.props.group.map(function (c) { return c.cell.transform.ref; }) });\n        };\n        _this.clearHighlight = function (e) {\n            e.preventDefault();\n            commands_1.PluginCommands.Interactivity.ClearHighlights(_this.plugin);\n        };\n        _this.focus = function () {\n            var allHidden = true;\n            for (var _i = 0, _a = _this.props.group; _i < _a.length; _i++) {\n                var c = _a[_i];\n                if (!c.cell.state.isHidden) {\n                    allHidden = false;\n                    break;\n                }\n            }\n            if (allHidden) {\n                _this.plugin.managers.structure.hierarchy.toggleVisibility(_this.props.group, 'show');\n            }\n            _this.plugin.managers.camera.focusSpheres(_this.props.group, function (e) {\n                var _a;\n                if (e.cell.state.isHidden)\n                    return;\n                return (_a = e.cell.obj) === null || _a === void 0 ? void 0 : _a.data.boundary.sphere;\n            });\n        };\n        return _this;\n    }\n    Object.defineProperty(StructureComponentGroup.prototype, \"pivot\", {\n        get: function () {\n            return this.props.group[0];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    StructureComponentGroup.prototype.componentDidMount = function () {\n        var _this = this;\n        this.checkAllHidden();\n        this.subscribe(this.plugin.state.events.cell.stateUpdated, function (e) {\n            var _a, _b;\n            // if (State.ObjectEvent.isCell(e, this.pivot.cell)) this.forceUpdate();\n            if (((_a = _this.pivot.cell.obj) === null || _a === void 0 ? void 0 : _a.label) === ((_b = e.cell.obj) === null || _b === void 0 ? void 0 : _b.label)) {\n                if (!e.cell.state.isHidden) {\n                    _this.setState({ isHidden: false });\n                }\n                else {\n                    _this.checkAllHidden();\n                }\n            }\n        });\n        this.subscribe(this.plugin.behaviors.state.isBusy, function (v) {\n            _this.setState({ isBusy: v });\n        });\n        this.subscribe(this.plugin.customState.events.isBusy, function (e) {\n            _this.setState({ isBusy: e });\n        });\n    };\n    StructureComponentGroup.prototype.render = function () {\n        var _this = this;\n        var _a;\n        var component = this.pivot;\n        var cell = component.cell;\n        var label = (_a = cell.obj) === null || _a === void 0 ? void 0 : _a.label;\n        var labelEle = this.props.boldHeader ? (0, jsx_runtime_1.jsx)(\"strong\", { children: label }) : label;\n        return (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-flex-row' }, { children: [(0, jsx_runtime_1.jsx)(common_1.Button, tslib_1.__assign({ noOverflow: true, className: 'msp-control-button-label', title: \"\".concat(label, \" - Click to focus.\"), onClick: this.focus, style: { textAlign: 'left' }, disabled: this.state.isBusy }, { children: labelEle })), (0, jsx_runtime_1.jsx)(common_1.IconButton, { disabled: this.state.isBusy, svg: this.state.isHidden ? icons_1.VisibilityOffOutlinedSvg : icons_1.VisibilityOutlinedSvg, toggleState: false, onClick: this.toggleVisible, title: \"\".concat(this.state.isHidden ? 'Show' : 'Hide', \" component\"), small: true, className: 'msp-form-control', flex: true }), (0, jsx_runtime_1.jsx)(common_1.IconButton, { disabled: this.state.isBusy, svg: icons_1.MoreHorizSvg, onClick: this.toggleAction, title: 'Actions', toggleState: this.state.action === 'action', className: 'msp-form-control', flex: true })] })), this.state.action === 'action' && (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-accent-offset' }, { children: (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ style: { marginBottom: '6px' } }, { children: component.representations.map(function (r) { return (0, jsx_runtime_1.jsx)(StructureRepresentationEntry, { group: _this.props.group, representation: r }, r.cell.transform.ref); }) })) }))] });\n    };\n    return StructureComponentGroup;\n}(base_1.PurePluginUIComponent));\nvar StructureRepresentationEntry = /** @class */ (function (_super) {\n    tslib_1.__extends(StructureRepresentationEntry, _super);\n    function StructureRepresentationEntry() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            isBusy: false,\n            clusterVal: { cluster: 'All' }\n        };\n        _this.remove = function () { return _this.plugin.managers.structure.component.removeRepresentations(_this.props.group, _this.props.representation); };\n        _this.toggleVisible = function (e) {\n            e.preventDefault();\n            e.currentTarget.blur();\n            _this.plugin.managers.structure.component.toggleVisibility(_this.props.group, _this.props.representation);\n        };\n        _this.update = function (params) {\n            return _this.updateRepresentations(_this.props.group, _this.props.representation, params);\n        };\n        _this.selectCluster = function (params) {\n            _this.setState({ clusterVal: { cluster: params.cluster } });\n        };\n        return _this;\n    }\n    StructureRepresentationEntry.prototype.componentDidMount = function () {\n        var _this = this;\n        this.subscribe(this.plugin.state.events.cell.stateUpdated, function (e) {\n            if (mol_state_1.State.ObjectEvent.isCell(e, _this.props.representation.cell))\n                _this.forceUpdate();\n        });\n        this.subscribe(this.plugin.behaviors.state.isBusy, function (v) {\n            _this.setState({ isBusy: v });\n        });\n        this.subscribe(this.plugin.customState.events.isBusy, function (e) {\n            _this.setState({ isBusy: e });\n        });\n    };\n    StructureRepresentationEntry.prototype.updateRepresentations = function (components, pivot, params) {\n        var _a, _b, _c;\n        if (components.length === 0)\n            return Promise.resolve();\n        var index = components[0].representations.indexOf(pivot);\n        if (index < 0)\n            return Promise.resolve();\n        var superpositionState = this.plugin.customState.superpositionState;\n        var filteredComps = [];\n        if (this.state.clusterVal.cluster !== 'All') {\n            var clusterData = superpositionState.segmentData[superpositionState.activeSegment - 1].clusters[parseInt(this.state.clusterVal.cluster) - 1];\n            filteredComps = clusterData.map(function (s) {\n                return \"\".concat(s.pdb_id, \"_\").concat(s.struct_asym_id);\n            });\n            if (filteredComps.length === 0)\n                return;\n        }\n        var update = this.plugin.state.data.build();\n        for (var _i = 0, components_1 = components; _i < components_1.length; _i++) {\n            var c = components_1[_i];\n            // TODO: is it ok to use just the index here? Could possible lead to ugly edge cases, but perhaps not worth the trouble to \"fix\".\n            var repr = c.representations[index];\n            if (!repr)\n                continue;\n            if (repr.cell.transform.transformer !== pivot.cell.transform.transformer)\n                continue;\n            if (this.state.clusterVal.cluster !== 'All') {\n                var rmIndex = filteredComps.indexOf(superpositionState.refMaps[repr.cell.transform.parent]);\n                if (rmIndex === -1)\n                    continue;\n            }\n            var updatedParams = {\n                type: params.type ? params.type : (_a = repr.cell.params) === null || _a === void 0 ? void 0 : _a.values.type,\n                colorTheme: params.colorTheme ? params.colorTheme : (_b = repr.cell.params) === null || _b === void 0 ? void 0 : _b.values.colorTheme,\n                sizeTheme: params.sizeTheme ? params.sizeTheme : (_c = repr.cell.params) === null || _c === void 0 ? void 0 : _c.values.sizeTheme\n            };\n            update.to(repr.cell).update(updatedParams);\n        }\n        return update.commit({ canUndo: 'Update Representation' });\n    };\n    StructureRepresentationEntry.prototype.render = function () {\n        var _a, _b, _c, _d, _e, _f;\n        var repr = this.props.representation.cell;\n        var superpositionState = this.plugin.customState.superpositionState;\n        var clusterSelectArr = [['All', 'All']];\n        superpositionState.segmentData[superpositionState.activeSegment - 1].clusters.forEach(function (c, i) {\n            clusterSelectArr.push([(i + 1) + '', (i + 1) + '']);\n        });\n        var clusterOptions = {\n            cluster: param_definition_1.ParamDefinition.Select('All', clusterSelectArr, { label: 'Select Cluster' })\n        };\n        var isSurrVisual = false;\n        var isAlphafold = false;\n        if (repr && repr.obj) {\n            var reprObj = repr.obj;\n            if (reprObj.tags && reprObj.tags.indexOf('superposition-focus-surr-repr') >= 0)\n                isSurrVisual = true;\n            if (reprObj.tags && reprObj.tags.indexOf('af-superposition-visual') >= 0)\n                isAlphafold = true;\n        }\n        return (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-representation-entry' }, { children: repr.parent && (0, jsx_runtime_1.jsxs)(\"div\", { children: [(clusterSelectArr.length > 2 && !isSurrVisual && !isAlphafold) && (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-representation-entry' }, { children: (0, jsx_runtime_1.jsx)(parameters_1.ParameterControls, { params: clusterOptions, values: this.state.clusterVal, onChangeValues: this.selectCluster, isDisabled: this.state.isBusy }) })), (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-representation-entry' }, { children: (0, jsx_runtime_1.jsx)(parameters_1.ParameterControls, { params: { type: (_a = repr.params) === null || _a === void 0 ? void 0 : _a.definition.type }, values: { type: (_b = repr.params) === null || _b === void 0 ? void 0 : _b.values.type }, onChangeValues: this.update, isDisabled: this.state.isBusy }) })), (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-representation-entry' }, { children: (0, jsx_runtime_1.jsx)(parameters_1.ParameterControls, { params: { colorTheme: (_c = repr.params) === null || _c === void 0 ? void 0 : _c.definition.colorTheme }, values: { colorTheme: (_d = repr.params) === null || _d === void 0 ? void 0 : _d.values.colorTheme }, onChangeValues: this.update, isDisabled: this.state.isBusy }) })), (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-representation-entry' }, { children: (0, jsx_runtime_1.jsx)(parameters_1.ParameterControls, { params: { sizeTheme: (_e = repr.params) === null || _e === void 0 ? void 0 : _e.definition.sizeTheme }, values: { sizeTheme: (_f = repr.params) === null || _f === void 0 ? void 0 : _f.values.sizeTheme }, onChangeValues: this.update, isDisabled: this.state.isBusy }) }))] }) }));\n    };\n    return StructureRepresentationEntry;\n}(base_1.PurePluginUIComponent));\n//# sourceMappingURL=superposition-components.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/ui/superposition-components.js\n");
  
  /***/ }),
  
  /***/ "./lib/ui/superposition-viewport.js":
  /*!******************************************!*\
    !*** ./lib/ui/superposition-viewport.js ***!
    \******************************************/
  /***/ ((__unused_webpack_module, exports, __webpack_require__) => {
  
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SuperpostionViewport = void 0;\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar jsx_runtime_1 = __webpack_require__(/*! react/jsx-runtime */ \"./node_modules/react/jsx-runtime.js\");\nvar base_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/base */ \"./node_modules/molstar/lib/mol-plugin-ui/base.js\");\nvar controls_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/controls */ \"./node_modules/molstar/lib/mol-plugin-ui/controls.js\");\nvar task_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/task */ \"./node_modules/molstar/lib/mol-plugin-ui/task.js\");\nvar toast_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/toast */ \"./node_modules/molstar/lib/mol-plugin-ui/toast.js\");\nvar viewport_1 = __webpack_require__(/*! Molstar/mol-plugin-ui/viewport */ \"./node_modules/molstar/lib/mol-plugin-ui/viewport.js\");\nvar SuperpostionViewport = /** @class */ (function (_super) {\n    tslib_1.__extends(SuperpostionViewport, _super);\n    function SuperpostionViewport() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SuperpostionViewport.prototype.render = function () {\n        var _a, _b;\n        var VPControls = ((_b = (_a = this.plugin.spec.components) === null || _a === void 0 ? void 0 : _a.viewport) === null || _b === void 0 ? void 0 : _b.controls) || viewport_1.ViewportControls;\n        return (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(viewport_1.Viewport, {}), (0, jsx_runtime_1.jsx)(\"div\", tslib_1.__assign({ className: 'msp-viewport-top-left-controls' }, { children: (0, jsx_runtime_1.jsx)(controls_1.StateSnapshotViewportControls, {}) })), (0, jsx_runtime_1.jsx)(controls_1.SelectionViewportControls, {}), (0, jsx_runtime_1.jsx)(VPControls, {}), (0, jsx_runtime_1.jsx)(task_1.BackgroundTaskProgress, {}), (0, jsx_runtime_1.jsxs)(\"div\", tslib_1.__assign({ className: 'msp-highlight-toast-wrapper' }, { children: [(0, jsx_runtime_1.jsx)(controls_1.LociLabels, {}), (0, jsx_runtime_1.jsx)(toast_1.Toasts, {})] }))] });\n    };\n    return SuperpostionViewport;\n}(base_1.PluginUIComponent));\nexports.SuperpostionViewport = SuperpostionViewport;\n//# sourceMappingURL=superposition-viewport.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWIvdWkvc3VwZXJwb3NpdGlvbi12aWV3cG9ydC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw0QkFBNEI7QUFDNUIsY0FBYyxtQkFBTyxDQUFDLGdEQUFPO0FBQzdCLG9CQUFvQixtQkFBTyxDQUFDLDhEQUFtQjtBQUMvQyxhQUFhLG1CQUFPLENBQUMsb0ZBQTRCO0FBQ2pELGlCQUFpQixtQkFBTyxDQUFDLDRGQUFnQztBQUN6RCxhQUFhLG1CQUFPLENBQUMsb0ZBQTRCO0FBQ2pELGNBQWMsbUJBQU8sQ0FBQyxzRkFBNkI7QUFDbkQsaUJBQWlCLG1CQUFPLENBQUMsNEZBQWdDO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUseURBQXlELG9EQUFvRCw2Q0FBNkMsSUFBSSw2RUFBNkUsR0FBRyxtRUFBbUUsd0NBQXdDLDJEQUEyRCxxREFBcUQsMENBQTBDLElBQUksMkRBQTJELDRDQUE0QyxJQUFJLEtBQUs7QUFDeHFCO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGRiZS1tb2xzdGFyLy4vbGliL3VpL3N1cGVycG9zaXRpb24tdmlld3BvcnQuanM/MGExOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3VwZXJwb3N0aW9uVmlld3BvcnQgPSB2b2lkIDA7XG52YXIgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnZhciBqc3hfcnVudGltZV8xID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xudmFyIGJhc2VfMSA9IHJlcXVpcmUoXCJNb2xzdGFyL21vbC1wbHVnaW4tdWkvYmFzZVwiKTtcbnZhciBjb250cm9sc18xID0gcmVxdWlyZShcIk1vbHN0YXIvbW9sLXBsdWdpbi11aS9jb250cm9sc1wiKTtcbnZhciB0YXNrXzEgPSByZXF1aXJlKFwiTW9sc3Rhci9tb2wtcGx1Z2luLXVpL3Rhc2tcIik7XG52YXIgdG9hc3RfMSA9IHJlcXVpcmUoXCJNb2xzdGFyL21vbC1wbHVnaW4tdWkvdG9hc3RcIik7XG52YXIgdmlld3BvcnRfMSA9IHJlcXVpcmUoXCJNb2xzdGFyL21vbC1wbHVnaW4tdWkvdmlld3BvcnRcIik7XG52YXIgU3VwZXJwb3N0aW9uVmlld3BvcnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU3VwZXJwb3N0aW9uVmlld3BvcnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3VwZXJwb3N0aW9uVmlld3BvcnQoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgU3VwZXJwb3N0aW9uVmlld3BvcnQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdmFyIFZQQ29udHJvbHMgPSAoKF9iID0gKF9hID0gdGhpcy5wbHVnaW4uc3BlYy5jb21wb25lbnRzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eudmlld3BvcnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jb250cm9scykgfHwgdmlld3BvcnRfMS5WaWV3cG9ydENvbnRyb2xzO1xuICAgICAgICByZXR1cm4gKDAsIGpzeF9ydW50aW1lXzEuanN4cykoanN4X3J1bnRpbWVfMS5GcmFnbWVudCwgeyBjaGlsZHJlbjogWygwLCBqc3hfcnVudGltZV8xLmpzeCkodmlld3BvcnRfMS5WaWV3cG9ydCwge30pLCAoMCwganN4X3J1bnRpbWVfMS5qc3gpKFwiZGl2XCIsIHRzbGliXzEuX19hc3NpZ24oeyBjbGFzc05hbWU6ICdtc3Atdmlld3BvcnQtdG9wLWxlZnQtY29udHJvbHMnIH0sIHsgY2hpbGRyZW46ICgwLCBqc3hfcnVudGltZV8xLmpzeCkoY29udHJvbHNfMS5TdGF0ZVNuYXBzaG90Vmlld3BvcnRDb250cm9scywge30pIH0pKSwgKDAsIGpzeF9ydW50aW1lXzEuanN4KShjb250cm9sc18xLlNlbGVjdGlvblZpZXdwb3J0Q29udHJvbHMsIHt9KSwgKDAsIGpzeF9ydW50aW1lXzEuanN4KShWUENvbnRyb2xzLCB7fSksICgwLCBqc3hfcnVudGltZV8xLmpzeCkodGFza18xLkJhY2tncm91bmRUYXNrUHJvZ3Jlc3MsIHt9KSwgKDAsIGpzeF9ydW50aW1lXzEuanN4cykoXCJkaXZcIiwgdHNsaWJfMS5fX2Fzc2lnbih7IGNsYXNzTmFtZTogJ21zcC1oaWdobGlnaHQtdG9hc3Qtd3JhcHBlcicgfSwgeyBjaGlsZHJlbjogWygwLCBqc3hfcnVudGltZV8xLmpzeCkoY29udHJvbHNfMS5Mb2NpTGFiZWxzLCB7fSksICgwLCBqc3hfcnVudGltZV8xLmpzeCkodG9hc3RfMS5Ub2FzdHMsIHt9KV0gfSkpXSB9KTtcbiAgICB9O1xuICAgIHJldHVybiBTdXBlcnBvc3Rpb25WaWV3cG9ydDtcbn0oYmFzZV8xLlBsdWdpblVJQ29tcG9uZW50KSk7XG5leHBvcnRzLlN1cGVycG9zdGlvblZpZXdwb3J0ID0gU3VwZXJwb3N0aW9uVmlld3BvcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdXBlcnBvc2l0aW9uLXZpZXdwb3J0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./lib/ui/superposition-viewport.js\n");
  
  /***/ }),
  
  /***/ "./node_modules/h264-mp4-encoder/embuild/dist/h264-mp4-encoder.node.js":
  /*!*****************************************************************************!*\
    !*** ./node_modules/h264-mp4-encoder/embuild/dist/h264-mp4-encoder.node.js ***!
    \*****************************************************************************/
  /***/ ((module, __unused_webpack_exports, __webpack_require__) => {
  
  eval("module.exports=function(A){var B={};function Q(I){if(B[I])return B[I].exports;var g=B[I]={i:I,l:!1,exports:{}};return A[I].call(g.exports,g,g.exports,Q),g.l=!0,g.exports}return Q.m=A,Q.c=B,Q.d=function(A,B,I){Q.o(A,B)||Object.defineProperty(A,B,{enumerable:!0,get:I})},Q.r=function(A){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(A,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(A,\"__esModule\",{value:!0})},Q.t=function(A,B){if(1&B&&(A=Q(A)),8&B)return A;if(4&B&&\"object\"==typeof A&&A&&A.__esModule)return A;var I=Object.create(null);if(Q.r(I),Object.defineProperty(I,\"default\",{enumerable:!0,value:A}),2&B&&\"string\"!=typeof A)for(var g in A)Q.d(I,g,function(B){return A[B]}.bind(null,g));return I},Q.n=function(A){var B=A&&A.__esModule?function(){return A.default}:function(){return A};return Q.d(B,\"a\",B),B},Q.o=function(A,B){return Object.prototype.hasOwnProperty.call(A,B)},Q.p=\"\",Q(Q.s=2)}([function(A,B){A.exports=__webpack_require__(/*! path */ \"path\")},function(A,B,Q){(function(B,I){var g,E=(g=(g=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||B,function(A){var B;A=A||{},B||(B=void 0!==A?A:{});var E,C={};for(E in B)B.hasOwnProperty(E)&&(C[E]=B[E]);var D,i,y,F,U=\"./this.program\";D=\"object\"==typeof window,i=\"function\"==typeof importScripts,y=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,F=!D&&!y&&!i;var c,N,H,G,o=\"\";y?(o=i?Q(0).dirname(o)+\"/\":I+\"/\",c=function(A,B){var I=_B(A);return I?B?I:I.toString():(H||(H=Q(3)),G||(G=Q(0)),A=G.normalize(A),H.readFileSync(A,B?null:\"utf8\"))},N=function(A){return(A=c(A,!0)).buffer||(A=new Uint8Array(A)),a(A.buffer),A},1<process.argv.length&&(U=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",(function(A){throw A})),process.on(\"unhandledRejection\",FA),B.inspect=function(){return\"[Emscripten Module object]\"}):F?(\"undefined\"!=typeof read&&(c=function(A){var B=_B(A);return B?TB(B):read(A)}),N=function(A){var B;return(B=_B(A))?B:\"function\"==typeof readbuffer?new Uint8Array(readbuffer(A)):(a(\"object\"==typeof(B=read(A,\"binary\"))),B)},\"undefined\"!=typeof print&&(\"undefined\"==typeof console&&(console={}),console.log=print,console.warn=console.error=\"undefined\"!=typeof printErr?printErr:print)):(D||i)&&(i?o=self.location.href:document.currentScript&&(o=document.currentScript.src),g&&(o=g),o=0!==o.indexOf(\"blob:\")?o.substr(0,o.lastIndexOf(\"/\")+1):\"\",c=function(A){try{var B=new XMLHttpRequest;return B.open(\"GET\",A,!1),B.send(null),B.responseText}catch(B){if(A=_B(A))return TB(A);throw B}},i&&(N=function(A){try{var B=new XMLHttpRequest;return B.open(\"GET\",A,!1),B.responseType=\"arraybuffer\",B.send(null),new Uint8Array(B.response)}catch(B){if(A=_B(A))return A;throw B}}));var w=B.print||console.log.bind(console),Y=B.printErr||console.warn.bind(console);for(E in C)C.hasOwnProperty(E)&&(B[E]=C[E]);C=null,B.thisProgram&&(U=B.thisProgram);var s,L=0;B.wasmBinary&&(s=B.wasmBinary),B.noExitRuntime&&B.noExitRuntime,\"object\"!=typeof WebAssembly&&Y(\"no native wasm support detected\");var R,h=new WebAssembly.Table({initial:1182,maximum:1182,element:\"anyfunc\"}),k=!1;function a(A,B){A||FA(\"Assertion failed: \"+B)}var S=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function M(A,B,Q){var I=B+Q;for(Q=B;A[Q]&&!(Q>=I);)++Q;if(16<Q-B&&A.subarray&&S)return S.decode(A.subarray(B,Q));for(I=\"\";B<Q;){var g=A[B++];if(128&g){var E=63&A[B++];if(192==(224&g))I+=String.fromCharCode((31&g)<<6|E);else{var C=63&A[B++];65536>(g=224==(240&g)?(15&g)<<12|E<<6|C:(7&g)<<18|E<<12|C<<6|63&A[B++])?I+=String.fromCharCode(g):(g-=65536,I+=String.fromCharCode(55296|g>>10,56320|1023&g))}}else I+=String.fromCharCode(g)}return I}function J(A){return A?M(d,A,void 0):\"\"}function V(A,B,Q,I){if(!(0<I))return 0;var g=Q;I=Q+I-1;for(var E=0;E<A.length;++E){var C=A.charCodeAt(E);if(55296<=C&&57343>=C&&(C=65536+((1023&C)<<10)|1023&A.charCodeAt(++E)),127>=C){if(Q>=I)break;B[Q++]=C}else{if(2047>=C){if(Q+1>=I)break;B[Q++]=192|C>>6}else{if(65535>=C){if(Q+2>=I)break;B[Q++]=224|C>>12}else{if(Q+3>=I)break;B[Q++]=240|C>>18,B[Q++]=128|C>>12&63}B[Q++]=128|C>>6&63}B[Q++]=128|63&C}}return B[Q]=0,Q-g}function K(A){for(var B=0,Q=0;Q<A.length;++Q){var I=A.charCodeAt(Q);55296<=I&&57343>=I&&(I=65536+((1023&I)<<10)|1023&A.charCodeAt(++Q)),127>=I?++B:B=2047>=I?B+2:65535>=I?B+3:B+4}return B}var t,n,d,r,e,l,x,Z,f,b=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;function p(A){var B;for(B=A>>1;r[B];)++B;if(32<(B<<=1)-A&&b)return b.decode(d.subarray(A,B));B=0;for(var Q=\"\";;){var I=r[A+2*B>>1];if(0==I)return Q;++B,Q+=String.fromCharCode(I)}}function q(A,B,Q){if(void 0===Q&&(Q=2147483647),2>Q)return 0;var I=B;Q=(Q-=2)<2*A.length?Q/2:A.length;for(var g=0;g<Q;++g)r[B>>1]=A.charCodeAt(g),B+=2;return r[B>>1]=0,B-I}function u(A){return 2*A.length}function O(A){for(var B=0,Q=\"\";;){var I=l[A+4*B>>2];if(0==I)return Q;++B,65536<=I?(I-=65536,Q+=String.fromCharCode(55296|I>>10,56320|1023&I)):Q+=String.fromCharCode(I)}}function m(A,B,Q){if(void 0===Q&&(Q=2147483647),4>Q)return 0;var I=B;Q=I+Q-4;for(var g=0;g<A.length;++g){var E=A.charCodeAt(g);if(55296<=E&&57343>=E&&(E=65536+((1023&E)<<10)|1023&A.charCodeAt(++g)),l[B>>2]=E,(B+=4)+4>Q)break}return l[B>>2]=0,B-I}function W(A){for(var B=0,Q=0;Q<A.length;++Q){var I=A.charCodeAt(Q);55296<=I&&57343>=I&&++Q,B+=4}return B}function X(A){t=A,B.HEAP8=n=new Int8Array(A),B.HEAP16=r=new Int16Array(A),B.HEAP32=l=new Int32Array(A),B.HEAPU8=d=new Uint8Array(A),B.HEAPU16=e=new Uint16Array(A),B.HEAPU32=x=new Uint32Array(A),B.HEAPF32=Z=new Float32Array(A),B.HEAPF64=f=new Float64Array(A)}var j=B.INITIAL_MEMORY||16777216;function z(A){for(;0<A.length;){var Q=A.shift();if(\"function\"==typeof Q)Q(B);else{var I=Q.ob;\"number\"==typeof I?void 0===Q.ua?B.dynCall_v(I):B.dynCall_vi(I,Q.ua):I(void 0===Q.ua?null:Q.ua)}}}(R=B.wasmMemory?B.wasmMemory:new WebAssembly.Memory({initial:j/65536,maximum:32768}))&&(t=R.buffer),j=t.byteLength,X(t),l[22752]=5334064;var v=[],T=[],P=[],_=[],$=[];function AA(){var A=B.preRun.shift();v.unshift(A)}var BA=Math.abs,QA=Math.ceil,IA=Math.floor,gA=Math.min,EA=0,CA=null,DA=null;function iA(){EA++,B.monitorRunDependencies&&B.monitorRunDependencies(EA)}function yA(){if(EA--,B.monitorRunDependencies&&B.monitorRunDependencies(EA),0==EA&&(null!==CA&&(clearInterval(CA),CA=null),DA)){var A=DA;DA=null,A()}}function FA(A){throw B.onAbort&&B.onAbort(A),w(A),Y(A),k=!0,new WebAssembly.RuntimeError(\"abort(\"+A+\"). Build with -s ASSERTIONS=1 for more info.\")}function UA(A,B){return String.prototype.startsWith?A.startsWith(B):0===A.indexOf(B)}B.preloadedImages={},B.preloadedAudios={};var cA,NA,HA=\"data:application/octet-stream;base64,\",GA=\"data:application/octet-stream;base64,
