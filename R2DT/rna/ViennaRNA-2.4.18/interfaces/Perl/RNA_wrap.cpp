/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPERL
#define SWIGPERL
#endif

#define SWIG_CASTRANK_MODE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#ifdef __cplusplus
/* Needed on some windows machines---since MS plays funny games with the header files under C++ */
#include <math.h>
#include <stdlib.h>
extern "C" {
#endif
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

/* Add in functionality missing in older versions of Perl. Much of this is based on Devel-PPPort on cpan. */

/* Add PERL_REVISION, PERL_VERSION, PERL_SUBVERSION if missing */
#ifndef PERL_REVISION
#  if !defined(__PATCHLEVEL_H_INCLUDED__) && !(defined(PATCHLEVEL) && defined(SUBVERSION))
#    define PERL_PATCHLEVEL_H_IMPLICIT
#    include <patchlevel.h>
#  endif
#  if !(defined(PERL_VERSION) || (defined(SUBVERSION) && defined(PATCHLEVEL)))
#    include <could_not_find_Perl_patchlevel.h>
#  endif
#  ifndef PERL_REVISION
#    define PERL_REVISION       (5)
#    define PERL_VERSION        PATCHLEVEL
#    define PERL_SUBVERSION     SUBVERSION
#  endif
#endif

#if defined(WIN32) && defined(PERL_OBJECT) && !defined(PerlIO_exportFILE)
#define PerlIO_exportFILE(fh,fl) (FILE*)(fh)
#endif

#ifndef SvIOK_UV
# define SvIOK_UV(sv)       (SvIOK(sv) && (SvUVX(sv) == SvIVX(sv)))
#endif

#ifndef SvUOK
# define SvUOK(sv)           SvIOK_UV(sv)
#endif

#if ((PERL_VERSION < 4) || ((PERL_VERSION == 4) && (PERL_SUBVERSION <= 5)))
#  define PL_sv_undef               sv_undef
#  define PL_na	                    na
#  define PL_errgv                  errgv
#  define PL_sv_no                  sv_no
#  define PL_sv_yes                 sv_yes
#  define PL_markstack_ptr          markstack_ptr
#endif

#ifndef IVSIZE
#  ifdef LONGSIZE
#    define IVSIZE LONGSIZE
#  else
#    define IVSIZE 4 /* A bold guess, but the best we can make. */
#  endif
#endif

#ifndef INT2PTR
#  if (IVSIZE == PTRSIZE) && (UVSIZE == PTRSIZE)
#    define PTRV                  UV
#    define INT2PTR(any,d)        (any)(d)
#  else
#    if PTRSIZE == LONGSIZE
#      define PTRV                unsigned long
#    else
#      define PTRV                unsigned
#    endif
#    define INT2PTR(any,d)        (any)(PTRV)(d)
#  endif

#  define NUM2PTR(any,d)  (any)(PTRV)(d)
#  define PTR2IV(p)       INT2PTR(IV,p)
#  define PTR2UV(p)       INT2PTR(UV,p)
#  define PTR2NV(p)       NUM2PTR(NV,p)

#  if PTRSIZE == LONGSIZE
#    define PTR2ul(p)     (unsigned long)(p)
#  else
#    define PTR2ul(p)     INT2PTR(unsigned long,p)
#  endif
#endif /* !INT2PTR */

#ifndef SvPV_nolen
# define SvPV_nolen(x) SvPV(x,PL_na)
#endif

#ifndef get_sv
#  define get_sv perl_get_sv
#endif

#ifndef ERRSV
#  define ERRSV get_sv("@",FALSE)
#endif

#ifndef pTHX_
#define pTHX_
#endif   

#include <string.h>
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Perl_ErrorType(int code) {
  switch(code) {
  case SWIG_MemoryError:
    return "MemoryError";
  case SWIG_IOError:
    return "IOError";
  case SWIG_RuntimeError:
    return "RuntimeError";
  case SWIG_IndexError:
    return "IndexError";
  case SWIG_TypeError:
    return "TypeError";
  case SWIG_DivisionByZero:
    return "ZeroDivisionError";
  case SWIG_OverflowError:
    return "OverflowError";
  case SWIG_SyntaxError:
    return "SyntaxError";
  case SWIG_ValueError:
    return "ValueError";
  case SWIG_SystemError:
    return "SystemError";
  case SWIG_AttributeError:
    return "AttributeError";
  default:
    return "RuntimeError";
  }
}


/* -----------------------------------------------------------------------------
 * perlrun.swg
 *
 * This file contains the runtime support for Perl modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef PERL_OBJECT
#define SWIG_PERL_OBJECT_DECL CPerlObj *SWIGUNUSEDPARM(pPerl),
#define SWIG_PERL_OBJECT_CALL pPerl,
#else
#define SWIG_PERL_OBJECT_DECL
#define SWIG_PERL_OBJECT_CALL
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(obj, pp, type, flags)           SWIG_Perl_ConvertPtr(SWIG_PERL_OBJECT_CALL obj, pp, type, flags)
#define SWIG_ConvertPtrAndOwn(obj, pp, type, flags,own) SWIG_Perl_ConvertPtrAndOwn(SWIG_PERL_OBJECT_CALL obj, pp, type, flags, own)
#define SWIG_NewPointerObj(p, type, flags)              SWIG_Perl_NewPointerObj(SWIG_PERL_OBJECT_CALL p, type, flags)
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Perl_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, p, s, type)             SWIG_Perl_ConvertPacked(SWIG_PERL_OBJECT_CALL obj, p, s, type)
#define SWIG_NewPackedObj(p, s, type)	                SWIG_Perl_NewPackedObj(SWIG_PERL_OBJECT_CALL p, s, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Perl_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Perl_SetModule(pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Perl_ErrorType(code)               
#define SWIG_Error(code, msg)            		sv_setpvf(get_sv("@", GV_ADD), "%s %s", SWIG_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    

/* Perl-specific SWIG API */

#define SWIG_MakePtr(sv, ptr, type, flags)              SWIG_Perl_MakePtr(SWIG_PERL_OBJECT_CALL sv, ptr, type, flags)
#define SWIG_MakePackedObj(sv, p, s, type)	        SWIG_Perl_MakePackedObj(SWIG_PERL_OBJECT_CALL sv, p, s, type)
#define SWIG_SetError(str)                              SWIG_Error(SWIG_RuntimeError, str)


#define SWIG_PERL_DECL_ARGS_1(arg1)                     (SWIG_PERL_OBJECT_DECL arg1)
#define SWIG_PERL_CALL_ARGS_1(arg1)                     (SWIG_PERL_OBJECT_CALL arg1)
#define SWIG_PERL_DECL_ARGS_2(arg1, arg2)               (SWIG_PERL_OBJECT_DECL arg1, arg2)
#define SWIG_PERL_CALL_ARGS_2(arg1, arg2)               (SWIG_PERL_OBJECT_CALL arg1, arg2)

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_OWNER   SWIG_POINTER_OWN
#define SWIG_SHADOW  SWIG_OWNER << 1

#define SWIG_MAYBE_PERL_OBJECT SWIG_PERL_OBJECT_DECL

/* SWIG Perl macros */

/* Macro to declare an XS function */
#ifndef XSPROTO
#   define XSPROTO(name) void name(pTHX_ CV* cv)
#endif

/* Macro to call an XS function */
#ifdef PERL_OBJECT 
#  define SWIG_CALLXS(_name) _name(cv,pPerl) 
#else 
#  ifndef MULTIPLICITY 
#    define SWIG_CALLXS(_name) _name(cv) 
#  else 
#    define SWIG_CALLXS(_name) _name(PERL_GET_THX, cv) 
#  endif 
#endif 

#ifdef PERL_OBJECT
#define MAGIC_PPERL  CPerlObj *pPerl = (CPerlObj *) this;

#ifdef __cplusplus
extern "C" {
#endif
typedef int (CPerlObj::*SwigMagicFunc)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)
#define SWIGCLASS_STATIC

#else /* PERL_OBJECT */

#define MAGIC_PPERL
#define SWIGCLASS_STATIC static SWIGUNUSED

#ifndef MULTIPLICITY
#define SWIG_MAGIC(a,b) (SV *a, MAGIC *b)

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFunc)(SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#else /* MULTIPLICITY */

#define SWIG_MAGIC(a,b) (struct interpreter *interp, SV *a, MAGIC *b)

#ifdef __cplusplus
extern "C" {
#endif
typedef int (*SwigMagicFunc)(struct interpreter *, SV *, MAGIC *);
#ifdef __cplusplus
}
#endif

#endif /* MULTIPLICITY */
#endif /* PERL_OBJECT */

#  ifdef PERL_OBJECT
#    define SWIG_croak_null() SWIG_Perl_croak_null(pPerl)
static void SWIGUNUSED SWIG_Perl_croak_null(CPerlObj *pPerl)
#  else
static void SWIGUNUSED SWIG_croak_null()
#  endif
{
  SV *err = get_sv("@", GV_ADD);
#  if (PERL_VERSION < 6)
  croak("%_", err);
#  else
  if (sv_isobject(err))
    croak(0);
  else
    croak("%s", SvPV_nolen(err));
#  endif
}


/* 
   Define how strict is the cast between strings and integers/doubles
   when overloading between these types occurs.
   
   The default is making it as strict as possible by using SWIG_AddCast
   when needed.
   
   You can use -DSWIG_PERL_NO_STRICT_STR2NUM at compilation time to
   disable the SWIG_AddCast, making the casting between string and
   numbers less strict.

   In the end, we try to solve the overloading between strings and
   numerical types in the more natural way, but if you can avoid it,
   well, avoid it using %rename, for example.
*/
#ifndef SWIG_PERL_NO_STRICT_STR2NUM
# ifndef SWIG_PERL_STRICT_STR2NUM
#  define SWIG_PERL_STRICT_STR2NUM
# endif
#endif
#ifdef SWIG_PERL_STRICT_STR2NUM
/* string takes precedence */
#define SWIG_Str2NumCast(x) SWIG_AddCast(x)  
#else
/* number takes precedence */
#define SWIG_Str2NumCast(x) x
#endif



#include <stdlib.h>

SWIGRUNTIME const char *
SWIG_Perl_TypeProxyName(const swig_type_info *type) {
  if (!type) return NULL;
  if (type->clientdata != NULL) {
    return (const char*) type->clientdata;
  } 
  else {
    return type->name;
  }
}

/* Identical to SWIG_TypeCheck, except for strcmp comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeProxyCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(SWIG_Perl_TypeProxyName(iter->type), c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Perl_AcquirePtr(SWIG_MAYBE_PERL_OBJECT SV *sv, int own) {
  /* TODO */
  return 0;
}

/* Function for getting a pointer value */

SWIGRUNTIME int
SWIG_Perl_ConvertPtrAndOwn(SWIG_MAYBE_PERL_OBJECT SV *sv, void **ptr, swig_type_info *_t, int flags, int *own) {
  swig_cast_info *tc;
  void *voidptr = (void *)0;
  SV *tsv = 0;

  if (own)
    *own = 0;

  /* If magical, apply more magic */
  if (SvGMAGICAL(sv))
    mg_get(sv);

  /* Check to see if this is an object */
  if (sv_isobject(sv)) {
    IV tmp = 0;
    tsv = (SV*) SvRV(sv);
    if ((SvTYPE(tsv) == SVt_PVHV)) {
      MAGIC *mg;
      if (SvMAGICAL(tsv)) {
        mg = mg_find(tsv,'P');
        if (mg) {
          sv = mg->mg_obj;
          if (sv_isobject(sv)) {
	    tsv = (SV*)SvRV(sv);
            tmp = SvIV(tsv);
          }
        }
      } else {
        return SWIG_ERROR;
      }
    } else {
      tmp = SvIV(tsv);
    }
    voidptr = INT2PTR(void *,tmp);
  } else if (! SvOK(sv)) {            /* Check for undef */
    *(ptr) = (void *) 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  } else if (SvTYPE(sv) == SVt_RV) {  /* Check for NULL pointer */
    if (!SvROK(sv)) {
      /* In Perl 5.12 and later, SVt_RV == SVt_IV, so sv could be a valid integer value.  */
      if (SvIOK(sv)) {
        return SWIG_ERROR;
      } else {
        /* NULL pointer (reference to undef). */
        *(ptr) = (void *) 0;
        return SWIG_OK;
      }
    } else {
      return SWIG_ERROR;
    }
  } else {                            /* Don't know what it is */
    return SWIG_ERROR;
  }
  if (_t) {
    /* Now see if the types match */
    char *_c = HvNAME(SvSTASH(SvRV(sv)));
    tc = SWIG_TypeProxyCheck(_c,_t);
#ifdef SWIG_DIRECTORS
    if (!tc && !sv_derived_from(sv,SWIG_Perl_TypeProxyName(_t))) {
#else
    if (!tc) {
#endif
      return SWIG_ERROR;
    }
    {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,voidptr,&newmemory);
      if (newmemory == SWIG_CAST_NEW_MEMORY) {
        assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
        if (own)
          *own = *own | SWIG_CAST_NEW_MEMORY;
      }
    }
  } else {
    *ptr = voidptr;
  }

  /* 
   *  DISOWN implementation: we need a perl guru to check this one.
   */
  if (tsv && (flags & SWIG_POINTER_DISOWN)) {
    /* 
     *  almost copy paste code from below SWIG_POINTER_OWN setting
     */
    SV *obj = sv;
    HV *stash = SvSTASH(SvRV(obj));
    GV *gv = *(GV**)hv_fetch(stash, "OWNER", 5, TRUE);
    if (isGV(gv)) {
      HV *hv = GvHVn(gv);
      /*
       * To set ownership (see below), a newSViv(1) entry is added. 
       * Hence, to remove ownership, we delete the entry.
       */
      if (hv_exists_ent(hv, obj, 0)) {
	hv_delete_ent(hv, obj, 0, 0);
      }
    }
  }
  return SWIG_OK;
}

SWIGRUNTIME int
SWIG_Perl_ConvertPtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void **ptr, swig_type_info *_t, int flags) {
  return SWIG_Perl_ConvertPtrAndOwn(sv, ptr, _t, flags, 0);
}

SWIGRUNTIME void
SWIG_Perl_MakePtr(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, swig_type_info *t, int flags) {
  if (ptr && (flags & (SWIG_SHADOW | SWIG_POINTER_OWN))) {
    SV *self;
    SV *obj=newSV(0);
    HV *hash=newHV();
    HV *stash;
    sv_setref_pv(obj, SWIG_Perl_TypeProxyName(t), ptr);
    stash=SvSTASH(SvRV(obj));
    if (flags & SWIG_POINTER_OWN) {
      HV *hv;
      GV *gv = *(GV**)hv_fetch(stash, "OWNER", 5, TRUE);
      if (!isGV(gv))
        gv_init(gv, stash, "OWNER", 5, FALSE);
      hv=GvHVn(gv);
      hv_store_ent(hv, obj, newSViv(1), 0);
    }
    sv_magic((SV *)hash, (SV *)obj, 'P', Nullch, 0);
    SvREFCNT_dec(obj);
    self=newRV_noinc((SV *)hash);
    sv_setsv(sv, self);
    SvREFCNT_dec((SV *)self);
    sv_bless(sv, stash);
  }
  else {
    sv_setref_pv(sv, SWIG_Perl_TypeProxyName(t), ptr);
  }
}

SWIGRUNTIMEINLINE SV *
SWIG_Perl_NewPointerObj(SWIG_MAYBE_PERL_OBJECT void *ptr, swig_type_info *t, int flags) {
  SV *result = sv_newmortal();
  SWIG_MakePtr(result, ptr, t, flags);
  return result;
}

SWIGRUNTIME void
SWIG_Perl_MakePackedObj(SWIG_MAYBE_PERL_OBJECT SV *sv, void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(SWIG_Perl_TypeProxyName(type))) > 1000) return;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,SWIG_Perl_TypeProxyName(type));
  sv_setpv(sv, result);
}

SWIGRUNTIME SV *
SWIG_Perl_NewPackedObj(SWIG_MAYBE_PERL_OBJECT void *ptr, int sz, swig_type_info *type) {
  SV *result = sv_newmortal();
  SWIG_Perl_MakePackedObj(result, ptr, sz, type);
  return result;
}

/* Convert a packed pointer value */
SWIGRUNTIME int
SWIG_Perl_ConvertPacked(SWIG_MAYBE_PERL_OBJECT SV *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c = 0;

  if ((!obj) || (!SvOK(obj))) return SWIG_ERROR;
  c = SvPV_nolen(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') return SWIG_ERROR;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) return SWIG_ERROR;
  }
  return SWIG_OK;
}


/* Macros for low-level exception handling */
#define SWIG_croak(x)    { SWIG_Error(SWIG_RuntimeError, x); SWIG_fail; }


typedef XSPROTO(SwigPerlWrapper);
typedef SwigPerlWrapper *SwigPerlWrapperPtr;

/* Structure for command table */
typedef struct {
  const char         *name;
  SwigPerlWrapperPtr  wrapper;
} swig_command_info;

/* Information for constant table */

#define SWIG_INT     1
#define SWIG_FLOAT   2
#define SWIG_STRING  3
#define SWIG_POINTER 4
#define SWIG_BINARY  5

/* Constant information structure */
typedef struct swig_constant_info {
    int              type;
    const char      *name;
    long             lvalue;
    double           dvalue;
    void            *pvalue;
    swig_type_info **ptype;
} swig_constant_info;


/* Structure for variable table */
typedef struct {
  const char   *name;
  SwigMagicFunc   set;
  SwigMagicFunc   get;
  swig_type_info  **type;
} swig_variable_info;

/* Magic variable code */
#ifndef PERL_OBJECT
# ifdef __cplusplus
#  define swig_create_magic(s,a,b,c) _swig_create_magic(s,const_cast<char*>(a),b,c)
# else
#  define swig_create_magic(s,a,b,c) _swig_create_magic(s,(char*)(a),b,c)
# endif
# ifndef MULTIPLICITY
SWIGRUNTIME void _swig_create_magic(SV *sv, char *name, int (*set)(SV *, MAGIC *), int (*get)(SV *,MAGIC *)) 
# else
SWIGRUNTIME void _swig_create_magic(SV *sv, char *name, int (*set)(struct interpreter*, SV *, MAGIC *), int (*get)(struct interpreter*, SV *,MAGIC *)) 
# endif
#else
#  define swig_create_magic(s,a,b,c) _swig_create_magic(pPerl,s,a,b,c)
SWIGRUNTIME void _swig_create_magic(CPerlObj *pPerl, SV *sv, const char *name, int (CPerlObj::*set)(SV *, MAGIC *), int (CPerlObj::*get)(SV *, MAGIC *)) 
#endif
{
  MAGIC *mg;
  sv_magic(sv,sv,'U',name,strlen(name));
  mg = mg_find(sv,'U');
  mg->mg_virtual = (MGVTBL *) malloc(sizeof(MGVTBL));
  mg->mg_virtual->svt_get = (SwigMagicFunc) get;
  mg->mg_virtual->svt_set = (SwigMagicFunc) set;
  mg->mg_virtual->svt_len = 0;
  mg->mg_virtual->svt_clear = 0;
  mg->mg_virtual->svt_free = 0;
}


SWIGRUNTIME swig_module_info *
SWIG_Perl_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  SV *pointer;

  /* first check if pointer already created */
  if (!type_pointer) {
    pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, FALSE | GV_ADDMULTI);
    if (pointer && SvOK(pointer)) {
      type_pointer = INT2PTR(swig_type_info **, SvIV(pointer));
    }
  }

  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Perl_SetModule(swig_module_info *module) {
  SV *pointer;

  /* create a new pointer */
  pointer = get_sv("swig_runtime_data::type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TRUE | GV_ADDMULTI);
  sv_setiv(pointer, PTR2IV(module));
}

#ifdef __cplusplus
}
#endif

/* Workaround perl5 global namespace pollution. Note that undefining library
 * functions like fopen will not solve the problem on all platforms as fopen
 * might be a macro on Windows but not necessarily on other operating systems. */
#ifdef do_open
  #undef do_open
#endif
#ifdef do_close
  #undef do_close
#endif
#ifdef do_exec
  #undef do_exec
#endif
#ifdef scalar
  #undef scalar
#endif
#ifdef list
  #undef list
#endif
#ifdef apply
  #undef apply
#endif
#ifdef convert
  #undef convert
#endif
#ifdef Error
  #undef Error
#endif
#ifdef form
  #undef form
#endif
#ifdef vform
  #undef vform
#endif
#ifdef LABEL
  #undef LABEL
#endif
#ifdef METHOD
  #undef METHOD
#endif
#ifdef Move
  #undef Move
#endif
#ifdef yylex
  #undef yylex
#endif
#ifdef yyparse
  #undef yyparse
#endif
#ifdef yyerror
  #undef yyerror
#endif
#ifdef invert
  #undef invert
#endif
#ifdef ref
  #undef ref
#endif
#ifdef read
  #undef read
#endif
#ifdef write
  #undef write
#endif
#ifdef eof
  #undef eof
#endif
#ifdef close
  #undef close
#endif
#ifdef rewind
  #undef rewind
#endif
#ifdef free
  #undef free
#endif
#ifdef malloc
  #undef malloc
#endif
#ifdef calloc
  #undef calloc
#endif
#ifdef Stat
  #undef Stat
#endif
#ifdef check
  #undef check
#endif
#ifdef seekdir
  #undef seekdir
#endif
#ifdef open
  #undef open
#endif
#ifdef readdir
  #undef readdir
#endif
#ifdef bind
  #undef bind
#endif
#ifdef access
  #undef access
#endif
#ifdef stat
  #undef stat
#endif
#ifdef seed
  #undef seed
#endif

#ifdef bool
  /* Leave if macro is from C99 stdbool.h */
  #ifndef __bool_true_false_are_defined
    #undef bool
  #endif
#endif




#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_COORDINATE swig_types[0]
#define SWIGTYPE_p_SOLUTION swig_types[1]
#define SWIGTYPE_p_Tree swig_types[2]
#define SWIGTYPE_p__struct_en swig_types[3]
#define SWIGTYPE_p_a_3_VRNA_GQUAD_MAX_LINKER_LENGTH_1__double swig_types[4]
#define SWIGTYPE_p_a_3_VRNA_GQUAD_MAX_LINKER_LENGTH_1__doubleArray swig_types[5]
#define SWIGTYPE_p_a_5__a_5__double swig_types[6]
#define SWIGTYPE_p_a_5__a_5__doubleArray swig_types[7]
#define SWIGTYPE_p_a_5__a_5__int swig_types[8]
#define SWIGTYPE_p_a_5__a_5__intArray swig_types[9]
#define SWIGTYPE_p_a_5__double swig_types[10]
#define SWIGTYPE_p_a_5__doubleArray swig_types[11]
#define SWIGTYPE_p_a_7_1__a_5__a_5__a_5__a_5__int swig_types[12]
#define SWIGTYPE_p_a_7_1__a_5__a_5__a_5__a_5__intArray swig_types[13]
#define SWIGTYPE_p_a_7_1__a_5__a_5__a_5__int swig_types[14]
#define SWIGTYPE_p_a_7_1__a_5__a_5__a_5__intArray swig_types[15]
#define SWIGTYPE_p_a_7_1__a_5__a_5__int swig_types[16]
#define SWIGTYPE_p_a_7_1__a_5__a_5__intArray swig_types[17]
#define SWIGTYPE_p_a_MAXLOOP_1__double swig_types[18]
#define SWIGTYPE_p_a_MAXLOOP_1__doubleArray swig_types[19]
#define SWIGTYPE_p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__double swig_types[20]
#define SWIGTYPE_p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__doubleArray swig_types[21]
#define SWIGTYPE_p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__int swig_types[22]
#define SWIGTYPE_p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__intArray swig_types[23]
#define SWIGTYPE_p_a_NBPAIRS_1__a_5__a_5__a_5__double swig_types[24]
#define SWIGTYPE_p_a_NBPAIRS_1__a_5__a_5__a_5__doubleArray swig_types[25]
#define SWIGTYPE_p_a_NBPAIRS_1__a_5__a_5__a_5__int swig_types[26]
#define SWIGTYPE_p_a_NBPAIRS_1__a_5__a_5__a_5__intArray swig_types[27]
#define SWIGTYPE_p_a_NBPAIRS_1__a_5__a_5__double swig_types[28]
#define SWIGTYPE_p_a_NBPAIRS_1__a_5__a_5__doubleArray swig_types[29]
#define SWIGTYPE_p_a_NBPAIRS_1__a_5__a_5__int swig_types[30]
#define SWIGTYPE_p_a_NBPAIRS_1__a_5__a_5__intArray swig_types[31]
#define SWIGTYPE_p_a_NBPAIRS_1__double swig_types[32]
#define SWIGTYPE_p_a_NBPAIRS_1__doubleArray swig_types[33]
#define SWIGTYPE_p_char swig_types[34]
#define SWIGTYPE_p_difference_type swig_types[35]
#define SWIGTYPE_p_double swig_types[36]
#define SWIGTYPE_p_doubleArray swig_types[37]
#define SWIGTYPE_p_duplexT swig_types[38]
#define SWIGTYPE_p_duplex_list_t swig_types[39]
#define SWIGTYPE_p_first_type swig_types[40]
#define SWIGTYPE_p_float swig_types[41]
#define SWIGTYPE_p_floatArray swig_types[42]
#define SWIGTYPE_p_heat_capacity_result swig_types[43]
#define SWIGTYPE_p_int swig_types[44]
#define SWIGTYPE_p_intArray swig_types[45]
#define SWIGTYPE_p_my_fc_type_e swig_types[46]
#define SWIGTYPE_p_p_char swig_types[47]
#define SWIGTYPE_p_p_p_char swig_types[48]
#define SWIGTYPE_p_p_void swig_types[49]
#define SWIGTYPE_p_second_type swig_types[50]
#define SWIGTYPE_p_short swig_types[51]
#define SWIGTYPE_p_size_type swig_types[52]
#define SWIGTYPE_p_std__out_of_range swig_types[53]
#define SWIGTYPE_p_std__pairT_double_double_t swig_types[54]
#define SWIGTYPE_p_std__string swig_types[55]
#define SWIGTYPE_p_std__vectorT_COORDINATE_t swig_types[56]
#define SWIGTYPE_p_std__vectorT_SOLUTION_t swig_types[57]
#define SWIGTYPE_p_std__vectorT_char_const_p_t swig_types[58]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[59]
#define SWIGTYPE_p_std__vectorT_duplex_list_t_t swig_types[60]
#define SWIGTYPE_p_std__vectorT_heat_capacity_result_t swig_types[61]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[62]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[63]
#define SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t swig_types[64]
#define SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t swig_types[65]
#define SWIGTYPE_p_std__vectorT_subopt_solution_t swig_types[66]
#define SWIGTYPE_p_std__vectorT_unsigned_int_t swig_types[67]
#define SWIGTYPE_p_std__vectorT_vrna_ep_t_t swig_types[68]
#define SWIGTYPE_p_std__vectorT_vrna_move_t_t swig_types[69]
#define SWIGTYPE_p_std__vectorT_vrna_path_t_t swig_types[70]
#define SWIGTYPE_p_subopt_solution swig_types[71]
#define SWIGTYPE_p_swString swig_types[72]
#define SWIGTYPE_p_unsigned_int swig_types[73]
#define SWIGTYPE_p_unsigned_short swig_types[74]
#define SWIGTYPE_p_value_type swig_types[75]
#define SWIGTYPE_p_void swig_types[76]
#define SWIGTYPE_p_vrna_basepair_t swig_types[77]
#define SWIGTYPE_p_vrna_bp_stack_s swig_types[78]
#define SWIGTYPE_p_vrna_command_s swig_types[79]
#define SWIGTYPE_p_vrna_cpair_s swig_types[80]
#define SWIGTYPE_p_vrna_dimer_pf_s swig_types[81]
#define SWIGTYPE_p_vrna_elem_prob_s swig_types[82]
#define SWIGTYPE_p_vrna_ep_t swig_types[83]
#define SWIGTYPE_p_vrna_exp_param_t swig_types[84]
#define SWIGTYPE_p_vrna_fold_compound_t swig_types[85]
#define SWIGTYPE_p_vrna_md_t swig_types[86]
#define SWIGTYPE_p_vrna_move_t swig_types[87]
#define SWIGTYPE_p_vrna_param_t swig_types[88]
#define SWIGTYPE_p_vrna_path_options_s swig_types[89]
#define SWIGTYPE_p_vrna_path_s swig_types[90]
#define SWIGTYPE_p_vrna_path_t swig_types[91]
#define SWIGTYPE_p_vrna_pbacktrack_mem_t swig_types[92]
#define SWIGTYPE_p_vrna_pinfo_s swig_types[93]
#define SWIGTYPE_p_vrna_sc_s swig_types[94]
static swig_type_info *swig_types[96];
static swig_module_info swig_module = {swig_types, 95, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    boot_RNA

#define SWIG_name   "RNAc::boot_RNA"
#define SWIG_prefix "RNAc::"

#define SWIGVERSION 0x040002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#ifdef __cplusplus
extern "C"
#endif
#ifndef PERL_OBJECT
#ifndef MULTIPLICITY
SWIGEXPORT void SWIG_init (CV* cv);
#else
SWIGEXPORT void SWIG_init (pTHXo_ CV* cv);
#endif
#else
SWIGEXPORT void SWIG_init (CV *cv, CPerlObj *);
#endif



extern "C" {
#include  <ViennaRNA/model.h>
#include  <ViennaRNA/datastructures/basic.h>
#include  <ViennaRNA/fold_compound.h>
#include  <ViennaRNA/dp_matrices.h>
#include  <ViennaRNA/alphabet.h>
#include  <ViennaRNA/sequence.h>
#include  <ViennaRNA/grammar.h>
#include  <ViennaRNA/unstructured_domains.h>
#include  <ViennaRNA/structured_domains.h>
#include  <ViennaRNA/commands.h>

#include  <ViennaRNA/utils/basic.h>
#include  <ViennaRNA/utils/structures.h>
#include  <ViennaRNA/utils/strings.h>
#include  <ViennaRNA/utils/alignments.h>
#include  <ViennaRNA/fold_vars.h>

#include  <ViennaRNA/params/constants.h>
#include  <ViennaRNA/params/basic.h>
#include  <ViennaRNA/params/io.h>
#include  <ViennaRNA/params/default.h>

#include  <ViennaRNA/constraints/basic.h>
#include  <ViennaRNA/constraints/hard.h>
#include  <ViennaRNA/constraints/soft.h>
#include  <ViennaRNA/constraints/SHAPE.h>
#include  <ViennaRNA/constraints/ligand.h>

#include  <ViennaRNA/plotting/naview.h>
#include  <ViennaRNA/plotting/layouts.h>
#include  <ViennaRNA/plotting/structures.h>
#include  <ViennaRNA/plotting/alignments.h>
#include  <ViennaRNA/plotting/probabilities.h>

#include  <ViennaRNA/io/file_formats.h>
#include  <ViennaRNA/io/file_formats_msa.h>
#include  <ViennaRNA/io/utils.h>

#include  <ViennaRNA/loops/external.h>
#include  <ViennaRNA/loops/hairpin.h>
#include  <ViennaRNA/loops/internal.h>
#include  <ViennaRNA/loops/multibranch.h>

#include  <ViennaRNA/mfe.h>
#include  <ViennaRNA/mfe_window.h>
#include  <ViennaRNA/fold.h>
#include  <ViennaRNA/eval.h>
#include  <ViennaRNA/cofold.h>
#include  <ViennaRNA/alifold.h>

#include  <ViennaRNA/part_func.h>
#include  <ViennaRNA/part_func_window.h>
#include  <ViennaRNA/part_func_co.h>
#include  <ViennaRNA/equilibrium_probs.h>
#include  <ViennaRNA/boltzmann_sampling.h>
#include  <ViennaRNA/concentrations.h>
#include  <ViennaRNA/LPfold.h>
#include  <ViennaRNA/centroid.h>
#include  <ViennaRNA/MEA.h>
#include  <ViennaRNA/heat_capacity.h>

#ifdef VRNA_WITH_SVM
#include  <ViennaRNA/zscore.h>
#endif

#include  <ViennaRNA/inverse.h>
#include  <ViennaRNA/RNAstruct.h>
#include  <ViennaRNA/treedist.h>
#include  <ViennaRNA/stringdist.h>
#include  <ViennaRNA/profiledist.h>
#include  <ViennaRNA/dist_vars.h>
#include  <ViennaRNA/pair_mat.h>
#include  <ViennaRNA/subopt.h>
#include  <ViennaRNA/duplex.h>

#include  <ViennaRNA/combinatorics.h>

#include  <ViennaRNA/move_set.h>
#include  <ViennaRNA/landscape/paths.h>
#include  <ViennaRNA/landscape/findpath.h>
#include  <ViennaRNA/landscape/move.h>
#include  <ViennaRNA/landscape/neighbor.h>
#include  <ViennaRNA/landscape/walk.h>

#include  <ViennaRNA/mm.h>
}



  static int *new_intP(size_t nelements) { 
    return (new int[nelements]());
  }

  static void delete_intP(int *ary) {
    delete[] ary;
  }

  static int intP_getitem(int *ary, size_t index) {
    return ary[index];
  }
  static void intP_setitem(int *ary, size_t index, int value) {
    ary[index] = value;
  }


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#include <stdlib.h>
#ifdef _MSC_VER
# ifndef strtoull
#  define strtoull _strtoui64
# endif
# ifndef strtoll
#  define strtoll _strtoi64
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double SWIG_PERL_DECL_ARGS_2(SV *obj, double *val)
{
  if (SvNIOK(obj)) {
    if (val) *val = SvNV(obj);
    return SWIG_OK;
  } else if (SvIOK(obj)) {
    if (val) *val = (double) SvIV(obj);
    return SWIG_AddCast(SWIG_OK);
  } else {
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      double v;
      errno = 0;
      v = strtod(nptr, &endptr);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
  }
  return SWIG_TypeError;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long SWIG_PERL_DECL_ARGS_2(SV *obj, unsigned long *val) 
{
  if (SvUOK(obj)) {
    UV v = SvUV(obj);
    if (UVSIZE <= sizeof(*val) || v <= ULONG_MAX) {
      if (val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else if (SvIOK(obj)) {
    IV v = SvIV(obj);
    if (v >= 0 && (IVSIZE <= sizeof(*val) || v <= ULONG_MAX)) {
      if (val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else {
    int dispatch = 0;
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      unsigned long v;
      errno = 0;
      v = strtoul(nptr, &endptr,0);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
  return SWIG_TypeError;
}


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_DECL_ARGS_2(SV *obj, unsigned long long *val)
{
  if (SvUOK(obj)) {
    /* pretty sure this should be conditional on
     * (UVSIZE <= sizeof(*val) || v <= ULLONG_MAX) */
    if (val) *val = SvUV(obj);
    return SWIG_OK;
  } else  if (SvIOK(obj)) {
    IV v = SvIV(obj);
    if (v >= 0 && (IVSIZE <= sizeof(*val) || v <= ULLONG_MAX)) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else {
    int dispatch = 0;
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      unsigned long long v;
      errno = 0;
      v = strtoull(nptr, &endptr,0);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
    if (!dispatch) {
      const double mant_max = 1LL << DBL_MANT_DIG;
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
	if (val) *val = (unsigned long long)(d);
	return res;
      }
    }
  }
  return SWIG_TypeError;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t SWIG_PERL_DECL_ARGS_2(SV * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long SWIG_PERL_CALL_ARGS_2(obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


SWIGINTERNINLINE SV *
SWIG_From_long  SWIG_PERL_DECL_ARGS_1(long value)
{
  SV *sv;
  if (IVSIZE >= sizeof(value) || (value >= IV_MIN && value <= IV_MAX))
    sv = newSViv(value);
  else
    sv = newSVpvf("%ld", value);
  return sv_2mortal(sv);
}


SWIGINTERNINLINE SV *
SWIG_From_int  SWIG_PERL_DECL_ARGS_1(int value)
{    
  return SWIG_From_long  SWIG_PERL_CALL_ARGS_1(value);
}


SWIGINTERN int
SWIG_AsVal_long SWIG_PERL_DECL_ARGS_2(SV *obj, long* val)
{
  if (SvUOK(obj)) {
    UV v = SvUV(obj);
    if (UVSIZE < sizeof(*val) || v <= LONG_MAX) {
      if (val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else if (SvIOK(obj)) {
    IV v = SvIV(obj);
    if (IVSIZE <= sizeof(*val) || (v >= LONG_MIN && v <= LONG_MAX)) {
      if(val) *val = v;
      return SWIG_OK;
    }
    return SWIG_OverflowError;
  } else {
    int dispatch = 0;
    const char *nptr = SvPV_nolen(obj);
    if (nptr) {
      char *endptr;
      long v;
      errno = 0;
      v = strtol(nptr, &endptr,0);
      if (errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_Str2NumCast(SWIG_OK);
	}
      }
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int SWIG_PERL_DECL_ARGS_2(SV * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


typedef int intArray;

SWIGINTERN intArray *new_intArray(size_t nelements){
    return (new int[nelements]());
  }
SWIGINTERN void delete_intArray(intArray *self){
    delete[] self;
  }
SWIGINTERN int intArray_getitem(intArray *self,size_t index){
    return self[index];
  }
SWIGINTERN void intArray_setitem(intArray *self,size_t index,int value){
    self[index] = value;
  }
SWIGINTERN int *intArray_cast(intArray *self){
    return self;
  }
SWIGINTERN intArray *intArray_frompointer(int *t){
    return static_cast< intArray * >(t);
  }

  static float *new_floatP(size_t nelements) { 
    return (new float[nelements]());
  }

  static void delete_floatP(float *ary) {
    delete[] ary;
  }

  static float floatP_getitem(float *ary, size_t index) {
    return ary[index];
  }
  static void floatP_setitem(float *ary, size_t index, float value) {
    ary[index] = value;
  }


SWIGINTERNINLINE SV *
SWIG_From_double  SWIG_PERL_DECL_ARGS_1(double value)
{
  return sv_2mortal(newSVnv(value));
}


SWIGINTERNINLINE SV *
SWIG_From_float  SWIG_PERL_DECL_ARGS_1(float value)
{    
  return SWIG_From_double  SWIG_PERL_CALL_ARGS_1(value);
}


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(__cplusplus) && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2))
#  define SWIG_isfinite(X) (__builtin_isfinite(X))
# elif defined(__clang__) && defined(__has_builtin)
#  if __has_builtin(__builtin_isfinite)
#   define SWIG_isfinite(X) (__builtin_isfinite(X))
#  endif
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float SWIG_PERL_DECL_ARGS_2(SV * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


typedef float floatArray;

SWIGINTERN floatArray *new_floatArray(size_t nelements){
    return (new float[nelements]());
  }
SWIGINTERN void delete_floatArray(floatArray *self){
    delete[] self;
  }
SWIGINTERN float floatArray_getitem(floatArray *self,size_t index){
    return self[index];
  }
SWIGINTERN void floatArray_setitem(floatArray *self,size_t index,float value){
    self[index] = value;
  }
SWIGINTERN float *floatArray_cast(floatArray *self){
    return self;
  }
SWIGINTERN floatArray *floatArray_frompointer(float *t){
    return static_cast< floatArray * >(t);
  }

  static double *new_doubleP(size_t nelements) { 
    return (new double[nelements]());
  }

  static void delete_doubleP(double *ary) {
    delete[] ary;
  }

  static double doubleP_getitem(double *ary, size_t index) {
    return ary[index];
  }
  static void doubleP_setitem(double *ary, size_t index, double value) {
    ary[index] = value;
  }


typedef double doubleArray;

SWIGINTERN doubleArray *new_doubleArray(size_t nelements){
    return (new double[nelements]());
  }
SWIGINTERN void delete_doubleArray(doubleArray *self){
    delete[] self;
  }
SWIGINTERN double doubleArray_getitem(doubleArray *self,size_t index){
    return self[index];
  }
SWIGINTERN void doubleArray_setitem(doubleArray *self,size_t index,double value){
    self[index] = value;
  }
SWIGINTERN double *doubleArray_cast(doubleArray *self){
    return self;
  }
SWIGINTERN doubleArray *doubleArray_frompointer(double *t){
    return static_cast< doubleArray * >(t);
  }

  static unsigned short *new_ushortP(size_t nelements) { 
    return (new unsigned short[nelements]());
  }

  static void delete_ushortP(unsigned short *ary) {
    delete[] ary;
  }

  static unsigned short ushortP_getitem(unsigned short *ary, size_t index) {
    return ary[index];
  }
  static void ushortP_setitem(unsigned short *ary, size_t index, unsigned short value) {
    ary[index] = value;
  }


SWIGINTERNINLINE SV *
SWIG_From_unsigned_SS_long  SWIG_PERL_DECL_ARGS_1(unsigned long value)
{
  SV *sv;
  if (UVSIZE >= sizeof(value) || value <= UV_MAX)
    sv = newSVuv(value);
  else
    sv = newSVpvf("%lu", value);
  return sv_2mortal(sv);
}


SWIGINTERNINLINE SV *
SWIG_From_unsigned_SS_short  SWIG_PERL_DECL_ARGS_1(unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short SWIG_PERL_DECL_ARGS_2(SV * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


  static short *new_shortP(size_t nelements) { 
    return (new short[nelements]());
  }

  static void delete_shortP(short *ary) {
    delete[] ary;
  }

  static short shortP_getitem(short *ary, size_t index) {
    return ary[index];
  }
  static void shortP_setitem(short *ary, size_t index, short value) {
    ary[index] = value;
  }


SWIGINTERNINLINE SV *
SWIG_From_short  SWIG_PERL_DECL_ARGS_1(short value)
{    
  return SWIG_From_long  SWIG_PERL_CALL_ARGS_1(value);
}


SWIGINTERN int
SWIG_AsVal_short SWIG_PERL_DECL_ARGS_2(SV * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


typedef struct SWIGCDATA {
    char *data;
    size_t   len;
} SWIGCDATA;



extern "C"  {    


static SWIGCDATA cdata_void(void *ptr, size_t nelements)



{
  SWIGCDATA d;
  d.data = (char *) ptr;



  d.len  = nelements;

   return d;
}

}



SWIGINTERNINLINE SV *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  SV *obj = sv_newmortal();
  if (carray) {
    sv_setpvn(obj, carray, size);
  } else {
    sv_setsv(obj, &PL_sv_undef);
  }
  return obj;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(SV *obj, char** cptr, size_t* psize, int *alloc)
{
  if (SvMAGICAL(obj)) {
     SV *tmp = sv_newmortal();
     SvSetSV(tmp, obj);
     obj = tmp;
  }
  if (SvPOK(obj)) {
    STRLEN len = 0;
    char *cstr = SvPV(obj, len); 
    size_t size = len + 1;
    if (cptr)  {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[size], cstr, sizeof(char)*(size)));
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      }
    }
    if (psize) *psize = size;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      char* vptr = 0; 
      if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = vptr;
	if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


/** @file version.i.in
 * @brief Set $RNA::VERSION to the bindings version
 */


#include <typeinfo>
#include <stdexcept>


#include <string>


SWIGINTERN
double SwigSvToNumber(SV* sv) {
    return SvIOK(sv) ? double(SvIVX(sv)) : SvNVX(sv);
}
SWIGINTERN
std::string SwigSvToString(SV* sv) {
    STRLEN len;
    char *ptr = SvPV(sv, len);
    return std::string(ptr, len);
}
SWIGINTERN
void SwigSvFromString(SV* sv, const std::string& s) {
    sv_setpvn(sv,s.data(),s.size());
}


#include <utility>


#include <vector>


#include <algorithm>


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int SWIG_PERL_DECL_ARGS_2(SV * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE SV *
SWIG_From_unsigned_SS_int  SWIG_PERL_DECL_ARGS_1(unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(value);
}


SWIGINTERNINLINE SV *
SWIG_From_bool  SWIG_PERL_DECL_ARGS_1(bool value)
{
  return boolSV(value);
}

SWIGINTERN int std_vector_Sl_int_Sg__pop(std::vector< int > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                int x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN int std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,int x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN unsigned int std_vector_Sl_unsigned_SS_int_Sg__pop(std::vector< unsigned int > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                unsigned int x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN unsigned int std_vector_Sl_unsigned_SS_int_Sg__get(std::vector< unsigned int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__set(std::vector< unsigned int > *self,int i,unsigned int x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN double std_vector_Sl_double_Sg__pop(std::vector< double > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                double x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN double std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,double x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }

SWIGINTERN int
SWIG_AsPtr_std_string SWIG_PERL_DECL_ARGS_2(SV * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}

SWIGINTERN std::string std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                std::string x = self->back();
                self->pop_back();
                return x;
            }

SWIGINTERNINLINE SV *
SWIG_From_std_string  SWIG_PERL_DECL_ARGS_1(const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}

SWIGINTERN std::string std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::string x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }



SWIGINTERN char const *std_vector_Sl_char_SS_const_Sm__Sg__pop(std::vector< char const * > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                char const *x = self->back();
                self->pop_back();
                return x;
            }

SWIGINTERNINLINE SV * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

SWIGINTERN char const *std_vector_Sl_char_SS_const_Sm__Sg__get(std::vector< char const * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_char_SS_const_Sm__Sg__set(std::vector< char const * > *self,int i,char const *x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN SOLUTION std_vector_Sl_SOLUTION_Sg__pop(std::vector< SOLUTION > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                SOLUTION x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN SOLUTION &std_vector_Sl_SOLUTION_Sg__get(std::vector< SOLUTION > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_SOLUTION_Sg__set(std::vector< SOLUTION > *self,int i,SOLUTION const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN COORDINATE std_vector_Sl_COORDINATE_Sg__pop(std::vector< COORDINATE > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                COORDINATE x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN COORDINATE &std_vector_Sl_COORDINATE_Sg__get(std::vector< COORDINATE > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_COORDINATE_Sg__set(std::vector< COORDINATE > *self,int i,COORDINATE const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< double > std_vector_Sl_std_vector_Sl_double_Sg__Sg__pop(std::vector< std::vector< double > > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                std::vector< double > x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN std::vector< double > &std_vector_Sl_std_vector_Sl_double_Sg__Sg__get(std::vector< std::vector< double > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__set(std::vector< std::vector< double > > *self,int i,std::vector< double > const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< int > std_vector_Sl_std_vector_Sl_int_Sg__Sg__pop(std::vector< std::vector< int > > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                std::vector< int > x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN std::vector< int > &std_vector_Sl_std_vector_Sl_int_Sg__Sg__get(std::vector< std::vector< int > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_int_Sg__Sg__set(std::vector< std::vector< int > > *self,int i,std::vector< int > const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN vrna_ep_t std_vector_Sl_vrna_ep_t_Sg__pop(std::vector< vrna_ep_t > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                vrna_ep_t x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN vrna_ep_t &std_vector_Sl_vrna_ep_t_Sg__get(std::vector< vrna_ep_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_vrna_ep_t_Sg__set(std::vector< vrna_ep_t > *self,int i,vrna_ep_t const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN vrna_path_t std_vector_Sl_vrna_path_t_Sg__pop(std::vector< vrna_path_t > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                vrna_path_t x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN vrna_path_t &std_vector_Sl_vrna_path_t_Sg__get(std::vector< vrna_path_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_vrna_path_t_Sg__set(std::vector< vrna_path_t > *self,int i,vrna_path_t const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN vrna_move_t std_vector_Sl_vrna_move_t_Sg__pop(std::vector< vrna_move_t > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                vrna_move_t x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN vrna_move_t &std_vector_Sl_vrna_move_t_Sg__get(std::vector< vrna_move_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_vrna_move_t_Sg__set(std::vector< vrna_move_t > *self,int i,vrna_move_t const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include <string>
#include <cstring>

  const char *convert_vecstring2veccharcp(const std::string & s){
    return s.c_str();
  }

  char *convert_vecstring2veccharp(const std::string & s){
    char *pc = new char[s.size()+1];
    std::strcpy(pc, s.c_str());
    return pc;
  }
  
  short convert_vecint2vecshort(const int & i){
    return (short) i;
  }

  FLT_OR_DBL convert_vecdbl2vecFLR_OR_DBL(const double & d){
    return (FLT_OR_DBL) d;
  }



#include <sstream>


SWIGINTERN size_t
SWIG_strnlen(const char* s, size_t maxlen)
{
  const char *p;
  for (p = s; maxlen-- && *p; p++)
    ;
  return p - s;
}

SWIGINTERN vrna_param_t *new_vrna_param_t__SWIG_0(vrna_md_t *model_details=NULL){
    return vrna_params(model_details);
  }
SWIGINTERN vrna_exp_param_t *new_vrna_exp_param_t__SWIG_0(vrna_md_t *model_details=NULL){
    vrna_exp_param_t *P = vrna_exp_params(model_details);
    return P;
  }

  int
  my_params_load(std::string  filename = "",
                 unsigned int options = VRNA_PARAMETER_FORMAT_DEFAULT)
  {
    if (!filename.compare(""))
      return vrna_params_load_defaults();

    return vrna_params_load(filename.c_str(), options);
  }

  int
  my_params_save(std::string filename,
                 unsigned int options = VRNA_PARAMETER_FORMAT_DEFAULT)
  {
    return vrna_params_save(filename.c_str(), options);
  }

  int
  my_params_load_from_string(std::string parameters,
                             std::string name = "",
                             unsigned int options = VRNA_PARAMETER_FORMAT_DEFAULT)
  {
    return vrna_params_load_from_string(parameters.c_str(),
                                        name.c_str(),
                                        options);
  }


#include <sstream>


SWIGINTERN int
SWIG_AsCharArray(SV * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char SWIG_PERL_DECL_ARGS_2(SV * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long SWIG_PERL_CALL_ARGS_2(obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERNINLINE SV *
SWIG_From_char  SWIG_PERL_DECL_ARGS_1(char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}

SWIGINTERN vrna_md_t *new_vrna_md_t__SWIG_0(double const temperature=vrna_md_defaults_temperature_get(),double const betaScale=vrna_md_defaults_betaScale_get(),int const pf_smooth=vrna_md_defaults_pf_smooth_get(),int const dangles=vrna_md_defaults_dangles_get(),int const special_hp=vrna_md_defaults_special_hp_get(),int const noLP=vrna_md_defaults_noLP_get(),int const noGU=vrna_md_defaults_noGU_get(),int const noGUclosure=vrna_md_defaults_noGUclosure_get(),int const logML=vrna_md_defaults_logML_get(),int const circ=vrna_md_defaults_circ_get(),int const gquad=vrna_md_defaults_gquad_get(),int const uniq_ML=vrna_md_defaults_uniq_ML_get(),int const energy_set=vrna_md_defaults_energy_set_get(),int const backtrack=vrna_md_defaults_backtrack_get(),char const backtrack_type=vrna_md_defaults_backtrack_type_get(),int const compute_bpp=vrna_md_defaults_compute_bpp_get(),int const max_bp_span=vrna_md_defaults_max_bp_span_get(),int const min_loop_size=vrna_md_defaults_min_loop_size_get(),int const window_size=vrna_md_defaults_window_size_get(),int const oldAliEn=vrna_md_defaults_oldAliEn_get(),int const ribo=vrna_md_defaults_ribo_get(),double const cv_fact=vrna_md_defaults_cv_fact_get(),double const nc_fact=vrna_md_defaults_nc_fact_get(),double const sfact=vrna_md_defaults_sfact_get()){
    vrna_md_t *md       = (vrna_md_t *)vrna_alloc(sizeof(vrna_md_t));
    md->temperature     = temperature;
    md->betaScale       = betaScale;
    md->pf_smooth       = pf_smooth;
    md->dangles         = dangles;
    md->special_hp      = special_hp;
    md->noLP            = noLP;
    md->noGU            = noGU;
    md->noGUclosure     = noGUclosure;
    md->logML           = logML;
    md->circ            = circ;
    md->gquad           = gquad;
    md->uniq_ML         = uniq_ML;
    md->energy_set      = energy_set;
    md->backtrack       = backtrack;
    md->backtrack_type  = backtrack_type;
    md->compute_bpp     = compute_bpp;
    md->max_bp_span     = max_bp_span;
    md->min_loop_size   = min_loop_size;
    md->window_size     = window_size;
    md->oldAliEn        = oldAliEn;
    md->ribo            = ribo;
    md->cv_fact         = cv_fact;
    md->nc_fact         = nc_fact;
    md->sfact           = sfact;

    vrna_md_update(md);

    return md;
  }
SWIGINTERN void delete_vrna_md_t(vrna_md_t *self){
    free(self);
  }
SWIGINTERN void vrna_md_t_reset(vrna_md_t *self){
    vrna_md_set_default(self);
  }
SWIGINTERN void vrna_md_t_set_from_globals(vrna_md_t *self){
    set_model_details(self);
  }
SWIGINTERN char *vrna_md_t_option_string(vrna_md_t *self){
    return vrna_md_option_string(self);
  }

  int
  my_hamming(const char *s1,
             const char *s2)
  {
    return vrna_hamming_distance(s1, s2);
  }


  int
  my_hamming_bound(const char *s1,
                   const char *s2,
                   int n)
  {
    return vrna_hamming_distance_bound(s1, s2, n);
  }



#include <cstring>

short *
encode_seq(char *sequence)
{
  unsigned int i,l;
  short *S;
  l = strlen(sequence);
  S = (short *) vrna_alloc(sizeof(short)*(l+2));
  S[0] = (short) l;

  /* make numerical encoding of sequence */
  for (i=1; i<=l; i++)
    S[i]= (short) encode_char(toupper(sequence[i-1]));

  /* for circular folding add first base at position n+1 */
  S[l+1] = S[1];

  return S;
}


#include <sstream>

SWIGINTERN vrna_ep_t *new_vrna_ep_t__SWIG_0(unsigned int i,unsigned int j,float p=1.,int type=VRNA_PLIST_TYPE_BASEPAIR){
      vrna_ep_t *pair;

      pair        = (vrna_ep_t *)vrna_alloc(sizeof(vrna_ep_t));
      pair->i     = (int)i;
      pair->j     = (int)j;
      pair->p     = p;
      pair->type  = type;

      return pair;
    }

#include <vector>
  char *
  my_pack_structure(const char *s)
  {
    return vrna_db_pack(s);
  }

  char *
  my_unpack_structure(const char *packed)
  {
    return vrna_db_unpack(packed);
  }

  char *
  my_db_from_ptable(std::vector<int> pt)
  {
    std::vector<short> vc;
    transform(pt.begin(), pt.end(), back_inserter(vc), convert_vecint2vecshort);
    return vrna_db_from_ptable((short*)&vc[0]);
  }

  void
  db_flatten(char         *structure,
             unsigned int options = VRNA_BRACKETS_DEFAULT)
  {
    vrna_db_flatten(structure, options);
  }

  void
  db_flatten(char         *structure,
             std::string  target,
             unsigned int options = VRNA_BRACKETS_DEFAULT)
  {
    if (target.size() == 2)
      vrna_db_flatten_to(structure, target.c_str(), options);
    else
      vrna_message_warning("db_flatten(): target pair must be string of exactly 2 characters!");
  }

  std::string
  db_from_WUSS(std::string wuss)
  {
    char *c_str = vrna_db_from_WUSS(wuss.c_str());
    std::string db = c_str;
    free(c_str);
    return db;
  }

  std::string
  abstract_shapes(std::string   structure,
                  unsigned int  level = 5)
  {
    if (structure.size() == 0)
      return structure;

    char *c_str = vrna_abstract_shapes(structure.c_str(), level);
    std::string SHAPE = c_str;
    free(c_str);
    return SHAPE;
  }

  std::string
  abstract_shapes(std::vector<int> pt,
                  unsigned int     level = 5)
  {
    if (pt.size() == 0)
      return "";

    std::vector<short> vc;
    transform(pt.begin(), pt.end(), back_inserter(vc), convert_vecint2vecshort);

    char *c_str = vrna_abstract_shapes_pt((short*)&vc[0], level);

    std::string SHAPE = c_str;
    free(c_str);
    return SHAPE;
  }


#include <vector>

  std::vector<int>
  my_ptable(std::string   str,
            unsigned int  options = VRNA_BRACKETS_RND)
  {
    short int         *pt;
    int               i;
    std::vector<int>  v_pt;

    pt = vrna_ptable_from_string(str.c_str(), options);

    for(i = 0; i <= pt[0]; i++)
      v_pt.push_back(pt[i]);

    free(pt);
    return v_pt;
  }

  std::vector<int>
  my_ptable_pk(std::string str)
  {
    short int* pt_pk = vrna_pt_pk_get(str.c_str());
    std::vector<int> v_pt;
    int i;

    for(i=0; i <= pt_pk[0]; i++){
      v_pt.push_back(pt_pk[i]);
    }
    free(pt_pk);
    return v_pt; 
  }

  std::vector<int>
  my_pt_pk_remove(std::vector<int>  pt,
                  unsigned int      options = 0)
  {
    short               *ptable;
    int                 i;
    std::vector<short>  vs;
    std::vector<int>    v_pt;

    /* sanity check and fix */
    if (pt[0] != pt.size() - 1)
      pt[0] = pt.size() - 1;

    transform(pt.begin(), pt.end(), back_inserter(vs), convert_vecint2vecshort);

    ptable = vrna_pt_pk_remove((const short*)&vs[0], options);

    for (i = 0; i <= ptable[0]; i++)
      v_pt.push_back(ptable[i]);

    free(ptable);

    return v_pt;
  }



#include <vector>
  std::vector<vrna_ep_t>
  my_plist(std::string  structure,
           float        pr = 0.95*0.95)
  {
    std::vector<vrna_ep_t > ep_v;
    vrna_ep_t               *ptr, *plist;

    plist = vrna_plist(structure.c_str(), pr);

    for (ptr = plist; ptr->i && ptr->j; ptr++) {
      vrna_ep_t pl;
      pl.i = ptr->i;
      pl.j = ptr->j;
      pl.p = ptr->p;
      pl.type = ptr->type;
      ep_v.push_back(pl);
    }

    free(plist);

    return ep_v;
  }

  std::string
  db_from_plist(std::vector<vrna_ep_t> pairs,
                unsigned int           length)
  {
    vrna_ep_t last_elem;
    last_elem.i     = last_elem.j = 0;
    last_elem.p     = 0;
    last_elem.type  = 0;

    pairs.push_back(last_elem);

    char *str = vrna_db_from_plist(&pairs[0], length);
    std::string ret(str);
    free(str);

    /* remove end-of-list marker */
    pairs.pop_back();

    return ret;
  }

  std::string
  db_pk_remove(std::string  structure,
               unsigned int options = VRNA_BRACKETS_ANY)
  {
    char *db = vrna_db_pk_remove(structure.c_str(), options);
    std::string ret(db);
    free(db);

    return ret;
  }


  std::string
  db_to_tree_string(std::string   structure,
                    unsigned int  type)
  {
    char *c_str = vrna_db_to_tree_string(structure.c_str(), type);
    std::string tree = c_str;
    free(c_str);
    return tree;
  }

  std::string
  tree_string_unweight(std::string structure)
  {
    char *c_str = vrna_tree_string_unweight(structure.c_str());
    std::string tree = c_str;
    free(c_str);
    return tree;
  }

  std::string
  tree_string_to_db(std::string structure)
  {
    char *c_str = vrna_tree_string_to_db(structure.c_str());
    std::string db = c_str;
    free(c_str);
    return db;
  }



  short *
  make_loop_index(const char *structure)
  {
    /* number each position by which loop it belongs to (positions start at 0) */
    int i,hx,l,nl;
    int length;
    short *stack;
    short *loop;
    length = strlen(structure);
    stack = (short *) vrna_alloc(sizeof(short)*(length+1));
    loop = (short *) vrna_alloc(sizeof(short)*(length+2));
    hx=l=nl=0;
    for (i=0; i<length; i++) {
      if (structure[i] == '(') {
        nl++; l=nl;
        stack[hx++]=i;
      }
      loop[i]=l;
      if (structure[i] ==')') {
        --hx;
        if (hx>0)
          l = loop[stack[hx-1]];  /* index of enclosing loop   */
        else l=0;                 /* external loop has index 0 */
        if (hx<0) {
          fprintf(stderr, "%s\n", structure);
          nrerror("unbalanced brackets in make_loop_index");
        }
      }
    }
    free(stack);
    return loop;
  }


  std::vector<int>
  my_loopidx_from_ptable(std::vector<int> pt)
  {
    int                 i, *idx;
    std::vector<short>  vc;
    std::vector<int>    v_idx;

    transform(pt.begin(), pt.end(), back_inserter(vc), convert_vecint2vecshort);

    idx = vrna_loopidx_from_ptable((short *)&vc[0]);

    v_idx.assign(idx, idx + pt.size());

    free(idx);

    return v_idx;
  }


  int
  my_bp_distance(const char *str1,
                 const char *str2)
  {
    return vrna_bp_distance(str1,str2);
  }

  double
  my_dist_mountain( std::string   str1,
                    std::string   str2,
                    unsigned int  p = 1)
  {
    return vrna_dist_mountain(str1.c_str(), str2.c_str(), p);
  }


#include <vector>

  std::string
  my_consensus_sequence(std::vector<std::string>  alignment,
                        vrna_md_t                 *md_p = NULL)
  {
    /* convert std::vector<std::string> to vector<const char *> */
    std::vector<const char*>  v;
    std::transform(alignment.begin(), alignment.end(), std::back_inserter(v), convert_vecstring2veccharcp);
    v.push_back(NULL); /* mark end of sequences */

    char *c = vrna_aln_consensus_sequence((const char **)&v[0], md_p);
    std::string cons(c);
    free(c);
    return cons;
  }

  std::string
  my_aln_consensus_mis(std::vector<std::string> alignment,
                       vrna_md_t                *md_p = NULL)
  {
    /* convert std::vector<std::string> to vector<const char *> */
    std::vector<const char*>  v;
    std::transform(alignment.begin(), alignment.end(), std::back_inserter(v), convert_vecstring2veccharcp);
    v.push_back(NULL); /* mark end of sequences */

    char *c = vrna_aln_consensus_mis((const char **)&v[0], md_p);
    std::string mis(c);
    free(c);
    return mis;
  }



#include <vector>

  int
  my_aln_mpi(std::vector<std::string> alignment)
  {
    /* convert std::vector<std::string> to vector<const char *> */
    std::vector<const char*>  v;
    std::transform(alignment.begin(), alignment.end(), std::back_inserter(v), convert_vecstring2veccharcp);
    v.push_back(NULL); /* mark end of sequences */

    int mpi = vrna_aln_mpi((const char **)&v[0]);

    return mpi;
  }



#include <vector>

  std::vector<std::vector<int> >
  my_aln_pscore(std::vector<std::string>  alignment,
                vrna_md_t                 *md = NULL)
  {

    /* convert std::vector<std::string> to vector<const char *> */
    std::vector<const char*>  v;
    std::transform(alignment.begin(), alignment.end(), std::back_inserter(v), convert_vecstring2veccharcp);
    v.push_back(NULL); /* mark end of sequences */

    std::vector<std::vector<int> > pscore;
    int *ps = vrna_aln_pscore((const char **)&v[0], md);

    int n     = alignment[0].length();
    int *idx  = vrna_idx_col_wise(n);

    std::vector<int> z_row(n+1, 0);
    pscore.push_back(z_row);

    for(int i = 1; i < n; i++){
      std::vector<int> score_i;
      score_i.push_back(0);
      for(int j = 1; j <= i; j++)
        score_i.push_back(ps[idx[i] + j]);
      for(int j = i + 1; j <= n; j++)
        score_i.push_back(ps[idx[j] + i]);
      pscore.push_back(score_i);
    }

    free(ps);
    free(idx);

    return pscore;
  }



#include <vector>

  std::vector<double>
  my_aln_conservation_struct(std::vector<std::string> alignment,
                             std::string              structure,
                             vrna_md_t                *md = NULL)
  {
    /* convert std::vector<std::string> to vector<const char *> */
    std::vector<const char*>  v;
    std::transform(alignment.begin(), alignment.end(), std::back_inserter(v), convert_vecstring2veccharcp);
    v.push_back(NULL); /* mark end of sequences */

    std::vector<double> conservation;

    float *c = vrna_aln_conservation_struct((const char **)&v[0], structure.c_str(), md);

    if (c) {
      for (unsigned int i = 0; i <= alignment[0].size(); i++)
        conservation.push_back((double)c[i]);

      free(c);
    }

    return conservation;
  }
  std::vector<double>
  my_aln_conservation_col(std::vector<std::string> alignment,
                          vrna_md_t                *md = NULL,
                          unsigned int             options = VRNA_MEASURE_SHANNON_ENTROPY)
  {
    /* convert std::vector<std::string> to vector<const char *> */
    std::vector<const char*>  v;
    std::transform(alignment.begin(), alignment.end(), std::back_inserter(v), convert_vecstring2veccharcp);
    v.push_back(NULL); /* mark end of sequences */

    std::vector<double> conservation;

    float *c = vrna_aln_conservation_col((const char **)&v[0], md, options);

    if (c) {
      for (unsigned int i = 0; i <= alignment[0].size(); i++)
        conservation.push_back((double)c[i]);

      free(c);
    }

    return conservation;
  }


  char *
  my_move_standard(int            *OUTPUT,
                   char           *seq,
                   char           *struc,
                   enum MOVE_TYPE type,
                   int            verbosity_level,
                   int            shifts,
                   int            noLP)
  {
    char *structure =  (char *)calloc(strlen(struc)+1,sizeof(char));
    strcpy(structure,struc);
    *OUTPUT = move_standard(seq,structure,type,verbosity_level,shifts,noLP);
    return structure;   
  }


  std::string
  my_filename_sanitize(std::string name)
  {
    std::string s;
    char *name_sanitized = vrna_filename_sanitize(name.c_str(), NULL);
    if (name_sanitized)
      s = (const char *)name_sanitized;
    free(name_sanitized);
    return s;
  }

  std::string
  my_filename_sanitize(std::string  name,
                       char         c)
  {
    std::string s;
    char *name_sanitized = vrna_filename_sanitize(name.c_str(), &c);
    if (name_sanitized)
      s = (const char *)name_sanitized;
    free(name_sanitized);
    return s;
  }


  COORDINATE *
  get_xy_coordinates(const char *structure)
  {
    int i;
    short *table = vrna_ptable(structure);
    short length = (short) strlen(structure);

    COORDINATE *coords = (COORDINATE *) vrna_alloc((length+1)*sizeof(COORDINATE));
    float *X = (float *) vrna_alloc((length+1)*sizeof(float));
    float *Y = (float *) vrna_alloc((length+1)*sizeof(float));

    switch(rna_plot_type){
      case VRNA_PLOT_TYPE_SIMPLE:   simple_xy_coordinates(table, X, Y);
                                    break;
      case VRNA_PLOT_TYPE_CIRCULAR: simple_circplot_coordinates(table, X, Y);
                                    break;
      default:                      naview_xy_coordinates(table, X, Y);
                                    break;
    }

    for(i=0;i<=length;i++){
      coords[i].X = X[i];
      coords[i].Y = Y[i];
    }
    free(table);
    free(X);
    free(Y);
    return(coords);
  }


#include <vector>
#include <string>

  std::vector<COORDINATE>
  my_simple_xy_coordinates(std::string structure)
  {
    std::vector<COORDINATE> ret;
    short *table  = vrna_ptable(structure.c_str());
    float *X      = (float *) vrna_alloc((table[0]+1)*sizeof(float));
    float *Y      = (float *) vrna_alloc((table[0]+1)*sizeof(float));
    simple_xy_coordinates(table, X, Y);

    for(int i = 0; i <= table[0]; i++){
      COORDINATE c;
      c.X = X[i];
      c.Y = Y[i];
      ret.push_back(c);
    }

    free(X);
    free(Y);
    free(table);
    return ret;
  }

  std::vector<COORDINATE>
  my_simple_circplot_coordinates(std::string structure)
  {
    std::vector<COORDINATE> ret;
    short *table  = vrna_ptable(structure.c_str());
    float *X      = (float *) vrna_alloc((table[0]+1)*sizeof(float));
    float *Y      = (float *) vrna_alloc((table[0]+1)*sizeof(float));
    simple_circplot_coordinates(table, X, Y);

    for(int i = 0; i <= table[0]; i++){
      COORDINATE c;
      c.X = X[i];
      c.Y = Y[i];
      ret.push_back(c);
    }

    free(X);
    free(Y);
    free(table);
    return ret;
  }

  std::vector<COORDINATE>
  my_naview_xy_coordinates(std::string structure)
  {
    std::vector<COORDINATE> ret;
    short *table  = vrna_ptable(structure.c_str());
    float *X      = (float *) vrna_alloc((table[0]+1)*sizeof(float));
    float *Y      = (float *) vrna_alloc((table[0]+1)*sizeof(float));
    naview_xy_coordinates(table, X, Y);

    for(int i = 0; i <= table[0]; i++){
      COORDINATE c;
      c.X = X[i];
      c.Y = Y[i];
      ret.push_back(c);
    }

    free(X);
    free(Y);
    free(table);
    return ret;
  }


SWIGINTERN COORDINATE *COORDINATE_get(COORDINATE *self,int i){
    return self+i;
  }

  int
  my_PS_rna_plot_snoop_a( std::string               sequence,
                          std::string               structure,
                          std::string               filename,
                          std::vector<int>          relative_access,
                          std::vector<std::string>  seqs)
  {
    std::vector<const char*> seqs_vec;
    std::transform(seqs.begin(), seqs.end(), std::back_inserter(seqs_vec), convert_vecstring2veccharcp);
    seqs_vec.push_back(NULL); /* mark end of sequences */

    return PS_rna_plot_snoop_a( sequence.c_str(),
                                structure.c_str(),
                                filename.c_str(),
                                &relative_access[0],
                                (const char **)&seqs_vec[0]);
  }

  int
  file_PS_rnaplot(std::string sequence,
                  std::string structure,
                  std::string filename,
                  vrna_md_t   *md_p = NULL)
  {
    return vrna_file_PS_rnaplot(sequence.c_str(), structure.c_str(), filename.c_str(), md_p);
  }

  int
  file_PS_rnaplot_a(std::string sequence,
                    std::string structure,
                    std::string filename,
                    std::string pre,
                    std::string post,
                    vrna_md_t   *md_p = NULL)
  {
    return vrna_file_PS_rnaplot_a(sequence.c_str(), structure.c_str(), filename.c_str(), pre.c_str(), post.c_str(), md_p);
  }



  int
  file_PS_aln(std::string               filename,
              std::vector<std::string>  alignment,
              std::vector<std::string>  identifiers,
              std::string               structure,
              unsigned int              start       = 0,
              unsigned int              end         = 0,
              int                       offset      = 0,
              unsigned int              columns     = 60)
  {
    std::vector<const char*> aln_vec;
    std::vector<const char*> id_vec;

    std::transform(alignment.begin(),
                   alignment.end(),
                   std::back_inserter(aln_vec),
                   convert_vecstring2veccharcp);

    std::transform(alignment.begin(),
                   alignment.end(),
                   std::back_inserter(id_vec),
                   convert_vecstring2veccharcp);

    aln_vec.push_back(NULL); /* mark end of sequences */
    id_vec.push_back(NULL); /* mark end of sequences */

    return vrna_file_PS_aln_slice(filename.c_str(),
                                  (const char **)&aln_vec[0],
                                  (const char **)&id_vec[0],
                                  structure.c_str(),
                                  start,
                                  end,
                                  offset,
                                  columns);
  }




  float
  my_eval_structure_simple(std::string sequence,
                           std::string structure,
                           int         verbosity_level = VRNA_VERBOSITY_QUIET,
                           FILE        *file = NULL)
  {
    return vrna_eval_structure_simple_v(sequence.c_str(), structure.c_str(), verbosity_level, file);
  }

  float
  my_eval_circ_structure(std::string sequence,
                         std::string structure,
                         int         verbosity_level = VRNA_VERBOSITY_QUIET,
                         FILE        *file = NULL)
  {
    return vrna_eval_circ_structure_v(sequence.c_str(), structure.c_str(), verbosity_level, file);
  }

  float
  my_eval_gquad_structure(std::string sequence,
                          std::string structure,
                          int         verbosity_level = VRNA_VERBOSITY_QUIET,
                          FILE        *file = NULL)
  {
    return vrna_eval_gquad_structure_v(sequence.c_str(), structure.c_str(), verbosity_level, file);
  }

  float
  my_eval_circ_gquad_structure(std::string sequence,
                               std::string structure,
                               int         verbosity_level = VRNA_VERBOSITY_QUIET,
                               FILE        *file = NULL)
  {
    return vrna_eval_circ_gquad_structure_v(sequence.c_str(), structure.c_str(), verbosity_level, file);
  }

  float
  my_eval_structure_simple(std::vector<std::string> alignment,
                           std::string              structure,
                           int                      verbosity_level = VRNA_VERBOSITY_QUIET,
                           FILE                     *file = NULL)
  {
    std::vector<const char*>  vc;

    std::transform(alignment.begin(), alignment.end(), std::back_inserter(vc), convert_vecstring2veccharcp);
    vc.push_back(NULL); /* mark end of sequences */

    return vrna_eval_consensus_structure_simple_v((const char **)&vc[0], structure.c_str(), verbosity_level, file);
  }

  float
  my_eval_circ_structure(std::vector<std::string> alignment,
                         std::string              structure,
                         int                      verbosity_level = VRNA_VERBOSITY_QUIET,
                         FILE                     *file = NULL)
  {
    std::vector<const char*>  vc;

    std::transform(alignment.begin(), alignment.end(), std::back_inserter(vc), convert_vecstring2veccharcp);
    vc.push_back(NULL); /* mark end of sequences */

    return vrna_eval_circ_consensus_structure_v((const char **)&vc[0], structure.c_str(), verbosity_level, file);
  }

  float
  my_eval_gquad_structure(std::vector<std::string>  alignment,
                          std::string               structure,
                          int                       verbosity_level = VRNA_VERBOSITY_QUIET,
                          FILE                      *file = NULL)
  {
    std::vector<const char*>  vc;

    std::transform(alignment.begin(), alignment.end(), std::back_inserter(vc), convert_vecstring2veccharcp);
    vc.push_back(NULL); /* mark end of sequences */

    return vrna_eval_gquad_consensus_structure_v((const char **)&vc[0], structure.c_str(), verbosity_level, file);
  }

  float
  my_eval_circ_gquad_structure(std::vector<std::string> alignment,
                               std::string              structure,
                               int                      verbosity_level = VRNA_VERBOSITY_QUIET,
                               FILE                     *file = NULL)
  {
    std::vector<const char*>  vc;

    std::transform(alignment.begin(), alignment.end(), std::back_inserter(vc), convert_vecstring2veccharcp);
    vc.push_back(NULL); /* mark end of sequences */

    return vrna_eval_circ_gquad_consensus_structure_v((const char **)&vc[0], structure.c_str(), verbosity_level, file);
  }

  float
  my_eval_structure_pt_simple(std::string       sequence,
                              std::vector<int>  pt,
                              int               verbosity_level = VRNA_VERBOSITY_QUIET,
                              FILE              *file = NULL)
  {
    std::vector<short> vc;

    transform(pt.begin(), pt.end(), back_inserter(vc), convert_vecint2vecshort);

    return vrna_eval_structure_pt_simple_v(sequence.c_str(), (const short*)&vc[0], verbosity_level, file);
  }

  float
  my_eval_structure_pt_simple(std::vector<std::string>  alignment,
                              std::vector<int>          pt,
                              int                       verbosity_level = VRNA_VERBOSITY_QUIET,
                              FILE                      *file = NULL)
  {
    std::vector<const char*>  vc;
    std::vector<short> ptv;

    std::transform(alignment.begin(), alignment.end(), std::back_inserter(vc), convert_vecstring2veccharcp);
    vc.push_back(NULL); /* mark end of sequences */

    transform(pt.begin(), pt.end(), back_inserter(ptv), convert_vecint2vecshort);

    return vrna_eval_consensus_structure_pt_simple_v((const char **)&vc[0], (const short*)&ptv[0], verbosity_level, file);
  }



SWIGINTERN int
SWIG_AsVal_unsigned_SS_char SWIG_PERL_DECL_ARGS_2(SV * obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_PERL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}


  int
  my_maximum_matching(std::string sequence)
  {
    return vrna_maximum_matching_simple(sequence.c_str());
  }



#include <string>
#include <cstring>
#include <vector>

  char *
  my_fold(char *string,
          float *energy)
  {
    char *struc;

    struc = (char *)calloc(strlen(string)+1,sizeof(char));
    *energy = vrna_fold(string, struc);

    return struc;
  }

  char *
  my_fold(char *string,
          char *constraints,
          float *energy)
  {
    char                  *struc;
    vrna_fold_compound_t  *fc;

    struc = (char *)calloc(strlen(string)+1,sizeof(char));
    fc    = vrna_fold_compound(string, NULL, VRNA_OPTION_DEFAULT);

    if (constraints && fold_constrained)
      vrna_hc_add_from_db(fc, constraints, VRNA_CONSTRAINT_DB_DEFAULT);

    *energy = vrna_mfe(fc, struc);

    vrna_fold_compound_free(fc);

#ifndef VRNA_DISABLE_BACKWARD_COMPATIBILITY
    if (constraints && (!fold_constrained))
      strncpy(constraints, struc, strlen(constraints));
#endif

    return struc;
  }

  char *
  my_alifold(std::vector<std::string> alignment,
             float                    *energy)
  {
    char *struc;
    /* convert std::vector<std::string> to vector<const char *> */
    std::vector<const char*>  vc;
    std::transform(alignment.begin(), alignment.end(), std::back_inserter(vc), convert_vecstring2veccharcp);
    vc.push_back(NULL); /* mark end of sequences */

    struc = (char *)calloc(strlen(vc[0])+1,sizeof(char));

    *energy = vrna_alifold((const char **)&vc[0], struc);

    return struc;
  }

  char *
  my_alifold(std::vector<std::string> alignment,
             char                     *constraints,
             float                    *energy)
  {
    char                      *struc;
    vrna_fold_compound_t      *fc;
    std::vector<const char*>  vc;

    /* convert std::vector<std::string> to vector<const char *> */
    std::transform(alignment.begin(),
                   alignment.end(),
                   std::back_inserter(vc),
                   convert_vecstring2veccharcp);
    vc.push_back(NULL); /* mark end of sequences */

    struc = (char *)calloc(strlen(vc[0])+1,sizeof(char));

    fc = vrna_fold_compound_comparative((const char **)&vc[0], NULL, VRNA_OPTION_DEFAULT);

    if (constraints && fold_constrained)
      vrna_hc_add_from_db(fc, constraints, VRNA_CONSTRAINT_DB_DEFAULT);

    *energy = vrna_mfe(fc, struc);

    vrna_fold_compound_free(fc);

#ifndef VRNA_DISABLE_BACKWARD_COMPATIBILITY
    if (constraints && (!fold_constrained))
      strncpy(constraints, struc, strlen(constraints));
#endif

    return struc;
  }

  char *
  my_cofold(char  *string,
            float *energy)
  {
    char *s, **tok, **ptr, *struc, *sequence;

    sequence = string;
    struc    = (char *)calloc(strlen(string)+1,sizeof(char));

#ifndef VRNA_DISABLE_BACKWARD_COMPATIBILITY
    /* first, tokenize the input at delimiter '&' */
    tok = vrna_strsplit(string, "&");

    /*
        now, check whether there is only a single sequence.
        This may be a hint that someone is still using the
        'old' API where the split point had to be spliced out
        and explicitly specified through the global variable
        cut_point
     */
    if ((tok) && (tok[0])) {
      if (!tok[1]) {
        if (cut_point > (int)strlen(string)) {
          cut_point = -1;
        } else {
          /* we need to re-insert the delimiter now */
          sequence = vrna_cut_point_insert(string, cut_point);
        }
      }
    }
#endif

    *energy = vrna_cofold(sequence, struc);

#ifndef VRNA_DISABLE_BACKWARD_COMPATIBILITY
    /* clean up */
    if (tok) {
      for (ptr = tok; *ptr; ptr++)
        free(*ptr);

      free(tok);
    }

    if (sequence != string)
      free(sequence);
#endif

    return struc;
  }

  char *
  my_cofold(char  *string,
            char  *constraints,
            float *energy)
  {
    char *s, **tok, **ptr, *struc, *sequence;
    vrna_fold_compound_t      *fc;

    sequence = string;
    struc    = (char *)calloc(strlen(string)+1,sizeof(char));

#ifndef VRNA_DISABLE_BACKWARD_COMPATIBILITY
    /* first, tokenize the input at delimiter '&' */
    tok = vrna_strsplit(string, "&");

    /*
        now, check whether there is only a single sequence.
        This may be a hint that someone is still using the
        'old' API where the split point had to be spliced out
        and explicitly specified through the global variable
        cut_point
     */
    if ((tok) && (tok[0])) {
      if (!tok[1]) {
        if (cut_point > (int)strlen(string)) {
          cut_point = -1;
        } else {
          /* we need to re-insert the delimiter now */
          sequence = vrna_cut_point_insert(string, cut_point);
        }
      }
    }
#endif

    fc = vrna_fold_compound(sequence, NULL, VRNA_OPTION_DEFAULT);

    if (constraints && fold_constrained)
      vrna_hc_add_from_db(fc, constraints, VRNA_CONSTRAINT_DB_DEFAULT);

    *energy = vrna_mfe_dimer(fc, struc);

    /* clean up */
#ifndef VRNA_DISABLE_BACKWARD_COMPATIBILITY
    if (tok) {
      for (ptr = tok; *ptr; ptr++)
        free(*ptr);

      free(tok);
    }

    if (sequence != string)
      free(sequence);
#endif

    vrna_fold_compound_free(fc);

#ifndef VRNA_DISABLE_BACKWARD_COMPATIBILITY
    if (constraints && (!fold_constrained))
      strncpy(constraints, struc, strlen(constraints));
#endif

    return struc;
  }

  char *
  my_circfold(char *string,
              float *energy)
  {
    char *struc;

    struc   = (char *)calloc(strlen(string)+1,sizeof(char));
    *energy = vrna_circfold(string, struc);

    return struc;
  }

  char *
  my_circfold(char *string,
              char *constraints,
              float *energy)
  {
    char                  *struc;
    vrna_md_t             md;
    vrna_fold_compound_t  *fc;

    vrna_md_set_default(&md);
    md.circ = 1;

    struc = (char *)calloc(strlen(string)+1,sizeof(char));

    fc  = vrna_fold_compound(string, &md, VRNA_OPTION_DEFAULT);

    if (constraints && fold_constrained)
      vrna_hc_add_from_db(fc, constraints, VRNA_CONSTRAINT_DB_DEFAULT);

    *energy = vrna_mfe(fc, struc);

    vrna_fold_compound_free(fc);

#ifndef VRNA_DISABLE_BACKWARD_COMPATIBILITY
    if (constraints && (!fold_constrained))
      strncpy(constraints, struc, strlen(constraints));
#endif

    return struc;
  }

  char *
  my_circalifold(std::vector<std::string> alignment,
                 float                    *energy)
  {
    char *struc;
    /* convert std::vector<std::string> to vector<const char *> */
    std::vector<const char*>  vc;
    std::transform(alignment.begin(), alignment.end(), std::back_inserter(vc), convert_vecstring2veccharcp);
    vc.push_back(NULL); /* mark end of sequences */

    struc = (char *)calloc(strlen(vc[0])+1,sizeof(char));

    *energy = vrna_circalifold((const char **)&vc[0], struc);

    return struc;
  }

  char *
  my_circalifold(std::vector<std::string> alignment,
                 char                     *constraints,
                 float                    *energy)
  {
    char                      *struc;
    vrna_fold_compound_t      *fc;
    std::vector<const char*>  vc;
    vrna_md_t                 md;

    vrna_md_set_default(&md);
    md.circ = 1;

    /* convert std::vector<std::string> to vector<const char *> */
    std::transform(alignment.begin(),
                   alignment.end(),
                   std::back_inserter(vc),
                   convert_vecstring2veccharcp);
    vc.push_back(NULL); /* mark end of sequences */

    struc = (char *)calloc(strlen(vc[0])+1,sizeof(char));

    fc = vrna_fold_compound_comparative((const char **)&vc[0],
                                        &md,
                                        VRNA_OPTION_DEFAULT);

    if (constraints && fold_constrained)
      vrna_hc_add_from_db(fc, constraints, VRNA_CONSTRAINT_DB_DEFAULT);

    *energy = vrna_mfe(fc, struc);

    vrna_fold_compound_free(fc);

    return struc;
  }




#ifdef VRNA_WITH_SVM
  float
  my_Lfoldz(std::string sequence,
            int         window_size,
            double      min_z,
            FILE        *nullfile = NULL)
  {
    return vrna_Lfoldz(sequence.c_str(),
                       window_size,
                       min_z,
                       nullfile);
  }
#endif

  float
  my_Lfold(std::string sequence,
           int        window_size,
           FILE       *nullfile = NULL)
  {
    return vrna_Lfold(sequence.c_str(), window_size, nullfile);
  }

  float
  my_aliLfold(std::vector<std::string> alignment,
              int                      window_size,
              FILE                     *nullfile = NULL)
  {
    /* convert std::vector<std::string> to vector<const char *> */
    std::vector<const char*>  aln;
    std::transform(alignment.begin(), alignment.end(), std::back_inserter(aln), convert_vecstring2veccharcp);
    aln.push_back(NULL); /* mark end of sequences */

    return vrna_aliLfold((const char **)&aln[0],
                         window_size,
                         nullfile);
  }



  char *
  my_pf_fold(char   *string,
             float  *energy)
  {
    char *struc;
    struc = (char *)calloc(strlen(string)+1,sizeof(char));
    *energy = pf_fold(string, struc);
    return(struc);
  }

  char *
  my_pf_fold(char *string,
             char *constraints,
             float *energy)
  {
    char *struc;
    struc = (char *)calloc(strlen(string)+1,sizeof(char));
    if (constraints && fold_constrained)
      strncpy(struc, constraints, strlen(string));
    *energy = pf_fold(string, struc);
    if (constraints)
      strncpy(constraints, struc, strlen(constraints));
    return(struc);
  }


  char *
  my_pf_circ_fold(char  *string,
                  float *energy)
  {
    char *struc;
    struc = (char *)calloc(strlen(string)+1,sizeof(char));
    *energy = pf_circ_fold(string, struc);
    return(struc);
  }

  char *
  my_pf_circ_fold(char  *string,
                  char  *constraints,
                  float *energy)
  {
    char *struc;
    struc = (char *)calloc(strlen(string)+1,sizeof(char));
    if (constraints && fold_constrained)
      strncpy(struc, constraints, strlen(string));
    *energy = pf_circ_fold(string, struc);
    if (constraints)
      strncpy(constraints, struc, strlen(constraints));
    return(struc);
  }


  char *
  my_co_pf_fold(char  *string,
                float *FA,
                float *FB,
                float *FcAB,
                float *FAB)
  {
    char *struc;
    vrna_dimer_pf_t temp;
    struc = (char *)calloc(strlen(string)+1,sizeof(char));
    temp=co_pf_fold(string, struc);
    *FAB = temp.FAB;
    *FcAB = temp.FcAB;
    *FA = temp.FA;
    *FB = temp.FB;
    return(struc);
  }
  char *
  my_co_pf_fold(char  *string,
                char  *constraints,
                float *FA,
                float *FB,
                float *FcAB,
                float *FAB)
  {
    char *struc;
    vrna_dimer_pf_t temp;
    struc = (char *)calloc(strlen(string)+1,sizeof(char));
    if (constraints && fold_constrained)
      strncpy(struc, constraints, strlen(string));
    temp=co_pf_fold(string, struc);
    *FAB = temp.FAB;
    *FcAB = temp.FcAB;
    *FA = temp.FA;
    *FB = temp.FB;
    if (constraints)
      strncpy(constraints, struc, strlen(constraints));
    return(struc);
  }


 void
 my_get_concentrations(double FcAB,
                       double FcAA,
                       double FcBB,
                       double FEA,
                       double FEB,
                       double Ac_start,
                       double Bc_start,
                       double *AB,
                       double *AA,
                       double *BB,
                       double *A,
                       double *B)
  {
    vrna_dimer_conc_t *temp;
    double *concis;
    concis = (double *)calloc(4,sizeof(double));
    concis[0]=Ac_start;
    concis[1]=Bc_start;
    concis[2]=0;
    temp=get_concentrations(FcAB,FcAA,FcBB,FEA,FEB,concis);
    *AB=temp->ABc;
    *AA=temp->AAc;
    *BB=temp->BBc;
    *A=temp->Ac;
    *B=temp->Bc;
    free(concis);
    free(temp);
    return;
  }


double
get_pr(int i,
       int j)
{
  int ii;
  if (i>j) {ii=i; i=j; j=ii;}
  return pr[iindx[i]-j];
}


  char *
  my_MEA_from_plist(std::vector<vrna_ep_t> plist,
                    std::string            sequence,
                    double                 gamma,
                    vrna_md_t              *md,
                    float                  *OUTPUT)
  {
    vrna_ep_t               pp;
    std::vector<vrna_ep_t>  pl = plist;

    pp.i = pp.j = 0;
    pp.p = 0.;
    pp.type = VRNA_PLIST_TYPE_BASEPAIR;
    pl.push_back(pp);

    return vrna_MEA_from_plist(&pl[0],
                               sequence.c_str(),
                               gamma,
                               md,
                               OUTPUT);
  }

  char *
  my_MEA_from_plist(std::vector<vrna_ep_t> plist,
                    std::string            sequence,
                    vrna_md_t              *md,
                    float                  *OUTPUT)
  {
    vrna_ep_t               pp;
    std::vector<vrna_ep_t>  pl = plist;

    pp.i = pp.j = 0;
    pp.p = 0.;
    pp.type = VRNA_PLIST_TYPE_BASEPAIR;
    pl.push_back(pp);

    return vrna_MEA_from_plist(&pl[0],
                               sequence.c_str(),
                               1.,
                               md,
                               OUTPUT);
  }

  char *
  my_MEA_from_plist(std::vector<vrna_ep_t> plist,
                    std::string            sequence,
                    double                 gamma,
                    float                  *OUTPUT)
  {
    vrna_ep_t               pp;
    std::vector<vrna_ep_t>  pl = plist;

    pp.i = pp.j = 0;
    pp.p = 0.;
    pp.type = VRNA_PLIST_TYPE_BASEPAIR;
    pl.push_back(pp);

    return vrna_MEA_from_plist(&pl[0],
                               sequence.c_str(),
                               gamma,
                               NULL,
                               OUTPUT);
  }

  char *
  my_MEA_from_plist(std::vector<vrna_ep_t> plist,
                    std::string            sequence,
                    float                  *OUTPUT)
  {
    vrna_ep_t               pp;
    std::vector<vrna_ep_t>  pl = plist;

    pp.i = pp.j = 0;
    pp.p = 0.;
    pp.type = VRNA_PLIST_TYPE_BASEPAIR;
    pl.push_back(pp);

    return vrna_MEA_from_plist(&pl[0],
                               sequence.c_str(),
                               1.,
                               NULL,
                               OUTPUT);
  }


SWIGINTERN vrna_pbacktrack_mem_t *new_vrna_pbacktrack_mem_t(){
    vrna_pbacktrack_mem_t *m = (vrna_pbacktrack_mem_t *)vrna_alloc(sizeof(vrna_pbacktrack_mem_t));
    *m = NULL;
    return m;
  }
SWIGINTERN void delete_vrna_pbacktrack_mem_t(vrna_pbacktrack_mem_t *self){
    vrna_pbacktrack_mem_free(*self);
    delete self;
  }

#include <vector>

  std::vector<vrna_ep_t>
  my_pfl_fold(std::string sequence,
              int         w,
              int         L,
              double      cutoff)
  {
    std::vector<vrna_ep_t > vplist;
    vrna_ep_t *ptr, *plist;

    plist = vrna_pfl_fold(sequence.c_str(), w, L, (float)cutoff);

    for (ptr = plist; ptr->i && ptr->j; ptr++) {
      vrna_ep_t pl;
      pl.i    = ptr->i;
      pl.j    = ptr->j;
      pl.p    = ptr->p;
      pl.type = ptr->type;
      vplist.push_back(pl);
    }
    free(plist);

    return vplist;
  }

  std::vector<std::vector<double> >
  pfl_fold_up(std::string sequence,
               int        ulength,
               int        window_size,
               int        max_bp_span)
  {
    double **up = vrna_pfl_fold_up(sequence.c_str(), ulength, window_size, max_bp_span);

    std::vector<std::vector<double> > up_vec;

    std::vector<double> nullvec(ulength + 1, 0.);

    /* insert a 0th element, since we start a 1-based N x M matrix here */
    up_vec.push_back(nullvec);
    free(up[0]);
    for (unsigned int i = 1; i <= sequence.length(); i++) {
      std::vector<double> row;
      /* insert a 0th element, again, everything should be 1-based */
      row.push_back(0.);

      /* add remaining elements for this row */
      for (int j = 1; j <= ulength; j++) {
        row.push_back(up[i][j]);
      }

      /* free memory of i-th row in up array */
      free(up[i]);

      up_vec.push_back(row);
    }
    free(up);

    return up_vec;
  }


#include <sstream>

SWIGINTERN SOLUTION *SOLUTION_get(SOLUTION *self,int i){
           return self+i;
        }
SWIGINTERN int SOLUTION_size(SOLUTION *self){
           SOLUTION *s;
           for (s=self; s->structure; s++);
           return (int)(s-self);
        }
SWIGINTERN void delete_SOLUTION(SOLUTION *self){
           SOLUTION *s;
           for (s=self; s->structure; s++) free(s->structure);
           free(self);
        }


extern "C" {
  typedef struct {
    float energy;
    char *structure;
  } subopt_solution;
}


SWIGINTERN void delete_subopt_solution(subopt_solution *self){
    free(self->structure);
    free(self);
  }
SWIGINTERN subopt_solution std_vector_Sl_subopt_solution_Sg__pop(std::vector< subopt_solution > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                subopt_solution x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN subopt_solution &std_vector_Sl_subopt_solution_Sg__get(std::vector< subopt_solution > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_subopt_solution_Sg__set(std::vector< subopt_solution > *self,int i,subopt_solution const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }


  SOLUTION *
  my_subopt(char  *seq,
            char  *constraint,
            int   delta,
            FILE  *nullfile = NULL)
  {
    return subopt(seq, constraint, delta, nullfile);
  }

  std::vector<subopt_solution>
  my_subopt(char  *seq,
            int   delta,
            FILE  *nullfile = NULL)
  {
    std::vector<subopt_solution> ret;
    SOLUTION *sol = subopt(seq, NULL, delta, nullfile);
    if (sol)
      for(int i = 0; sol[i].structure != NULL; i++){
        subopt_solution a;
        a.energy = sol[i].energy;
        a.structure = sol[i].structure;
        ret.push_back(a);
      }

    free(sol);
    /* The memory occupied by the individual structures will be free'd automatically
       by swig, when the vector is destroyed
    */
    return ret;
  }



  char *
  my_inverse_fold(char        *start,
                  const char  *target,
                  float *cost)
  {
    char *seq;
    int n;
    n = strlen(target);
    seq = vrna_random_string(n, symbolset);
    if (start)
      strncpy(seq, start, n);
    *cost = inverse_fold(seq, target);
    if (start)
      /* for backward compatibility modify start */
      strncpy(start, seq, n);
    return(seq);
  }


  char *
  my_inverse_pf_fold( char        *start,
                      const char  *target,
                      float       *cost)
  {
    char *seq;
    int n;
    n = strlen(target);
    seq = vrna_random_string(n, symbolset);
    if (start)
      strncpy(seq, start, n);
    *cost = inverse_pf_fold(seq, target);
    if (start)
      /* for backward compatibility modify start */
      strncpy(start, seq, n);
    return(seq);
  }


void *deref_any(void **ptr, int index) {
   /* dereference arbitray pointer */
   return (void *) ptr[index];
}


char *get_aligned_line(int i) {
  i = i % 2;
  return aligned_line[i];
}



  std::vector<double>
  my_file_SHAPE_read( std::string file_name,
                      int         length,
                      double      default_value,
                      std::string *shape_sequence,
                      int         *status)
  {
    std::vector<double> values (length+1, -999);
    char *seq = (char *)vrna_alloc(sizeof(char) * (length + 1));

    *status = vrna_file_SHAPE_read(file_name.c_str(), length, default_value, seq, (double *)&values[0]);

    *shape_sequence = std::string(seq);

    free(seq);
    return values;
  }



  int
  my_file_fasta_read( std::string               *id,
                      std::string               *sequence,
                      std::vector<std::string>  *rest,
                      FILE                      *file,
                      unsigned int              options = 0)
  {
    char  *c_seq, *c_id, **c_rest, **ptr;
    int   ret;

    ret = vrna_file_fasta_read_record(&c_id, &c_seq, &c_rest, file, options);

    if (ret != -1) {
      rest->clear();
      rest->reserve(ret);

      *id        = (c_id) ? c_id : "";
      *sequence  = (c_seq) ? c_seq : "";

      if ((c_rest) &&
          (*c_rest))
        for (ptr = c_rest; *ptr; ptr++) {
          std::string line(*ptr);
          rest->push_back(line);
          free(*ptr);
        }

      free(c_id);
      free(c_seq);
      free(c_rest);
    }

    return ret;
  }




  unsigned int
  my_file_msa_detect_format(std::string   filename,
                            unsigned int  options = VRNA_FILE_FORMAT_MSA_DEFAULT)
  {
    return vrna_file_msa_detect_format(filename.c_str(), options);
  }


  int
  my_file_msa_read( std::string               filename,
                    std::vector<std::string>  *names,
                    std::vector<std::string>  *alignment,
                    std::string               *id,
                    std::string               *structure,
                    unsigned int              options = VRNA_FILE_FORMAT_MSA_STOCKHOLM)
  {
    char **c_names, **c_aln, *c_id, *c_structure;

    int ret = vrna_file_msa_read(filename.c_str(), &c_names, &c_aln, &c_id, &c_structure, options);

    if (ret != -1) {
      names->clear();
      alignment->clear();

      names->reserve(ret);
      alignment->reserve(ret);

      for (int i = 0; i < ret; i++) {
        std::string id(c_names[i]);
        std::string seq(c_aln[i]);
        names->push_back(id);
        alignment->push_back(seq);
        free(c_names[i]);
        free(c_aln[i]);
      }
      *id        = (c_id) ? c_id : "";
      *structure = (c_structure) ? c_structure : "";

      free(c_names);
      free(c_aln);
      free(c_id);
      free(c_structure);
    }

    return ret;
  }


  int
  my_file_msa_read_record(FILE                      *filehandle,
                          std::vector<std::string>  *names,
                          std::vector<std::string>  *alignment,
                          std::string               *id,
                          std::string               *structure,
                          unsigned int              options = VRNA_FILE_FORMAT_MSA_STOCKHOLM)
  {
    char **c_names, **c_aln, *c_id, *c_structure;

    int ret = vrna_file_msa_read_record(filehandle, &c_names, &c_aln, &c_id, &c_structure, options);

    if (ret != -1) {
      names->clear();
      alignment->clear();

      names->reserve(ret);
      alignment->reserve(ret);

      for (int i = 0; i < ret; i++) {
        std::string id(c_names[i]);
        std::string seq(c_aln[i]);
        names->push_back(id);
        alignment->push_back(seq);
        free(c_names[i]);
        free(c_aln[i]);
      }
      *id        = (c_id) ? c_id : "";
      *structure = (c_structure) ? c_structure : "";

      free(c_names);
      free(c_aln);
      free(c_id);
      free(c_structure);
    }

    return ret;
  }


  int
  my_file_msa_write(std::string               filename,
                    std::vector<std::string>  names,
                    std::vector<std::string>  alignment,
                    std::string               id = "",
                    std::string               structure = "",
                    std::string               source = "",
                    unsigned int              options = VRNA_FILE_FORMAT_MSA_STOCKHOLM | VRNA_FILE_FORMAT_MSA_APPEND)
  {
    std::vector<const char*>  v_names;
    std::vector<const char*>  v_aln;

    transform(names.begin(), names.end(), back_inserter(v_names), convert_vecstring2veccharcp);
    v_names.push_back(NULL); /* mark end of sequences */
    transform(alignment.begin(), alignment.end(), back_inserter(v_aln), convert_vecstring2veccharcp);
    v_aln.push_back(NULL); /* mark end of sequences */

    return vrna_file_msa_write(filename.c_str(),
                              (const char **)&v_names[0],
                              (const char **)&v_aln[0],
                              (id != "") ? id.c_str() : NULL,
                              (structure != "") ? structure.c_str() : NULL,
                              (source != "") ? source.c_str() : NULL,
                              options);
  }



#include <vector>

  std::vector<int>
  my_seq_encode(std::string sequence,
                vrna_md_t   *md_p = NULL)
  {
    short             *s;
    int               n;
    std::vector<int>  encoding;
    vrna_md_t         md;

    if (!md_p) {
      vrna_md_set_default(&md);
      md_p = &md;
    }

    n = sequence.length();
    s = vrna_seq_encode(sequence.c_str(),
                        md_p);
  
    encoding.push_back(n);
    for (int i = 1; i <= n; i++)
      encoding.push_back(s[i]);

    free(s);

    return encoding;
  }


SWIGINTERN vrna_command_s *new_vrna_command_s(){
    vrna_command_s *c = NULL;
    return c;
  }
SWIGINTERN void delete_vrna_command_s(vrna_command_s *self){
    vrna_commands_free(self);
  }

  struct vrna_command_s *
  my_file_commands_read(std::string   filename,
                        unsigned int  options = VRNA_CMD_PARSE_DEFAULTS)
  {
    int i;

    return vrna_file_commands_read(filename.c_str(),
                                   options);
  }


  std::vector<std::vector<int> >
  my_enumerate_necklaces( std::vector<unsigned int> entity_counts)
  {
    std::vector<std::vector<int> > permutations;
    /* add a 0 entry, just in case it has been forgotten */
    entity_counts.push_back(0);
    unsigned int **result = vrna_enumerate_necklaces((const unsigned int *)&entity_counts[0]);
    if(result){
      /* get line length */
      unsigned int n = 0;
      for(std::vector<unsigned int>::iterator it = entity_counts.begin(); it != entity_counts.end(); ++it)
        n += *it;

      for(int i = 0; result[i]; i++){
        std::vector<int> line;
        for(unsigned int j = 1; j <= n; j++)
          line.push_back((int)result[i][j]);
        free(result[i]);
        permutations.push_back(line);
      }
      free(result);
    }
    return permutations;
  }


  std::vector<unsigned int>
  my_rotational_symmetry(std::string string)
  {
    std::vector<unsigned int> positions;
    unsigned int i, r, *pos;
    
    r = vrna_rotational_symmetry_pos(string.c_str(), &pos);

    if (r)
      for (i = 0; i < r; i++)
        positions.push_back(pos[i]);

    free(pos);

    return positions;
  }


  std::vector<unsigned int>
  my_rotational_symmetry(std::vector<unsigned int> string)
  {
    std::vector<unsigned int> positions;
    unsigned int i, r, *pos;
    
    r = vrna_rotational_symmetry_pos_num((unsigned int*)&string[0], string.size(), &pos);

    if (r)
      for (i = 0; i < r; i++)
        positions.push_back(pos[i]);

    free(pos);

    return positions;
  }


SWIGINTERN void delete_duplexT(duplexT *self){
    free(self->structure);
    free(self);
  }


extern "C" {
  typedef struct {
    int i;
    int j;
    char *structure;
    float energy;
  } duplex_list_t;
}


SWIGINTERN void delete_duplex_list_t(duplex_list_t *self){
    free(self->structure);
    free(self);
  }
SWIGINTERN duplex_list_t std_vector_Sl_duplex_list_t_Sg__pop(std::vector< duplex_list_t > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                duplex_list_t x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN duplex_list_t &std_vector_Sl_duplex_list_t_Sg__get(std::vector< duplex_list_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_duplex_list_t_Sg__set(std::vector< duplex_list_t > *self,int i,duplex_list_t const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }


  duplexT
  my_duplexfold(std::string s1,
                std::string s2)
  {
    return duplexfold(s1.c_str(), s2.c_str());
  }

  std::vector<duplex_list_t>
  my_duplex_subopt( std::string s1,
                    std::string s2,
                    int         delta,
                    int         w)
  {
    std::vector<duplex_list_t> ret;
    duplexT *list, *ptr;
    list = duplex_subopt(s1.c_str(), s2.c_str(), delta, w);
 
    for (ptr = list; ptr->structure != NULL; ptr++) {
      duplex_list_t a;
      a.i         = ptr->i;
      a.j         = ptr->j;
      a.energy    = ptr->energy;
      a.structure = ptr->structure;
      ret.push_back(a);
    }
    free(list);

    return ret;
  }

  duplexT
  my_aliduplexfold(std::vector<std::string> alignment1,
                   std::vector<std::string> alignment2)
  {
    std::vector<const char*> aln_vec1;
    std::transform(alignment1.begin(), alignment1.end(), std::back_inserter(aln_vec1), convert_vecstring2veccharcp);
    aln_vec1.push_back(NULL); /* mark end of sequences */
    std::vector<const char*> aln_vec2;
    std::transform(alignment2.begin(), alignment2.end(), std::back_inserter(aln_vec2), convert_vecstring2veccharcp);
    aln_vec2.push_back(NULL); /* mark end of sequences */

    return aliduplexfold((const char **)&aln_vec1[0], (const char **)&aln_vec2[0]);
  }

  std::vector<duplex_list_t>
  aliduplex_subopt(std::vector<std::string> alignment1,
                   std::vector<std::string> alignment2,
                   int                      delta,
                   int                      w)
  {
    std::vector<duplex_list_t> ret;
    duplexT *list, *ptr;
    std::vector<const char*> aln_vec1;
    std::transform(alignment1.begin(), alignment1.end(), std::back_inserter(aln_vec1), convert_vecstring2veccharcp);
    aln_vec1.push_back(NULL); /* mark end of sequences */
    std::vector<const char*> aln_vec2;
    std::transform(alignment2.begin(), alignment2.end(), std::back_inserter(aln_vec2), convert_vecstring2veccharcp);
    aln_vec2.push_back(NULL); /* mark end of sequences */

    list = aliduplex_subopt((const char **)&aln_vec1[0], (const char **)&aln_vec2[0], delta, w);
    for (ptr = list; ptr->structure != NULL; ptr++) {
      duplex_list_t a;
      a.i         = ptr->i;
      a.j         = ptr->j;
      a.energy    = ptr->energy;
      a.structure = ptr->structure;
      ret.push_back(a);
    }
    free(list);

    return ret;
  }


#include <sstream>

SWIGINTERN vrna_move_t *new_vrna_move_t__SWIG_0(int pos_5=0,int pos_3=0){
    vrna_move_t *m = (vrna_move_t *)vrna_alloc(sizeof(vrna_move_t));
    *m = vrna_move_init(pos_5, pos_3);
    return m;
  }
SWIGINTERN void delete_vrna_move_t(vrna_move_t *self){
    vrna_move_list_free(self->next);
    free(self);
  }
SWIGINTERN int vrna_move_t_is_removal(vrna_move_t *self){
    return vrna_move_is_removal((const vrna_move_t *)self);
  }
SWIGINTERN int vrna_move_t_is_insertion(vrna_move_t *self){
    return vrna_move_is_insertion((const vrna_move_t *)self);
  }
SWIGINTERN int vrna_move_t_is_shift(vrna_move_t *self){
    return vrna_move_is_shift((const vrna_move_t *)self);
  }
SWIGINTERN int vrna_move_t_compare__SWIG_0(vrna_move_t *self,vrna_move_t const *b,std::vector< int > const pt=std::vector< int >()){
    int result;
    std::vector<short> vs;
    transform(pt.begin(), pt.end(), back_inserter(vs), convert_vecint2vecshort);

    result =  vrna_move_compare(self,
                                b,
                                (const short *)&vs[0]);

    return result;
  }

#include <sstream>

SWIGINTERN vrna_path_t *new_vrna_path_t__SWIG_0(double en,std::string s="",vrna_move_t *move=NULL,unsigned int type=VRNA_PATH_TYPE_DOT_BRACKET){
    vrna_path_t *step = (vrna_path_t *)vrna_alloc(sizeof(vrna_path_t));

    step->type  = type;
    step->en    = en;

    if ((s == "") && (move))
      type = VRNA_PATH_TYPE_MOVES;

    switch (type) {
      case VRNA_PATH_TYPE_DOT_BRACKET:
        if (s != "") {
          step->s = (char *)vrna_alloc(sizeof(char) * (s.length() + 1));
          memcpy(step->s, s.c_str(), sizeof(char) * s.length());
        } else {
          step->s = NULL;
        }
        break;

      case VRNA_PATH_TYPE_MOVES:
        if (move) {
          step->move.pos_5 = move->pos_5;
          step->move.pos_3 = move->pos_3;
        } else {
          step->move.pos_5 = 0;
          step->move.pos_3 = 0;
        }
        break;

      default:
        break;
    }


    return step;
  }
SWIGINTERN void delete_vrna_path_t(vrna_path_t *self){
    free(self->s);
    free(self);
  }
SWIGINTERN vrna_path_options_s *new_vrna_path_options_s(){
    return NULL;
  }
SWIGINTERN void delete_vrna_path_options_s(vrna_path_options_s *self){
    vrna_path_options_free(self);
  }

  struct vrna_path_options_s *
  my_path_options_findpath(int          width = 10,
                           unsigned int type  = VRNA_PATH_TYPE_DOT_BRACKET)
  {
    return vrna_path_options_findpath(width, type);
  }


  std::vector<vrna_path_t>
  my_get_path(std::string seq,
              std::string s1,
              std::string s2,
              int         maxkeep)
  {
    std::vector<vrna_path_t>  v; /* fill vector with returned vrna_path_t*/
    vrna_path_t *path_t, *ptr;

    path_t = ptr = get_path(seq.c_str(), s1.c_str(), s2.c_str(), maxkeep);

    while (ptr->s != NULL)
    {
        vrna_path_t p;

        p.type  = VRNA_PATH_TYPE_DOT_BRACKET;
        p.en    = ptr->en;
        p.s     = ptr->s;

        v.push_back(p);
        ptr++;
        
    }
    free(path_t);
    return v;
  }



extern "C" {
  typedef struct {
    float temperature;    /**< @brief   The temperature in &deg;C */
    float heat_capacity;  /**< @brief   The specific heat at this temperature in Kcal/(Mol * K) */
  } heat_capacity_result;
}


SWIGINTERN heat_capacity_result std_vector_Sl_heat_capacity_result_Sg__pop(std::vector< heat_capacity_result > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                heat_capacity_result x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN heat_capacity_result &std_vector_Sl_heat_capacity_result_Sg__get(std::vector< heat_capacity_result > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_heat_capacity_result_Sg__set(std::vector< heat_capacity_result > *self,int i,heat_capacity_result const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }

  std::vector<heat_capacity_result>
  my_heat_capacity(std::string   sequence,
                   float         T_min        = 0.,
                   float         T_max        = 100.,
                   float         T_increment  = 1.,
                   unsigned int  mpoints      = 2U)
  {
    vrna_heat_capacity_t              *result_c;
    std::vector<heat_capacity_result> result;

    result_c = vrna_heat_capacity_simple(sequence.c_str(), T_min, T_max, T_increment, mpoints);

    if (result_c) {
      for (size_t i = 0; result_c[i].temperature >= T_min; i++) {
        heat_capacity_result r;
        r.temperature = result_c[i].temperature;
        r.heat_capacity = result_c[i].heat_capacity;
        result.push_back(r);
      }
    }

    free(result_c);

    return result;
  }



typedef struct {
  SV  *cb;
  SV  *data;
  SV  *delete_data;
} perl_callback_t;

static void perl_wrap_fc_status_callback(unsigned char status, void *data);

static void
delete_perl_callback(void * data){

  perl_callback_t *cb = (perl_callback_t *)data;
  /* first delete user data */
  if(cb->data && SvOK(cb->data)){
    if(cb->delete_data && SvOK(cb->delete_data)){
      dSP;

      SV *err_tmp;
      
      /* call Perl subroutine */
      ENTER;
      SAVETMPS;
      PUSHMARK(SP);

      XPUSHs(cb->data);
      PUTBACK;

      perl_call_sv(cb->delete_data, G_EVAL | G_DISCARD);

      SPAGAIN;

      err_tmp = ERRSV;
      if (SvTRUE(err_tmp)) {
        croak ("Some error occurred while executing fold compound delete_data() callback - %s\n", SvPV_nolen(err_tmp));
      }

      FREETMPS;
      LEAVE;
      SvREFCNT_dec(cb->delete_data);
    }
    SvREFCNT_dec(cb->data);
  }

  /* now dispose of the callback */
  if(cb->cb && SvOK(cb->cb))
    SvREFCNT_dec(cb->cb);

  /* finally free perl callback */
  free(cb);
}

static void
fc_add_perl_data(vrna_fold_compound_t *vc,
                SV *data,
                SV *PerlFunc){

  /* check whether PerlFunc actually is a reference to a Perl subroutine */
  if(!SvOK(data)){
    fprintf(stderr, "Warning: argument 1 for fold_compound::add_auxdata, must be defined\n");
    return;
  }

  if(PerlFunc && SvOK(PerlFunc)){
    if(SvTYPE(SvRV(PerlFunc)) != SVt_PVCV){
      fprintf(stderr, "Warning: argument 2 for fold_compound::add_auxdata, must be undef or code reference\n");
      return;
    }
  }

  perl_callback_t * cb;
  /* try to dispose of previous data */
  if(vc->auxdata){
    cb = (perl_callback_t *)vc->auxdata;
    if(cb->data && SvOK(cb->data)){
      if(cb->delete_data && SvOK(cb->delete_data)){
        dSP;

        SV *err_tmp;

        /* call Perl subroutine */
        ENTER;
        SAVETMPS;
        PUSHMARK(SP);

        XPUSHs(cb->data);
        PUTBACK;

        perl_call_sv(cb->delete_data, G_EVAL | G_DISCARD);

        SPAGAIN;

        err_tmp = ERRSV;
        if (SvTRUE(err_tmp)) {
          croak ("Some error occurred while executing fold compound delete_data() callback - %s\n", SvPV_nolen(err_tmp));
        }

        FREETMPS;
        LEAVE;
        SvREFCNT_dec(cb->delete_data);
      }
      SvREFCNT_dec(cb->data);
    }
  } else {
    cb              = (perl_callback_t *)vrna_alloc(sizeof(perl_callback_t));
    cb->cb          = NULL;
    cb->data        = NULL;
    cb->delete_data = NULL;
  }
  cb->data        = data;     /* remember data */
  cb->delete_data = PerlFunc; /* remember delete data function */
  /* increase reference counter */
  if(data && SvOK(data))
    SvREFCNT_inc(data);
  if(PerlFunc && SvOK(PerlFunc))
    SvREFCNT_inc(PerlFunc);

  vc->auxdata = (void *)cb;
  if(!vc->free_auxdata){
    vc->free_auxdata = &delete_perl_callback;
  }
}

static void
fc_add_perl_callback( vrna_fold_compound_t *vc,
                      SV *PerlFunc){

  /* check whether PerlFunc actually is a reference to a Perl subroutine */
  if(SvTYPE(SvRV(PerlFunc)) != SVt_PVCV){
    fprintf(stderr, "Warning: invalid argument for fold_compound::add_callback, must be code reference\n");
    return;
  }

  /* try to dispose of previous callback */
  perl_callback_t * cb;
  if(vc->auxdata){
    cb = (perl_callback_t *)vc->auxdata;
    /* release previous callback */
    SvREFCNT_dec(cb->cb);
  } else {
    cb = (perl_callback_t *)vrna_alloc(sizeof(perl_callback_t));
    cb->data = NULL;
    cb->delete_data = NULL;
  }
  cb->cb = PerlFunc;      /* remember callback */
  SvREFCNT_inc(PerlFunc); /* Increase reference counter */

  /* finaly bind callback wrapper to fold compound */
  vc->auxdata = (void *)cb;
  if(!vc->free_auxdata){
    vc->free_auxdata = &delete_perl_callback;
  }
  vrna_fold_compound_add_callback(vc, &perl_wrap_fc_status_callback);
}

static void
perl_wrap_fc_status_callback( unsigned char status,
                              void *data){

  SV *func;
  perl_callback_t *cb = (perl_callback_t *)data;
  func = cb->cb;

  if(func && SvOK(func)){
    dSP;

    SV *err_tmp;

    /* call Perl subroutine */
    ENTER;
    SAVETMPS;
    PUSHMARK(SP);

    SV* pSV = sv_newmortal();
    sv_setiv(pSV, (IV)status);  /* add status value to perl stack */
    XPUSHs(pSV);
    if(cb->data && SvOK(cb->data))          /* add data object to perl stack (if any) */
      XPUSHs(cb->data);
    PUTBACK;

    perl_call_sv(func, G_EVAL | G_DISCARD);

    SPAGAIN;

    err_tmp = ERRSV;
    if (SvTRUE(err_tmp)) {
      croak ("Some error occurred while executing fold compound callback - %s\n", SvPV_nolen(err_tmp));
    }

    FREETMPS;
    LEAVE;
  }

  return /*void*/;
}




  typedef struct {
    SV  *cb_f;
    SV  *cb_bt;
    SV  *cb_exp_f;
    SV  *data;
    SV  *delete_data;
  } perl_sc_callback_t;

  static int
  perl_wrap_sc_f_callback(int           i,
                          int           j,
                          int           k,
                          int           l,
                          unsigned char d,
                          void          *data);


  static vrna_basepair_t *
  perl_wrap_sc_bt_callback(int            i,
                           int            j,
                           int            k,
                           int            l,
                           unsigned char  d,
                           void           *data);


  static FLT_OR_DBL
  perl_wrap_sc_exp_f_callback(int           i,
                              int           j,
                              int           k,
                              int           l,
                              unsigned char d,
                              void          *data);


  static perl_sc_callback_t *
  get_new_cb(void)
  {
    perl_sc_callback_t *cb;

    cb              = (perl_sc_callback_t *)vrna_alloc(sizeof(perl_sc_callback_t));
    cb->cb_f        = NULL;
    cb->cb_bt       = NULL;
    cb->cb_exp_f    = NULL;
    cb->data        = NULL;
    cb->delete_data = NULL;

    return cb;
  }


  static void
  clean_cb_data(perl_sc_callback_t *cb)
  {
    if ((cb->data) &&
        (SvOK(cb->data))) {
      if ((cb->delete_data) &&
          (SvOK(cb->delete_data))) {
        dSP;

        SV *err_tmp;

        ENTER;
        SAVETMPS;
        PUSHMARK(SP);
        XPUSHs(cb->data);
        PUTBACK;

        perl_call_sv(cb->delete_data, G_EVAL | G_DISCARD);

        SPAGAIN;

        /* Check the eval first */
        err_tmp = ERRSV;

        if (SvTRUE(err_tmp))
          croak(
            "Some error occurred while executing generic soft constraint delete_data() callback - %s\n",
            SvPV_nolen(err_tmp));

        FREETMPS;
        LEAVE;
        SvREFCNT_dec(cb->delete_data);
      }

      SvREFCNT_dec(cb->data);

      cb->data        = NULL;
      cb->delete_data = NULL;
    }
  }


  static perl_sc_callback_t *
  reuse_or_new_cb_f(vrna_sc_t *sc)
  {
    perl_sc_callback_t *cb;

    cb = (sc->data) ? (perl_sc_callback_t *)sc->data : get_new_cb();

    /* release previous callback */
    if ((cb->cb_f) &&
        (SvOK(cb->cb_f)))
      SvREFCNT_dec(cb->cb_f);

    return cb;
  }


  static perl_sc_callback_t *
  reuse_or_new_cb_exp_f(vrna_sc_t *sc)
  {
    perl_sc_callback_t *cb;

    cb = (sc->data) ? (perl_sc_callback_t *)sc->data : get_new_cb();

    /* release previous callback */
    if ((cb->cb_exp_f) &&
        (SvOK(cb->cb_exp_f)))
      SvREFCNT_dec(cb->cb_exp_f);

    return cb;
  }


  static perl_sc_callback_t *
  reuse_or_new_cb_data(vrna_sc_t *sc)
  {
    perl_sc_callback_t *cb;

    cb = (sc->data) ? (perl_sc_callback_t *)sc->data : get_new_cb();

    clean_cb_data(cb);

    return cb;
  }


  static void
  delete_perl_sc_callback(void *data)
  {
    perl_sc_callback_t *cb = (perl_sc_callback_t *)data;

    /* first delete user data */
    clean_cb_data(cb);

    /* now dispose of the registered callbacks */
    if ((cb->cb_f) &&
        (SvOK(cb->cb_f)))
      SvREFCNT_dec(cb->cb_f);

    if ((cb->cb_bt) &&
        (SvOK(cb->cb_bt)))
      SvREFCNT_dec(cb->cb_bt);

    if ((cb->cb_exp_f) &&
        (SvOK(cb->cb_exp_f)))
      SvREFCNT_dec(cb->cb_exp_f);

    /* finally free pycallback */
    free(cb);
  }


  static int
  sc_add_f_perl_callback(vrna_fold_compound_t *vc,
                         SV                   *callback)
  {
    unsigned int        s;

    perl_sc_callback_t  *cb;

    switch (vc->type) {
      case VRNA_FC_TYPE_SINGLE:
        /* check whether PerlFunc actually is a reference to a Perl subroutine */
        if (SvTYPE(SvRV(callback)) != SVt_PVCV) {
          fprintf(stderr,
                  "Warning: invalid argument for fold_compound::sc_add_f, must be code reference\n");
          return 0;
        } else if (vrna_sc_add_f(vc, &perl_wrap_sc_f_callback)) {
          /*
           *  The above call returns 0 on any error.
           *  Otherwise it binds the wrapper function and
           *  prepares the soft constraint data structure
           *  inside vc
           */

          /* now bind the Perl function to the wrapper structure */
          cb = reuse_or_new_cb_f(vc->sc);

          SvREFCNT_inc(callback); /* Increase referenc counter */
          cb->cb_f = callback;    /* remember callback */

          /* finaly bind callback wrapper to fold compound */
          vc->sc->data = (void *)cb;

          vc->sc->free_data = &delete_perl_sc_callback;

          return 1;
        }

        break;

      case VRNA_FC_TYPE_COMPARATIVE:
        /* Find out if the function argument actually is defined and an array reference */
        if ((SvOK(callback)) &&
            (SvROK(callback)) &&
            (SvTYPE(SvRV(callback)) == SVt_PVAV)) {
          if ((av_len((AV *)SvRV(callback)) + 1) < (int)vc->n_seq) {
            fprintf(stderr,
                    "Warning: invalid argument for fold_compound::sc_add_f: Too few code references in array\n");
            return 0;
          }

          if (!vc->scs)
            vrna_sc_init(vc);

          for (s = 0; s < vc->n_seq; s++) {
            /* first, dispose of previous callback if necessary */
            cb = reuse_or_new_cb_f(vc->scs[s]);

            /* try to retrieve one subroutine at a time */
            SV **f = av_fetch((AV *)SvRV(callback),
                              (SSize_t)s,
                              (I32)0);

            /* check if refrence retrieved is defined */
            if ((f) &&
                (SvOK(*f))) {
              /* warn if not a code refernce */
              if ((!SvROK(*f)) ||
                  (SvTYPE(SvRV(*f)) != SVt_PVCV)) {
                fprintf(stderr,
                        "Warning: invalid argument for fold_compound::sc_add_f, Not a code reference at %d\n",
                        s);
              } else {
                /* actually prepare and bind callback wrapper */
                SvREFCNT_inc(*f); /* Increase reference counter */
                cb->cb_f = *f;    /* remember callback */
              }
            }

            /* finaly bind callback wrapper to fold compound */
            vc->scs[s]->f         = &perl_wrap_sc_f_callback;
            vc->scs[s]->data      = (void *)cb;
            vc->scs[s]->free_data = &delete_perl_sc_callback;
          }

          return 1;
        } else {
          fprintf(stderr,
                  "Warning: invalid argument for fold_compound::sc_add_f, must be reference to array of code references\n");
        }

        break;
    }

    return 0;
  }


  static int
  sc_add_exp_f_perl_callback(vrna_fold_compound_t *vc,
                             SV                   *callback)
  {
    unsigned int        s;
    perl_sc_callback_t  *cb;

    switch (vc->type) {
      case VRNA_FC_TYPE_SINGLE:
        /* check whether PerlFunc actually is a reference to a Perl subroutine */
        if (SvTYPE(SvRV(callback)) != SVt_PVCV) {
          fprintf(stderr,
                  "Warning: invalid argument for fold_compound::sc_add_exp_f, must be code reference\n");
          return 0;
        } else if (vrna_sc_add_exp_f(vc, &perl_wrap_sc_exp_f_callback)) {
          /*
           *  The above call returns 0 on any error.
           *  Otherwise it binds the wrapper function and
           *  prepares the soft constraint data structure
           *  inside vc
           */

          /* now bind the python function to the wrapper structure */
          cb = reuse_or_new_cb_exp_f(vc->sc);

          SvREFCNT_inc(callback);   /* Increase referenc counter */
          cb->cb_exp_f = callback;  /* remember callback */

          /* finaly bind callback wrapper to fold compound */
          vc->sc->data = (void *)cb;

          vc->sc->free_data = &delete_perl_sc_callback;

          return 1;
        }

        break;

      case VRNA_FC_TYPE_COMPARATIVE:
        /* Find out if the function argument actually is defined and an array reference */
        if ((SvOK(callback)) &&
            (SvROK(callback)) &&
            (SvTYPE(SvRV(callback)) == SVt_PVAV)) {
          if ((av_len((AV *)SvRV(callback)) + 1) < (int)vc->n_seq) {
            fprintf(stderr,
                    "Warning: invalid argument for fold_compound::sc_add_exp_f: Too few code references in array\n");
            return 0;
          }

          if (!vc->scs)
            vrna_sc_init(vc);

          for (s = 0; s < vc->n_seq; s++) {
            /* first, dispose of previous callback if necessary */
            cb = reuse_or_new_cb_exp_f(vc->scs[s]);

            /* try to retrieve one subroutine at a time */
            SV **f = av_fetch((AV *)SvRV(callback),
                              (SSize_t)s,
                              (I32)0);

            /* check if refrence retrieved is defined */
            if ((f) &&
                (SvOK(*f))) {
              /* warn if not a code refernce */
              if ((!SvROK(*f)) ||
                  (SvTYPE(SvRV(*f)) != SVt_PVCV)) {
                fprintf(stderr,
                        "Warning: invalid argument for fold_compound::sc_add_exp_f, Not a code reference at %d\n",
                        s);
              } else {
                /* actually prepare and bind callback wrapper */
                SvREFCNT_inc(*f);   /* Increase reference counter */
                cb->cb_exp_f = *f;  /* remember callback */
              }
            }

            /* finaly bind callback wrapper to fold compound */
            vc->scs[s]->exp_f     = &perl_wrap_sc_exp_f_callback;
            vc->scs[s]->data      = (void *)cb;
            vc->scs[s]->free_data = &delete_perl_sc_callback;
          }

          return 1;
        } else {
          fprintf(stderr,
                  "Warning: invalid argument for fold_compound::sc_add_exp_f, must be reference to array of code references\n");
        }

        break;
    }

    return 0;
  }


  static int
  sc_add_bt_perl_callback(vrna_fold_compound_t  *vc,
                          SV                    *PerlFunc)
  {
    /* check whether PerlFunc actually is a reference to a Perl subroutine */
    if (SvTYPE(SvRV(PerlFunc)) != SVt_PVCV) {
      fprintf(stderr,
              "Warning: invalid argument for fold_compound::sc_add_bt, must be code reference\n");
      return 0;
    }

    /* try to dispose of previous callback */
    perl_sc_callback_t *cb;

    if (vrna_sc_add_bt(vc, &perl_wrap_sc_bt_callback)) {
      /* now bind the Perl function to the wrapper structure */
      if (vc->sc->data) {
        cb = (perl_sc_callback_t *)vc->sc->data;
        /* release previous callback */
        if ((cb->cb_bt) &&
            (SvOK(cb->cb_bt)))
          SvREFCNT_dec(cb->cb_bt);
      } else {
        cb = get_new_cb();
      }

      cb->cb_bt = PerlFunc;   /* remember callback */
      SvREFCNT_inc(PerlFunc); /* Increase referenc counter */

      /* finaly bind callback wrapper to fold compound */
      vc->sc->data      = (void *)cb;
      vc->sc->free_data = &delete_perl_sc_callback;

      return 1;
    }

    return 0;
  }


  static int
  sc_add_perl_data(vrna_fold_compound_t *vc,
                   SV                   *data,
                   SV                   *PerlFunc)
  {
    unsigned int        s;
    perl_sc_callback_t  *cb;

    switch (vc->type) {
      case VRNA_FC_TYPE_SINGLE:
        /* check whether data is defined */
        if (!SvOK(data)) {
          fprintf(stderr, "Warning: argument 1 for fold_compound::sc_add_data, must be defined\n");
          return 0;
        }

        /* check whether free-callback is defined and callable */
        if ((PerlFunc) &&
            (SvOK(PerlFunc))) {
          if (SvTYPE(SvRV(PerlFunc)) != SVt_PVCV) {
            fprintf(stderr,
                    "Warning: argument 2 for fold_compound::sc_add_data, must be undef or code reference\n");
            return 0;
          }
        }

        /* create soft constraints data structure */
        if (!vc->sc)
          vrna_sc_init(vc);

        /* try to dispose of previous data */
        cb = reuse_or_new_cb_data(vc->sc);

        cb->data        = data;     /* remember data */
        cb->delete_data = PerlFunc; /* remember delete data function */
        /* increase reference counter */
        if ((data) &&
            (SvOK(data)))
          SvREFCNT_inc(data);

        if ((PerlFunc) &&
            (SvOK(PerlFunc)))
          SvREFCNT_inc(PerlFunc);

        vc->sc->data      = (void *)cb;
        vc->sc->free_data = &delete_perl_sc_callback;

        return 1;

        break;

      case VRNA_FC_TYPE_COMPARATIVE:
        int data_good, free_data_good;

        data_good = free_data_good = 0;

        /* Find out if the data argument actually is defined and an array reference */
        if ((SvOK(data)) &&
            (SvROK(data)) &&
            (SvTYPE(SvRV(data)) == SVt_PVAV)) {
          if ((av_len((AV *)SvRV(data)) + 1) < (int)vc->n_seq) {
            fprintf(stderr,
                    "Warning: invalid argument for fold_compound::sc_add_data: Too few code references in array\n");
            return 0;
          }

          data_good = 1;
        }

        if ((SvOK(PerlFunc)) &&
            (SvROK(PerlFunc)) &&
            (SvTYPE(SvRV(PerlFunc)) == SVt_PVAV))
          if ((av_len((AV *)SvRV(PerlFunc)) + 1) >= (int)vc->n_seq)
            free_data_good = 1;

        if (data_good) {
          if (!vc->scs)
            vrna_sc_init(vc);

          for (s = 0; s < vc->n_seq; s++) {
            /* first, dispose of previous callback if necessary */
            cb = reuse_or_new_cb_data(vc->scs[s]);

            /* try to retrieve one subroutine at a time */
            SV **d = av_fetch((AV *)SvRV(data),
                              (SSize_t)s,
                              (I32)0);

            /* check if refrence retrieved is defined */
            if ((d) &&
                (SvOK(*d))) {
              /* actually prepare and bind callback wrapper */
              SvREFCNT_inc(*d); /* Increase reference counter */
              cb->data = *d;    /* remember data */
            }

            if (free_data_good) {
              SV **f = av_fetch((AV *)SvRV(PerlFunc),
                                (SSize_t)s,
                                (I32)0);

              if ((f) &&
                  (SvOK(*f))) {
                /* warn if not a code refernce */
                if ((!SvROK(*f)) ||
                    (SvTYPE(SvRV(*f)) != SVt_PVCV)) {
                  fprintf(stderr,
                          "Warning: invalid argument for fold_compound::sc_add_data, Not a code reference at %d\n",
                          s);
                } else {
                  /* actually prepare and bind callback wrapper */
                  SvREFCNT_inc(*f);     /* Increase reference counter */
                  cb->delete_data = *f; /* remember callback */
                }
              }
            }

            /* finaly bind callback wrapper to fold compound */
            vc->scs[s]->data      = (void *)cb;
            vc->scs[s]->free_data = &delete_perl_sc_callback;
          }

          return 1;
        }

        break;
    }

    return 0;
  }


  static int
  perl_wrap_sc_f_callback(int           i,
                          int           j,
                          int           k,
                          int           l,
                          unsigned char d,
                          void          *data)
  {
    int                 ret, count;
    SV                  *func;

    perl_sc_callback_t  *cb = (perl_sc_callback_t *)data;

    func = cb->cb_f;

    ret = 0;

    if (func && SvOK(func)) {
      dSP;

      SV  *err_tmp;
      I32 ax; /* expected by ST(x) macro */

      /* call Perl subroutine */
      ENTER;
      SAVETMPS;
      PUSHMARK(SP);

      SV  *pSVi = sv_newmortal();
      sv_setiv(pSVi, (IV)i);
      XPUSHs(pSVi);
      SV  *pSVj = sv_newmortal();
      sv_setiv(pSVj, (IV)j);
      XPUSHs(pSVj);
      SV  *pSVk = sv_newmortal();
      sv_setiv(pSVk, (IV)k);
      XPUSHs(pSVk);
      SV  *pSVl = sv_newmortal();
      sv_setiv(pSVl, (IV)l);
      XPUSHs(pSVl);
      SV  *pSVd = sv_newmortal();
      sv_setiv(pSVd, (IV)d);
      XPUSHs(pSVd);

      if (cb->data && SvOK(cb->data))        /* add data object to perl stack (if any) */
        XPUSHs(cb->data);

      PUTBACK;

      count = perl_call_sv(func, G_EVAL | G_ARRAY);

      SPAGAIN; /* refresh local copy of the perl stack pointer */

      /* prepare the stack such that we can use the ST(x) macro */
      SP  -= count;
      ax  = (SP - PL_stack_base) + 1;

      /* Check the eval first */
      err_tmp = ERRSV;
      if (SvTRUE(err_tmp)) {
        croak("Some error occurred while executing generic soft constraint callback - %s\n",
              SvPV_nolen(err_tmp));
        POPs;
      } else {
        /* we expect a single value to be returned */
        if (count != 1)         /* more or less than 1 return value */
          croak("Generic soft constraint callback must return exactly 1 item\n");
        else if (!SvOK(ST(0)))  /* return value is undefined */
          croak("Generic soft constraint callback must not return undef\n");
        else if (!SvIOK(ST(0))) /* return value is not an integer scalar */
          croak("Generic soft constraint callback must return pseudo energy value\n");
        else
          ret = SvIV(ST(0));
      }

      PUTBACK;
      FREETMPS;
      LEAVE;
    }

    return ret;
  }


  static FLT_OR_DBL
  perl_wrap_sc_exp_f_callback(int           i,
                              int           j,
                              int           k,
                              int           l,
                              unsigned char d,
                              void          *data)
  {
    int                 count;
    FLT_OR_DBL          ret;
    SV                  *func;

    perl_sc_callback_t  *cb = (perl_sc_callback_t *)data;

    func  = cb->cb_f;
    ret   = 1.0;

    if (SvOK(func)) {
      dSP;

      SV  *err_tmp;
      I32 ax; /* expected by ST(x) macro */

      /* call Perl subroutine */
      ENTER;
      SAVETMPS;
      PUSHMARK(SP);

      SV  *pSVi = sv_newmortal();
      sv_setiv(pSVi, (IV)i);
      XPUSHs(pSVi);
      SV  *pSVj = sv_newmortal();
      sv_setiv(pSVj, (IV)j);
      XPUSHs(pSVj);
      SV  *pSVk = sv_newmortal();
      sv_setiv(pSVk, (IV)k);
      XPUSHs(pSVk);
      SV  *pSVl = sv_newmortal();
      sv_setiv(pSVl, (IV)l);
      XPUSHs(pSVl);
      SV  *pSVd = sv_newmortal();
      sv_setiv(pSVd, (IV)d);
      XPUSHs(pSVd);

      if (cb->data && SvOK(cb->data))        /* add data object to perl stack (if any) */
        XPUSHs(cb->data);

      PUTBACK;

      count = perl_call_sv(func, G_EVAL | G_ARRAY);

      SPAGAIN; /* refresh local copy of the perl stack pointer */

      /* prepare the stack such that we can use the ST(x) macro */
      SP  -= count;
      ax  = (SP - PL_stack_base) + 1;

      /* Check the eval first */
      err_tmp = ERRSV;
      if (SvTRUE(err_tmp)) {
        croak(
          "Some error occurred while executing generic soft constraint callback (partition function) - %s\n",
          SvPV_nolen(err_tmp));
        POPs;
      } else {
        /* we expect a single value to be returned */
        if (count != 1)         /* more or less than 1 return value */
          croak("Generic soft constraint callback (partition function) must return exactly 1 item\n");
        else if (!SvOK(ST(0)))  /* return value is undefined */
          croak("Generic soft constraint callback (partition function) must not return undef\n");
        else if (!SvIOK(ST(0))) /* return value is not an integer scalar */
          croak(
            "Generic soft constraint callback (partition function) must return Boltzmann weighted pseudo energy value\n");
        else
          ret = SvIV(ST(0));
      }

      PUTBACK;
      FREETMPS;
      LEAVE;
    }

    return ret;
  }


  static vrna_basepair_t *
  perl_wrap_sc_bt_callback(int            i,
                           int            j,
                           int            k,
                           int            l,
                           unsigned char  d,
                           void           *data)
  {
    int                 c, count, len, num_pairs;
    SV                  *func, *bp;
    perl_sc_callback_t  *cb = (perl_sc_callback_t *)data;
    vrna_basepair_t     *ptr, *pairs = NULL;

    func = cb->cb_bt;

    /* compose function call */
    if (SvOK(func)) {
      dSP;

      SV *err_tmp;

      ENTER;
      SAVETMPS;
      PUSHMARK(SP);

      SV  *pSVi = sv_newmortal();
      sv_setiv(pSVi, (IV)i);
      XPUSHs(pSVi);
      SV  *pSVj = sv_newmortal();
      sv_setiv(pSVj, (IV)j);
      XPUSHs(pSVj);
      SV  *pSVk = sv_newmortal();
      sv_setiv(pSVk, (IV)k);
      XPUSHs(pSVk);
      SV  *pSVl = sv_newmortal();
      sv_setiv(pSVl, (IV)l);
      XPUSHs(pSVl);
      SV  *pSVd = sv_newmortal();
      sv_setiv(pSVd, (IV)d);
      XPUSHs(pSVd);

      if (cb->data && SvOK(cb->data))        /* add data object to perl stack (if any) */
        XPUSHs(cb->data);

      PUTBACK;

      count = perl_call_sv(func, G_EVAL | G_ARRAY);

      SPAGAIN;

      /* Check the eval first */
      err_tmp = ERRSV;
      if (SvTRUE(err_tmp)) {
        croak(
          "Some error occurred while executing generic soft constraint backtrack callback - %s\n",
          SvPV_nolen(err_tmp));
        POPs;
        PUTBACK;
        FREETMPS;
        LEAVE;
        return NULL;
      } else if (count == 0) {
        /* no additional base pairs */
        PUTBACK;
        FREETMPS;
        LEAVE;
        return NULL;
      } else {
        /* when we get here, we should have got an array of something */
        len       = 10;
        num_pairs = 0;
        pairs     = (vrna_basepair_t *)vrna_alloc(sizeof(vrna_basepair_t) * len);
        /* result should be list of pairs */
        for (c = 0; c < count; c++) {
          /* pop SV off the stack */
          bp = POPs;
          /* if list entry is defined and a reference */
          if (SvOK(bp) && SvROK(bp)) {
            /* maybe the user was so kind to create a list of vrna_basepair_t? */
            if (SWIG_ConvertPtr(bp, (void **)&ptr, SWIGTYPE_p_vrna_basepair_t,
                                SWIG_POINTER_EXCEPTION) == 0) {
              pairs[num_pairs] = *ptr;
              num_pairs++;
            } else if (SvTYPE(SvRV(bp)) == SVt_PVHV) {
              /* check whether we've got a reference to a hash */
              HV *pair = (HV *)SvRV(bp);
              /* check whether the hash has 'i' and 'j' keys */
              if (hv_exists(pair, "i", 1) && hv_exists(pair, "j", 1)) {
                pairs[num_pairs].i  = (int)SvIV(*hv_fetch(pair, "i", 1, 0));
                pairs[num_pairs].j  = (int)SvIV(*hv_fetch(pair, "j", 1, 0));
                num_pairs++;
              }
            } else if (SvTYPE(SvRV(bp)) == SVt_PVAV) {
              /* check whether we've got a refrence to an array */
              AV *pair = (AV *)SvRV(bp);
              if (av_len(pair) == 1) {
                /* size of array must be 2, av_len() returns highest index */
                SV  **pair_i  = av_fetch(pair, 0, 0);
                SV  **pair_j  = av_fetch(pair, 1, 0);
                if (pair_i && pair_j) {
                  pairs[num_pairs].i  = (int)SvIV(*pair_i);
                  pairs[num_pairs].j  = (int)SvIV(*pair_j);
                  num_pairs++;
                }
              }
            } else {
              continue;
            }
          }

          /* increase length if necessary */
          if (num_pairs == len) {
            len   = (int)(1.2 * len);
            pairs = (vrna_basepair_t *)vrna_realloc(pairs, sizeof(vrna_basepair_t) * len);
          }
        }
      }

      /* put end marker in list */
      pairs[num_pairs].i  = pairs[num_pairs].j = 0;
      pairs               =
        (vrna_basepair_t *)vrna_realloc(pairs, sizeof(vrna_basepair_t) * (num_pairs + 1));

      PUTBACK;
      FREETMPS;
      LEAVE;
    }

    return pairs;
  }





typedef struct {
  SV  *prod_rule;
  SV  *exp_prod_rule;
  SV  *energy;
  SV  *exp_energy;
  SV  *data;
  SV  *delete_data;
  SV  *prob_add;
  SV  *prob_get;
} perl5_ud_callback_t;

static vrna_callback_ud_production      perl5_wrap_ud_prod_rule;
static vrna_callback_ud_exp_production  perl5_wrap_ud_exp_prod_rule;
static vrna_callback_ud_energy          perl5_wrap_ud_energy;
static vrna_callback_ud_exp_energy      perl5_wrap_ud_exp_energy;
static vrna_callback_ud_probs_add       perl5_wrap_ud_prob_add;
static vrna_callback_ud_probs_get       perl5_wrap_ud_prob_get;

static perl5_ud_callback_t *
new_perl_ud_cb(void){

  perl5_ud_callback_t *cb = (perl5_ud_callback_t *)vrna_alloc(sizeof(perl5_ud_callback_t));

  cb->prod_rule     = NULL;
  cb->exp_prod_rule = NULL;
  cb->energy        = NULL;
  cb->exp_energy    = NULL;
  cb->data          = NULL;
  cb->delete_data   = NULL;
  cb->prob_add      = NULL;
  cb->prob_get      = NULL;

  return cb;
}



static void
delete_perl_ud_callback(void * data){

  perl5_ud_callback_t *cb = (perl5_ud_callback_t *)data;
  /* first delete user data */
  if(cb->data && SvOK(cb->data)){
    if(cb->delete_data && SvOK(cb->delete_data)){
      dSP;

      SV *err_tmp;

      ENTER;
      SAVETMPS;
      PUSHMARK(SP);

      XPUSHs(cb->data);
      PUTBACK;

      perl_call_sv(cb->delete_data, G_EVAL | G_DISCARD);

      SPAGAIN;

      /* Check the eval first */
      err_tmp = ERRSV;
      if (SvTRUE(err_tmp)) {
        croak ("Some error occurred while executing unstructured domains delete_data() callback - %s\n", SvPV_nolen(err_tmp));
      }

      FREETMPS;
      LEAVE;
      SvREFCNT_dec(cb->delete_data);
    }
    SvREFCNT_dec(cb->data);
  }

  /* now dispose of the registered callbacks */
  if(cb->prod_rule && SvOK(cb->prod_rule))
    SvREFCNT_dec(cb->prod_rule);
  if(cb->exp_prod_rule && SvOK(cb->exp_prod_rule))
    SvREFCNT_dec(cb->exp_prod_rule);
  if(cb->energy && SvOK(cb->energy))
    SvREFCNT_dec(cb->energy);
  if(cb->exp_energy && SvOK(cb->exp_energy))
    SvREFCNT_dec(cb->exp_energy);
  if(cb->prob_add && SvOK(cb->prob_add))
    SvREFCNT_dec(cb->prob_add);
  if(cb->prob_get && SvOK(cb->prob_get))
    SvREFCNT_dec(cb->prob_get);

  /* finally free callback */
  free(cb);
}


static void
ud_set_data(vrna_fold_compound_t *vc,
            SV *data,
            SV *PerlFunc){

  if(!SvOK(data)){
    fprintf(stderr, "Warning: argument 1 for fold_compound::ud_set_data must be defined\n");
    return;
  }

  /* check whether PerlFunc actually is a reference to a Perl subroutine */
  if(PerlFunc && SvOK(PerlFunc)){
    if(SvTYPE(SvRV(PerlFunc)) != SVt_PVCV){
      fprintf(stderr, "Warning: argument 2 for fold_compound::ud_set_data must be undef or code reference\n");
      return;
    }
  }

  perl5_ud_callback_t * cb;
  /* try to dispose of previous data */
  if(vc->domains_up && vc->domains_up->data){
    cb = (perl5_ud_callback_t *)vc->domains_up->data;
    if(cb->data && SvOK(cb->data)){
      if(cb->delete_data && SvOK(cb->delete_data)){
        dSP;

        SV *err_tmp;

        /* call Perl subroutine */
        ENTER;
        SAVETMPS;
        PUSHMARK(SP);

        XPUSHs(cb->data);
        PUTBACK;

        perl_call_sv(cb->delete_data, G_EVAL | G_DISCARD);

        SPAGAIN;

        /* Check the eval first */
        err_tmp = ERRSV;
        if (SvTRUE(err_tmp)) {
          croak ("Some error occurred while executing unstructured domains delete_data() callback - %s\n", SvPV_nolen(err_tmp));
        }

        FREETMPS;
        LEAVE;
        SvREFCNT_dec(cb->delete_data);
      }
      SvREFCNT_dec(cb->data);
    }
  } else {
    cb  = new_perl_ud_cb();
  }
  cb->data        = data;     /* remember data */
  cb->delete_data = PerlFunc; /* remember delete data function */
  /* increase reference counter */
  if(data && SvOK(data))
    SvREFCNT_inc(data);
  if(PerlFunc && SvOK(PerlFunc))
    SvREFCNT_inc(PerlFunc);

  /* bind callback wrapper to fold compound */
  vrna_ud_set_data(vc, (void *)cb, &delete_perl_ud_callback);
}

static void
ud_set_prod_rule_cb(vrna_fold_compound_t *vc,
                    SV *prod_cb,
                    SV *eval_cb){

  /* check whether prod_cb and eval_cb are references to Perl subroutines */
  if(SvTYPE(SvRV(prod_cb)) != SVt_PVCV){
    fprintf(stderr, "Warning: invalid argument 1 for fold_compound::ud_set_prod_rule_cb must be code reference\n");
    return;
  }
  if(SvTYPE(SvRV(eval_cb)) != SVt_PVCV){
    fprintf(stderr, "Warning: invalid argument 2 for fold_compound::ud_set_prod_rule_cb must be code reference\n");
    return;
  }

  /* try to dispose of previous callback */
  perl5_ud_callback_t * cb;

  /* now bind the python function to the wrapper structure */
  if(vc->domains_up && vc->domains_up->data){
    cb = (perl5_ud_callback_t *)vc->domains_up->data;
    /* release previous callbacks */
    if(cb->prod_rule && SvOK(cb->prod_rule))
      SvREFCNT_dec(cb->prod_rule);
    if(cb->energy && SvOK(cb->energy))
      SvREFCNT_dec(cb->energy);
  } else {
    cb = new_perl_ud_cb();
    vrna_ud_set_data(vc, (void *)cb, &delete_perl_ud_callback);
  }
  cb->prod_rule = prod_cb;      /* remember callback */
  cb->energy    = eval_cb;      /* remember callback */
  SvREFCNT_inc(prod_cb);   /* Increase reference counter */
  SvREFCNT_inc(eval_cb);   /* Increase reference counter */

  vrna_ud_set_prod_rule_cb(vc, &perl5_wrap_ud_prod_rule, &perl5_wrap_ud_energy);
}

static void
ud_set_exp_prod_rule_cb(vrna_fold_compound_t *vc,
                        SV *prod_cb,
                        SV *eval_cb){

  /* check whether prod_cb and eval_cb are references to Perl subroutines */
  if(SvTYPE(SvRV(prod_cb)) != SVt_PVCV){
    fprintf(stderr, "Warning: invalid argument 1 for fold_compound::ud_set_exp_prod_rule_cb must be code reference\n");
    return;
  }
  if(SvTYPE(SvRV(eval_cb)) != SVt_PVCV){
    fprintf(stderr, "Warning: invalid argument 2 for fold_compound::ud_set_exp_prod_rule_cb must be code reference\n");
    return;
  }

  /* try to dispose of previous callback */
  perl5_ud_callback_t * cb;

  /* now bind the python function to the wrapper structure */
  if(vc->domains_up && vc->domains_up->data){
    cb = (perl5_ud_callback_t *)vc->domains_up->data;
    /* release previous callbacks */
    if(cb->exp_prod_rule && SvOK(cb->exp_prod_rule))
      SvREFCNT_dec(cb->exp_prod_rule);
    if(cb->exp_energy && SvOK(cb->exp_energy))
      SvREFCNT_dec(cb->exp_energy);
  } else {
    cb = new_perl_ud_cb();
    vrna_ud_set_data(vc, (void *)cb, &delete_perl_ud_callback);
  }
  cb->exp_prod_rule = prod_cb;      /* remember callback */
  cb->exp_energy    = eval_cb;      /* remember callback */
  SvREFCNT_inc(prod_cb);   /* Increase reference counter */
  SvREFCNT_inc(eval_cb);   /* Increase reference counter */

  vrna_ud_set_exp_prod_rule_cb(vc, &perl5_wrap_ud_exp_prod_rule, &perl5_wrap_ud_exp_energy);
}

static void
ud_set_prob_cb( vrna_fold_compound_t *vc,
                SV *setter,
                SV *getter){

  /* check whether prod_cb and eval_cb are references to Perl subroutines */
  if(SvTYPE(SvRV(setter)) != SVt_PVCV){
    fprintf(stderr, "Warning: invalid argument 1 for fold_compound::ud_set_prob_cb must be code reference\n");
    return;
  }
  if(SvTYPE(SvRV(getter)) != SVt_PVCV){
    fprintf(stderr, "Warning: invalid argument 2 for fold_compound::ud_set_prob_cb must be code reference\n");
    return;
  }

  /* try to dispose of previous callback */
  perl5_ud_callback_t * cb;

  /* now bind the python function to the wrapper structure */
  if(vc->domains_up && vc->domains_up->data){
    cb = (perl5_ud_callback_t *)vc->domains_up->data;
    /* release previous callbacks */
    if(cb->prob_add && SvOK(cb->prob_add))
      SvREFCNT_dec(cb->prob_add);
    if(cb->prob_get && SvOK(cb->prob_get))
      SvREFCNT_dec(cb->prob_get);
  } else {
    cb = new_perl_ud_cb();
    vrna_ud_set_data(vc, (void *)cb, &delete_perl_ud_callback);
  }
  cb->prob_add = setter;  /* remember callback */
  cb->prob_get = getter;  /* remember callback */
  SvREFCNT_inc(setter);   /* Increase reference counter */
  SvREFCNT_inc(getter);   /* Increase reference counter */

  vrna_ud_set_prob_cb(vc, &perl5_wrap_ud_prob_add, &perl5_wrap_ud_prob_get);
}


static void
perl5_wrap_ud_prod_rule(vrna_fold_compound_t *vc,
                        void *data){

  SV *func;
  perl5_ud_callback_t *cb = (perl5_ud_callback_t *)data;
  func = cb->prod_rule;

  if(func && SvOK(func)){
    dSP;

    SV *err_tmp;

    /* call Perl subroutine */
    ENTER;
    SAVETMPS;
    PUSHMARK(SP);

    if(cb->data && SvOK(cb->data))  /* add data object to perl stack (if any) */
      XPUSHs(cb->data);
    PUTBACK;

    perl_call_sv(func, G_EVAL | G_DISCARD);

    SPAGAIN;

    /* Check the eval first */
    err_tmp = ERRSV;
    if (SvTRUE(err_tmp)) {
      croak ("Some error occurred while executing unstructured domains production rule callback - %s\n", SvPV_nolen(err_tmp));
    }

    FREETMPS;
    LEAVE;
  }

  return /*void*/;
}


static void
perl5_wrap_ud_exp_prod_rule(vrna_fold_compound_t *vc,
                            void *data){

  SV *func;
  perl5_ud_callback_t *cb = (perl5_ud_callback_t *)data;
  func = cb->exp_prod_rule;

  if(func && SvOK(func)){
    dSP;

    SV *err_tmp;

    /* call Perl subroutine */
    ENTER;
    SAVETMPS;
    PUSHMARK(SP);

    if(cb->data && SvOK(cb->data))  /* add data object to perl stack (if any) */
      XPUSHs(cb->data);
    PUTBACK;

    perl_call_sv(func, G_EVAL | G_DISCARD);

    SPAGAIN;

    /* Check the eval first */
    err_tmp = ERRSV;
    if (SvTRUE(err_tmp)) {
      croak ("Some error occurred while executing unstructured domains production rule callback (partition function) - %s\n", SvPV_nolen(err_tmp));
    }

    FREETMPS;
    LEAVE;
  }

  return /*void*/;
}


static int
perl5_wrap_ud_energy( vrna_fold_compound_t *vc,
                      int i,
                      int j,
                      unsigned int looptype,
                      void *data){

  int ret, count;
  SV *func;
  perl5_ud_callback_t *cb = (perl5_ud_callback_t *)data;

  func = cb->energy;

  ret = 0;

  if(func && SvOK(func)){
    dSP;

    SV  *err_tmp;
    I32 ax; /* expected by ST(x) macro */

    /* call Perl subroutine */
    ENTER;
    SAVETMPS;
    PUSHMARK(SP);

    SV* pSVi = sv_newmortal();
    sv_setiv(pSVi, (IV)i);
    XPUSHs(pSVi);
    SV* pSVj = sv_newmortal();
    sv_setiv(pSVj, (IV)j);
    XPUSHs(pSVj);
    SV* pSVt = sv_newmortal();
    sv_setiv(pSVt, (IV)looptype);
    XPUSHs(pSVt);

    if(cb->data && SvOK(cb->data))          /* add data object to perl stack (if any) */
      XPUSHs(cb->data);
    PUTBACK;

    count = perl_call_sv(func, G_EVAL | G_ARRAY);

    SPAGAIN; /* refresh local copy of the perl stack pointer */

    /* prepare the stack such that we can use the ST(x) macro */
    SP -= count;
    ax = (SP - PL_stack_base) + 1;

    /* Check the eval first */
    err_tmp = ERRSV;
    if (SvTRUE(err_tmp)) {
       croak ("Some error occurred while executing unstructured domains energy callback - %s\n", SvPV_nolen(err_tmp));
       POPs;
    } else {
      /* we expect a single value to be returned */
      if (count != 1) { /* more or less than 1 return value */
        croak("Unstructured domains energy callback must return exactly 1 item\n");
      } else if (!SvOK(ST(0))) { /* return value is undefined */
        croak("Unstructured domains energy callback must not return undef\n");
      } else if (!SvIOK(ST(0))) { /* return value is not an integer scalar */
        croak("Unstructured domains energy callback must return pseudo energy value\n");
      } else {
        ret = SvIV(ST(0));
      }
    }

    PUTBACK;
    FREETMPS;
    LEAVE;
  }

  return ret;
}


static FLT_OR_DBL
perl5_wrap_ud_exp_energy( vrna_fold_compound_t *vc,
                          int i,
                          int j,
                          unsigned int looptype,
                          void *data){

  int count;
  FLT_OR_DBL ret;
  SV *func;

  perl_sc_callback_t *cb = (perl_sc_callback_t *)data;

  func = cb->cb_f;
  ret = 1.0;

  if(SvOK(func)){
    dSP;

    SV  *err_tmp;
    I32 ax; /* expected by ST(x) macro */

    /* call Perl subroutine */
    ENTER;
    SAVETMPS;
    PUSHMARK(SP);

    SV* pSVi = sv_newmortal();
    sv_setiv(pSVi, (IV)i);
    XPUSHs(pSVi);
    SV* pSVj = sv_newmortal();
    sv_setiv(pSVj, (IV)j);
    XPUSHs(pSVj);
    SV* pSVt = sv_newmortal();
    sv_setiv(pSVt, (IV)looptype);
    XPUSHs(pSVt);

    if(cb->data && SvOK(cb->data))          /* add data object to perl stack (if any) */
      XPUSHs(cb->data);
    PUTBACK;

    count = perl_call_sv(func, G_EVAL | G_ARRAY);

    SPAGAIN; /* refresh local copy of the perl stack pointer */

    /* prepare the stack such that we can use the ST(x) macro */
    SP -= count;
    ax = (SP - PL_stack_base) + 1;

    /* Check the eval first */
    err_tmp = ERRSV;
    if (SvTRUE(err_tmp)) {
       croak ("Some error occurred while executing unstructured domains energy callback (partition function) - %s\n", SvPV_nolen(err_tmp));
       POPs;
    } else {
      /* we expect a single value to be returned */
      if (count != 1) { /* more or less than 1 return value */
        croak("Unstructured domains energy callback (partition function) must return exactly 1 item\n");
      } else if (!SvOK(ST(0))) { /* return value is undefined */
        croak("Unstructured domains energy callback (partition function) must not return undef\n");
      } else if (!SvNOK(ST(0))) { /* return value is not an integer scalar */
        croak("Unstructured domains energy callback (partition function) must return Boltzmann weighted pseudo energy value\n");
      } else {
        ret = (FLT_OR_DBL)SvNV(ST(0));
      }
    }

    PUTBACK;
    FREETMPS;
    LEAVE;
  }

  return ret;
}


static void
perl5_wrap_ud_prob_add( vrna_fold_compound_t *vc,
                        int i,
                        int j,
                        unsigned int looptype,
                        FLT_OR_DBL prob,
                        void *data){

  SV *func;
  perl5_ud_callback_t *cb = (perl5_ud_callback_t *)data;
  func = cb->prob_add;

  if(func && SvOK(func)){
    dSP;

    SV *err_tmp;

    /* call Perl subroutine */
    ENTER;
    SAVETMPS;
    PUSHMARK(SP);

    SV* pSVi = sv_newmortal();
    sv_setiv(pSVi, (IV)i);
    XPUSHs(pSVi);
    SV* pSVj = sv_newmortal();
    sv_setiv(pSVj, (IV)j);
    XPUSHs(pSVj);
    SV* pSVt = sv_newmortal();
    sv_setiv(pSVt, (IV)looptype);
    XPUSHs(pSVt);
    SV* pSVp = sv_newmortal();
    sv_setnv(pSVp, (double)prob);
    XPUSHs(pSVp);

    if(cb->data && SvOK(cb->data))  /* add data object to perl stack (if any) */
      XPUSHs(cb->data);
    PUTBACK;

    perl_call_sv(func, G_EVAL | G_DISCARD);

    SPAGAIN;

    /* Check the eval first */
    err_tmp = ERRSV;
    if (SvTRUE(err_tmp)) {
      croak ("Some error occurred while executing unstructured domains add_probability() callback - %s\n", SvPV_nolen(err_tmp));
    }

    FREETMPS;
    LEAVE;
  }

  return /*void*/;
}


static FLT_OR_DBL
perl5_wrap_ud_prob_get( vrna_fold_compound_t *vc,
                        int i,
                        int j,
                        unsigned int looptype,
                        int motif,
                        void *data){

  int count;
  FLT_OR_DBL ret;
  SV *func;
  perl5_ud_callback_t *cb = (perl5_ud_callback_t *)data;

  func  = cb->prob_add;
  ret   = 0.;

  if(SvOK(func)){
    dSP;

    SV  *err_tmp;
    I32 ax; /* expected by ST(x) macro */

    /* call Perl subroutine */
    ENTER;
    SAVETMPS;
    PUSHMARK(SP);

    SV* pSVi = sv_newmortal();
    sv_setiv(pSVi, (IV)i);
    XPUSHs(pSVi);
    SV* pSVj = sv_newmortal();
    sv_setiv(pSVj, (IV)j);
    XPUSHs(pSVj);
    SV* pSVt = sv_newmortal();
    sv_setiv(pSVt, (IV)looptype);
    XPUSHs(pSVt);
    SV* pSVm = sv_newmortal();
    sv_setiv(pSVm, (IV)motif);
    XPUSHs(pSVt);

    if(cb->data && SvOK(cb->data))          /* add data object to perl stack (if any) */
      XPUSHs(cb->data);
    PUTBACK;

    count = perl_call_sv(func, G_EVAL | G_ARRAY);

    SPAGAIN; /* refresh local copy of the perl stack pointer */

    /* prepare the stack such that we can use the ST(x) macro */
    SP -= count;
    ax = (SP - PL_stack_base) + 1;

    /* Check the eval first */
    err_tmp = ERRSV;
    if (SvTRUE(err_tmp)) {
      croak ("Some error occurred while executing unstructured domains get_probability() callback - %s\n", SvPV_nolen(err_tmp));
      POPs;
    } else {
      /* we expect a single value to be returned */
      if (count != 1) { /* more or less than 1 return value */
        croak("Unstructured domains get_probability() callback must return exactly 1 item\n");
      } else if (!SvOK(ST(0))) { /* return value is undefined */
        croak("Unstructured domains get_probability() callback must not return undef\n");
      } else if (!SvNOK(ST(0))) { /* return value is not an integer scalar */
        croak("Unstructured domains get_probability() callback must return probability\n");
      } else {
        ret = (FLT_OR_DBL)SvNV(ST(0));
      }
    }

    PUTBACK;
    FREETMPS;
    LEAVE;
  }

  return ret;
}




typedef struct {
  SV  *cb;
  SV  *data;
} perl_subopt_callback_t;

static perl_subopt_callback_t * bind_subopt_callback(SV *PerlFunc, SV *PerlData);

static void perl_wrap_subopt_cb(const char *stucture, float energy, void *data);

static perl_subopt_callback_t *
bind_subopt_callback(SV *PerlFunc, SV *PerlData){

  /* check whether PerlFunc actually is a reference to a Perl subroutine */
  if((!SvOK(PerlFunc)) || (SvTYPE(SvRV(PerlFunc)) != SVt_PVCV)){
    fprintf(stderr, "Warning: invalid argument 1 for fold_compound::subopt_cb, must be code reference\n");
    return NULL;
  }

  perl_subopt_callback_t *cb = (perl_subopt_callback_t *)vrna_alloc(sizeof(perl_subopt_callback_t));

  cb->cb = PerlFunc;      /* store callback */
  cb->data = PerlData;    /* bind data */

  return cb;
}

static void
perl_wrap_subopt_cb(const char *stucture, float energy, void *data){

  SV *func;
  perl_subopt_callback_t *cb = (perl_subopt_callback_t *)data;

  func  = cb->cb;

  if(func && SvOK(func)){
    dSP;

    SV *err_tmp;

    /* call Perl subroutine */
    ENTER;
    SAVETMPS;
    PUSHMARK(SP);

    SV *structureSV = sv_newmortal();
    SV *energySV    = sv_newmortal();
    /* add structure and free energy to perl stack */
    sv_setpv(structureSV, stucture);
    sv_setnv(energySV, (double)energy);
    XPUSHs(structureSV);
    XPUSHs(energySV);
    if(cb->data && SvOK(cb->data))          /* add data object to perl stack (if any) */
      XPUSHs(cb->data);
    PUTBACK;

    perl_call_sv(func, G_EVAL | G_DISCARD);

    SPAGAIN;

    err_tmp = ERRSV;
    if (SvTRUE(err_tmp)) {
      croak ("Some error occurred while executing subopt callback - %s\n", SvPV_nolen(err_tmp));
    }

    FREETMPS;
    LEAVE;
  }

  return /*void*/;
}




typedef struct {
  SV  *cb;
  SV  *data;
} perl_bs_callback_t;

static perl_bs_callback_t * bind_bs_callback(SV *PerlFunc, SV *PerlData);

static void perl_wrap_bs_cb(const char *stucture, void *data);

static perl_bs_callback_t *
bind_bs_callback(SV *PerlFunc, SV *PerlData){

  /* check whether PerlFunc actually is a reference to a Perl subroutine */
  if((!SvOK(PerlFunc)) || (SvTYPE(SvRV(PerlFunc)) != SVt_PVCV)){
    fprintf(stderr, "Warning: invalid argument 1 for fold_compound::pbacktrack*_cb, must be code reference\n");
    return NULL;
  }

  perl_bs_callback_t *cb = (perl_bs_callback_t *)vrna_alloc(sizeof(perl_bs_callback_t));

  cb->cb = PerlFunc;      /* store callback */
  cb->data = PerlData;    /* bind data */

  return cb;
}

static void
perl_wrap_bs_cb(const char *stucture, void *data){

  SV *func;
  perl_bs_callback_t *cb = (perl_bs_callback_t *)data;

  func  = cb->cb;

  if(func && SvOK(func)){
    dSP;

    SV *err_tmp;

    /* call Perl subroutine */
    ENTER;
    SAVETMPS;
    PUSHMARK(SP);

    SV *structureSV = sv_newmortal();
    /* add structure and free energy to perl stack */
    sv_setpv(structureSV, stucture);
    XPUSHs(structureSV);
    if(cb->data && SvOK(cb->data))          /* add data object to perl stack (if any) */
      XPUSHs(cb->data);
    PUTBACK;

    perl_call_sv(func, G_EVAL | G_DISCARD);

    SPAGAIN;

    err_tmp = ERRSV;
    if (SvTRUE(err_tmp)) {
      croak ("Some error occurred while executing Boltzmann sampling callback - %s\n", SvPV_nolen(err_tmp));
    }

    FREETMPS;
    LEAVE;
  }

  return /*void*/;
}




typedef struct {
  SV  *cb;
  SV  *data;
} perl_mfe_window_callback_t;

static perl_mfe_window_callback_t * bind_mfe_window_callback(SV *PerlFunc, SV *PerlData);

static void perl_wrap_mfe_window_cb(int start, int end, const char *stucture, float energy, void *data);

#ifdef VRNA_WITH_SVM
static void perl_wrap_mfe_window_zscore_cb(int start, int end, const char *stucture, float energy, float zscore, void *data);
#endif

static perl_mfe_window_callback_t *
bind_mfe_window_callback(SV *PerlFunc, SV *PerlData){

  /* check whether PerlFunc actually is a reference to a Perl subroutine */
  if((!SvOK(PerlFunc)) || (SvTYPE(SvRV(PerlFunc)) != SVt_PVCV)){
    fprintf(stderr, "Warning: invalid argument 1 for fold_compound::mfe_window_cb, must be code reference\n");
    return NULL;
  }

  perl_mfe_window_callback_t *cb = (perl_mfe_window_callback_t *)vrna_alloc(sizeof(perl_mfe_window_callback_t));

  cb->cb = PerlFunc;      /* store callback */
  cb->data = PerlData;    /* bind data */

  return cb;
}

static void
perl_wrap_mfe_window_cb(int start, int end, const char *stucture, float energy, void *data){

  SV *func;
  perl_mfe_window_callback_t *cb = (perl_mfe_window_callback_t *)data;

  func  = cb->cb;

  if(func && SvOK(func)){
    dSP;

    SV *err_tmp;

    /* call Perl subroutine */
    ENTER;
    SAVETMPS;
    PUSHMARK(SP);

    SV *startSV     = sv_newmortal();
    SV *stopSV      = sv_newmortal();
    SV *structureSV = sv_newmortal();
    SV *energySV    = sv_newmortal();
    /* add start, end, structure, and free energy to perl stack */
    sv_setiv(startSV, (IV)start);
    sv_setiv(stopSV, (IV)end);
    sv_setpv(structureSV, stucture);
    sv_setnv(energySV, (double)energy);
    XPUSHs(startSV);
    XPUSHs(stopSV);
    XPUSHs(structureSV);
    XPUSHs(energySV);
    if(cb->data && SvOK(cb->data))          /* add data object to perl stack (if any) */
      XPUSHs(cb->data);
    PUTBACK;

    perl_call_sv(func, G_EVAL | G_DISCARD);

    SPAGAIN;

    err_tmp = ERRSV;
    if (SvTRUE(err_tmp)) {
      croak ("Some error occurred while executing sliding window MFE callback - %s\n", SvPV_nolen(err_tmp));
    }

    FREETMPS;
    LEAVE;
  }

  return /*void*/;
}

#ifdef VRNA_WITH_SVM
static void
perl_wrap_mfe_window_zscore_cb(int start, int end, const char *stucture, float energy, float zscore, void *data){

  SV *func;
  perl_mfe_window_callback_t *cb = (perl_mfe_window_callback_t *)data;

  func  = cb->cb;

  if(func && SvOK(func)){
    dSP;

    SV *err_tmp;

    /* call Perl subroutine */
    ENTER;
    SAVETMPS;
    PUSHMARK(SP);

    SV *startSV     = sv_newmortal();
    SV *stopSV      = sv_newmortal();
    SV *structureSV = sv_newmortal();
    SV *energySV    = sv_newmortal();
    SV *zscoreSV    = sv_newmortal();
    /* add start, end, structure, and free energy to perl stack */
    sv_setiv(startSV, (IV)start);
    sv_setiv(stopSV, (IV)end);
    sv_setpv(structureSV, stucture);
    sv_setnv(energySV, (double)energy);
    sv_setnv(zscoreSV, (double)zscore);
    XPUSHs(startSV);
    XPUSHs(stopSV);
    XPUSHs(structureSV);
    XPUSHs(energySV);
    XPUSHs(zscoreSV);
    if(cb->data && SvOK(cb->data))          /* add data object to perl stack (if any) */
      XPUSHs(cb->data);
    PUTBACK;

    perl_call_sv(func, G_EVAL | G_DISCARD);

    SPAGAIN;

    err_tmp = ERRSV;
    if (SvTRUE(err_tmp)) {
      croak ("Some error occurred while executing sliding window MFE callback (z-score) - %s\n", SvPV_nolen(err_tmp));
    }

    FREETMPS;
    LEAVE;
  }

  return /*void*/;
}
#endif



  float my_Lfold_cb(char *string, int window_size, SV *PerlFunc, SV *PerlData = NULL) {
    float en;
    perl_mfe_window_callback_t *cb = bind_mfe_window_callback(PerlFunc, PerlData);
    en = vrna_Lfold_cb(string, window_size, &perl_wrap_mfe_window_cb, (void *)cb);
    free(cb);
    return en;
  }

#ifdef VRNA_WITH_SVM
  float my_Lfoldz_cb(char *string, int window_size, double min_z, SV *PerlFunc, SV *PerlData = NULL) {
    float en;
    perl_mfe_window_callback_t *cb = bind_mfe_window_callback(PerlFunc, PerlData);
    en = vrna_Lfoldz_cb(string, window_size, min_z, &perl_wrap_mfe_window_zscore_cb, (void *)cb);
    free(cb);
    return en;
  }
#endif

  float my_aliLfold_cb(std::vector<std::string> alignment, int window_size, SV *PerlFunc, SV *PerlData = NULL) {
    float en;
    perl_mfe_window_callback_t *cb = bind_mfe_window_callback(PerlFunc, PerlData);
    std::vector<const char*>  vc;
    std::transform(alignment.begin(), alignment.end(), std::back_inserter(vc), convert_vecstring2veccharcp);
    vc.push_back(NULL); /* mark end of sequences */
    en = vrna_aliLfold_cb((const char **)&vc[0], window_size, &perl_wrap_mfe_window_cb, (void *)cb);
    free(cb);
    return en;
  }




typedef struct {
  SV  *cb;
  SV  *data;
} perl_pf_window_callback_t;

static perl_pf_window_callback_t * bind_pf_window_callback(SV *PerlFunc, SV *PerlData);

static void perl_wrap_pf_window_cb(FLT_OR_DBL *pr, int pr_size, int i, int max, unsigned int type, void *data);

static perl_pf_window_callback_t *
bind_pf_window_callback(SV *PerlFunc, SV *PerlData){

  /* check whether PerlFunc actually is a reference to a Perl subroutine */
  if((!SvOK(PerlFunc)) || (SvTYPE(SvRV(PerlFunc)) != SVt_PVCV)){
    fprintf(stderr, "Warning: invalid argument 1 for fold_compound::probs_window, must be code reference\n");
    return NULL;
  }

  perl_pf_window_callback_t *cb = (perl_pf_window_callback_t *)vrna_alloc(sizeof(perl_pf_window_callback_t));

  cb->cb = PerlFunc;      /* store callback */
  cb->data = PerlData;    /* bind data */

  return cb;
}

static void
perl_wrap_pf_window_cb(FLT_OR_DBL *pr, int pr_size, int i, int max, unsigned int type, void *data){

  SV  *func, *pr_sizeSV, *iSV, *maxSV, *typeSV;
  AV  *prAV;

  perl_pf_window_callback_t *cb = (perl_pf_window_callback_t *)data;

  func  = cb->cb;

  if(func && SvOK(func)){
    dSP;

    SV *err_tmp;

    /* call Perl subroutine */
    ENTER;
    SAVETMPS;
    PUSHMARK(SP);

    pr_sizeSV = sv_newmortal();
    iSV       = sv_newmortal();
    maxSV     = sv_newmortal();
    typeSV    = sv_newmortal();

    prAV = (AV *)sv_2mortal((SV *)newAV()); /* newAV(); */

    if (type & VRNA_PROBS_WINDOW_UP) { /* We distinguish output for unpaired probabilities */

      /* 0th element */
      av_push(prAV, newSV(0));

      /* actual values in range [1, MIN(i, max)] */
      for (int cnt = 1; cnt <= pr_size; cnt++)
        av_push(prAV, newSVnv((double)pr[cnt]));

      /* empty values in range [0,i - 1] */
      for (int cnt = pr_size + 1; cnt <= max; cnt++)
        av_push(prAV, newSV(0));

    } else { /* and pairing/stacking probabilities for pair (i, j) or ensemble free energies for subsegment [i, j] */

      /* empty values in range [0, i] */
      for (int cnt = 0; cnt <= i; cnt++)
        av_push(prAV, newSV(0));

      /* actual values in range [i + 1, pr_size] */
      for (int cnt = i + 1; cnt <= pr_size; cnt++) {
        av_push(prAV, newSVnv((double)pr[cnt]));
      }
    }

    /* add pr_size, i, max, and type to perl stack */
    sv_setiv(pr_sizeSV, (IV)pr_size);
    sv_setiv(iSV, (IV)i);
    sv_setiv(maxSV, (IV)max);
    sv_setuv(typeSV, (UV)type);

    XPUSHs((SV *)sv_2mortal(newRV_inc((SV*) prAV)));
    XPUSHs(pr_sizeSV);
    XPUSHs(iSV);
    XPUSHs(maxSV);
    XPUSHs(typeSV);

    if(cb->data && SvOK(cb->data))          /* add data object to perl stack (if any) */
      XPUSHs(cb->data);

    PUTBACK;

    perl_call_sv(func, G_EVAL | G_DISCARD);

    SPAGAIN;

    err_tmp = ERRSV;
    if (SvTRUE(err_tmp)) {
      croak ("Some error occurred while executing sliding window partition function callback - %s\n", SvPV_nolen(err_tmp));
    }

    FREETMPS;
    LEAVE;
  }

  return /*void*/;
}




  int pfl_fold_cb(std::string sequence, int window_size, int max_bp_span, SV *PerlFunc, SV *PerlData = NULL) {
    perl_pf_window_callback_t *cb = bind_pf_window_callback(PerlFunc, PerlData);
    int r = vrna_pfl_fold_cb(sequence.c_str(), window_size, max_bp_span, &perl_wrap_pf_window_cb, (void *)cb);
    free(cb);
    return r;
  }

  int pfl_fold_up_cb(std::string sequence, int ulength, int window_size, int max_bp_span, SV *PerlFunc, SV *PerlData = NULL) {
    perl_pf_window_callback_t *cb = bind_pf_window_callback(PerlFunc, PerlData);
    int r = vrna_pfl_fold_up_cb(sequence.c_str(), ulength, window_size, max_bp_span, &perl_wrap_pf_window_cb, (void *)cb);
    free(cb);
    return r;
  }




typedef struct {
  SV  *cb;
  SV  *data;
} perl_heat_capacity_callback_t;

static perl_heat_capacity_callback_t * bind_heat_capacity_callback(SV *PerlFunc, SV *PerlData);

static void perl_wrap_heat_capacity_cb(float temperature, float hc, void *data);

static perl_heat_capacity_callback_t *
bind_heat_capacity_callback(SV *PerlFunc, SV *PerlData){

  /* check whether PerlFunc actually is a reference to a Perl subroutine */
  if((!SvOK(PerlFunc)) || (SvTYPE(SvRV(PerlFunc)) != SVt_PVCV)){
    fprintf(stderr, "Warning: invalid argument 1 for fold_compound::heat_capacity_cb, must be code reference\n");
    return NULL;
  }

  perl_heat_capacity_callback_t *cb = (perl_heat_capacity_callback_t *)vrna_alloc(sizeof(perl_heat_capacity_callback_t));

  cb->cb = PerlFunc;      /* store callback */
  cb->data = PerlData;    /* bind data */

  return cb;
}

static void
perl_wrap_heat_capacity_cb(float temp, float hc, void *data){

  SV *func;
  perl_heat_capacity_callback_t *cb = (perl_heat_capacity_callback_t *)data;

  func  = cb->cb;

  if(func && SvOK(func)){
    dSP;

    SV *err_tmp;

    /* call Perl subroutine */
    ENTER;
    SAVETMPS;
    PUSHMARK(SP);

    SV *tempSV = sv_newmortal();
    SV *hcSV   = sv_newmortal();
    /* add structure and free energy to perl stack */
    sv_setnv(tempSV, (double)temp);
    sv_setnv(hcSV, (double)hc);
    XPUSHs(tempSV);
    XPUSHs(hcSV);
    if(cb->data && SvOK(cb->data))          /* add data object to perl stack (if any) */
      XPUSHs(cb->data);
    PUTBACK;

    perl_call_sv(func, G_EVAL | G_DISCARD);

    SPAGAIN;

    err_tmp = ERRSV;
    if (SvTRUE(err_tmp)) {
      croak ("Some error occurred while executing heat_capacity callback - %s\n", SvPV_nolen(err_tmp));
    }

    FREETMPS;
    LEAVE;
  }

  return /*void*/;
}



  typedef enum {
    FC_TYPE_SINGLE      = VRNA_FC_TYPE_SINGLE,
    FC_TYPE_COMPARATIVE = VRNA_FC_TYPE_COMPARATIVE
  } my_fc_type_e;

SWIGINTERN void vrna_fold_compound_t_params_reset__SWIG_0(vrna_fold_compound_t *self,vrna_md_t *md=NULL){
    vrna_params_reset(self, md);
  }
SWIGINTERN void vrna_fold_compound_t_params_subst__SWIG_0(vrna_fold_compound_t *self,vrna_param_t *par=NULL){
    vrna_params_subst(self, par);
  }
SWIGINTERN void vrna_fold_compound_t_exp_params_rescale__SWIG_0(vrna_fold_compound_t *self){
    vrna_exp_params_rescale(self, NULL);
  }
SWIGINTERN void vrna_fold_compound_t_exp_params_rescale__SWIG_1(vrna_fold_compound_t *self,double fe){
    vrna_exp_params_rescale(self, &fe);
  }
SWIGINTERN void vrna_fold_compound_t_exp_params_reset__SWIG_0(vrna_fold_compound_t *self,vrna_md_t *md=NULL){
    vrna_exp_params_reset(self, md);
  }
SWIGINTERN void vrna_fold_compound_t_exp_params_subst(vrna_fold_compound_t *self,vrna_exp_param_t *par){
    vrna_exp_params_subst(self, par);
  }
SWIGINTERN std::vector< vrna_ep_t > vrna_fold_compound_t_plist_from_probs(vrna_fold_compound_t *self,double cutoff){
    std::vector<vrna_ep_t > ep_v;
    vrna_ep_t               *ptr, *plist;

    plist = vrna_plist_from_probs(self, cutoff);

    for (ptr = plist; ptr->i && ptr->j; ptr++) {
      vrna_ep_t pl;
      pl.i = ptr->i;
      pl.j = ptr->j;
      pl.p = ptr->p;
      pl.type = ptr->type;
      ep_v.push_back(pl);
    }

    free(plist);

    return ep_v;
  }
SWIGINTERN void vrna_fold_compound_t_constraints_add__SWIG_0(vrna_fold_compound_t *self,char const *constraint,unsigned int options=VRNA_OPTION_MFE){
    vrna_constraints_add(self,constraint, options);
  }
SWIGINTERN void vrna_fold_compound_t_hc_init(vrna_fold_compound_t *self){
    vrna_hc_init(self);
  }
SWIGINTERN void vrna_fold_compound_t_hc_add_up__SWIG_0(vrna_fold_compound_t *self,int i,unsigned int option=VRNA_CONSTRAINT_CONTEXT_ALL_LOOPS){
    vrna_hc_add_up(self,i, (unsigned char)option);
  }
SWIGINTERN void vrna_fold_compound_t_hc_add_bp_nonspecific__SWIG_0(vrna_fold_compound_t *self,int i,int d,unsigned int option=VRNA_CONSTRAINT_CONTEXT_ALL_LOOPS){
    vrna_hc_add_bp_nonspecific(self,i,d, (unsigned char)option);
  }
SWIGINTERN void vrna_fold_compound_t_hc_add_bp__SWIG_0(vrna_fold_compound_t *self,int i,int j,unsigned int option=VRNA_CONSTRAINT_CONTEXT_ALL_LOOPS){
    vrna_hc_add_bp(self,i,j,(unsigned char)option);
  }
SWIGINTERN int vrna_fold_compound_t_hc_add_from_db__SWIG_0(vrna_fold_compound_t *self,char const *constraint,unsigned int options=VRNA_CONSTRAINT_DB_DEFAULT){
    return vrna_hc_add_from_db(self,constraint, options);
  }
SWIGINTERN void vrna_fold_compound_t_sc_remove(vrna_fold_compound_t *self){
    vrna_sc_remove(self);
  }
SWIGINTERN void vrna_fold_compound_t_sc_init(vrna_fold_compound_t *self){
    vrna_sc_init(self);
  }
SWIGINTERN int vrna_fold_compound_t_sc_add_up__SWIG_0(vrna_fold_compound_t *self,int i,double energy,unsigned int options=VRNA_OPTION_DEFAULT){
    return vrna_sc_add_up(self, i, energy, options);
  }
SWIGINTERN int vrna_fold_compound_t_sc_add_up__SWIG_2(vrna_fold_compound_t *self,std::vector< double > constraints,unsigned int options=VRNA_OPTION_DEFAULT){
    std::vector<double>::iterator it;
    int i = 1, ret = 1;
    it = constraints.begin();
    for(it++; it != constraints.end(); it++, i++){
      ret &= (vrna_sc_add_up(self, i, *it, options)) ? 1 : 0;
    }

    return ret;
  }
SWIGINTERN int vrna_fold_compound_t_sc_add_bp__SWIG_0(vrna_fold_compound_t *self,int i,int j,double energy,unsigned int options=VRNA_OPTION_DEFAULT){
    return vrna_sc_add_bp(self, i, j, energy, options);
  }
SWIGINTERN int vrna_fold_compound_t_sc_add_bp__SWIG_2(vrna_fold_compound_t *self,std::vector< std::vector< double > > constraints,unsigned int options=VRNA_OPTION_DEFAULT){
    std::vector<std::vector<double> >::iterator it;
    std::vector<double>::iterator it2;
    int i, j, ret;

    i = 1;
    ret = 1;
    it = constraints.begin();
    for(it++; it != constraints.end(); it++, i++){
      it2 = (*it).begin();
      j   = 1;
      for(it2++; it2 != (*it).end(); it2++, j++){
        ret &= (vrna_sc_add_bp(self, i, j, *it2, options)) ? 1 : 0;
      }
    }

    return ret;
  }
SWIGINTERN int vrna_fold_compound_t_sc_set_bp__SWIG_0(vrna_fold_compound_t *self,std::vector< std::vector< double > > constraints,unsigned int options=VRNA_OPTION_DEFAULT){
    int ret = 0;

    /* make sure that the constraints matrix is large enough */
    FLT_OR_DBL **c = (FLT_OR_DBL **)vrna_alloc(sizeof(FLT_OR_DBL *) * (self->length + 1));
    for(unsigned int i = 0; i <= self->length; i++)
      c[i] = (FLT_OR_DBL *)vrna_alloc(sizeof(FLT_OR_DBL) * (self->length + 1));

    /* copy input data (missing values have value 0 */
    for(unsigned int i = 0; (i < constraints.size()) && (i <= self->length); i++)
      for(unsigned int j = i; (j < constraints[i].size()) && (j <= self->length); j++)
        c[i][j] = (FLT_OR_DBL)constraints[i][j];

    ret = vrna_sc_set_bp(self, (const FLT_OR_DBL **)c, options);

    /* cleanup */
    for(unsigned int i = 0; i <= self->length; i++)
      free(c[i]);
    free(c);

    return ret;
  }
SWIGINTERN int vrna_fold_compound_t_sc_set_up__SWIG_0(vrna_fold_compound_t *self,std::vector< double > constraints,unsigned int options=VRNA_OPTION_DEFAULT){
    std::vector<FLT_OR_DBL>  v;
    transform(constraints.begin(), constraints.end(), std::back_inserter(v), convert_vecdbl2vecFLR_OR_DBL);
    return vrna_sc_set_up(self, (const FLT_OR_DBL *)&v[0], options);
  }
SWIGINTERN int vrna_fold_compound_t_sc_set_stack__SWIG_0(vrna_fold_compound_t *self,std::vector< double > constraints,unsigned int options=VRNA_OPTION_DEFAULT){
    std::vector<FLT_OR_DBL>  v;
    transform(constraints.begin(), constraints.end(), std::back_inserter(v), convert_vecdbl2vecFLR_OR_DBL);
    return vrna_sc_set_stack(self, (const FLT_OR_DBL *)&v[0], options);
  }
SWIGINTERN int vrna_fold_compound_t_sc_set_stack__SWIG_2(vrna_fold_compound_t *self,std::vector< std::vector< double > > constraints,unsigned int options=VRNA_OPTION_DEFAULT){
    int ret = 0;

    if (self->type == VRNA_FC_TYPE_COMPARATIVE) {
      FLT_OR_DBL **c = (FLT_OR_DBL **)vrna_alloc(sizeof(FLT_OR_DBL *) * (self->n_seq + 1));

      for(unsigned int s = 0; s <= self->n_seq; s++)
        c[s] = (FLT_OR_DBL *)vrna_alloc(sizeof(FLT_OR_DBL) * (self->length + 1));

      /* copy input data (missing values have value 0 */
      for(unsigned int s = 0; (s < constraints.size()) && (s <= self->n_seq); s++)
        for(unsigned int i = 1; (i < constraints[s].size()) && (i <= self->length); i++)
          c[s][i] = (FLT_OR_DBL)constraints[s][i];

      ret = vrna_sc_set_stack_comparative(self, (const FLT_OR_DBL **)c, options);

      /* cleanup */
      for(unsigned int i = 0; i <= self->length; i++)
        free(c[i]);
      free(c);
    }

    return ret;
  }
SWIGINTERN int vrna_fold_compound_t_sc_add_stack__SWIG_0(vrna_fold_compound_t *self,int i,double energy,unsigned int options=VRNA_OPTION_DEFAULT){
    return vrna_sc_add_stack(self, i, energy, options);
  }
SWIGINTERN int vrna_fold_compound_t_sc_add_stack__SWIG_2(vrna_fold_compound_t *self,int i,std::vector< double > energies,unsigned int options=VRNA_OPTION_DEFAULT){
    std::vector<FLT_OR_DBL>  v;
    transform(energies.begin(), energies.end(), std::back_inserter(v), convert_vecdbl2vecFLR_OR_DBL);
    return vrna_sc_add_stack_comparative(self, i, (const FLT_OR_DBL *)&v[0], options);
  }
SWIGINTERN int vrna_fold_compound_t_sc_add_SHAPE_deigan__SWIG_0(vrna_fold_compound_t *self,std::vector< double > reactivities,double m,double b,unsigned int options=VRNA_OPTION_DEFAULT){
    return vrna_sc_add_SHAPE_deigan(self, (const double *)&reactivities[0], m, b, options);
  }
SWIGINTERN int vrna_fold_compound_t_sc_add_SHAPE_deigan_ali__SWIG_0(vrna_fold_compound_t *self,std::vector< std::string > shape_files,std::vector< int > shape_file_association,double m,double b,unsigned int options=VRNA_OPTION_DEFAULT){
    std::vector<const char*>  vc;
    transform(shape_files.begin(), shape_files.end(), back_inserter(vc), convert_vecstring2veccharcp);
    vc.push_back(NULL); /* mark end of vector */
    return vrna_sc_add_SHAPE_deigan_ali(self, (const char **) &vc[0], (const int *) &shape_file_association[0], m, b, options);
  }
SWIGINTERN int vrna_fold_compound_t_sc_add_SHAPE_zarringhalam__SWIG_0(vrna_fold_compound_t *self,std::vector< double > reactivities,double b,double default_value,char const *shape_conversion,unsigned int options=VRNA_OPTION_DEFAULT){
    return vrna_sc_add_SHAPE_zarringhalam(self, (const double *) &reactivities[0], b, default_value, shape_conversion, options);
  }
SWIGINTERN int vrna_fold_compound_t_sc_add_hi_motif__SWIG_0(vrna_fold_compound_t *self,char const *seq,char const *structure,FLT_OR_DBL energy,unsigned int options=VRNA_OPTION_DEFAULT){
    return vrna_sc_add_hi_motif(self, seq, structure, energy,options);
  }
SWIGINTERN float vrna_fold_compound_t_eval_structure(vrna_fold_compound_t *self,char const *structure){
    return vrna_eval_structure(self,structure);
  }
SWIGINTERN int vrna_fold_compound_t_eval_structure_pt(vrna_fold_compound_t *self,std::vector< int > pt){
    std::vector<short> vc;
    transform(pt.begin(), pt.end(), back_inserter(vc), convert_vecint2vecshort);
    return vrna_eval_structure_pt(self, (const short*)&vc[0]);
  }
SWIGINTERN float vrna_fold_compound_t_eval_structure_verbose__SWIG_0(vrna_fold_compound_t *self,char *structure,FILE *nullfile=NULL){
    return vrna_eval_structure_verbose(self, structure, nullfile);
  }
SWIGINTERN int vrna_fold_compound_t_eval_structure_pt_verbose__SWIG_0(vrna_fold_compound_t *self,std::vector< int > pt,FILE *nullfile=NULL){
    std::vector<short> vc;
    transform(pt.begin(), pt.end(), back_inserter(vc), convert_vecint2vecshort);
    return vrna_eval_structure_pt_verbose(self, (const short*)&vc[0], nullfile);
  }
SWIGINTERN float vrna_fold_compound_t_eval_covar_structure(vrna_fold_compound_t *self,char *structure){
    return vrna_eval_covar_structure(self, structure);
  }
SWIGINTERN int vrna_fold_compound_t_eval_loop_pt(vrna_fold_compound_t *self,int i,std::vector< int > pt){
    std::vector<short> vc;
    transform(pt.begin(), pt.end(), back_inserter(vc), convert_vecint2vecshort);
    return vrna_eval_loop_pt(self, i, (const short*)&vc[0]);
  }
SWIGINTERN float vrna_fold_compound_t_eval_move(vrna_fold_compound_t *self,char const *structure,int m1,int m2){
    return vrna_eval_move(self, structure, m1, m2);
  }
SWIGINTERN int vrna_fold_compound_t_eval_move_pt(vrna_fold_compound_t *self,std::vector< int > pt,int m1,int m2){
    std::vector<short> vc;
    transform(pt.begin(), pt.end(), back_inserter(vc), convert_vecint2vecshort);
    return vrna_eval_move_pt(self, ((short*)&vc[0]), m1, m2);   /*attention here no const short* as argument*/
  }
SWIGINTERN int vrna_fold_compound_t_E_ext_loop(vrna_fold_compound_t *self,int i,int j){
    return vrna_E_ext_loop(self, i, j);
  }
SWIGINTERN int vrna_fold_compound_t_E_hp_loop(vrna_fold_compound_t *self,int i,int j){
    return vrna_E_hp_loop(self, i, j);
  }
SWIGINTERN int vrna_fold_compound_t_E_ext_hp_loop(vrna_fold_compound_t *self,int i,int j){
    return vrna_E_ext_hp_loop(self, i, j);
  }
SWIGINTERN int vrna_fold_compound_t_eval_ext_hp_loop(vrna_fold_compound_t *self,int i,int j){
    return vrna_eval_ext_hp_loop(self, i, j);
  }
SWIGINTERN int vrna_fold_compound_t_eval_hp_loop(vrna_fold_compound_t *self,int i,int j){
    return vrna_eval_hp_loop(self, i, j);
  }
SWIGINTERN double vrna_fold_compound_t_exp_E_hp_loop(vrna_fold_compound_t *self,int i,int j){
    return (double)vrna_exp_E_hp_loop(self, i, j);
  }
SWIGINTERN int vrna_fold_compound_t_E_int_loop(vrna_fold_compound_t *self,int i,int j){
    return vrna_E_int_loop(self, i, j);
  }
SWIGINTERN int vrna_fold_compound_t_eval_int_loop(vrna_fold_compound_t *self,int i,int j,int k,int l){
    return vrna_eval_int_loop(self, i, j, k, l);
  }
SWIGINTERN int vrna_fold_compound_t_E_ext_int_loop(vrna_fold_compound_t *self,int i,int j,int *ip,int *iq){
    return vrna_E_ext_int_loop(self, i, j, ip, iq);
  }
SWIGINTERN int vrna_fold_compound_t_E_stack(vrna_fold_compound_t *self,int i,int j){
    return vrna_E_stack(self, i, j);
  }
SWIGINTERN double vrna_fold_compound_t_exp_E_int_loop(vrna_fold_compound_t *self,int i,int j){
    return (double)vrna_exp_E_int_loop(self, i, j);
  }
SWIGINTERN double vrna_fold_compound_t_exp_E_interior_loop(vrna_fold_compound_t *self,int i,int j,int k,int l){
    return (double)vrna_exp_E_interior_loop(self, i, j, k, l);
  }
SWIGINTERN int vrna_fold_compound_t_maxmimum_matching(vrna_fold_compound_t *self){
    return vrna_maximum_matching(self);
  }
SWIGINTERN char *vrna_fold_compound_t_mfe(vrna_fold_compound_t *self,float *OUTPUT){

    char *structure = (char *)vrna_alloc(sizeof(char) * (self->length + 1));
    *OUTPUT = vrna_mfe(self, structure);
    return structure;
  }
SWIGINTERN char *vrna_fold_compound_t_mfe_dimer(vrna_fold_compound_t *self,float *OUTPUT){

    char *structure = (char*)vrna_alloc(sizeof(char) * (self->length + 1));
    *OUTPUT = vrna_mfe_dimer(self, structure);
    return structure;
  }
SWIGINTERN char *vrna_fold_compound_t_backtrack__SWIG_0(vrna_fold_compound_t *self,unsigned int length,float *OUTPUT){
    char *structure = (char *)vrna_alloc(sizeof(char) * (length + 1));
    *OUTPUT = vrna_backtrack5(self, length, structure);
    return structure;
  }
SWIGINTERN char *vrna_fold_compound_t_backtrack__SWIG_1(vrna_fold_compound_t *self,float *OUTPUT){
    char *structure = (char *)vrna_alloc(sizeof(char) * (self->length + 1));
    *OUTPUT = vrna_backtrack5(self, self->length, structure);
    return structure;
  }
SWIGINTERN float vrna_fold_compound_t_mfe_window__SWIG_0(vrna_fold_compound_t *self,FILE *nullfile=NULL){
    return vrna_mfe_window(self, nullfile);
  }
SWIGINTERN float vrna_fold_compound_t_mfe_window_zscore__SWIG_0(vrna_fold_compound_t *self,double min_z,FILE *nullfile=NULL){
    return vrna_mfe_window_zscore(self, min_z, nullfile);
  }
SWIGINTERN int vrna_fold_compound_t_zsc_filter_init__SWIG_0(vrna_fold_compound_t *self,double min_z=-2.0,unsigned int options=VRNA_ZSCORE_SETTINGS_DEFAULT){
    return vrna_zsc_filter_init(self, min_z, options);
  }
SWIGINTERN int vrna_fold_compound_t_zsc_filter_update__SWIG_0(vrna_fold_compound_t *self,double min_z,unsigned int options=VRNA_ZSCORE_OPTIONS_NONE){
    return vrna_zsc_filter_update(self, min_z, options);
  }
SWIGINTERN void vrna_fold_compound_t_zsc_filter_free(vrna_fold_compound_t *self){
    vrna_zsc_filter_free(self);
  }
SWIGINTERN int vrna_fold_compound_t_zsc_filter_on(vrna_fold_compound_t *self){
    return vrna_zsc_filter_on(self);
  }
SWIGINTERN double vrna_fold_compound_t_zsc_filter_threshold(vrna_fold_compound_t *self){
    return vrna_zsc_filter_threshold(self);
  }
SWIGINTERN double vrna_fold_compound_t_zsc_compute(vrna_fold_compound_t *self,unsigned int i,unsigned int j,int e){
    return vrna_zsc_compute(self, i, j, e);
  }
SWIGINTERN char *vrna_fold_compound_t_pf(vrna_fold_compound_t *self,float *OUTPUT){
    char *structure = (char *)vrna_alloc(sizeof(char) * (self->length + 1)); /*output is a structure pointer*/
    *OUTPUT= vrna_pf(self, structure);
    return structure;
  }
SWIGINTERN double vrna_fold_compound_t_mean_bp_distance(vrna_fold_compound_t *self){
    return vrna_mean_bp_distance(self);
  }
SWIGINTERN double vrna_fold_compound_t_ensemble_defect__SWIG_0(vrna_fold_compound_t *self,std::string structure,unsigned int options=8U){
    double ed;
    short int         *pt;

    pt = vrna_ptable_from_string(structure.c_str(), options);

    ed = vrna_ensemble_defect_pt(self, pt);

    free(pt);

    return ed;
  }
SWIGINTERN double vrna_fold_compound_t_ensemble_defect__SWIG_2(vrna_fold_compound_t *self,std::vector< int > pair_table){
    double ed;

    std::vector<short> pt_v_short;
    transform(pair_table.begin(), pair_table.end(), back_inserter(pt_v_short), convert_vecint2vecshort);
    return vrna_ensemble_defect_pt(self, (short*)&pt_v_short[0]);
  }
SWIGINTERN std::vector< double > vrna_fold_compound_t_positional_entropy(vrna_fold_compound_t *self){
    unsigned int        n;
    double              *pos_ent;
    std::vector<double> dv;

    n       = self->length;
    pos_ent = vrna_positional_entropy(self);

    if (pos_ent)
      dv.assign(pos_ent, pos_ent + (n + 1));

    return dv;
  }
SWIGINTERN double vrna_fold_compound_t_pr_structure(vrna_fold_compound_t *self,std::string structure){
    return vrna_pr_structure(self, structure.c_str());
  }
SWIGINTERN double vrna_fold_compound_t_pr_energy(vrna_fold_compound_t *self,double e){
    return vrna_pr_energy(self, e);
  }
SWIGINTERN char *vrna_fold_compound_t_pf_dimer(vrna_fold_compound_t *self,float *FA,float *FB,float *FcAB,float *FAB){
    char *structure = (char *)vrna_alloc(sizeof(char) * (self->length + 1)); /*output is a structure pointer*/
    vrna_dimer_pf_t temp = vrna_pf_dimer(self, structure);
    *FAB  = (float)temp.FAB;
    *FcAB = (float)temp.FcAB;
    *FA   = (float)temp.FA;
    *FB   = (float)temp.FB;
    return structure;
  }
SWIGINTERN std::vector< std::vector< double > > vrna_fold_compound_t_bpp(vrna_fold_compound_t *self){
    std::vector<std::vector<double> > probabilities;
    vrna_fold_compound_t *vc = self;
    if(vc->exp_matrices && vc->exp_matrices->probs){
      int turn, i, j, *idx, n;
      FLT_OR_DBL *probs;

      n     = vc->length;
      idx   = vc->iindx;
      turn  = vc->exp_params->model_details.min_loop_size;
      probs = vc->exp_matrices->probs;

      probabilities.push_back(std::vector<double>(n+1, 0.));
      for(i=1; i <= n; i++){
        int u = ((i + turn + 1) < (n) ? (i + turn + 1) : (n));
        probabilities.push_back(std::vector<double>(u, 0.));
        for(j = u; j <= n; j++)
          probabilities[i].push_back((double)probs[idx[i] - j]);
      }
    }
    return probabilities;
  }
SWIGINTERN char *vrna_fold_compound_t_centroid(vrna_fold_compound_t *self,double *OUTPUT){
    return vrna_centroid(self, OUTPUT);
  }
SWIGINTERN char *vrna_fold_compound_t_MEA__SWIG_0(vrna_fold_compound_t *self,float *OUTPUT){
    return vrna_MEA(self, 1., OUTPUT);
  }
SWIGINTERN char *vrna_fold_compound_t_MEA__SWIG_1(vrna_fold_compound_t *self,double gamma,float *OUTPUT){
    return vrna_MEA(self, gamma, OUTPUT);
  }
SWIGINTERN char *vrna_fold_compound_t_pbacktrack__SWIG_0(vrna_fold_compound_t *self){
    return vrna_pbacktrack(self);
  }
SWIGINTERN char *vrna_fold_compound_t_pbacktrack5__SWIG_0(vrna_fold_compound_t *self,unsigned int length){
    return vrna_pbacktrack5(self, length);
  }
SWIGINTERN std::vector< std::string > vrna_fold_compound_t_pbacktrack__SWIG_1(vrna_fold_compound_t *self,unsigned int num_samples,unsigned int options=VRNA_PBACKTRACK_DEFAULT){
    std::vector<std::string> str_vec;
    char  **ptr, **output;

    output = vrna_pbacktrack_num(self, num_samples, options);

    if (output) {
      for (ptr = output; *ptr != NULL; ptr++) {
        str_vec.push_back(std::string(*ptr));
        free(*ptr);
      }

      free(output);
    }

    return str_vec;
  }
SWIGINTERN std::vector< std::string > vrna_fold_compound_t_pbacktrack5__SWIG_1(vrna_fold_compound_t *self,unsigned int num_samples,unsigned int length,unsigned int options=VRNA_PBACKTRACK_DEFAULT){
    std::vector<std::string> str_vec;
    char  **ptr, **output;

    output = vrna_pbacktrack5_num(self, num_samples, length, options);

    if (output) {
      for (ptr = output; *ptr != NULL; ptr++) {
        str_vec.push_back(std::string(*ptr));
        free(*ptr);
      }

      free(output);
    }

    return str_vec;
  }
SWIGINTERN std::vector< std::string > vrna_fold_compound_t_pbacktrack__SWIG_3(vrna_fold_compound_t *self,unsigned int num_samples,vrna_pbacktrack_mem_t *nr_memory,unsigned int options=VRNA_PBACKTRACK_DEFAULT){
    std::vector<std::string> str_vec;

    char **ptr, **output = vrna_pbacktrack_resume(self,
                                                  num_samples,
                                                  nr_memory,
                                                  options);

    if (output) {
      for (ptr = output; *ptr != NULL; ptr++) {
        str_vec.push_back(std::string(*ptr));
        free(*ptr);
      }

      free(output);
    }

    return str_vec;
  }
SWIGINTERN std::vector< std::string > vrna_fold_compound_t_pbacktrack5__SWIG_3(vrna_fold_compound_t *self,unsigned int num_samples,unsigned int length,vrna_pbacktrack_mem_t *nr_memory,unsigned int options=VRNA_PBACKTRACK_DEFAULT){
    std::vector<std::string> str_vec;

    char **ptr, **output;
    
    output = vrna_pbacktrack5_resume(self,
                                     num_samples,
                                     length,
                                     nr_memory,
                                     options);

    if (output) {
      for (ptr = output; *ptr != NULL; ptr++) {
        str_vec.push_back(std::string(*ptr));
        free(*ptr);
      }

      free(output);
    }

    return str_vec;
  }
SWIGINTERN std::vector< subopt_solution > vrna_fold_compound_t_subopt__SWIG_0(vrna_fold_compound_t *self,int delta,int sorted=1,FILE *nullfile=NULL){
    std::vector<subopt_solution> ret;
    SOLUTION *sol = vrna_subopt(self, delta, sorted, nullfile);
    if (sol)
      for(int i = 0; sol[i].structure != NULL; i++){
        subopt_solution a;
        a.energy = sol[i].energy;
        a.structure = sol[i].structure;
        ret.push_back(a);
      }

    free(sol);
    /* The memory occupied by the individual structures will be free'd automatically
       by swig, when the vector is destroyed
    */
    return ret;
  }
SWIGINTERN std::vector< subopt_solution > vrna_fold_compound_t_subopt_zuker(vrna_fold_compound_t *self){
    std::vector<subopt_solution> ret;
    SOLUTION *sol = vrna_subopt_zuker(self);
    if (sol)
      for(int i = 0; sol[i].structure != NULL; i++){
        subopt_solution a;
        a.energy = sol[i].energy;
        a.structure = sol[i].structure;
        ret.push_back(a);
      }

    free(sol);
    /* The memory occupied by the individual structures will be free'd automatically
       by swig, when the vector is destroyed
    */
    return ret;
  }
SWIGINTERN int vrna_fold_compound_t_sequence_add__SWIG_0(vrna_fold_compound_t *self,std::string sequence,unsigned int options=VRNA_SEQUENCE_RNA){
    return vrna_sequence_add(self,
                             sequence.c_str(),
                             options);
  }
SWIGINTERN int vrna_fold_compound_t_sequence_remove(vrna_fold_compound_t *self,unsigned int i){
    return vrna_sequence_remove(self,
                                i);
  }
SWIGINTERN void vrna_fold_compound_t_sequence_remove_all(vrna_fold_compound_t *self){
    vrna_sequence_remove_all(self);
  }
SWIGINTERN void vrna_fold_compound_t_sequence_prepare(vrna_fold_compound_t *self){
    vrna_sequence_prepare(self);
  }
SWIGINTERN void vrna_fold_compound_t_ud_add_motif__SWIG_0(vrna_fold_compound_t *self,std::string motif,double motif_en,std::string name="",unsigned int options=VRNA_UNSTRUCTURED_DOMAIN_ALL_LOOPS){
    if (name == "")
      vrna_ud_add_motif(self, motif.c_str(), motif_en, NULL, options);
    else
      vrna_ud_add_motif(self, motif.c_str(), motif_en, name.c_str(), options);
  }
SWIGINTERN void vrna_fold_compound_t_ud_remove(vrna_fold_compound_t *self){
    vrna_ud_remove(self);
  }
SWIGINTERN int vrna_fold_compound_t_commands_apply__SWIG_0(vrna_fold_compound_t *self,vrna_command_s *commands,unsigned int options=VRNA_CMD_PARSE_DEFAULTS){
    return vrna_commands_apply(self,
                               commands,
                               options);
  }
SWIGINTERN int vrna_fold_compound_t_file_commands_apply__SWIG_0(vrna_fold_compound_t *self,std::string filename,unsigned int options=VRNA_CMD_PARSE_DEFAULTS){
    return vrna_file_commands_apply(self,
                                    filename.c_str(),
                                    options);
  }
SWIGINTERN std::vector< unsigned int > vrna_fold_compound_t_rotational_symmetry_db(vrna_fold_compound_t *self,std::string structure){
    std::vector<unsigned int> positions;
    unsigned int i, r, *pos;

    r = vrna_rotational_symmetry_db_pos(self, structure.c_str(), &pos);

    if (r)
      for (i = 0; i < r; i++)
        positions.push_back(pos[i]);

    free(pos);

    return positions;
  }
SWIGINTERN std::vector< vrna_move_t > vrna_fold_compound_t_neighbors__SWIG_0(vrna_fold_compound_t *self,std::vector< int > pt,unsigned int options=(4|8)){
    std::vector<vrna_move_t>  v; /* fill vector with returned vrna_move_t */
    vrna_move_t *move_t, *ptr;
    std::vector<short> vc;

    transform(pt.begin(), pt.end(), back_inserter(vc), convert_vecint2vecshort);

    move_t = ptr = vrna_neighbors(self, (short*)&vc[0], options);

    if (ptr)
      while ((ptr->pos_5 != 0) && (ptr->pos_3 != 0)) {
        vrna_move_t m;
        m = vrna_move_init(ptr->pos_5, ptr->pos_3);
        v.push_back(m);
        ptr++;
      }

    free(move_t);
    return v;
  }
SWIGINTERN std::vector< vrna_move_t > vrna_fold_compound_t_path__SWIG_0(vrna_fold_compound_t *self,std::vector< int > &pt,unsigned int steps,unsigned int options=VRNA_PATH_DEFAULT){
    int i;
    std::vector<short>::iterator it;
    std::vector<vrna_move_t>  v; /* fill vector with returned vrna_move_t */
    vrna_move_t *move_t, *ptr;
    std::vector<short> vc;

    transform(pt.begin(), pt.end(), back_inserter(vc), convert_vecint2vecshort);

    move_t = ptr = vrna_path(self, (short*)&vc[0], steps, options);
    
    if (ptr)
      while ((ptr->pos_5 != 0) && (ptr->pos_3 != 0)) {
        vrna_move_t m;
        m = vrna_move_init(ptr->pos_5, ptr->pos_3);
        v.push_back(m);
        ptr++;
      }

    /* copy over the values from vc to pt */
    for (i = 0, it = vc.begin(); it != vc.end(); ++it, i++)
      pt[i] = *it;

    free(move_t);
    return v;
  }
SWIGINTERN std::vector< vrna_move_t > vrna_fold_compound_t_path_gradient__SWIG_0(vrna_fold_compound_t *self,std::vector< int > &pt,unsigned int options=VRNA_PATH_DEFAULT){
    int i;
    std::vector<short>::iterator it;
    std::vector<vrna_move_t>  v; /* fill vector with returned vrna_move_t */
    vrna_move_t *move_t, *ptr;

    std::vector<short> vc;
    transform(pt.begin(), pt.end(), back_inserter(vc), convert_vecint2vecshort);

    move_t = ptr = vrna_path_gradient(self, (short*)&vc[0], options);

    if (ptr)
      while ((ptr->pos_5 != 0) && (ptr->pos_3 != 0)) {
        vrna_move_t m;
        m = vrna_move_init(ptr->pos_5, ptr->pos_3);
        v.push_back(m);
        ptr++;
      }

    /* copy over the values from vc to pt */
    for (i = 0, it = vc.begin(); it != vc.end(); ++it, i++)
      pt[i] = *it;

    free(move_t);
    return v;
  }
SWIGINTERN std::vector< vrna_move_t > vrna_fold_compound_t_path_random__SWIG_0(vrna_fold_compound_t *self,std::vector< int > &pt,unsigned int steps,unsigned int options=VRNA_PATH_DEFAULT){
    int i;
    std::vector<short>::iterator it;
    std::vector<vrna_move_t>  v; /* fill vector with returned vrna_move_t */
    vrna_move_t *move_t, *ptr;

    std::vector<short> vc;
    transform(pt.begin(), pt.end(), back_inserter(vc), convert_vecint2vecshort);

    move_t = ptr = vrna_path_random(self, (short*)&vc[0], steps, options);

    if (ptr)
      while ((ptr->pos_5 != 0) && (ptr->pos_3 != 0)) {
        vrna_move_t m;
        m = vrna_move_init(ptr->pos_5, ptr->pos_3);
        v.push_back(m);
        ptr++;
      }

    /* copy over the values from vc to pt */
    for (i = 0, it = vc.begin(); it != vc.end(); ++it, i++)
      pt[i] = *it;

    free(move_t);
    return v;
  }
SWIGINTERN SV *vrna_fold_compound_t_path_findpath_saddle__SWIG_0(vrna_fold_compound_t *self,std::string s1,std::string s2,int width=1,int maxE=INT_MAX-1){
    SV *E_obj;

    int E = vrna_path_findpath_saddle_ub(self, s1.c_str(), s2.c_str(), width, maxE);

    if (E < maxE)
      E_obj = newSViv((IV)E);
    else
      E_obj = newSV(0);

    sv_2mortal(E_obj);

    return E_obj;
  }
SWIGINTERN std::vector< vrna_path_t > vrna_fold_compound_t_path_findpath__SWIG_0(vrna_fold_compound_t *self,std::string s1,std::string s2,int width=1,int maxE=INT_MAX-1){
      std::vector<vrna_path_t>  v; /* fill vector with returned vrna_path_t*/
      vrna_path_t *path_t, *ptr;
      path_t = ptr = vrna_path_findpath_ub(self, s1.c_str(), s2.c_str(), width, maxE);

      if (ptr) {
        while (ptr->s != NULL)
        {
            vrna_path_t p;

            p.type  = VRNA_PATH_TYPE_DOT_BRACKET;
            p.en    = ptr->en;
            p.s     = ptr->s;

            v.push_back(p);
            ptr++;
        }
        free(path_t);
      }
      return v;
  }
SWIGINTERN std::vector< vrna_path_t > vrna_fold_compound_t_path_direct__SWIG_0(vrna_fold_compound_t *self,std::string s1,std::string s2,int maxE=INT_MAX-1,vrna_path_options_s *options=NULL){
      std::vector<vrna_path_t>  v; /* fill vector with returned vrna_path_t*/
      vrna_path_t *path_t, *ptr;
      path_t = ptr = vrna_path_direct_ub(self, s1.c_str(), s2.c_str(), maxE, options);

      if (ptr) {
        if (ptr->type == VRNA_PATH_TYPE_DOT_BRACKET)
          for (; ptr->s != NULL; ptr++) {
            vrna_path_t p;
            p.type = ptr->type;
            p.en   = ptr->en;
            p.s    = ptr->s;
            p.move = ptr->move;
            v.push_back(p);
          }
        else if (ptr->type == VRNA_PATH_TYPE_MOVES)
          for (; ptr->move.pos_5 != 0; ptr++) {
            vrna_path_t p;
            p.type = ptr->type;
            p.en   = ptr->en;
            p.s    = ptr->s;
            p.move = ptr->move;
            v.push_back(p);
          }
      }

      free(path_t);

      return v;
  }
SWIGINTERN std::vector< heat_capacity_result > vrna_fold_compound_t_heat_capacity__SWIG_0(vrna_fold_compound_t *self,float T_min=0.,float T_max=100.,float T_increment=1.,unsigned int mpoints=2U){
    vrna_heat_capacity_t              *result_c;
    std::vector<heat_capacity_result> result;

    result_c = vrna_heat_capacity(self, T_min, T_max, T_increment, mpoints);

    if (result_c) {
      for (size_t i = 0; result_c[i].temperature >= T_min; i++) {
        heat_capacity_result r;
        r.temperature = result_c[i].temperature;
        r.heat_capacity = result_c[i].heat_capacity;
        result.push_back(r);
      }
    }

    free(result_c);

    return result;
  }
SWIGINTERN void vrna_fold_compound_t_add_auxdata(vrna_fold_compound_t *self,SV *data,SV *PerlFunc){
    fc_add_perl_data(self, data, PerlFunc);
  }
SWIGINTERN void vrna_fold_compound_t_add_callback(vrna_fold_compound_t *self,SV *PerlFunc){
    fc_add_perl_callback(self, PerlFunc);
  }
SWIGINTERN int vrna_fold_compound_t_sc_add_data(vrna_fold_compound_t *self,SV *data,SV *PerlFunc){
    return sc_add_perl_data(self, data, PerlFunc);
  }
SWIGINTERN int vrna_fold_compound_t_sc_add_f(vrna_fold_compound_t *self,SV *PerlFunc){
    return sc_add_f_perl_callback(self, PerlFunc);
  }
SWIGINTERN int vrna_fold_compound_t_sc_add_bt(vrna_fold_compound_t *self,SV *PerlFunc){
    return sc_add_bt_perl_callback(self, PerlFunc);
  }
SWIGINTERN int vrna_fold_compound_t_sc_add_exp_f(vrna_fold_compound_t *self,SV *PerlFunc){
    return sc_add_exp_f_perl_callback(self, PerlFunc);
  }
SWIGINTERN void vrna_fold_compound_t_ud_set_data(vrna_fold_compound_t *self,SV *data,SV *PerlFunc){
    ud_set_data(self, data, PerlFunc);
  }
SWIGINTERN void vrna_fold_compound_t_ud_set_prod_rule_cb(vrna_fold_compound_t *self,SV *prod_cb,SV *eval_cb){

    ud_set_prod_rule_cb(self, prod_cb, eval_cb);
  }
SWIGINTERN void vrna_fold_compound_t_ud_set_exp_prod_rule_cb(vrna_fold_compound_t *self,SV *prod_cb,SV *eval_cb){

    ud_set_exp_prod_rule_cb(self, prod_cb, eval_cb);
  }
SWIGINTERN void vrna_fold_compound_t_ud_set_prob_cb(vrna_fold_compound_t *self,SV *setter,SV *getter){

    ud_set_prob_cb(self, setter, getter);
  }
SWIGINTERN void vrna_fold_compound_t_subopt_cb__SWIG_0(vrna_fold_compound_t *self,int delta,SV *PerlFunc,SV *PerlData=NULL){

    perl_subopt_callback_t *cb = bind_subopt_callback(PerlFunc, PerlData);
    vrna_subopt_cb(self, delta, &perl_wrap_subopt_cb, (void *)cb);
    free(cb);
  }
SWIGINTERN unsigned int vrna_fold_compound_t_pbacktrack5__SWIG_5(vrna_fold_compound_t *self,unsigned int num_samples,unsigned int length,SV *PerlFunc,SV *PerlData=NULL,unsigned int options=0){
    unsigned int i;
    perl_bs_callback_t *cb = bind_bs_callback(PerlFunc, PerlData);

    i = vrna_pbacktrack5_cb(self,
                            num_samples,
                            length,
                            &perl_wrap_bs_cb,
                            (void *)cb,
                            options);

    free(cb);

    return i;
  }
SWIGINTERN unsigned int vrna_fold_compound_t_pbacktrack__SWIG_5(vrna_fold_compound_t *self,unsigned int num_samples,SV *PerlFunc,SV *PerlData=NULL,unsigned int options=0){
    unsigned int i;
    perl_bs_callback_t *cb = bind_bs_callback(PerlFunc, PerlData);

    i = vrna_pbacktrack_cb(self,
                           num_samples,
                           &perl_wrap_bs_cb,
                           (void *)cb,
                           options);

    free(cb);

    return i;
  }
SWIGINTERN unsigned int vrna_fold_compound_t_pbacktrack__SWIG_8(vrna_fold_compound_t *self,unsigned int num_samples,SV *PerlFunc,SV *PerlData,vrna_pbacktrack_mem_t *nr_memory,unsigned int options=0){
    unsigned int i;
    perl_bs_callback_t *cb = bind_bs_callback(PerlFunc, PerlData);

    i = vrna_pbacktrack_resume_cb(self,
                                  num_samples,
                                  &perl_wrap_bs_cb,
                                  (void *)cb,
                                  nr_memory,
                                  options);

    free(cb);

    return i;
  }
SWIGINTERN unsigned int vrna_fold_compound_t_pbacktrack5__SWIG_8(vrna_fold_compound_t *self,unsigned int num_samples,unsigned int length,SV *PerlFunc,SV *PerlData,vrna_pbacktrack_mem_t *nr_memory,unsigned int options=0){
    unsigned int i;
    perl_bs_callback_t *cb = bind_bs_callback(PerlFunc, PerlData);

    i = vrna_pbacktrack5_resume_cb(self,
                                   num_samples,
                                   length,
                                   &perl_wrap_bs_cb,
                                   (void *)cb,
                                   nr_memory,
                                   options);

    free(cb);

    return i;
  }
SWIGINTERN float vrna_fold_compound_t_mfe_window_cb__SWIG_0(vrna_fold_compound_t *self,SV *PerlFunc,SV *PerlData=NULL){
    float en;
    perl_mfe_window_callback_t *cb = bind_mfe_window_callback(PerlFunc, PerlData);
    en = vrna_mfe_window_cb(self, &perl_wrap_mfe_window_cb, (void *)cb);
    free(cb);
    return en;
  }
SWIGINTERN float vrna_fold_compound_t_mfe_window_zscore_cb__SWIG_0(vrna_fold_compound_t *self,double min_z,SV *PerlFunc,SV *PerlData=NULL){
    float en;
    perl_mfe_window_callback_t *cb = bind_mfe_window_callback(PerlFunc, PerlData);
    en = vrna_mfe_window_zscore_cb(self, min_z, &perl_wrap_mfe_window_zscore_cb, (void *)cb);
    free(cb);
    return en;
  }
SWIGINTERN int vrna_fold_compound_t_probs_window__SWIG_0(vrna_fold_compound_t *self,int ulength,unsigned int options,SV *PerlFunc,SV *PerlData=NULL){
    perl_pf_window_callback_t *cb = bind_pf_window_callback(PerlFunc, PerlData);
    int r = vrna_probs_window(self, ulength, options, &perl_wrap_pf_window_cb, (void *)cb);
    free(cb);
    return r;
  }
SWIGINTERN void vrna_fold_compound_t_heat_capacity_cb__SWIG_0(vrna_fold_compound_t *self,float T_min,float T_max,float T_increment,unsigned int mpoints,SV *PerlFunc,SV *PerlData=NULL){
    perl_heat_capacity_callback_t *cb = bind_heat_capacity_callback(PerlFunc, PerlData);
    vrna_heat_capacity_cb(self, T_min, T_max, T_increment, mpoints, &perl_wrap_heat_capacity_cb, (void *)cb);
    free(cb);
  }
SWIGINTERN vrna_fold_compound_t *new_vrna_fold_compound_t__SWIG_0(char const *sequence,vrna_md_t *md=NULL,unsigned int options=VRNA_OPTION_DEFAULT){
    return vrna_fold_compound(sequence, md, options);
  }
SWIGINTERN vrna_fold_compound_t *new_vrna_fold_compound_t__SWIG_3(std::vector< std::string > alignment,vrna_md_t *md=NULL,unsigned int options=VRNA_OPTION_DEFAULT){
    std::vector<const char*>  vc;
    transform(alignment.begin(), alignment.end(), back_inserter(vc), convert_vecstring2veccharcp);
    vc.push_back(NULL); /* mark end of sequences */
    return vrna_fold_compound_comparative((const char **)&vc[0], md, options);
  }
SWIGINTERN vrna_fold_compound_t *new_vrna_fold_compound_t__SWIG_6(char const *sequence,char *s1,char *s2,vrna_md_t *md=NULL,unsigned int options=VRNA_OPTION_DEFAULT){
    return vrna_fold_compound_TwoD(sequence,s1,s2, md, options);
  }
SWIGINTERN void delete_vrna_fold_compound_t(vrna_fold_compound_t *self){
    vrna_fold_compound_free(self);
  }

SWIGINTERNINLINE SV *
SWIG_From_unsigned_SS_char  SWIG_PERL_DECL_ARGS_1(unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  SWIG_PERL_CALL_ARGS_1(value);
}

#ifdef __cplusplus
extern "C" {
#endif

#ifdef PERL_OBJECT
#define MAGIC_CLASS _wrap_RNA_var::
class _wrap_RNA_var : public CPerlObj {
public:
#else
#define MAGIC_CLASS
#endif
SWIGCLASS_STATIC int swig_magic_readonly(pTHX_ SV *SWIGUNUSEDPARM(sv), MAGIC *SWIGUNUSEDPARM(mg)) {
    MAGIC_PPERL
    croak("Value is read-only.");
    return 0;
}
SWIGCLASS_STATIC int _wrap_lxc37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(lxc37)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_stack37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    AV *arr = (AV*)sv_2mortal((SV*)newAV());
    int i,j = 0, len1 = 0, len2 = 0;
    
    len1 = 7+1;
    len2 = 7+1;
    
    for (i = 0; i < len1 ; i++) {
      AV *vec = newAV();
      for (j = 0; j < len2; j++) {
        SV *v = newSViv(stack37[i][j]);
        if (!av_store(vec, j, v))
        SvREFCNT_dec(v);
      }
      /* store reference to array */
      av_store(arr, i, newRV_noinc((SV*) vec));
    }
    
    sv_setsv(sv, sv_2mortal(newRV_noinc((SV*) arr )));
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_stackdH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    AV *arr = (AV*)sv_2mortal((SV*)newAV());
    int i,j = 0, len1 = 0, len2 = 0;
    
    len1 = 7+1;
    len2 = 7+1;
    
    for (i = 0; i < len1 ; i++) {
      AV *vec = newAV();
      for (j = 0; j < len2; j++) {
        SV *v = newSViv(stackdH[i][j]);
        if (!av_store(vec, j, v))
        SvREFCNT_dec(v);
      }
      /* store reference to array */
      av_store(arr, i, newRV_noinc((SV*) vec));
    }
    
    sv_setsv(sv, sv_2mortal(newRV_noinc((SV*) arr )));
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_hairpin37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    AV* av = (AV*)sv_2mortal((SV*)newAV());
    int i = 0,len = 0;
    len = 31;
    
    for (i = 0; i < len ; i++) {
      SV *v = newSViv(hairpin37[i]);
      if (!av_store(av, i, v))
      SvREFCNT_dec(v);
    }
    sv_setsv(sv, sv_2mortal(newRV_noinc((SV*) av )));
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_hairpindH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    AV* av = (AV*)sv_2mortal((SV*)newAV());
    int i = 0,len = 0;
    len = 31;
    
    for (i = 0; i < len ; i++) {
      SV *v = newSViv(hairpindH[i]);
      if (!av_store(av, i, v))
      SvREFCNT_dec(v);
    }
    sv_setsv(sv, sv_2mortal(newRV_noinc((SV*) av )));
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_bulge37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    AV* av = (AV*)sv_2mortal((SV*)newAV());
    int i = 0,len = 0;
    len = 31;
    
    for (i = 0; i < len ; i++) {
      SV *v = newSViv(bulge37[i]);
      if (!av_store(av, i, v))
      SvREFCNT_dec(v);
    }
    sv_setsv(sv, sv_2mortal(newRV_noinc((SV*) av )));
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_bulgedH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    AV* av = (AV*)sv_2mortal((SV*)newAV());
    int i = 0,len = 0;
    len = 31;
    
    for (i = 0; i < len ; i++) {
      SV *v = newSViv(bulgedH[i]);
      if (!av_store(av, i, v))
      SvREFCNT_dec(v);
    }
    sv_setsv(sv, sv_2mortal(newRV_noinc((SV*) av )));
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_internal_loop37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    AV* av = (AV*)sv_2mortal((SV*)newAV());
    int i = 0,len = 0;
    len = 31;
    
    for (i = 0; i < len ; i++) {
      SV *v = newSViv(internal_loop37[i]);
      if (!av_store(av, i, v))
      SvREFCNT_dec(v);
    }
    sv_setsv(sv, sv_2mortal(newRV_noinc((SV*) av )));
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_internal_loopdH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    AV* av = (AV*)sv_2mortal((SV*)newAV());
    int i = 0,len = 0;
    len = 31;
    
    for (i = 0; i < len ; i++) {
      SV *v = newSViv(internal_loopdH[i]);
      if (!av_store(av, i, v))
      SvREFCNT_dec(v);
    }
    sv_setsv(sv, sv_2mortal(newRV_noinc((SV*) av )));
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_mismatchI37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(mismatchI37));
  return 1;
}


SWIGCLASS_STATIC int _wrap_mismatchIdH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(mismatchIdH));
  return 1;
}


SWIGCLASS_STATIC int _wrap_mismatch1nI37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(mismatch1nI37));
  return 1;
}


SWIGCLASS_STATIC int _wrap_mismatch23I37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(mismatch23I37));
  return 1;
}


SWIGCLASS_STATIC int _wrap_mismatch1nIdH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(mismatch1nIdH));
  return 1;
}


SWIGCLASS_STATIC int _wrap_mismatch23IdH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(mismatch23IdH));
  return 1;
}


SWIGCLASS_STATIC int _wrap_mismatchH37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(mismatchH37));
  return 1;
}


SWIGCLASS_STATIC int _wrap_mismatchM37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(mismatchM37));
  return 1;
}


SWIGCLASS_STATIC int _wrap_mismatchHdH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(mismatchHdH));
  return 1;
}


SWIGCLASS_STATIC int _wrap_mismatchMdH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(mismatchMdH));
  return 1;
}


SWIGCLASS_STATIC int _wrap_mismatchExt37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(mismatchExt37));
  return 1;
}


SWIGCLASS_STATIC int _wrap_mismatchExtdH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(mismatchExtdH));
  return 1;
}


SWIGCLASS_STATIC int _wrap_dangle5_37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    AV *arr = (AV*)sv_2mortal((SV*)newAV());
    int i,j = 0, len1 = 0, len2 = 0;
    
    len1 = 7+1;
    len2 = 5;
    
    for (i = 0; i < len1 ; i++) {
      AV *vec = newAV();
      for (j = 0; j < len2; j++) {
        SV *v = newSViv(dangle5_37[i][j]);
        if (!av_store(vec, j, v))
        SvREFCNT_dec(v);
      }
      /* store reference to array */
      av_store(arr, i, newRV_noinc((SV*) vec));
    }
    
    sv_setsv(sv, sv_2mortal(newRV_noinc((SV*) arr )));
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_dangle3_37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    AV *arr = (AV*)sv_2mortal((SV*)newAV());
    int i,j = 0, len1 = 0, len2 = 0;
    
    len1 = 7+1;
    len2 = 5;
    
    for (i = 0; i < len1 ; i++) {
      AV *vec = newAV();
      for (j = 0; j < len2; j++) {
        SV *v = newSViv(dangle3_37[i][j]);
        if (!av_store(vec, j, v))
        SvREFCNT_dec(v);
      }
      /* store reference to array */
      av_store(arr, i, newRV_noinc((SV*) vec));
    }
    
    sv_setsv(sv, sv_2mortal(newRV_noinc((SV*) arr )));
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_dangle3_dH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    AV *arr = (AV*)sv_2mortal((SV*)newAV());
    int i,j = 0, len1 = 0, len2 = 0;
    
    len1 = 7+1;
    len2 = 5;
    
    for (i = 0; i < len1 ; i++) {
      AV *vec = newAV();
      for (j = 0; j < len2; j++) {
        SV *v = newSViv(dangle3_dH[i][j]);
        if (!av_store(vec, j, v))
        SvREFCNT_dec(v);
      }
      /* store reference to array */
      av_store(arr, i, newRV_noinc((SV*) vec));
    }
    
    sv_setsv(sv, sv_2mortal(newRV_noinc((SV*) arr )));
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_dangle5_dH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    AV *arr = (AV*)sv_2mortal((SV*)newAV());
    int i,j = 0, len1 = 0, len2 = 0;
    
    len1 = 7+1;
    len2 = 5;
    
    for (i = 0; i < len1 ; i++) {
      AV *vec = newAV();
      for (j = 0; j < len2; j++) {
        SV *v = newSViv(dangle5_dH[i][j]);
        if (!av_store(vec, j, v))
        SvREFCNT_dec(v);
      }
      /* store reference to array */
      av_store(arr, i, newRV_noinc((SV*) vec));
    }
    
    sv_setsv(sv, sv_2mortal(newRV_noinc((SV*) arr )));
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_int11_37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(int11_37));
  return 1;
}


SWIGCLASS_STATIC int _wrap_int11_dH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(int11_dH));
  return 1;
}


SWIGCLASS_STATIC int _wrap_int21_37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(int21_37));
  return 1;
}


SWIGCLASS_STATIC int _wrap_int21_dH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(int21_dH));
  return 1;
}


SWIGCLASS_STATIC int _wrap_int22_37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(int22_37));
  return 1;
}


SWIGCLASS_STATIC int _wrap_int22_dH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(int22_dH));
  return 1;
}


SWIGCLASS_STATIC int _wrap_ML_BASE37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(ML_BASE37)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_ML_BASEdH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(ML_BASEdH)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_ML_closing37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(ML_closing37)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_ML_closingdH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(ML_closingdH)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_ML_intern37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(ML_intern37)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_ML_interndH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(ML_interndH)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_TripleC37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TripleC37)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_TripleCdH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TripleCdH)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_MultipleCA37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(MultipleCA37)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_MultipleCAdH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(MultipleCAdH)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_MultipleCB37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(MultipleCB37)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_MultipleCBdH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(MultipleCBdH)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_MAX_NINIO_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(MAX_NINIO)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_ninio37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(ninio37)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_niniodH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(niniodH)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_TerminalAU37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TerminalAU37)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_TerminalAUdH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TerminalAUdH)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_DuplexInit37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(DuplexInit37)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_DuplexInitdH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(DuplexInitdH)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_Tetraloops_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    size_t size = SWIG_strnlen(Tetraloops, 281);
    
    
    
    sv_setsv(sv,SWIG_FromCharPtrAndSize(Tetraloops, size))  ;
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_Tetraloop37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    AV* av = (AV*)sv_2mortal((SV*)newAV());
    int i = 0,len = 0;
    len = 40;
    
    for (i = 0; i < len ; i++) {
      SV *v = newSViv(Tetraloop37[i]);
      if (!av_store(av, i, v))
      SvREFCNT_dec(v);
    }
    sv_setsv(sv, sv_2mortal(newRV_noinc((SV*) av )));
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_TetraloopdH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    AV* av = (AV*)sv_2mortal((SV*)newAV());
    int i = 0,len = 0;
    len = 40;
    
    for (i = 0; i < len ; i++) {
      SV *v = newSViv(TetraloopdH[i]);
      if (!av_store(av, i, v))
      SvREFCNT_dec(v);
    }
    sv_setsv(sv, sv_2mortal(newRV_noinc((SV*) av )));
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_Triloops_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    size_t size = SWIG_strnlen(Triloops, 241);
    
    
    
    sv_setsv(sv,SWIG_FromCharPtrAndSize(Triloops, size))  ;
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_Triloop37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    AV* av = (AV*)sv_2mortal((SV*)newAV());
    int i = 0,len = 0;
    len = 40;
    
    for (i = 0; i < len ; i++) {
      SV *v = newSViv(Triloop37[i]);
      if (!av_store(av, i, v))
      SvREFCNT_dec(v);
    }
    sv_setsv(sv, sv_2mortal(newRV_noinc((SV*) av )));
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_TriloopdH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    AV* av = (AV*)sv_2mortal((SV*)newAV());
    int i = 0,len = 0;
    len = 40;
    
    for (i = 0; i < len ; i++) {
      SV *v = newSViv(TriloopdH[i]);
      if (!av_store(av, i, v))
      SvREFCNT_dec(v);
    }
    sv_setsv(sv, sv_2mortal(newRV_noinc((SV*) av )));
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_Hexaloops_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    size_t size = SWIG_strnlen(Hexaloops, 361);
    
    
    
    sv_setsv(sv,SWIG_FromCharPtrAndSize(Hexaloops, size))  ;
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_Hexaloop37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    AV* av = (AV*)sv_2mortal((SV*)newAV());
    int i = 0,len = 0;
    len = 40;
    
    for (i = 0; i < len ; i++) {
      SV *v = newSViv(Hexaloop37[i]);
      if (!av_store(av, i, v))
      SvREFCNT_dec(v);
    }
    sv_setsv(sv, sv_2mortal(newRV_noinc((SV*) av )));
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_HexaloopdH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    AV* av = (AV*)sv_2mortal((SV*)newAV());
    int i = 0,len = 0;
    len = 40;
    
    for (i = 0; i < len ; i++) {
      SV *v = newSViv(HexaloopdH[i]);
      if (!av_store(av, i, v))
      SvREFCNT_dec(v);
    }
    sv_setsv(sv, sv_2mortal(newRV_noinc((SV*) av )));
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_GQuadAlpha37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(GQuadAlpha37)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_GQuadAlphadH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(GQuadAlphadH)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_GQuadBeta37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(GQuadBeta37)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_GQuadBetadH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(GQuadBetadH)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_GQuadLayerMismatch37_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(GQuadLayerMismatch37)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_GQuadLayerMismatchH_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(GQuadLayerMismatchH)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_GQuadLayerMismatchMax_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(GQuadLayerMismatchMax)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_Tmeasure_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(Tmeasure)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_temperature_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_temperature((double)SvNV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_temperature_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setnv(sv, (double) vrna_md_defaults_temperature_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_dangles_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_dangles(SvIV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_dangles_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setiv(sv, (IV) vrna_md_defaults_dangles_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_betaScale_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_betaScale((double)SvNV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_betaScale_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setnv(sv, (double) vrna_md_defaults_betaScale_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_pf_smooth_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_pf_smooth(SvIV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_pf_smooth_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setiv(sv, (IV) vrna_md_defaults_pf_smooth_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_tetra_loop_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_special_hp(SvIV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_tetra_loop_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setiv(sv, (IV) vrna_md_defaults_special_hp_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_special_hp_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_special_hp(SvIV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_special_hp_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setiv(sv, (IV) vrna_md_defaults_special_hp_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_noLonelyPairs_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_noLP(SvIV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_noLonelyPairs_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setiv(sv, (IV) vrna_md_defaults_noLP_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_noLP_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_noLP(SvIV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_noLP_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setiv(sv, (IV) vrna_md_defaults_noLP_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_noGU_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_noGU(SvIV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_noGU_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setiv(sv, (IV) vrna_md_defaults_noGU_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_no_closingGU_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_noGUclosure(SvIV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_no_closingGU_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setiv(sv, (IV) vrna_md_defaults_noGUclosure_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_noGUclosure_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_noGUclosure(SvIV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_noGUclosure_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setiv(sv, (IV) vrna_md_defaults_noGUclosure_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_logML_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_logML(SvIV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_logML_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setiv(sv, (IV) vrna_md_defaults_logML_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_circ_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_circ(SvIV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_circ_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setiv(sv, (IV) vrna_md_defaults_circ_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_gquad_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_gquad(SvIV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_gquad_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setiv(sv, (IV) vrna_md_defaults_gquad_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_uniq_ML_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_uniq_ML(SvIV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_uniq_ML_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setiv(sv, (IV) vrna_md_defaults_uniq_ML_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_energy_set_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_energy_set(SvIV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_energy_set_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setiv(sv, (IV) vrna_md_defaults_energy_set_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_backtrack_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_backtrack(SvIV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_backtrack_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setiv(sv, (IV) vrna_md_defaults_backtrack_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_backtrack_type_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    char val;
    int res = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""backtrack_type""' of type '""char""'");
    }
    backtrack_type = static_cast< char >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_backtrack_type_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(backtrack_type)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_do_backtrack_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_compute_bpp(SvIV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_do_backtrack_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setiv(sv, (IV) vrna_md_defaults_compute_bpp_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_compute_bpp_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_compute_bpp(SvIV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_compute_bpp_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setiv(sv, (IV) vrna_md_defaults_compute_bpp_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_max_bp_span_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_max_bp_span(SvIV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_max_bp_span_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setiv(sv, (IV) vrna_md_defaults_max_bp_span_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_min_loop_size_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_min_loop_size(SvIV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_min_loop_size_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setiv(sv, (IV) vrna_md_defaults_min_loop_size_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_window_size_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_window_size(SvIV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_window_size_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setiv(sv, (IV) vrna_md_defaults_window_size_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_oldAliEn_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_oldAliEn(SvIV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_oldAliEn_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setiv(sv, (IV) vrna_md_defaults_oldAliEn_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_ribo_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_ribo(SvIV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_ribo_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setiv(sv, (IV) vrna_md_defaults_ribo_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_cv_fact_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_cv_fact((double)SvNV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_cv_fact_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setnv(sv, (double) vrna_md_defaults_cv_fact_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_nc_fact_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_nc_fact((double)SvNV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_nc_fact_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setnv(sv, (double) vrna_md_defaults_nc_fact_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_sfact_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    vrna_md_defaults_sfact((double)SvNV(sv));
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_sfact_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    sv_setnv(sv, (double) vrna_md_defaults_sfact_get());
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_pf_scale_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    double val;
    int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""pf_scale""' of type '""double""'");
    }
    pf_scale = static_cast< double >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_pf_scale_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(pf_scale)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_nonstandards_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(sv, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""nonstandards""' of type '""char *""'");
    }
    if (nonstandards) delete[] nonstandards;
    if (alloc == SWIG_NEWOBJ) {
      nonstandards = cptr;
    } else {
      nonstandards = csize ? (char *)reinterpret_cast< char* >(memcpy(new char[csize], cptr, sizeof(char)*(csize))) : 0;
    }
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_nonstandards_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_FromCharPtr(nonstandards))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_xsubi_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    unsigned short *inp = 0;
    int res = SWIG_ConvertPtr(sv, SWIG_as_voidptrptr(&inp), SWIGTYPE_p_unsigned_short,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""xsubi""' of type '""unsigned short [3]""'");
    } else if (inp) {
      size_t ii = 0;
      for (; ii < (size_t)3; ++ii) *(unsigned short *)&xsubi[ii] = *((unsigned short *)inp + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""xsubi""' of type '""unsigned short [3]""'");
    }
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_xsubi_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(xsubi));
  return 1;
}


SWIGCLASS_STATIC int _wrap_rna_plot_type_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int val;
    int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""rna_plot_type""' of type '""int""'");
    }
    rna_plot_type = static_cast< int >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_rna_plot_type_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(rna_plot_type)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_cut_point_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int val;
    int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""cut_point""' of type '""int""'");
    }
    cut_point = static_cast< int >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_cut_point_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(cut_point)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_eos_debug_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int val;
    int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""eos_debug""' of type '""int""'");
    }
    eos_debug = static_cast< int >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_eos_debug_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(eos_debug)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_st_back_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int val;
    int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""st_back""' of type '""int""'");
    }
    st_back = static_cast< int >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_st_back_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(st_back)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_mirnatog_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int val;
    int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""mirnatog""' of type '""int""'");
    }
    mirnatog = static_cast< int >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_mirnatog_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(mirnatog)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_F_monomer_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    double *inp = 0;
    int res = SWIG_ConvertPtr(sv, SWIG_as_voidptrptr(&inp), SWIGTYPE_p_double,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""F_monomer""' of type '""double [2]""'");
    } else if (inp) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) *(double *)&F_monomer[ii] = *((double *)inp + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""F_monomer""' of type '""double [2]""'");
    }
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_F_monomer_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(F_monomer));
  return 1;
}


SWIGCLASS_STATIC int _wrap_subopt_sorted_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int val;
    int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""subopt_sorted""' of type '""int""'");
    }
    subopt_sorted = static_cast< int >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_subopt_sorted_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(subopt_sorted)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_print_energy_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    double val;
    int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""print_energy""' of type '""double""'");
    }
    print_energy = static_cast< double >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_print_energy_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(print_energy)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_density_of_states_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int *inp = 0;
    int res = SWIG_ConvertPtr(sv, SWIG_as_voidptrptr(&inp), SWIGTYPE_p_int,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""density_of_states""' of type '""int [1000+1]""'");
    } else if (inp) {
      size_t ii = 0;
      for (; ii < (size_t)1000+1; ++ii) *(int *)&density_of_states[ii] = *((int *)inp + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""density_of_states""' of type '""int [1000+1]""'");
    }
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_density_of_states_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    AV* av = (AV*)sv_2mortal((SV*)newAV());
    int i = 0,len = 0;
    len = 1000+1;
    
    for (i = 0; i < len ; i++) {
      SV *v = newSViv(density_of_states[i]);
      if (!av_store(av, i, v))
      SvREFCNT_dec(v);
    }
    sv_setsv(sv, sv_2mortal(newRV_noinc((SV*) av )));
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_symbolset_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(sv, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""symbolset""' of type '""char *""'");
    }
    if (symbolset) delete[] symbolset;
    if (alloc == SWIG_NEWOBJ) {
      symbolset = cptr;
    } else {
      symbolset = csize ? (char *)reinterpret_cast< char* >(memcpy(new char[csize], cptr, sizeof(char)*(csize))) : 0;
    }
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_symbolset_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_FromCharPtr(symbolset))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_final_cost_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    float val;
    int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""final_cost""' of type '""float""'");
    }
    final_cost = static_cast< float >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_final_cost_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(final_cost)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_give_up_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int val;
    int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""give_up""' of type '""int""'");
    }
    give_up = static_cast< int >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_give_up_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(give_up)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_inv_verbose_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int val;
    int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""inv_verbose""' of type '""int""'");
    }
    inv_verbose = static_cast< int >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_inv_verbose_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(inv_verbose)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_loop_size_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int *inp = 0;
    int res = SWIG_ConvertPtr(sv, SWIG_as_voidptrptr(&inp), SWIGTYPE_p_int,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""loop_size""' of type '""int [1000]""'");
    } else if (inp) {
      size_t ii = 0;
      for (; ii < (size_t)1000; ++ii) *(int *)&loop_size[ii] = *((int *)inp + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""loop_size""' of type '""int [1000]""'");
    }
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_loop_size_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    AV* av = (AV*)sv_2mortal((SV*)newAV());
    int i = 0,len = 0;
    len = 1000;
    
    for (i = 0; i < len ; i++) {
      SV *v = newSViv(loop_size[i]);
      if (!av_store(av, i, v))
      SvREFCNT_dec(v);
    }
    sv_setsv(sv, sv_2mortal(newRV_noinc((SV*) av )));
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_helix_size_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int *inp = 0;
    int res = SWIG_ConvertPtr(sv, SWIG_as_voidptrptr(&inp), SWIGTYPE_p_int,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""helix_size""' of type '""int [1000]""'");
    } else if (inp) {
      size_t ii = 0;
      for (; ii < (size_t)1000; ++ii) *(int *)&helix_size[ii] = *((int *)inp + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""helix_size""' of type '""int [1000]""'");
    }
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_helix_size_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    AV* av = (AV*)sv_2mortal((SV*)newAV());
    int i = 0,len = 0;
    len = 1000;
    
    for (i = 0; i < len ; i++) {
      SV *v = newSViv(helix_size[i]);
      if (!av_store(av, i, v))
      SvREFCNT_dec(v);
    }
    sv_setsv(sv, sv_2mortal(newRV_noinc((SV*) av )));
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_loop_degree_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int *inp = 0;
    int res = SWIG_ConvertPtr(sv, SWIG_as_voidptrptr(&inp), SWIGTYPE_p_int,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""loop_degree""' of type '""int [1000]""'");
    } else if (inp) {
      size_t ii = 0;
      for (; ii < (size_t)1000; ++ii) *(int *)&loop_degree[ii] = *((int *)inp + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""loop_degree""' of type '""int [1000]""'");
    }
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_loop_degree_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    AV* av = (AV*)sv_2mortal((SV*)newAV());
    int i = 0,len = 0;
    len = 1000;
    
    for (i = 0; i < len ; i++) {
      SV *v = newSViv(loop_degree[i]);
      if (!av_store(av, i, v))
      SvREFCNT_dec(v);
    }
    sv_setsv(sv, sv_2mortal(newRV_noinc((SV*) av )));
  }
  return 1;
}


SWIGCLASS_STATIC int _wrap_loops_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int val;
    int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""loops""' of type '""int""'");
    }
    loops = static_cast< int >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_loops_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(loops)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_unpaired_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int val;
    int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""unpaired""' of type '""int""'");
    }
    unpaired = static_cast< int >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_unpaired_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(unpaired)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_pairs_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int val;
    int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""pairs""' of type '""int""'");
    }
    pairs = static_cast< int >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_pairs_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(pairs)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_edit_backtrack_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int val;
    int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""edit_backtrack""' of type '""int""'");
    }
    edit_backtrack = static_cast< int >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_edit_backtrack_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(edit_backtrack)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_aligned_line_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    char * *inp = 0;
    int res = SWIG_ConvertPtr(sv, SWIG_as_voidptrptr(&inp), SWIGTYPE_p_p_char,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""aligned_line""' of type '""char *[2]""'");
    } else if (inp) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) *(char * *)&aligned_line[ii] = *((char * *)inp + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""aligned_line""' of type '""char *[2]""'");
    }
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_aligned_line_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(aligned_line));
  return 1;
}


SWIGCLASS_STATIC int _wrap_cost_matrix_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int val;
    int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""cost_matrix""' of type '""int""'");
    }
    cost_matrix = static_cast< int >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_cost_matrix_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(cost_matrix)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_base_pair_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(base_pair));
  return 1;
}


SWIGCLASS_STATIC int _wrap_pr_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(pr));
  return 1;
}


SWIGCLASS_STATIC int _wrap_iindx_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setiv(SvRV(sv),PTR2IV(iindx));
  return 1;
}


SWIGCLASS_STATIC int _wrap_fold_constrained_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int val;
    int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""fold_constrained""' of type '""int""'");
    }
    fold_constrained = static_cast< int >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_fold_constrained_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(fold_constrained)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_csv_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int val;
    int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""csv""' of type '""int""'");
    }
    csv = static_cast< int >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_csv_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(csv)))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_RibosumFile_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    char *cptr = 0; size_t csize = 0; int alloc = SWIG_NEWOBJ;
    int res = SWIG_AsCharPtrAndSize(sv, &cptr, &csize, &alloc);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""RibosumFile""' of type '""char *""'");
    }
    if (RibosumFile) delete[] RibosumFile;
    if (alloc == SWIG_NEWOBJ) {
      RibosumFile = cptr;
    } else {
      RibosumFile = csize ? (char *)reinterpret_cast< char* >(memcpy(new char[csize], cptr, sizeof(char)*(csize))) : 0;
    }
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_RibosumFile_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_FromCharPtr(RibosumFile))  ;
  return 1;
}


SWIGCLASS_STATIC int _wrap_james_rule_set(pTHX_ SV* sv, MAGIC * SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  {
    int val;
    int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(sv, &val);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""james_rule""' of type '""int""'");
    }
    james_rule = static_cast< int >(val);
  }
fail:
  return 1;
}


SWIGCLASS_STATIC int _wrap_james_rule_get(pTHX_ SV *sv, MAGIC *SWIGUNUSEDPARM(mg)) {
  MAGIC_PPERL
  sv_setsv(sv,SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(james_rule)))  ;
  return 1;
}




#ifdef PERL_OBJECT
};
#endif

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
XS(_wrap_new_intP) {
  {
    size_t arg1 ;
    size_t val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    int *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_intP(nelements);");
    }
    ecode1 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_intP" "', argument " "1"" of type '" "size_t""'");
    } 
    arg1 = static_cast< size_t >(val1);
    result = (int *)new_intP(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_intP) {
  {
    int *arg1 = (int *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_intP(ary);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_int, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_intP" "', argument " "1"" of type '" "int *""'"); 
    }
    arg1 = reinterpret_cast< int * >(argp1);
    delete_intP(arg1);
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_intP_getitem) {
  {
    int *arg1 = (int *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: intP_getitem(ary,index);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_int, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intP_getitem" "', argument " "1"" of type '" "int *""'"); 
    }
    arg1 = reinterpret_cast< int * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intP_getitem" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    result = (int)intP_getitem(arg1,arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_intP_setitem) {
  {
    int *arg1 = (int *) 0 ;
    size_t arg2 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: intP_setitem(ary,index,value);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_int, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intP_setitem" "', argument " "1"" of type '" "int *""'"); 
    }
    arg1 = reinterpret_cast< int * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intP_setitem" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "intP_setitem" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    intP_setitem(arg1,arg2,arg3);
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_intArray) {
  {
    size_t arg1 ;
    size_t val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    intArray *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_intArray(nelements);");
    }
    ecode1 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_intArray" "', argument " "1"" of type '" "size_t""'");
    } 
    arg1 = static_cast< size_t >(val1);
    result = (intArray *)new_intArray(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_intArray, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_intArray) {
  {
    intArray *arg1 = (intArray *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_intArray(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_intArray, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_intArray" "', argument " "1"" of type '" "intArray *""'"); 
    }
    arg1 = reinterpret_cast< intArray * >(argp1);
    delete_intArray(arg1);
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_intArray_getitem) {
  {
    intArray *arg1 = (intArray *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: intArray_getitem(self,index);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_intArray, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intArray_getitem" "', argument " "1"" of type '" "intArray *""'"); 
    }
    arg1 = reinterpret_cast< intArray * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intArray_getitem" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    result = (int)intArray_getitem(arg1,arg2);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_intArray_setitem) {
  {
    intArray *arg1 = (intArray *) 0 ;
    size_t arg2 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: intArray_setitem(self,index,value);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_intArray, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intArray_setitem" "', argument " "1"" of type '" "intArray *""'"); 
    }
    arg1 = reinterpret_cast< intArray * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "intArray_setitem" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "intArray_setitem" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    intArray_setitem(arg1,arg2,arg3);
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_intArray_cast) {
  {
    intArray *arg1 = (intArray *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: intArray_cast(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_intArray, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intArray_cast" "', argument " "1"" of type '" "intArray *""'"); 
    }
    arg1 = reinterpret_cast< intArray * >(argp1);
    result = (int *)intArray_cast(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_intArray_frompointer) {
  {
    int *arg1 = (int *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    intArray *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: intArray_frompointer(t);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_int, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intArray_frompointer" "', argument " "1"" of type '" "int *""'"); 
    }
    arg1 = reinterpret_cast< int * >(argp1);
    result = (intArray *)intArray_frompointer(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_intArray, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_floatP) {
  {
    size_t arg1 ;
    size_t val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    float *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_floatP(nelements);");
    }
    ecode1 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_floatP" "', argument " "1"" of type '" "size_t""'");
    } 
    arg1 = static_cast< size_t >(val1);
    result = (float *)new_floatP(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_floatP) {
  {
    float *arg1 = (float *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_floatP(ary);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_float, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_floatP" "', argument " "1"" of type '" "float *""'"); 
    }
    arg1 = reinterpret_cast< float * >(argp1);
    delete_floatP(arg1);
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_floatP_getitem) {
  {
    float *arg1 = (float *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: floatP_getitem(ary,index);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_float, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "floatP_getitem" "', argument " "1"" of type '" "float *""'"); 
    }
    arg1 = reinterpret_cast< float * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "floatP_getitem" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    result = (float)floatP_getitem(arg1,arg2);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_floatP_setitem) {
  {
    float *arg1 = (float *) 0 ;
    size_t arg2 ;
    float arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    float val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: floatP_setitem(ary,index,value);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_float, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "floatP_setitem" "', argument " "1"" of type '" "float *""'"); 
    }
    arg1 = reinterpret_cast< float * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "floatP_setitem" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    ecode3 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "floatP_setitem" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
    floatP_setitem(arg1,arg2,arg3);
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_floatArray) {
  {
    size_t arg1 ;
    size_t val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    floatArray *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_floatArray(nelements);");
    }
    ecode1 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_floatArray" "', argument " "1"" of type '" "size_t""'");
    } 
    arg1 = static_cast< size_t >(val1);
    result = (floatArray *)new_floatArray(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_floatArray, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_floatArray) {
  {
    floatArray *arg1 = (floatArray *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_floatArray(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_floatArray, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_floatArray" "', argument " "1"" of type '" "floatArray *""'"); 
    }
    arg1 = reinterpret_cast< floatArray * >(argp1);
    delete_floatArray(arg1);
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_floatArray_getitem) {
  {
    floatArray *arg1 = (floatArray *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: floatArray_getitem(self,index);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_floatArray, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "floatArray_getitem" "', argument " "1"" of type '" "floatArray *""'"); 
    }
    arg1 = reinterpret_cast< floatArray * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "floatArray_getitem" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    result = (float)floatArray_getitem(arg1,arg2);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_floatArray_setitem) {
  {
    floatArray *arg1 = (floatArray *) 0 ;
    size_t arg2 ;
    float arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    float val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: floatArray_setitem(self,index,value);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_floatArray, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "floatArray_setitem" "', argument " "1"" of type '" "floatArray *""'"); 
    }
    arg1 = reinterpret_cast< floatArray * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "floatArray_setitem" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    ecode3 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "floatArray_setitem" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
    floatArray_setitem(arg1,arg2,arg3);
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_floatArray_cast) {
  {
    floatArray *arg1 = (floatArray *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    float *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: floatArray_cast(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_floatArray, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "floatArray_cast" "', argument " "1"" of type '" "floatArray *""'"); 
    }
    arg1 = reinterpret_cast< floatArray * >(argp1);
    result = (float *)floatArray_cast(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_floatArray_frompointer) {
  {
    float *arg1 = (float *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    floatArray *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: floatArray_frompointer(t);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_float, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "floatArray_frompointer" "', argument " "1"" of type '" "float *""'"); 
    }
    arg1 = reinterpret_cast< float * >(argp1);
    result = (floatArray *)floatArray_frompointer(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_floatArray, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_doubleP) {
  {
    size_t arg1 ;
    size_t val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    double *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_doubleP(nelements);");
    }
    ecode1 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_doubleP" "', argument " "1"" of type '" "size_t""'");
    } 
    arg1 = static_cast< size_t >(val1);
    result = (double *)new_doubleP(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_doubleP) {
  {
    double *arg1 = (double *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_doubleP(ary);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_double, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_doubleP" "', argument " "1"" of type '" "double *""'"); 
    }
    arg1 = reinterpret_cast< double * >(argp1);
    delete_doubleP(arg1);
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_doubleP_getitem) {
  {
    double *arg1 = (double *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: doubleP_getitem(ary,index);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_double, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "doubleP_getitem" "', argument " "1"" of type '" "double *""'"); 
    }
    arg1 = reinterpret_cast< double * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "doubleP_getitem" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    result = (double)doubleP_getitem(arg1,arg2);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_doubleP_setitem) {
  {
    double *arg1 = (double *) 0 ;
    size_t arg2 ;
    double arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: doubleP_setitem(ary,index,value);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_double, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "doubleP_setitem" "', argument " "1"" of type '" "double *""'"); 
    }
    arg1 = reinterpret_cast< double * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "doubleP_setitem" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "doubleP_setitem" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    doubleP_setitem(arg1,arg2,arg3);
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_doubleArray) {
  {
    size_t arg1 ;
    size_t val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    doubleArray *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_doubleArray(nelements);");
    }
    ecode1 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_doubleArray" "', argument " "1"" of type '" "size_t""'");
    } 
    arg1 = static_cast< size_t >(val1);
    result = (doubleArray *)new_doubleArray(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_doubleArray, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_doubleArray) {
  {
    doubleArray *arg1 = (doubleArray *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_doubleArray(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_doubleArray, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_doubleArray" "', argument " "1"" of type '" "doubleArray *""'"); 
    }
    arg1 = reinterpret_cast< doubleArray * >(argp1);
    delete_doubleArray(arg1);
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_doubleArray_getitem) {
  {
    doubleArray *arg1 = (doubleArray *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: doubleArray_getitem(self,index);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_doubleArray, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "doubleArray_getitem" "', argument " "1"" of type '" "doubleArray *""'"); 
    }
    arg1 = reinterpret_cast< doubleArray * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "doubleArray_getitem" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    result = (double)doubleArray_getitem(arg1,arg2);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_doubleArray_setitem) {
  {
    doubleArray *arg1 = (doubleArray *) 0 ;
    size_t arg2 ;
    double arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: doubleArray_setitem(self,index,value);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_doubleArray, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "doubleArray_setitem" "', argument " "1"" of type '" "doubleArray *""'"); 
    }
    arg1 = reinterpret_cast< doubleArray * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "doubleArray_setitem" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "doubleArray_setitem" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    doubleArray_setitem(arg1,arg2,arg3);
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_doubleArray_cast) {
  {
    doubleArray *arg1 = (doubleArray *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: doubleArray_cast(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_doubleArray, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "doubleArray_cast" "', argument " "1"" of type '" "doubleArray *""'"); 
    }
    arg1 = reinterpret_cast< doubleArray * >(argp1);
    result = (double *)doubleArray_cast(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_doubleArray_frompointer) {
  {
    double *arg1 = (double *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    doubleArray *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: doubleArray_frompointer(t);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_double, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "doubleArray_frompointer" "', argument " "1"" of type '" "double *""'"); 
    }
    arg1 = reinterpret_cast< double * >(argp1);
    result = (doubleArray *)doubleArray_frompointer(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_doubleArray, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ushortP) {
  {
    size_t arg1 ;
    size_t val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    unsigned short *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ushortP(nelements);");
    }
    ecode1 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ushortP" "', argument " "1"" of type '" "size_t""'");
    } 
    arg1 = static_cast< size_t >(val1);
    result = (unsigned short *)new_ushortP(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_short, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_ushortP) {
  {
    unsigned short *arg1 = (unsigned short *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_ushortP(ary);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_unsigned_short, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ushortP" "', argument " "1"" of type '" "unsigned short *""'"); 
    }
    arg1 = reinterpret_cast< unsigned short * >(argp1);
    delete_ushortP(arg1);
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ushortP_getitem) {
  {
    unsigned short *arg1 = (unsigned short *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned short result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ushortP_getitem(ary,index);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_unsigned_short, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ushortP_getitem" "', argument " "1"" of type '" "unsigned short *""'"); 
    }
    arg1 = reinterpret_cast< unsigned short * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ushortP_getitem" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    result = (unsigned short)ushortP_getitem(arg1,arg2);
    ST(argvi) = SWIG_From_unsigned_SS_short  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned short >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ushortP_setitem) {
  {
    unsigned short *arg1 = (unsigned short *) 0 ;
    size_t arg2 ;
    unsigned short arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    unsigned short val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: ushortP_setitem(ary,index,value);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_unsigned_short, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ushortP_setitem" "', argument " "1"" of type '" "unsigned short *""'"); 
    }
    arg1 = reinterpret_cast< unsigned short * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ushortP_setitem" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_short SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ushortP_setitem" "', argument " "3"" of type '" "unsigned short""'");
    } 
    arg3 = static_cast< unsigned short >(val3);
    ushortP_setitem(arg1,arg2,arg3);
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_shortP) {
  {
    size_t arg1 ;
    size_t val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    short *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_shortP(nelements);");
    }
    ecode1 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_shortP" "', argument " "1"" of type '" "size_t""'");
    } 
    arg1 = static_cast< size_t >(val1);
    result = (short *)new_shortP(arg1);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_short, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_shortP) {
  {
    short *arg1 = (short *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_shortP(ary);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_short, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_shortP" "', argument " "1"" of type '" "short *""'"); 
    }
    arg1 = reinterpret_cast< short * >(argp1);
    delete_shortP(arg1);
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_shortP_getitem) {
  {
    short *arg1 = (short *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    short result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: shortP_getitem(ary,index);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_short, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "shortP_getitem" "', argument " "1"" of type '" "short *""'"); 
    }
    arg1 = reinterpret_cast< short * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "shortP_getitem" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    result = (short)shortP_getitem(arg1,arg2);
    ST(argvi) = SWIG_From_short  SWIG_PERL_CALL_ARGS_1(static_cast< short >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_shortP_setitem) {
  {
    short *arg1 = (short *) 0 ;
    size_t arg2 ;
    short arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    short val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: shortP_setitem(ary,index,value);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_short, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "shortP_setitem" "', argument " "1"" of type '" "short *""'"); 
    }
    arg1 = reinterpret_cast< short * >(argp1);
    ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "shortP_setitem" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    ecode3 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "shortP_setitem" "', argument " "3"" of type '" "short""'");
    } 
    arg3 = static_cast< short >(val3);
    shortP_setitem(arg1,arg2,arg3);
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_cdata) {
  {
    void *arg1 = (void *) 0 ;
    size_t arg2 = (size_t) 1 ;
    int res1 ;
    size_t val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    SWIGCDATA result;
    dXSARGS;
    
    if ((items < 1) || (items > 2)) {
      SWIG_croak("Usage: cdata(ptr,nelements);");
    }
    res1 = SWIG_ConvertPtr(ST(0),SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cdata" "', argument " "1"" of type '" "void *""'"); 
    }
    if (items > 1) {
      ecode2 = SWIG_AsVal_size_t SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
      if (!SWIG_IsOK(ecode2)) {
        SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cdata" "', argument " "2"" of type '" "size_t""'");
      } 
      arg2 = static_cast< size_t >(val2);
    }
    result = cdata_void(arg1,arg2);
    ST(argvi) = SWIG_FromCharPtrAndSize((&result)->data,(&result)->len); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_memmove) {
  {
    void *arg1 = (void *) 0 ;
    void *arg2 = (void *) 0 ;
    size_t arg3 ;
    int res1 ;
    int res2 ;
    char *buf2 = 0 ;
    size_t size2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: memmove(data,indata,inlen);");
    }
    res1 = SWIG_ConvertPtr(ST(0),SWIG_as_voidptrptr(&arg1), 0, 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "memmove" "', argument " "1"" of type '" "void *""'"); 
    }
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, &size2, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "memmove" "', argument " "2"" of type '" "void const *""'");
    }
    arg2 = reinterpret_cast< void * >(buf2);
    arg3 = static_cast< size_t >(size2);
    memmove(arg1,(void const *)arg2,arg3);
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DoublePair__SWIG_0) {
  {
    int argvi = 0;
    std::pair< double,double > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_DoublePair();");
    }
    {
      try {
        result = (std::pair< double,double > *)new std::pair< double,double >();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_double_double_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_DoublePair__SWIG_1) {
  {
    double arg1 ;
    double arg2 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::pair< double,double > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_DoublePair(first,second);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoublePair" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DoublePair" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      try {
        result = (std::pair< double,double > *)new std::pair< double,double >(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_double_double_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DoublePair__SWIG_2) {
  {
    std::pair< double,double > *arg1 = 0 ;
    void *argp1 ;
    int res1 = 0 ;
    int argvi = 0;
    std::pair< double,double > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_DoublePair(other);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1, SWIGTYPE_p_std__pairT_double_double_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DoublePair" "', argument " "1"" of type '" "std::pair< double,double > const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DoublePair" "', argument " "1"" of type '" "std::pair< double,double > const &""'"); 
    }
    arg1 = reinterpret_cast< std::pair< double,double > * >(argp1);
    {
      try {
        result = (std::pair< double,double > *)new std::pair< double,double >((std::pair< double,double > const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_double_double_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DoublePair) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_std__pairT_double_double_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_DoublePair__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_DoublePair__SWIG_2); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_DoublePair__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'new_DoublePair'");
  XSRETURN(0);
}


XS(_wrap_DoublePair_first_set) {
  {
    std::pair< double,double > *arg1 = (std::pair< double,double > *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DoublePair_first_set(self,first);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__pairT_double_double_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoublePair_first_set" "', argument " "1"" of type '" "std::pair< double,double > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< double,double > * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoublePair_first_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (arg1) (arg1)->first = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DoublePair_first_get) {
  {
    std::pair< double,double > *arg1 = (std::pair< double,double > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DoublePair_first_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__pairT_double_double_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoublePair_first_get" "', argument " "1"" of type '" "std::pair< double,double > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< double,double > * >(argp1);
    result = (double) ((arg1)->first);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DoublePair_second_set) {
  {
    std::pair< double,double > *arg1 = (std::pair< double,double > *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DoublePair_second_set(self,second);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__pairT_double_double_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoublePair_second_set" "', argument " "1"" of type '" "std::pair< double,double > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< double,double > * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoublePair_second_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (arg1) (arg1)->second = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DoublePair_second_get) {
  {
    std::pair< double,double > *arg1 = (std::pair< double,double > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DoublePair_second_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__pairT_double_double_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoublePair_second_get" "', argument " "1"" of type '" "std::pair< double,double > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< double,double > * >(argp1);
    result = (double) ((arg1)->second);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_DoublePair) {
  {
    std::pair< double,double > *arg1 = (std::pair< double,double > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_DoublePair(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__pairT_double_double_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoublePair" "', argument " "1"" of type '" "std::pair< double,double > *""'"); 
    }
    arg1 = reinterpret_cast< std::pair< double,double > * >(argp1);
    {
      try {
        delete arg1;
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_IntVector__SWIG_0) {
  {
    unsigned int arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::vector< int > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_IntVector(size);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      try {
        result = (std::vector< int > *)new std::vector< int >(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_IntVector__SWIG_1) {
  {
    int argvi = 0;
    std::vector< int > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_IntVector();");
    }
    {
      try {
        result = (std::vector< int > *)new std::vector< int >();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_IntVector__SWIG_2) {
  {
    unsigned int arg1 ;
    int arg2 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::vector< int > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_IntVector(size,value);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IntVector" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        result = (std::vector< int > *)new std::vector< int >(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_IntVector__SWIG_3) {
  {
    std::vector< int > *arg1 = 0 ;
    std::vector< int > temp1 ;
    std::vector< int > *v1 ;
    int argvi = 0;
    std::vector< int > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_IntVector(other);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_IntVector. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            temp1.push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_IntVector. "
              "Expected an array of ""int");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_IntVector. "
          "Expected an array of ""int");
      }
    }
    {
      try {
        result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_IntVector) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< int >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_IntVector__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_IntVector__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_IntVector__SWIG_3); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_IntVector__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_IntVector'");
  XSRETURN(0);
}


XS(_wrap_IntVector_size) {
  {
    std::vector< int > *arg1 = (std::vector< int > *) 0 ;
    std::vector< int > temp1 ;
    std::vector< int > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IntVector_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of IntVector_size. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            temp1.push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "IntVector_size. "
              "Expected an array of ""int");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of IntVector_size. "
          "Expected an array of ""int");
      }
    }
    {
      try {
        result = (unsigned int)((std::vector< int > const *)arg1)->size();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IntVector_empty) {
  {
    std::vector< int > *arg1 = (std::vector< int > *) 0 ;
    std::vector< int > temp1 ;
    std::vector< int > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IntVector_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of IntVector_empty. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            temp1.push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "IntVector_empty. "
              "Expected an array of ""int");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of IntVector_empty. "
          "Expected an array of ""int");
      }
    }
    {
      try {
        result = (bool)((std::vector< int > const *)arg1)->empty();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IntVector_clear) {
  {
    std::vector< int > *arg1 = (std::vector< int > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IntVector_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_clear" "', argument " "1"" of type '" "std::vector< int > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< int > * >(argp1);
    {
      try {
        (arg1)->clear();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IntVector_push) {
  {
    std::vector< int > *arg1 = (std::vector< int > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IntVector_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_push" "', argument " "1"" of type '" "std::vector< int > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_push" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        (arg1)->push_back(arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IntVector_pop) {
  {
    std::vector< int > *arg1 = (std::vector< int > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IntVector_pop(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_pop" "', argument " "1"" of type '" "std::vector< int > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< int > * >(argp1);
    {
      try {
        try {
          result = (int)std_vector_Sl_int_Sg__pop(arg1);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IntVector_get) {
  {
    std::vector< int > *arg1 = (std::vector< int > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IntVector_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_get" "', argument " "1"" of type '" "std::vector< int > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        try {
          result = (int)std_vector_Sl_int_Sg__get(arg1,arg2);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IntVector_set) {
  {
    std::vector< int > *arg1 = (std::vector< int > *) 0 ;
    int arg2 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IntVector_set(self,i,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_set" "', argument " "1"" of type '" "std::vector< int > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_set" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        try {
          std_vector_Sl_int_Sg__set(arg1,arg2,arg3);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IntVector) {
  {
    std::vector< int > *arg1 = (std::vector< int > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IntVector(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntVector" "', argument " "1"" of type '" "std::vector< int > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< int > * >(argp1);
    {
      try {
        delete arg1;
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_UIntVector__SWIG_0) {
  {
    unsigned int arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::vector< unsigned int > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_UIntVector(size);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UIntVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      try {
        result = (std::vector< unsigned int > *)new std::vector< unsigned int >(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_UIntVector__SWIG_1) {
  {
    int argvi = 0;
    std::vector< unsigned int > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_UIntVector();");
    }
    {
      try {
        result = (std::vector< unsigned int > *)new std::vector< unsigned int >();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_UIntVector__SWIG_2) {
  {
    unsigned int arg1 ;
    unsigned int arg2 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::vector< unsigned int > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_UIntVector(size,value);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UIntVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_UIntVector" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try {
        result = (std::vector< unsigned int > *)new std::vector< unsigned int >(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_UIntVector__SWIG_3) {
  {
    std::vector< unsigned int > *arg1 = 0 ;
    std::vector< unsigned int > temp1 ;
    std::vector< unsigned int > *v1 ;
    int argvi = 0;
    std::vector< unsigned int > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_UIntVector(other);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_unsigned_int_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_UIntVector. "
          "Expected an array of ""unsigned int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            temp1.push_back((unsigned int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_UIntVector. "
              "Expected an array of ""unsigned int");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_UIntVector. "
          "Expected an array of ""unsigned int");
      }
    }
    {
      try {
        result = (std::vector< unsigned int > *)new std::vector< unsigned int >((std::vector< unsigned int > const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_UIntVector) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< unsigned int >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_unsigned_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_UIntVector__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_UIntVector__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_UIntVector__SWIG_3); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_UIntVector__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_UIntVector'");
  XSRETURN(0);
}


XS(_wrap_UIntVector_size) {
  {
    std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
    std::vector< unsigned int > temp1 ;
    std::vector< unsigned int > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: UIntVector_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_unsigned_int_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of UIntVector_size. "
          "Expected an array of ""unsigned int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            temp1.push_back((unsigned int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "UIntVector_size. "
              "Expected an array of ""unsigned int");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of UIntVector_size. "
          "Expected an array of ""unsigned int");
      }
    }
    {
      try {
        result = (unsigned int)((std::vector< unsigned int > const *)arg1)->size();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_UIntVector_empty) {
  {
    std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
    std::vector< unsigned int > temp1 ;
    std::vector< unsigned int > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: UIntVector_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_unsigned_int_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of UIntVector_empty. "
          "Expected an array of ""unsigned int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            temp1.push_back((unsigned int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "UIntVector_empty. "
              "Expected an array of ""unsigned int");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of UIntVector_empty. "
          "Expected an array of ""unsigned int");
      }
    }
    {
      try {
        result = (bool)((std::vector< unsigned int > const *)arg1)->empty();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_UIntVector_clear) {
  {
    std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: UIntVector_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_clear" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
    {
      try {
        (arg1)->clear();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_UIntVector_push) {
  {
    std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: UIntVector_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_push" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntVector_push" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try {
        (arg1)->push_back(arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_UIntVector_pop) {
  {
    std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: UIntVector_pop(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_pop" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
    {
      try {
        try {
          result = (unsigned int)std_vector_Sl_unsigned_SS_int_Sg__pop(arg1);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_UIntVector_get) {
  {
    std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: UIntVector_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_get" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntVector_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        try {
          result = (unsigned int)std_vector_Sl_unsigned_SS_int_Sg__get(arg1,arg2);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_UIntVector_set) {
  {
    std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
    int arg2 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: UIntVector_set(self,i,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UIntVector_set" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UIntVector_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "UIntVector_set" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        try {
          std_vector_Sl_unsigned_SS_int_Sg__set(arg1,arg2,arg3);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_UIntVector) {
  {
    std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_UIntVector(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UIntVector" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
    {
      try {
        delete arg1;
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DoubleVector__SWIG_0) {
  {
    unsigned int arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::vector< double > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_DoubleVector(size);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      try {
        result = (std::vector< double > *)new std::vector< double >(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DoubleVector__SWIG_1) {
  {
    int argvi = 0;
    std::vector< double > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_DoubleVector();");
    }
    {
      try {
        result = (std::vector< double > *)new std::vector< double >();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_DoubleVector__SWIG_2) {
  {
    unsigned int arg1 ;
    double arg2 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::vector< double > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_DoubleVector(size,value);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DoubleVector" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      try {
        result = (std::vector< double > *)new std::vector< double >(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DoubleVector__SWIG_3) {
  {
    std::vector< double > *arg1 = 0 ;
    std::vector< double > temp1 ;
    std::vector< double > *v1 ;
    int argvi = 0;
    std::vector< double > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_DoubleVector(other);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_double_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_DoubleVector. "
          "Expected an array of ""double");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvNIOK(*tv)) {
            temp1.push_back((double)SwigSvToNumber(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_DoubleVector. "
              "Expected an array of ""double");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_DoubleVector. "
          "Expected an array of ""double");
      }
    }
    {
      try {
        result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DoubleVector) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< double >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_double_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvNIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_DoubleVector__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_DoubleVector__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_DoubleVector__SWIG_3); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_DoubleVector__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_DoubleVector'");
  XSRETURN(0);
}


XS(_wrap_DoubleVector_size) {
  {
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    std::vector< double > temp1 ;
    std::vector< double > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DoubleVector_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_double_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of DoubleVector_size. "
          "Expected an array of ""double");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvNIOK(*tv)) {
            temp1.push_back((double)SwigSvToNumber(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "DoubleVector_size. "
              "Expected an array of ""double");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of DoubleVector_size. "
          "Expected an array of ""double");
      }
    }
    {
      try {
        result = (unsigned int)((std::vector< double > const *)arg1)->size();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DoubleVector_empty) {
  {
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    std::vector< double > temp1 ;
    std::vector< double > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DoubleVector_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_double_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of DoubleVector_empty. "
          "Expected an array of ""double");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvNIOK(*tv)) {
            temp1.push_back((double)SwigSvToNumber(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "DoubleVector_empty. "
              "Expected an array of ""double");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of DoubleVector_empty. "
          "Expected an array of ""double");
      }
    }
    {
      try {
        result = (bool)((std::vector< double > const *)arg1)->empty();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DoubleVector_clear) {
  {
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DoubleVector_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    {
      try {
        (arg1)->clear();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DoubleVector_push) {
  {
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DoubleVector_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_push" "', argument " "1"" of type '" "std::vector< double > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_push" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      try {
        (arg1)->push_back(arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DoubleVector_pop) {
  {
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DoubleVector_pop(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    {
      try {
        try {
          result = (double)std_vector_Sl_double_Sg__pop(arg1);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DoubleVector_get) {
  {
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DoubleVector_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_get" "', argument " "1"" of type '" "std::vector< double > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        try {
          result = (double)std_vector_Sl_double_Sg__get(arg1,arg2);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DoubleVector_set) {
  {
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    int arg2 ;
    double arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: DoubleVector_set(self,i,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_double_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_set" "', argument " "1"" of type '" "std::vector< double > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_set" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    {
      try {
        try {
          std_vector_Sl_double_Sg__set(arg1,arg2,arg3);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_DoubleVector) {
  {
    std::vector< double > *arg1 = (std::vector< double > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_DoubleVector(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleVector" "', argument " "1"" of type '" "std::vector< double > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< double > * >(argp1);
    {
      try {
        delete arg1;
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_StringVector__SWIG_0) {
  {
    unsigned int arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::vector< std::string > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_StringVector(size);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      try {
        result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_StringVector__SWIG_1) {
  {
    int argvi = 0;
    std::vector< std::string > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_StringVector();");
    }
    {
      try {
        result = (std::vector< std::string > *)new std::vector< std::string >();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_StringVector__SWIG_2) {
  {
    unsigned int arg1 ;
    std::string arg2 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::vector< std::string > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_StringVector(size,value);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_StringVector" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (std::vector< std::string > *)new std::vector< std::string >(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_StringVector__SWIG_3) {
  {
    std::vector< std::string > *arg1 = 0 ;
    std::vector< std::string > temp1 ;
    std::vector< std::string > *v1 ;
    int argvi = 0;
    std::vector< std::string > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_StringVector(other);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_StringVector. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            temp1.push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_StringVector. "
              "Expected an array of ""std::string");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_StringVector. "
          "Expected an array of ""std::string");
      }
    }
    {
      try {
        result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_StringVector) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_StringVector__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_StringVector__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_StringVector__SWIG_3); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_StringVector__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_StringVector'");
  XSRETURN(0);
}


XS(_wrap_StringVector_size) {
  {
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    std::vector< std::string > temp1 ;
    std::vector< std::string > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: StringVector_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of StringVector_size. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            temp1.push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "StringVector_size. "
              "Expected an array of ""std::string");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of StringVector_size. "
          "Expected an array of ""std::string");
      }
    }
    {
      try {
        result = (unsigned int)((std::vector< std::string > const *)arg1)->size();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_StringVector_empty) {
  {
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    std::vector< std::string > temp1 ;
    std::vector< std::string > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: StringVector_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of StringVector_empty. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            temp1.push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "StringVector_empty. "
              "Expected an array of ""std::string");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of StringVector_empty. "
          "Expected an array of ""std::string");
      }
    }
    {
      try {
        result = (bool)((std::vector< std::string > const *)arg1)->empty();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_StringVector_clear) {
  {
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: StringVector_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    {
      try {
        (arg1)->clear();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_StringVector_push) {
  {
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    std::string arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: StringVector_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_push" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "StringVector_push" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        (arg1)->push_back(arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_StringVector_pop) {
  {
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::string result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: StringVector_pop(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_pop" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    {
      try {
        try {
          result = std_vector_Sl_std_string_Sg__pop(arg1);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_StringVector_get) {
  {
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::string result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: StringVector_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_get" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        try {
          result = std_vector_Sl_std_string_Sg__get(arg1,arg2);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_StringVector_set) {
  {
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    int arg2 ;
    std::string arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: StringVector_set(self,i,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_set" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "StringVector_set" "', argument " "3"" of type '" "std::string""'"); 
      }
      arg3 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        try {
          std_vector_Sl_std_string_Sg__set(arg1,arg2,arg3);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_StringVector) {
  {
    std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_StringVector(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StringVector" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
    {
      try {
        delete arg1;
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstCharVector__SWIG_0) {
  {
    unsigned int arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::vector< char const * > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ConstCharVector(size);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ConstCharVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      try {
        result = (std::vector< char const * > *)new std::vector< char const * >(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_const_p_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstCharVector__SWIG_1) {
  {
    int argvi = 0;
    std::vector< char const * > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_ConstCharVector();");
    }
    {
      try {
        result = (std::vector< char const * > *)new std::vector< char const * >();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_const_p_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstCharVector__SWIG_2) {
  {
    unsigned int arg1 ;
    char *arg2 = (char *) 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    std::vector< char const * > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_ConstCharVector(size,value);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ConstCharVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ConstCharVector" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        result = (std::vector< char const * > *)new std::vector< char const * >(arg1,(char const *)arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_const_p_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstCharVector__SWIG_3) {
  {
    std::vector< char const * > *arg1 = 0 ;
    std::vector< char const * > temp1 ;
    std::vector< char const * > *v1 ;
    int argvi = 0;
    std::vector< char const * > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ConstCharVector(other);");
    }
    {
      int res = SWIG_ConvertPtr(ST(0),(void **) &v1, SWIGTYPE_p_std__vectorT_char_const_p_t,0);
      if (SWIG_IsOK(res)) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_ConstCharVector. "
          "Expected an array of " "char const");
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          void *v1;
          SV **tv = av_fetch(av, i, 0);
          int res = SWIG_ConvertPtr(*tv, &v1, SWIGTYPE_p_char,0);
          if (SWIG_IsOK(res)) {
            temp1.push_back(static_cast< char const * >(v1));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_ConstCharVector. "
              "Expected an array of " "char const");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_ConstCharVector. "
          "Expected an array of " "char const");
      }
    }
    {
      try {
        result = (std::vector< char const * > *)new std::vector< char const * >((std::vector< char const * > const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_const_p_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ConstCharVector) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< char const *> *v;
            int res = SWIG_ConvertPtr(ST(0),SWIG_as_voidptrptr(&v), SWIGTYPE_p_std__vectorT_char_const_p_t,0);
            if (SWIG_IsOK(res)) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  void *v;
                  SV **tv = av_fetch(av, 0, 0);
                  int res = SWIG_ConvertPtr(*tv, &v, SWIGTYPE_p_char,0);
                  if (SWIG_IsOK(res))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstCharVector__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstCharVector__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstCharVector__SWIG_3); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ConstCharVector__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_ConstCharVector'");
  XSRETURN(0);
}


XS(_wrap_ConstCharVector_size) {
  {
    std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
    std::vector< char const * > temp1 ;
    std::vector< char const * > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ConstCharVector_size(self);");
    }
    {
      int res = SWIG_ConvertPtr(ST(0),(void **) &v1, SWIGTYPE_p_std__vectorT_char_const_p_t,0);
      if (SWIG_IsOK(res)) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of ConstCharVector_size. "
          "Expected an array of " "char const");
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          void *v1;
          SV **tv = av_fetch(av, i, 0);
          int res = SWIG_ConvertPtr(*tv, &v1, SWIGTYPE_p_char,0);
          if (SWIG_IsOK(res)) {
            temp1.push_back(static_cast< char const * >(v1));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "ConstCharVector_size. "
              "Expected an array of " "char const");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of ConstCharVector_size. "
          "Expected an array of " "char const");
      }
    }
    {
      try {
        result = (unsigned int)((std::vector< char const * > const *)arg1)->size();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstCharVector_empty) {
  {
    std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
    std::vector< char const * > temp1 ;
    std::vector< char const * > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ConstCharVector_empty(self);");
    }
    {
      int res = SWIG_ConvertPtr(ST(0),(void **) &v1, SWIGTYPE_p_std__vectorT_char_const_p_t,0);
      if (SWIG_IsOK(res)) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of ConstCharVector_empty. "
          "Expected an array of " "char const");
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          void *v1;
          SV **tv = av_fetch(av, i, 0);
          int res = SWIG_ConvertPtr(*tv, &v1, SWIGTYPE_p_char,0);
          if (SWIG_IsOK(res)) {
            temp1.push_back(static_cast< char const * >(v1));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "ConstCharVector_empty. "
              "Expected an array of " "char const");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of ConstCharVector_empty. "
          "Expected an array of " "char const");
      }
    }
    {
      try {
        result = (bool)((std::vector< char const * > const *)arg1)->empty();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstCharVector_clear) {
  {
    std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ConstCharVector_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_char_const_p_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstCharVector_clear" "', argument " "1"" of type '" "std::vector< char const * > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< char const * > * >(argp1);
    {
      try {
        (arg1)->clear();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstCharVector_push) {
  {
    std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ConstCharVector_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_char_const_p_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstCharVector_push" "', argument " "1"" of type '" "std::vector< char const * > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< char const * > * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConstCharVector_push" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        (arg1)->push_back((char const *)arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_ConstCharVector_pop) {
  {
    std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ConstCharVector_pop(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_char_const_p_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstCharVector_pop" "', argument " "1"" of type '" "std::vector< char const * > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< char const * > * >(argp1);
    {
      try {
        try {
          result = (char *)std_vector_Sl_char_SS_const_Sm__Sg__pop(arg1);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstCharVector_get) {
  {
    std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ConstCharVector_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_char_const_p_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstCharVector_get" "', argument " "1"" of type '" "std::vector< char const * > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< char const * > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConstCharVector_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        try {
          result = (char *)std_vector_Sl_char_SS_const_Sm__Sg__get(arg1,arg2);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ConstCharVector_set) {
  {
    std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
    int arg2 ;
    char *arg3 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: ConstCharVector_set(self,i,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_char_const_p_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstCharVector_set" "', argument " "1"" of type '" "std::vector< char const * > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< char const * > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConstCharVector_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ConstCharVector_set" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    {
      try {
        try {
          std_vector_Sl_char_SS_const_Sm__Sg__set(arg1,arg2,(char const *)arg3);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    XSRETURN(argvi);
  fail:
    
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    SWIG_croak_null();
  }
}


XS(_wrap_delete_ConstCharVector) {
  {
    std::vector< char const * > *arg1 = (std::vector< char const * > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_ConstCharVector(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_char_const_p_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConstCharVector" "', argument " "1"" of type '" "std::vector< char const * > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< char const * > * >(argp1);
    {
      try {
        delete arg1;
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SOLUTIONVector__SWIG_0) {
  {
    unsigned int arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::vector< SOLUTION > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_SOLUTIONVector(size);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SOLUTIONVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      try {
        result = (std::vector< SOLUTION > *)new std::vector< SOLUTION >(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_SOLUTION_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SOLUTIONVector__SWIG_1) {
  {
    int argvi = 0;
    std::vector< SOLUTION > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_SOLUTIONVector();");
    }
    {
      try {
        result = (std::vector< SOLUTION > *)new std::vector< SOLUTION >();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_SOLUTION_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_SOLUTIONVector__SWIG_2) {
  {
    unsigned int arg1 ;
    SOLUTION *arg2 = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    std::vector< SOLUTION > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_SOLUTIONVector(size,value);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SOLUTIONVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_SOLUTION,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SOLUTIONVector" "', argument " "2"" of type '" "SOLUTION const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SOLUTIONVector" "', argument " "2"" of type '" "SOLUTION const &""'"); 
    }
    arg2 = reinterpret_cast< SOLUTION * >(argp2);
    {
      try {
        result = (std::vector< SOLUTION > *)new std::vector< SOLUTION >(arg1,(SOLUTION const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_SOLUTION_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SOLUTIONVector__SWIG_3) {
  {
    std::vector< SOLUTION > *arg1 = 0 ;
    std::vector< SOLUTION > temp1 ;
    std::vector< SOLUTION > *v1 ;
    int argvi = 0;
    std::vector< SOLUTION > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_SOLUTIONVector(other);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_SOLUTION_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_SOLUTIONVector. "
          "Expected an array of " "SOLUTION");
        SV **tv;
        I32 len = av_len(av) + 1;
        SOLUTION* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_SOLUTION,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_SOLUTIONVector. "
              "Expected an array of " "SOLUTION");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_SOLUTIONVector. "
          "Expected an array of " "SOLUTION");
      }
    }
    {
      try {
        result = (std::vector< SOLUTION > *)new std::vector< SOLUTION >((std::vector< SOLUTION > const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_SOLUTION_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SOLUTIONVector) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< SOLUTION >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_SOLUTION_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SOLUTION* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_SOLUTION,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_SOLUTION, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_SOLUTIONVector__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_SOLUTIONVector__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_SOLUTIONVector__SWIG_3); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_SOLUTIONVector__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_SOLUTIONVector'");
  XSRETURN(0);
}


XS(_wrap_SOLUTIONVector_size) {
  {
    std::vector< SOLUTION > *arg1 = (std::vector< SOLUTION > *) 0 ;
    std::vector< SOLUTION > temp1 ;
    std::vector< SOLUTION > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SOLUTIONVector_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_SOLUTION_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of SOLUTIONVector_size. "
          "Expected an array of " "SOLUTION");
        SV **tv;
        I32 len = av_len(av) + 1;
        SOLUTION* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_SOLUTION,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "SOLUTIONVector_size. "
              "Expected an array of " "SOLUTION");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of SOLUTIONVector_size. "
          "Expected an array of " "SOLUTION");
      }
    }
    {
      try {
        result = (unsigned int)((std::vector< SOLUTION > const *)arg1)->size();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SOLUTIONVector_empty) {
  {
    std::vector< SOLUTION > *arg1 = (std::vector< SOLUTION > *) 0 ;
    std::vector< SOLUTION > temp1 ;
    std::vector< SOLUTION > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SOLUTIONVector_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_SOLUTION_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of SOLUTIONVector_empty. "
          "Expected an array of " "SOLUTION");
        SV **tv;
        I32 len = av_len(av) + 1;
        SOLUTION* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_SOLUTION,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "SOLUTIONVector_empty. "
              "Expected an array of " "SOLUTION");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of SOLUTIONVector_empty. "
          "Expected an array of " "SOLUTION");
      }
    }
    {
      try {
        result = (bool)((std::vector< SOLUTION > const *)arg1)->empty();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SOLUTIONVector_clear) {
  {
    std::vector< SOLUTION > *arg1 = (std::vector< SOLUTION > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SOLUTIONVector_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_SOLUTION_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SOLUTIONVector_clear" "', argument " "1"" of type '" "std::vector< SOLUTION > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< SOLUTION > * >(argp1);
    {
      try {
        (arg1)->clear();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SOLUTIONVector_push) {
  {
    std::vector< SOLUTION > *arg1 = (std::vector< SOLUTION > *) 0 ;
    SOLUTION *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SOLUTIONVector_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_SOLUTION_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SOLUTIONVector_push" "', argument " "1"" of type '" "std::vector< SOLUTION > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< SOLUTION > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_SOLUTION,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SOLUTIONVector_push" "', argument " "2"" of type '" "SOLUTION const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SOLUTIONVector_push" "', argument " "2"" of type '" "SOLUTION const &""'"); 
    }
    arg2 = reinterpret_cast< SOLUTION * >(argp2);
    {
      try {
        (arg1)->push_back((SOLUTION const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SOLUTIONVector_pop) {
  {
    std::vector< SOLUTION > *arg1 = (std::vector< SOLUTION > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    SOLUTION result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SOLUTIONVector_pop(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_SOLUTION_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SOLUTIONVector_pop" "', argument " "1"" of type '" "std::vector< SOLUTION > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< SOLUTION > * >(argp1);
    {
      try {
        try {
          result = std_vector_Sl_SOLUTION_Sg__pop(arg1);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj((new SOLUTION(static_cast< const SOLUTION& >(result))), SWIGTYPE_p_SOLUTION, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SOLUTIONVector_get) {
  {
    std::vector< SOLUTION > *arg1 = (std::vector< SOLUTION > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    SOLUTION *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SOLUTIONVector_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_SOLUTION_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SOLUTIONVector_get" "', argument " "1"" of type '" "std::vector< SOLUTION > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< SOLUTION > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SOLUTIONVector_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        try {
          result = (SOLUTION *) &std_vector_Sl_SOLUTION_Sg__get(arg1,arg2);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SOLUTION, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SOLUTIONVector_set) {
  {
    std::vector< SOLUTION > *arg1 = (std::vector< SOLUTION > *) 0 ;
    int arg2 ;
    SOLUTION *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 ;
    int res3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: SOLUTIONVector_set(self,i,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_SOLUTION_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SOLUTIONVector_set" "', argument " "1"" of type '" "std::vector< SOLUTION > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< SOLUTION > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SOLUTIONVector_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3, SWIGTYPE_p_SOLUTION,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SOLUTIONVector_set" "', argument " "3"" of type '" "SOLUTION const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SOLUTIONVector_set" "', argument " "3"" of type '" "SOLUTION const &""'"); 
    }
    arg3 = reinterpret_cast< SOLUTION * >(argp3);
    {
      try {
        try {
          std_vector_Sl_SOLUTION_Sg__set(arg1,arg2,(SOLUTION const &)*arg3);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_SOLUTIONVector) {
  {
    std::vector< SOLUTION > *arg1 = (std::vector< SOLUTION > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_SOLUTIONVector(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_SOLUTION_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SOLUTIONVector" "', argument " "1"" of type '" "std::vector< SOLUTION > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< SOLUTION > * >(argp1);
    {
      try {
        delete arg1;
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_CoordinateVector__SWIG_0) {
  {
    unsigned int arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::vector< COORDINATE > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_CoordinateVector(size);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CoordinateVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      try {
        result = (std::vector< COORDINATE > *)new std::vector< COORDINATE >(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_COORDINATE_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_CoordinateVector__SWIG_1) {
  {
    int argvi = 0;
    std::vector< COORDINATE > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_CoordinateVector();");
    }
    {
      try {
        result = (std::vector< COORDINATE > *)new std::vector< COORDINATE >();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_COORDINATE_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_CoordinateVector__SWIG_2) {
  {
    unsigned int arg1 ;
    COORDINATE *arg2 = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    std::vector< COORDINATE > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_CoordinateVector(size,value);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CoordinateVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_COORDINATE,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CoordinateVector" "', argument " "2"" of type '" "COORDINATE const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CoordinateVector" "', argument " "2"" of type '" "COORDINATE const &""'"); 
    }
    arg2 = reinterpret_cast< COORDINATE * >(argp2);
    {
      try {
        result = (std::vector< COORDINATE > *)new std::vector< COORDINATE >(arg1,(COORDINATE const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_COORDINATE_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_CoordinateVector__SWIG_3) {
  {
    std::vector< COORDINATE > *arg1 = 0 ;
    std::vector< COORDINATE > temp1 ;
    std::vector< COORDINATE > *v1 ;
    int argvi = 0;
    std::vector< COORDINATE > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_CoordinateVector(other);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_COORDINATE_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_CoordinateVector. "
          "Expected an array of " "COORDINATE");
        SV **tv;
        I32 len = av_len(av) + 1;
        COORDINATE* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_COORDINATE,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_CoordinateVector. "
              "Expected an array of " "COORDINATE");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_CoordinateVector. "
          "Expected an array of " "COORDINATE");
      }
    }
    {
      try {
        result = (std::vector< COORDINATE > *)new std::vector< COORDINATE >((std::vector< COORDINATE > const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_COORDINATE_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_CoordinateVector) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< COORDINATE >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_COORDINATE_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  COORDINATE* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_COORDINATE,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_COORDINATE, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_CoordinateVector__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_CoordinateVector__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_CoordinateVector__SWIG_3); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_CoordinateVector__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_CoordinateVector'");
  XSRETURN(0);
}


XS(_wrap_CoordinateVector_size) {
  {
    std::vector< COORDINATE > *arg1 = (std::vector< COORDINATE > *) 0 ;
    std::vector< COORDINATE > temp1 ;
    std::vector< COORDINATE > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: CoordinateVector_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_COORDINATE_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of CoordinateVector_size. "
          "Expected an array of " "COORDINATE");
        SV **tv;
        I32 len = av_len(av) + 1;
        COORDINATE* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_COORDINATE,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "CoordinateVector_size. "
              "Expected an array of " "COORDINATE");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of CoordinateVector_size. "
          "Expected an array of " "COORDINATE");
      }
    }
    {
      try {
        result = (unsigned int)((std::vector< COORDINATE > const *)arg1)->size();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_CoordinateVector_empty) {
  {
    std::vector< COORDINATE > *arg1 = (std::vector< COORDINATE > *) 0 ;
    std::vector< COORDINATE > temp1 ;
    std::vector< COORDINATE > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: CoordinateVector_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_COORDINATE_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of CoordinateVector_empty. "
          "Expected an array of " "COORDINATE");
        SV **tv;
        I32 len = av_len(av) + 1;
        COORDINATE* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_COORDINATE,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "CoordinateVector_empty. "
              "Expected an array of " "COORDINATE");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of CoordinateVector_empty. "
          "Expected an array of " "COORDINATE");
      }
    }
    {
      try {
        result = (bool)((std::vector< COORDINATE > const *)arg1)->empty();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_CoordinateVector_clear) {
  {
    std::vector< COORDINATE > *arg1 = (std::vector< COORDINATE > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: CoordinateVector_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_COORDINATE_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoordinateVector_clear" "', argument " "1"" of type '" "std::vector< COORDINATE > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< COORDINATE > * >(argp1);
    {
      try {
        (arg1)->clear();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_CoordinateVector_push) {
  {
    std::vector< COORDINATE > *arg1 = (std::vector< COORDINATE > *) 0 ;
    COORDINATE *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: CoordinateVector_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_COORDINATE_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoordinateVector_push" "', argument " "1"" of type '" "std::vector< COORDINATE > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< COORDINATE > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_COORDINATE,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CoordinateVector_push" "', argument " "2"" of type '" "COORDINATE const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CoordinateVector_push" "', argument " "2"" of type '" "COORDINATE const &""'"); 
    }
    arg2 = reinterpret_cast< COORDINATE * >(argp2);
    {
      try {
        (arg1)->push_back((COORDINATE const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_CoordinateVector_pop) {
  {
    std::vector< COORDINATE > *arg1 = (std::vector< COORDINATE > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    COORDINATE result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: CoordinateVector_pop(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_COORDINATE_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoordinateVector_pop" "', argument " "1"" of type '" "std::vector< COORDINATE > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< COORDINATE > * >(argp1);
    {
      try {
        try {
          result = std_vector_Sl_COORDINATE_Sg__pop(arg1);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj((new COORDINATE(static_cast< const COORDINATE& >(result))), SWIGTYPE_p_COORDINATE, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_CoordinateVector_get) {
  {
    std::vector< COORDINATE > *arg1 = (std::vector< COORDINATE > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    COORDINATE *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: CoordinateVector_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_COORDINATE_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoordinateVector_get" "', argument " "1"" of type '" "std::vector< COORDINATE > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< COORDINATE > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CoordinateVector_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        try {
          result = (COORDINATE *) &std_vector_Sl_COORDINATE_Sg__get(arg1,arg2);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_COORDINATE, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_CoordinateVector_set) {
  {
    std::vector< COORDINATE > *arg1 = (std::vector< COORDINATE > *) 0 ;
    int arg2 ;
    COORDINATE *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 ;
    int res3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: CoordinateVector_set(self,i,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_COORDINATE_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CoordinateVector_set" "', argument " "1"" of type '" "std::vector< COORDINATE > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< COORDINATE > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CoordinateVector_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3, SWIGTYPE_p_COORDINATE,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CoordinateVector_set" "', argument " "3"" of type '" "COORDINATE const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CoordinateVector_set" "', argument " "3"" of type '" "COORDINATE const &""'"); 
    }
    arg3 = reinterpret_cast< COORDINATE * >(argp3);
    {
      try {
        try {
          std_vector_Sl_COORDINATE_Sg__set(arg1,arg2,(COORDINATE const &)*arg3);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_CoordinateVector) {
  {
    std::vector< COORDINATE > *arg1 = (std::vector< COORDINATE > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_CoordinateVector(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_COORDINATE_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CoordinateVector" "', argument " "1"" of type '" "std::vector< COORDINATE > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< COORDINATE > * >(argp1);
    {
      try {
        delete arg1;
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DoubleDoubleVector__SWIG_0) {
  {
    unsigned int arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::vector< std::vector< double > > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_DoubleDoubleVector(size);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleDoubleVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      try {
        result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DoubleDoubleVector__SWIG_1) {
  {
    int argvi = 0;
    std::vector< std::vector< double > > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_DoubleDoubleVector();");
    }
    {
      try {
        result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_DoubleDoubleVector__SWIG_2) {
  {
    unsigned int arg1 ;
    std::vector< double > *arg2 = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    std::vector< double > temp2 ;
    std::vector< double > *v2 ;
    int argvi = 0;
    std::vector< std::vector< double > > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_DoubleDoubleVector(size,value);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleDoubleVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_double_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of new_DoubleDoubleVector. "
          "Expected an array of ""double");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvNIOK(*tv)) {
            temp2.push_back((double)SwigSvToNumber(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "new_DoubleDoubleVector. "
              "Expected an array of ""double");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of new_DoubleDoubleVector. "
          "Expected an array of ""double");
      }
    }
    {
      try {
        result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >(arg1,(std::vector< double > const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DoubleDoubleVector__SWIG_3) {
  {
    std::vector< std::vector< double > > *arg1 = 0 ;
    std::vector< std::vector< double > > temp1 ;
    std::vector< std::vector< double > > *v1 ;
    int argvi = 0;
    std::vector< std::vector< double > > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_DoubleDoubleVector(other);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_DoubleDoubleVector. "
          "Expected an array of " "std::vector< double >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::vector< double >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__vectorT_double_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_DoubleDoubleVector. "
              "Expected an array of " "std::vector< double >");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_DoubleDoubleVector. "
          "Expected an array of " "std::vector< double >");
      }
    }
    {
      try {
        result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >((std::vector< std::vector< double > > const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DoubleDoubleVector) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::vector< double > >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  std::vector< double >* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_std__vectorT_double_t,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< double >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_double_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvNIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_DoubleDoubleVector__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_DoubleDoubleVector__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_DoubleDoubleVector__SWIG_3); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_DoubleDoubleVector__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_DoubleDoubleVector'");
  XSRETURN(0);
}


XS(_wrap_DoubleDoubleVector_size) {
  {
    std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
    std::vector< std::vector< double > > temp1 ;
    std::vector< std::vector< double > > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DoubleDoubleVector_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of DoubleDoubleVector_size. "
          "Expected an array of " "std::vector< double >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::vector< double >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__vectorT_double_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "DoubleDoubleVector_size. "
              "Expected an array of " "std::vector< double >");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of DoubleDoubleVector_size. "
          "Expected an array of " "std::vector< double >");
      }
    }
    {
      try {
        result = (unsigned int)((std::vector< std::vector< double > > const *)arg1)->size();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DoubleDoubleVector_empty) {
  {
    std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
    std::vector< std::vector< double > > temp1 ;
    std::vector< std::vector< double > > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DoubleDoubleVector_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of DoubleDoubleVector_empty. "
          "Expected an array of " "std::vector< double >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::vector< double >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__vectorT_double_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "DoubleDoubleVector_empty. "
              "Expected an array of " "std::vector< double >");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of DoubleDoubleVector_empty. "
          "Expected an array of " "std::vector< double >");
      }
    }
    {
      try {
        result = (bool)((std::vector< std::vector< double > > const *)arg1)->empty();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DoubleDoubleVector_clear) {
  {
    std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DoubleDoubleVector_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleDoubleVector_clear" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
    {
      try {
        (arg1)->clear();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DoubleDoubleVector_push) {
  {
    std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
    std::vector< double > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< double > temp2 ;
    std::vector< double > *v2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DoubleDoubleVector_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleDoubleVector_push" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_double_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of DoubleDoubleVector_push. "
          "Expected an array of ""double");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvNIOK(*tv)) {
            temp2.push_back((double)SwigSvToNumber(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "DoubleDoubleVector_push. "
              "Expected an array of ""double");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of DoubleDoubleVector_push. "
          "Expected an array of ""double");
      }
    }
    {
      try {
        (arg1)->push_back((std::vector< double > const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DoubleDoubleVector_pop) {
  {
    std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::vector< double > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DoubleDoubleVector_pop(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleDoubleVector_pop" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
    {
      try {
        try {
          result = std_vector_Sl_std_vector_Sl_double_Sg__Sg__pop(arg1);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        sv_setnv(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DoubleDoubleVector_get) {
  {
    std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::vector< double > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DoubleDoubleVector_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleDoubleVector_get" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleDoubleVector_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        try {
          result = (std::vector< double > *) &std_vector_Sl_std_vector_Sl_double_Sg__Sg__get(arg1,arg2);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DoubleDoubleVector_set) {
  {
    std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
    int arg2 ;
    std::vector< double > *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    std::vector< double > temp3 ;
    std::vector< double > *v3 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: DoubleDoubleVector_set(self,i,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleDoubleVector_set" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleDoubleVector_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      if (SWIG_ConvertPtr(ST(2),(void **) &v3, 
          SWIGTYPE_p_std__vectorT_double_t,1) != -1) {
        arg3 = v3;
      } else if (SvROK(ST(2))) {
        AV *av = (AV *)SvRV(ST(2));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 3 of DoubleDoubleVector_set. "
          "Expected an array of ""double");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvNIOK(*tv)) {
            temp3.push_back((double)SwigSvToNumber(*tv));
          } else {
            SWIG_croak("Type error in argument 3 of "
              "DoubleDoubleVector_set. "
              "Expected an array of ""double");
          }
        }
        arg3 = &temp3;
      } else {
        SWIG_croak("Type error in argument 3 of DoubleDoubleVector_set. "
          "Expected an array of ""double");
      }
    }
    {
      try {
        try {
          std_vector_Sl_std_vector_Sl_double_Sg__Sg__set(arg1,arg2,(std::vector< double > const &)*arg3);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_DoubleDoubleVector) {
  {
    std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_DoubleDoubleVector(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleDoubleVector" "', argument " "1"" of type '" "std::vector< std::vector< double > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::vector< double > > * >(argp1);
    {
      try {
        delete arg1;
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_IntIntVector__SWIG_0) {
  {
    unsigned int arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::vector< std::vector< int > > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_IntIntVector(size);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntIntVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      try {
        result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_IntIntVector__SWIG_1) {
  {
    int argvi = 0;
    std::vector< std::vector< int > > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_IntIntVector();");
    }
    {
      try {
        result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_IntIntVector__SWIG_2) {
  {
    unsigned int arg1 ;
    std::vector< int > *arg2 = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    std::vector< int > temp2 ;
    std::vector< int > *v2 ;
    int argvi = 0;
    std::vector< std::vector< int > > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_IntIntVector(size,value);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntIntVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of new_IntIntVector. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            temp2.push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "new_IntIntVector. "
              "Expected an array of ""int");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of new_IntIntVector. "
          "Expected an array of ""int");
      }
    }
    {
      try {
        result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >(arg1,(std::vector< int > const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_IntIntVector__SWIG_3) {
  {
    std::vector< std::vector< int > > *arg1 = 0 ;
    std::vector< std::vector< int > > temp1 ;
    std::vector< std::vector< int > > *v1 ;
    int argvi = 0;
    std::vector< std::vector< int > > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_IntIntVector(other);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_IntIntVector. "
          "Expected an array of " "std::vector< int >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::vector< int >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__vectorT_int_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_IntIntVector. "
              "Expected an array of " "std::vector< int >");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_IntIntVector. "
          "Expected an array of " "std::vector< int >");
      }
    }
    {
      try {
        result = (std::vector< std::vector< int > > *)new std::vector< std::vector< int > >((std::vector< std::vector< int > > const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_IntIntVector) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::vector< int > >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  std::vector< int >* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_std__vectorT_int_t,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< int >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_IntIntVector__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_IntIntVector__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_IntIntVector__SWIG_3); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_IntIntVector__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_IntIntVector'");
  XSRETURN(0);
}


XS(_wrap_IntIntVector_size) {
  {
    std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
    std::vector< std::vector< int > > temp1 ;
    std::vector< std::vector< int > > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IntIntVector_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of IntIntVector_size. "
          "Expected an array of " "std::vector< int >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::vector< int >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__vectorT_int_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "IntIntVector_size. "
              "Expected an array of " "std::vector< int >");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of IntIntVector_size. "
          "Expected an array of " "std::vector< int >");
      }
    }
    {
      try {
        result = (unsigned int)((std::vector< std::vector< int > > const *)arg1)->size();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IntIntVector_empty) {
  {
    std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
    std::vector< std::vector< int > > temp1 ;
    std::vector< std::vector< int > > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IntIntVector_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of IntIntVector_empty. "
          "Expected an array of " "std::vector< int >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::vector< int >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__vectorT_int_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "IntIntVector_empty. "
              "Expected an array of " "std::vector< int >");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of IntIntVector_empty. "
          "Expected an array of " "std::vector< int >");
      }
    }
    {
      try {
        result = (bool)((std::vector< std::vector< int > > const *)arg1)->empty();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IntIntVector_clear) {
  {
    std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IntIntVector_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntIntVector_clear" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
    {
      try {
        (arg1)->clear();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IntIntVector_push) {
  {
    std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
    std::vector< int > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< int > temp2 ;
    std::vector< int > *v2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IntIntVector_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntIntVector_push" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1) {
        arg2 = v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of IntIntVector_push. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            temp2.push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "IntIntVector_push. "
              "Expected an array of ""int");
          }
        }
        arg2 = &temp2;
      } else {
        SWIG_croak("Type error in argument 2 of IntIntVector_push. "
          "Expected an array of ""int");
      }
    }
    {
      try {
        (arg1)->push_back((std::vector< int > const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IntIntVector_pop) {
  {
    std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::vector< int > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: IntIntVector_pop(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntIntVector_pop" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
    {
      try {
        try {
          result = std_vector_Sl_std_vector_Sl_int_Sg__Sg__pop(arg1);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        sv_setiv(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_IntIntVector_get) {
  {
    std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::vector< int > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: IntIntVector_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntIntVector_get" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntIntVector_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        try {
          result = (std::vector< int > *) &std_vector_Sl_std_vector_Sl_int_Sg__Sg__get(arg1,arg2);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_IntIntVector_set) {
  {
    std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
    int arg2 ;
    std::vector< int > *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    std::vector< int > temp3 ;
    std::vector< int > *v3 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: IntIntVector_set(self,i,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntIntVector_set" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntIntVector_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      if (SWIG_ConvertPtr(ST(2),(void **) &v3, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1) {
        arg3 = v3;
      } else if (SvROK(ST(2))) {
        AV *av = (AV *)SvRV(ST(2));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 3 of IntIntVector_set. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            temp3.push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 3 of "
              "IntIntVector_set. "
              "Expected an array of ""int");
          }
        }
        arg3 = &temp3;
      } else {
        SWIG_croak("Type error in argument 3 of IntIntVector_set. "
          "Expected an array of ""int");
      }
    }
    {
      try {
        try {
          std_vector_Sl_std_vector_Sl_int_Sg__Sg__set(arg1,arg2,(std::vector< int > const &)*arg3);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_IntIntVector) {
  {
    std::vector< std::vector< int > > *arg1 = (std::vector< std::vector< int > > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_IntIntVector(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntIntVector" "', argument " "1"" of type '" "std::vector< std::vector< int > > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< std::vector< int > > * >(argp1);
    {
      try {
        delete arg1;
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ElemProbVector__SWIG_0) {
  {
    unsigned int arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::vector< vrna_ep_t > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ElemProbVector(size);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ElemProbVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      try {
        result = (std::vector< vrna_ep_t > *)new std::vector< vrna_ep_t >(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_vrna_ep_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ElemProbVector__SWIG_1) {
  {
    int argvi = 0;
    std::vector< vrna_ep_t > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_ElemProbVector();");
    }
    {
      try {
        result = (std::vector< vrna_ep_t > *)new std::vector< vrna_ep_t >();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_vrna_ep_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_ElemProbVector__SWIG_2) {
  {
    unsigned int arg1 ;
    vrna_ep_t *arg2 = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    std::vector< vrna_ep_t > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_ElemProbVector(size,value);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ElemProbVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_vrna_ep_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ElemProbVector" "', argument " "2"" of type '" "vrna_ep_t const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ElemProbVector" "', argument " "2"" of type '" "vrna_ep_t const &""'"); 
    }
    arg2 = reinterpret_cast< vrna_ep_t * >(argp2);
    {
      try {
        result = (std::vector< vrna_ep_t > *)new std::vector< vrna_ep_t >(arg1,(vrna_ep_t const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_vrna_ep_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ElemProbVector__SWIG_3) {
  {
    std::vector< vrna_ep_t > *arg1 = 0 ;
    std::vector< vrna_ep_t > temp1 ;
    std::vector< vrna_ep_t > *v1 ;
    int argvi = 0;
    std::vector< vrna_ep_t > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_ElemProbVector(other);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_vrna_ep_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_ElemProbVector. "
          "Expected an array of " "vrna_ep_t");
        SV **tv;
        I32 len = av_len(av) + 1;
        vrna_ep_t* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_vrna_ep_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_ElemProbVector. "
              "Expected an array of " "vrna_ep_t");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_ElemProbVector. "
          "Expected an array of " "vrna_ep_t");
      }
    }
    {
      try {
        result = (std::vector< vrna_ep_t > *)new std::vector< vrna_ep_t >((std::vector< vrna_ep_t > const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_vrna_ep_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ElemProbVector) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< vrna_ep_t >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_vrna_ep_t_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  vrna_ep_t* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_vrna_ep_t,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_vrna_ep_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ElemProbVector__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ElemProbVector__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ElemProbVector__SWIG_3); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ElemProbVector__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_ElemProbVector'");
  XSRETURN(0);
}


XS(_wrap_ElemProbVector_size) {
  {
    std::vector< vrna_ep_t > *arg1 = (std::vector< vrna_ep_t > *) 0 ;
    std::vector< vrna_ep_t > temp1 ;
    std::vector< vrna_ep_t > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ElemProbVector_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_vrna_ep_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of ElemProbVector_size. "
          "Expected an array of " "vrna_ep_t");
        SV **tv;
        I32 len = av_len(av) + 1;
        vrna_ep_t* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_vrna_ep_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "ElemProbVector_size. "
              "Expected an array of " "vrna_ep_t");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of ElemProbVector_size. "
          "Expected an array of " "vrna_ep_t");
      }
    }
    {
      try {
        result = (unsigned int)((std::vector< vrna_ep_t > const *)arg1)->size();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ElemProbVector_empty) {
  {
    std::vector< vrna_ep_t > *arg1 = (std::vector< vrna_ep_t > *) 0 ;
    std::vector< vrna_ep_t > temp1 ;
    std::vector< vrna_ep_t > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ElemProbVector_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_vrna_ep_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of ElemProbVector_empty. "
          "Expected an array of " "vrna_ep_t");
        SV **tv;
        I32 len = av_len(av) + 1;
        vrna_ep_t* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_vrna_ep_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "ElemProbVector_empty. "
              "Expected an array of " "vrna_ep_t");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of ElemProbVector_empty. "
          "Expected an array of " "vrna_ep_t");
      }
    }
    {
      try {
        result = (bool)((std::vector< vrna_ep_t > const *)arg1)->empty();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ElemProbVector_clear) {
  {
    std::vector< vrna_ep_t > *arg1 = (std::vector< vrna_ep_t > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ElemProbVector_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_vrna_ep_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElemProbVector_clear" "', argument " "1"" of type '" "std::vector< vrna_ep_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< vrna_ep_t > * >(argp1);
    {
      try {
        (arg1)->clear();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ElemProbVector_push) {
  {
    std::vector< vrna_ep_t > *arg1 = (std::vector< vrna_ep_t > *) 0 ;
    vrna_ep_t *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ElemProbVector_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_vrna_ep_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElemProbVector_push" "', argument " "1"" of type '" "std::vector< vrna_ep_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< vrna_ep_t > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_vrna_ep_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ElemProbVector_push" "', argument " "2"" of type '" "vrna_ep_t const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElemProbVector_push" "', argument " "2"" of type '" "vrna_ep_t const &""'"); 
    }
    arg2 = reinterpret_cast< vrna_ep_t * >(argp2);
    {
      try {
        (arg1)->push_back((vrna_ep_t const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ElemProbVector_pop) {
  {
    std::vector< vrna_ep_t > *arg1 = (std::vector< vrna_ep_t > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    SwigValueWrapper< vrna_ep_t > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ElemProbVector_pop(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_vrna_ep_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElemProbVector_pop" "', argument " "1"" of type '" "std::vector< vrna_ep_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< vrna_ep_t > * >(argp1);
    {
      try {
        try {
          result = std_vector_Sl_vrna_ep_t_Sg__pop(arg1);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj((new vrna_ep_t(static_cast< const vrna_ep_t& >(result))), SWIGTYPE_p_vrna_ep_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ElemProbVector_get) {
  {
    std::vector< vrna_ep_t > *arg1 = (std::vector< vrna_ep_t > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    vrna_ep_t *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ElemProbVector_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_vrna_ep_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElemProbVector_get" "', argument " "1"" of type '" "std::vector< vrna_ep_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< vrna_ep_t > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElemProbVector_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        try {
          result = (vrna_ep_t *) &std_vector_Sl_vrna_ep_t_Sg__get(arg1,arg2);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_ep_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ElemProbVector_set) {
  {
    std::vector< vrna_ep_t > *arg1 = (std::vector< vrna_ep_t > *) 0 ;
    int arg2 ;
    vrna_ep_t *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 ;
    int res3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: ElemProbVector_set(self,i,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_vrna_ep_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ElemProbVector_set" "', argument " "1"" of type '" "std::vector< vrna_ep_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< vrna_ep_t > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ElemProbVector_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3, SWIGTYPE_p_vrna_ep_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ElemProbVector_set" "', argument " "3"" of type '" "vrna_ep_t const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ElemProbVector_set" "', argument " "3"" of type '" "vrna_ep_t const &""'"); 
    }
    arg3 = reinterpret_cast< vrna_ep_t * >(argp3);
    {
      try {
        try {
          std_vector_Sl_vrna_ep_t_Sg__set(arg1,arg2,(vrna_ep_t const &)*arg3);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_ElemProbVector) {
  {
    std::vector< vrna_ep_t > *arg1 = (std::vector< vrna_ep_t > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_ElemProbVector(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_vrna_ep_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ElemProbVector" "', argument " "1"" of type '" "std::vector< vrna_ep_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< vrna_ep_t > * >(argp1);
    {
      try {
        delete arg1;
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PathVector__SWIG_0) {
  {
    unsigned int arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::vector< vrna_path_t > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_PathVector(size);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PathVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      try {
        result = (std::vector< vrna_path_t > *)new std::vector< vrna_path_t >(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_vrna_path_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PathVector__SWIG_1) {
  {
    int argvi = 0;
    std::vector< vrna_path_t > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_PathVector();");
    }
    {
      try {
        result = (std::vector< vrna_path_t > *)new std::vector< vrna_path_t >();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_vrna_path_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_PathVector__SWIG_2) {
  {
    unsigned int arg1 ;
    vrna_path_t *arg2 = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    std::vector< vrna_path_t > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_PathVector(size,value);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PathVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_vrna_path_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PathVector" "', argument " "2"" of type '" "vrna_path_t const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PathVector" "', argument " "2"" of type '" "vrna_path_t const &""'"); 
    }
    arg2 = reinterpret_cast< vrna_path_t * >(argp2);
    {
      try {
        result = (std::vector< vrna_path_t > *)new std::vector< vrna_path_t >(arg1,(vrna_path_t const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_vrna_path_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PathVector__SWIG_3) {
  {
    std::vector< vrna_path_t > *arg1 = 0 ;
    std::vector< vrna_path_t > temp1 ;
    std::vector< vrna_path_t > *v1 ;
    int argvi = 0;
    std::vector< vrna_path_t > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_PathVector(other);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_vrna_path_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_PathVector. "
          "Expected an array of " "vrna_path_t");
        SV **tv;
        I32 len = av_len(av) + 1;
        vrna_path_t* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_vrna_path_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_PathVector. "
              "Expected an array of " "vrna_path_t");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_PathVector. "
          "Expected an array of " "vrna_path_t");
      }
    }
    {
      try {
        result = (std::vector< vrna_path_t > *)new std::vector< vrna_path_t >((std::vector< vrna_path_t > const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_vrna_path_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_PathVector) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< vrna_path_t >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_vrna_path_t_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  vrna_path_t* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_vrna_path_t,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_vrna_path_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_PathVector__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_PathVector__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_PathVector__SWIG_3); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_PathVector__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_PathVector'");
  XSRETURN(0);
}


XS(_wrap_PathVector_size) {
  {
    std::vector< vrna_path_t > *arg1 = (std::vector< vrna_path_t > *) 0 ;
    std::vector< vrna_path_t > temp1 ;
    std::vector< vrna_path_t > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PathVector_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_vrna_path_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of PathVector_size. "
          "Expected an array of " "vrna_path_t");
        SV **tv;
        I32 len = av_len(av) + 1;
        vrna_path_t* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_vrna_path_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "PathVector_size. "
              "Expected an array of " "vrna_path_t");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of PathVector_size. "
          "Expected an array of " "vrna_path_t");
      }
    }
    {
      try {
        result = (unsigned int)((std::vector< vrna_path_t > const *)arg1)->size();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PathVector_empty) {
  {
    std::vector< vrna_path_t > *arg1 = (std::vector< vrna_path_t > *) 0 ;
    std::vector< vrna_path_t > temp1 ;
    std::vector< vrna_path_t > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PathVector_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_vrna_path_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of PathVector_empty. "
          "Expected an array of " "vrna_path_t");
        SV **tv;
        I32 len = av_len(av) + 1;
        vrna_path_t* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_vrna_path_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "PathVector_empty. "
              "Expected an array of " "vrna_path_t");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of PathVector_empty. "
          "Expected an array of " "vrna_path_t");
      }
    }
    {
      try {
        result = (bool)((std::vector< vrna_path_t > const *)arg1)->empty();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PathVector_clear) {
  {
    std::vector< vrna_path_t > *arg1 = (std::vector< vrna_path_t > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PathVector_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_vrna_path_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PathVector_clear" "', argument " "1"" of type '" "std::vector< vrna_path_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< vrna_path_t > * >(argp1);
    {
      try {
        (arg1)->clear();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PathVector_push) {
  {
    std::vector< vrna_path_t > *arg1 = (std::vector< vrna_path_t > *) 0 ;
    vrna_path_t *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: PathVector_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_vrna_path_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PathVector_push" "', argument " "1"" of type '" "std::vector< vrna_path_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< vrna_path_t > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_vrna_path_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PathVector_push" "', argument " "2"" of type '" "vrna_path_t const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PathVector_push" "', argument " "2"" of type '" "vrna_path_t const &""'"); 
    }
    arg2 = reinterpret_cast< vrna_path_t * >(argp2);
    {
      try {
        (arg1)->push_back((vrna_path_t const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_PathVector_pop) {
  {
    std::vector< vrna_path_t > *arg1 = (std::vector< vrna_path_t > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    SwigValueWrapper< vrna_path_t > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: PathVector_pop(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_vrna_path_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PathVector_pop" "', argument " "1"" of type '" "std::vector< vrna_path_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< vrna_path_t > * >(argp1);
    {
      try {
        try {
          result = std_vector_Sl_vrna_path_t_Sg__pop(arg1);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj((new vrna_path_t(static_cast< const vrna_path_t& >(result))), SWIGTYPE_p_vrna_path_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_PathVector_get) {
  {
    std::vector< vrna_path_t > *arg1 = (std::vector< vrna_path_t > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    vrna_path_t *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: PathVector_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_vrna_path_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PathVector_get" "', argument " "1"" of type '" "std::vector< vrna_path_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< vrna_path_t > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PathVector_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        try {
          result = (vrna_path_t *) &std_vector_Sl_vrna_path_t_Sg__get(arg1,arg2);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_path_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_PathVector_set) {
  {
    std::vector< vrna_path_t > *arg1 = (std::vector< vrna_path_t > *) 0 ;
    int arg2 ;
    vrna_path_t *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 ;
    int res3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: PathVector_set(self,i,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_vrna_path_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PathVector_set" "', argument " "1"" of type '" "std::vector< vrna_path_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< vrna_path_t > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PathVector_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3, SWIGTYPE_p_vrna_path_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PathVector_set" "', argument " "3"" of type '" "vrna_path_t const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PathVector_set" "', argument " "3"" of type '" "vrna_path_t const &""'"); 
    }
    arg3 = reinterpret_cast< vrna_path_t * >(argp3);
    {
      try {
        try {
          std_vector_Sl_vrna_path_t_Sg__set(arg1,arg2,(vrna_path_t const &)*arg3);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_PathVector) {
  {
    std::vector< vrna_path_t > *arg1 = (std::vector< vrna_path_t > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_PathVector(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_vrna_path_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PathVector" "', argument " "1"" of type '" "std::vector< vrna_path_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< vrna_path_t > * >(argp1);
    {
      try {
        delete arg1;
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_MoveVector__SWIG_0) {
  {
    unsigned int arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::vector< vrna_move_t > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_MoveVector(size);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MoveVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      try {
        result = (std::vector< vrna_move_t > *)new std::vector< vrna_move_t >(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_vrna_move_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_MoveVector__SWIG_1) {
  {
    int argvi = 0;
    std::vector< vrna_move_t > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_MoveVector();");
    }
    {
      try {
        result = (std::vector< vrna_move_t > *)new std::vector< vrna_move_t >();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_vrna_move_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_MoveVector__SWIG_2) {
  {
    unsigned int arg1 ;
    vrna_move_t *arg2 = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    std::vector< vrna_move_t > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_MoveVector(size,value);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MoveVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_vrna_move_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MoveVector" "', argument " "2"" of type '" "vrna_move_t const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MoveVector" "', argument " "2"" of type '" "vrna_move_t const &""'"); 
    }
    arg2 = reinterpret_cast< vrna_move_t * >(argp2);
    {
      try {
        result = (std::vector< vrna_move_t > *)new std::vector< vrna_move_t >(arg1,(vrna_move_t const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_vrna_move_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_MoveVector__SWIG_3) {
  {
    std::vector< vrna_move_t > *arg1 = 0 ;
    std::vector< vrna_move_t > temp1 ;
    std::vector< vrna_move_t > *v1 ;
    int argvi = 0;
    std::vector< vrna_move_t > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_MoveVector(other);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_vrna_move_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_MoveVector. "
          "Expected an array of " "vrna_move_t");
        SV **tv;
        I32 len = av_len(av) + 1;
        vrna_move_t* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_vrna_move_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_MoveVector. "
              "Expected an array of " "vrna_move_t");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_MoveVector. "
          "Expected an array of " "vrna_move_t");
      }
    }
    {
      try {
        result = (std::vector< vrna_move_t > *)new std::vector< vrna_move_t >((std::vector< vrna_move_t > const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_vrna_move_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_MoveVector) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< vrna_move_t >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_vrna_move_t_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  vrna_move_t* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_vrna_move_t,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_vrna_move_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_MoveVector__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_MoveVector__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_MoveVector__SWIG_3); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_MoveVector__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_MoveVector'");
  XSRETURN(0);
}


XS(_wrap_MoveVector_size) {
  {
    std::vector< vrna_move_t > *arg1 = (std::vector< vrna_move_t > *) 0 ;
    std::vector< vrna_move_t > temp1 ;
    std::vector< vrna_move_t > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MoveVector_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_vrna_move_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of MoveVector_size. "
          "Expected an array of " "vrna_move_t");
        SV **tv;
        I32 len = av_len(av) + 1;
        vrna_move_t* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_vrna_move_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "MoveVector_size. "
              "Expected an array of " "vrna_move_t");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of MoveVector_size. "
          "Expected an array of " "vrna_move_t");
      }
    }
    {
      try {
        result = (unsigned int)((std::vector< vrna_move_t > const *)arg1)->size();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MoveVector_empty) {
  {
    std::vector< vrna_move_t > *arg1 = (std::vector< vrna_move_t > *) 0 ;
    std::vector< vrna_move_t > temp1 ;
    std::vector< vrna_move_t > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MoveVector_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_vrna_move_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of MoveVector_empty. "
          "Expected an array of " "vrna_move_t");
        SV **tv;
        I32 len = av_len(av) + 1;
        vrna_move_t* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_vrna_move_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "MoveVector_empty. "
              "Expected an array of " "vrna_move_t");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of MoveVector_empty. "
          "Expected an array of " "vrna_move_t");
      }
    }
    {
      try {
        result = (bool)((std::vector< vrna_move_t > const *)arg1)->empty();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MoveVector_clear) {
  {
    std::vector< vrna_move_t > *arg1 = (std::vector< vrna_move_t > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MoveVector_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_vrna_move_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_clear" "', argument " "1"" of type '" "std::vector< vrna_move_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< vrna_move_t > * >(argp1);
    {
      try {
        (arg1)->clear();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MoveVector_push) {
  {
    std::vector< vrna_move_t > *arg1 = (std::vector< vrna_move_t > *) 0 ;
    vrna_move_t *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: MoveVector_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_vrna_move_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_push" "', argument " "1"" of type '" "std::vector< vrna_move_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< vrna_move_t > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_vrna_move_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MoveVector_push" "', argument " "2"" of type '" "vrna_move_t const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveVector_push" "', argument " "2"" of type '" "vrna_move_t const &""'"); 
    }
    arg2 = reinterpret_cast< vrna_move_t * >(argp2);
    {
      try {
        (arg1)->push_back((vrna_move_t const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_MoveVector_pop) {
  {
    std::vector< vrna_move_t > *arg1 = (std::vector< vrna_move_t > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    SwigValueWrapper< vrna_move_t > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: MoveVector_pop(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_vrna_move_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_pop" "', argument " "1"" of type '" "std::vector< vrna_move_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< vrna_move_t > * >(argp1);
    {
      try {
        try {
          result = std_vector_Sl_vrna_move_t_Sg__pop(arg1);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj((new vrna_move_t(static_cast< const vrna_move_t& >(result))), SWIGTYPE_p_vrna_move_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_MoveVector_get) {
  {
    std::vector< vrna_move_t > *arg1 = (std::vector< vrna_move_t > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    vrna_move_t *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: MoveVector_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_vrna_move_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_get" "', argument " "1"" of type '" "std::vector< vrna_move_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< vrna_move_t > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MoveVector_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        try {
          result = (vrna_move_t *) &std_vector_Sl_vrna_move_t_Sg__get(arg1,arg2);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_move_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_MoveVector_set) {
  {
    std::vector< vrna_move_t > *arg1 = (std::vector< vrna_move_t > *) 0 ;
    int arg2 ;
    vrna_move_t *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 ;
    int res3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: MoveVector_set(self,i,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_vrna_move_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MoveVector_set" "', argument " "1"" of type '" "std::vector< vrna_move_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< vrna_move_t > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MoveVector_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3, SWIGTYPE_p_vrna_move_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MoveVector_set" "', argument " "3"" of type '" "vrna_move_t const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MoveVector_set" "', argument " "3"" of type '" "vrna_move_t const &""'"); 
    }
    arg3 = reinterpret_cast< vrna_move_t * >(argp3);
    {
      try {
        try {
          std_vector_Sl_vrna_move_t_Sg__set(arg1,arg2,(vrna_move_t const &)*arg3);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_MoveVector) {
  {
    std::vector< vrna_move_t > *arg1 = (std::vector< vrna_move_t > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_MoveVector(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_vrna_move_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MoveVector" "', argument " "1"" of type '" "std::vector< vrna_move_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< vrna_move_t > * >(argp1);
    {
      try {
        delete arg1;
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_id_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_id_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_id_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int)(int) ((arg1)->id);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_stack_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int (*result)[NBPAIRS+1] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_stack_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_stack_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int (*)[NBPAIRS+1])(int (*)[NBPAIRS+1]) ((arg1)->stack);
    {
      AV *arr = newAV();
      int i,j = 0, len1 = 0, len2 = 0;
      
      len1 = NBPAIRS+1;
      len2 = NBPAIRS+1;
      
      for (i = 0; i < len1 ; i++) {
        AV *vec = newAV();
        for (j = 0; j < len2; j++) {
          SV *v = newSViv(result[i][j]);
          if (!av_store(vec, j, v))
          SvREFCNT_dec(v);
        }
        /* store reference to array */
        av_store(arr, i, newRV_noinc((SV*) vec));
      }
      
      ST(argvi) = newRV_noinc((SV*) arr );
      sv_2mortal( ST(argvi) );
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_hairpin_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_hairpin_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_hairpin_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int *)(int *) ((arg1)->hairpin);
    {
      AV* av = newAV();
      int i = 0,len = 0;
      len = 31;
      
      for (i = 0; i < len ; i++) {
        SV* perlval = newSV(0);
        sv_setiv(perlval, (IV)result[i]);
        av_push(av, perlval);
      }
      ST(argvi) = newRV_noinc((SV*) av );
      sv_2mortal( ST(argvi) );
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_bulge_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_bulge_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_bulge_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int *)(int *) ((arg1)->bulge);
    {
      AV* av = newAV();
      int i = 0,len = 0;
      len = MAXLOOP+1;
      
      for (i = 0; i < len ; i++) {
        SV* perlval = newSV(0);
        sv_setiv(perlval, (IV)result[i]);
        av_push(av, perlval);
      }
      ST(argvi) = newRV_noinc((SV*) av );
      sv_2mortal( ST(argvi) );
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_internal_loop_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_internal_loop_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_internal_loop_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int *)(int *) ((arg1)->internal_loop);
    {
      AV* av = newAV();
      int i = 0,len = 0;
      len = MAXLOOP+1;
      
      for (i = 0; i < len ; i++) {
        SV* perlval = newSV(0);
        sv_setiv(perlval, (IV)result[i]);
        av_push(av, perlval);
      }
      ST(argvi) = newRV_noinc((SV*) av );
      sv_2mortal( ST(argvi) );
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_mismatchExt_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int (*result)[5][5] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_mismatchExt_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_mismatchExt_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int (*)[5][5])(int (*)[5][5]) ((arg1)->mismatchExt);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_5__a_5__int, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_mismatchI_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int (*result)[5][5] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_mismatchI_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_mismatchI_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int (*)[5][5])(int (*)[5][5]) ((arg1)->mismatchI);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_5__a_5__int, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_mismatch1nI_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int (*result)[5][5] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_mismatch1nI_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_mismatch1nI_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int (*)[5][5])(int (*)[5][5]) ((arg1)->mismatch1nI);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_5__a_5__int, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_mismatch23I_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int (*result)[5][5] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_mismatch23I_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_mismatch23I_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int (*)[5][5])(int (*)[5][5]) ((arg1)->mismatch23I);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_5__a_5__int, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_mismatchH_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int (*result)[5][5] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_mismatchH_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_mismatchH_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int (*)[5][5])(int (*)[5][5]) ((arg1)->mismatchH);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_5__a_5__int, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_mismatchM_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int (*result)[5][5] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_mismatchM_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_mismatchM_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int (*)[5][5])(int (*)[5][5]) ((arg1)->mismatchM);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_5__a_5__int, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_dangle5_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int (*result)[5] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_dangle5_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_dangle5_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int (*)[5])(int (*)[5]) ((arg1)->dangle5);
    {
      AV *arr = newAV();
      int i,j = 0, len1 = 0, len2 = 0;
      
      len1 = NBPAIRS+1;
      len2 = 5;
      
      for (i = 0; i < len1 ; i++) {
        AV *vec = newAV();
        for (j = 0; j < len2; j++) {
          SV *v = newSViv(result[i][j]);
          if (!av_store(vec, j, v))
          SvREFCNT_dec(v);
        }
        /* store reference to array */
        av_store(arr, i, newRV_noinc((SV*) vec));
      }
      
      ST(argvi) = newRV_noinc((SV*) arr );
      sv_2mortal( ST(argvi) );
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_dangle3_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int (*result)[5] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_dangle3_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_dangle3_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int (*)[5])(int (*)[5]) ((arg1)->dangle3);
    {
      AV *arr = newAV();
      int i,j = 0, len1 = 0, len2 = 0;
      
      len1 = NBPAIRS+1;
      len2 = 5;
      
      for (i = 0; i < len1 ; i++) {
        AV *vec = newAV();
        for (j = 0; j < len2; j++) {
          SV *v = newSViv(result[i][j]);
          if (!av_store(vec, j, v))
          SvREFCNT_dec(v);
        }
        /* store reference to array */
        av_store(arr, i, newRV_noinc((SV*) vec));
      }
      
      ST(argvi) = newRV_noinc((SV*) arr );
      sv_2mortal( ST(argvi) );
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_int11_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int (*result)[NBPAIRS+1][5][5] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_int11_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_int11_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int (*)[NBPAIRS+1][5][5])(int (*)[NBPAIRS+1][5][5]) ((arg1)->int11);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_NBPAIRS_1__a_5__a_5__int, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_int21_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int (*result)[NBPAIRS+1][5][5][5] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_int21_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_int21_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int (*)[NBPAIRS+1][5][5][5])(int (*)[NBPAIRS+1][5][5][5]) ((arg1)->int21);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_NBPAIRS_1__a_5__a_5__a_5__int, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_int22_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int (*result)[NBPAIRS+1][5][5][5][5] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_int22_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_int22_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int (*)[NBPAIRS+1][5][5][5][5])(int (*)[NBPAIRS+1][5][5][5][5]) ((arg1)->int22);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__int, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_ninio_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_ninio_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_ninio_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int *)(int *) ((arg1)->ninio);
    {
      AV* av = newAV();
      int i = 0,len = 0;
      len = 5;
      
      for (i = 0; i < len ; i++) {
        SV* perlval = newSV(0);
        sv_setiv(perlval, (IV)result[i]);
        av_push(av, perlval);
      }
      ST(argvi) = newRV_noinc((SV*) av );
      sv_2mortal( ST(argvi) );
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_lxc_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_lxc_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_lxc_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (double)(double) ((arg1)->lxc);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_MLbase_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_MLbase_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_MLbase_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int)(int) ((arg1)->MLbase);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_MLintern_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_MLintern_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_MLintern_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int *)(int *) ((arg1)->MLintern);
    {
      AV* av = newAV();
      int i = 0,len = 0;
      len = NBPAIRS+1;
      
      for (i = 0; i < len ; i++) {
        SV* perlval = newSV(0);
        sv_setiv(perlval, (IV)result[i]);
        av_push(av, perlval);
      }
      ST(argvi) = newRV_noinc((SV*) av );
      sv_2mortal( ST(argvi) );
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_MLclosing_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_MLclosing_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_MLclosing_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int)(int) ((arg1)->MLclosing);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_TerminalAU_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_TerminalAU_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_TerminalAU_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int)(int) ((arg1)->TerminalAU);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_DuplexInit_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_DuplexInit_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_DuplexInit_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int)(int) ((arg1)->DuplexInit);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_Tetraloop_E_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_Tetraloop_E_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_Tetraloop_E_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int *)(int *) ((arg1)->Tetraloop_E);
    {
      AV* av = newAV();
      int i = 0,len = 0;
      len = 200;
      
      for (i = 0; i < len ; i++) {
        SV* perlval = newSV(0);
        sv_setiv(perlval, (IV)result[i]);
        av_push(av, perlval);
      }
      ST(argvi) = newRV_noinc((SV*) av );
      sv_2mortal( ST(argvi) );
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_Tetraloops_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_Tetraloops_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_Tetraloops_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (char *)(char *) ((arg1)->Tetraloops);
    {
      size_t size = SWIG_strnlen(result, 1401);
      
      
      
      ST(argvi) = SWIG_FromCharPtrAndSize(result, size); argvi++ ;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_Triloop_E_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_Triloop_E_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_Triloop_E_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int *)(int *) ((arg1)->Triloop_E);
    {
      AV* av = newAV();
      int i = 0,len = 0;
      len = 40;
      
      for (i = 0; i < len ; i++) {
        SV* perlval = newSV(0);
        sv_setiv(perlval, (IV)result[i]);
        av_push(av, perlval);
      }
      ST(argvi) = newRV_noinc((SV*) av );
      sv_2mortal( ST(argvi) );
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_Triloops_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_Triloops_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_Triloops_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (char *)(char *) ((arg1)->Triloops);
    {
      size_t size = SWIG_strnlen(result, 241);
      
      
      
      ST(argvi) = SWIG_FromCharPtrAndSize(result, size); argvi++ ;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_Hexaloop_E_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_Hexaloop_E_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_Hexaloop_E_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int *)(int *) ((arg1)->Hexaloop_E);
    {
      AV* av = newAV();
      int i = 0,len = 0;
      len = 40;
      
      for (i = 0; i < len ; i++) {
        SV* perlval = newSV(0);
        sv_setiv(perlval, (IV)result[i]);
        av_push(av, perlval);
      }
      ST(argvi) = newRV_noinc((SV*) av );
      sv_2mortal( ST(argvi) );
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_Hexaloops_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_Hexaloops_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_Hexaloops_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (char *)(char *) ((arg1)->Hexaloops);
    {
      size_t size = SWIG_strnlen(result, 1801);
      
      
      
      ST(argvi) = SWIG_FromCharPtrAndSize(result, size); argvi++ ;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_TripleC_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_TripleC_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_TripleC_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int)(int) ((arg1)->TripleC);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_MultipleCA_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_MultipleCA_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_MultipleCA_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int)(int) ((arg1)->MultipleCA);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_MultipleCB_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_MultipleCB_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_MultipleCB_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int)(int) ((arg1)->MultipleCB);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_gquad_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int (*result)[3*VRNA_GQUAD_MAX_LINKER_LENGTH+1] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_gquad_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_gquad_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int (*)[3*VRNA_GQUAD_MAX_LINKER_LENGTH+1])(int (*)[3*VRNA_GQUAD_MAX_LINKER_LENGTH+1]) ((arg1)->gquad);
    {
      AV *arr = newAV();
      int i,j = 0, len1 = 0, len2 = 0;
      
      len1 = VRNA_GQUAD_MAX_STACK_SIZE+1;
      len2 = 3*VRNA_GQUAD_MAX_LINKER_LENGTH+1;
      
      for (i = 0; i < len1 ; i++) {
        AV *vec = newAV();
        for (j = 0; j < len2; j++) {
          SV *v = newSViv(result[i][j]);
          if (!av_store(vec, j, v))
          SvREFCNT_dec(v);
        }
        /* store reference to array */
        av_store(arr, i, newRV_noinc((SV*) vec));
      }
      
      ST(argvi) = newRV_noinc((SV*) arr );
      sv_2mortal( ST(argvi) );
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_gquadLayerMismatch_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_gquadLayerMismatch_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_gquadLayerMismatch_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int)(int) ((arg1)->gquadLayerMismatch);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_gquadLayerMismatchMax_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_gquadLayerMismatchMax_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_gquadLayerMismatchMax_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (int)(int) ((arg1)->gquadLayerMismatchMax);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_temperature_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_temperature_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_temperature_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (double)(double) ((arg1)->temperature);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_model_details_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_model_details_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_model_details_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (vrna_md_t *)& ((arg1)->model_details);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_param_param_file_get) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: param_param_file_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "param_param_file_get" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    result = (char *)(char *) ((arg1)->param_file);
    {
      size_t size = SWIG_strnlen(result, 256);
      
      
      
      ST(argvi) = SWIG_FromCharPtrAndSize(result, size); argvi++ ;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_param__SWIG_0) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    vrna_param_t *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_param(model_details);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_param" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    {
      try {
        result = (vrna_param_t *)new_vrna_param_t__SWIG_0(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_param_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_param__SWIG_1) {
  {
    int argvi = 0;
    vrna_param_t *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_param();");
    }
    {
      try {
        result = (vrna_param_t *)new_vrna_param_t__SWIG_0();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_param_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_param) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_md_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_param__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_param__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'new_param'");
  XSRETURN(0);
}


XS(_wrap_delete_param) {
  {
    vrna_param_t *arg1 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_param(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_param_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_param" "', argument " "1"" of type '" "vrna_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_param_t * >(argp1);
    {
      try {
        delete arg1;
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_id_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_id_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_id_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (int)(int) ((arg1)->id);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expstack_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double (*result)[NBPAIRS+1] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expstack_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expstack_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double (*)[NBPAIRS+1])(double (*)[NBPAIRS+1]) ((arg1)->expstack);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_NBPAIRS_1__double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_exphairpin_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_exphairpin_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_exphairpin_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double *)(double *) ((arg1)->exphairpin);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expbulge_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expbulge_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expbulge_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double *)(double *) ((arg1)->expbulge);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expinternal_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expinternal_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expinternal_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double *)(double *) ((arg1)->expinternal);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expmismatchExt_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double (*result)[5][5] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expmismatchExt_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expmismatchExt_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double (*)[5][5])(double (*)[5][5]) ((arg1)->expmismatchExt);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_5__a_5__double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expmismatchI_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double (*result)[5][5] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expmismatchI_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expmismatchI_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double (*)[5][5])(double (*)[5][5]) ((arg1)->expmismatchI);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_5__a_5__double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expmismatch23I_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double (*result)[5][5] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expmismatch23I_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expmismatch23I_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double (*)[5][5])(double (*)[5][5]) ((arg1)->expmismatch23I);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_5__a_5__double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expmismatch1nI_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double (*result)[5][5] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expmismatch1nI_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expmismatch1nI_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double (*)[5][5])(double (*)[5][5]) ((arg1)->expmismatch1nI);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_5__a_5__double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expmismatchH_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double (*result)[5][5] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expmismatchH_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expmismatchH_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double (*)[5][5])(double (*)[5][5]) ((arg1)->expmismatchH);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_5__a_5__double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expmismatchM_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double (*result)[5][5] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expmismatchM_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expmismatchM_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double (*)[5][5])(double (*)[5][5]) ((arg1)->expmismatchM);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_5__a_5__double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expdangle5_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double (*result)[5] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expdangle5_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expdangle5_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double (*)[5])(double (*)[5]) ((arg1)->expdangle5);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_5__double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expdangle3_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double (*result)[5] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expdangle3_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expdangle3_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double (*)[5])(double (*)[5]) ((arg1)->expdangle3);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_5__double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expint11_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double (*result)[NBPAIRS+1][5][5] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expint11_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expint11_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double (*)[NBPAIRS+1][5][5])(double (*)[NBPAIRS+1][5][5]) ((arg1)->expint11);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_NBPAIRS_1__a_5__a_5__double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expint21_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double (*result)[NBPAIRS+1][5][5][5] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expint21_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expint21_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double (*)[NBPAIRS+1][5][5][5])(double (*)[NBPAIRS+1][5][5][5]) ((arg1)->expint21);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_NBPAIRS_1__a_5__a_5__a_5__double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expint22_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double (*result)[NBPAIRS+1][5][5][5][5] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expint22_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expint22_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double (*)[NBPAIRS+1][5][5][5][5])(double (*)[NBPAIRS+1][5][5][5][5]) ((arg1)->expint22);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expninio_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double (*result)[MAXLOOP+1] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expninio_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expninio_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double (*)[MAXLOOP+1])(double (*)[MAXLOOP+1]) ((arg1)->expninio);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_MAXLOOP_1__double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_lxc_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_lxc_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_lxc_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double)(double) ((arg1)->lxc);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expMLbase_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expMLbase_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expMLbase_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double)(double) ((arg1)->expMLbase);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expMLintern_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expMLintern_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expMLintern_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double *)(double *) ((arg1)->expMLintern);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expMLclosing_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expMLclosing_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expMLclosing_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double)(double) ((arg1)->expMLclosing);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expTermAU_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expTermAU_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expTermAU_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double)(double) ((arg1)->expTermAU);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expDuplexInit_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expDuplexInit_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expDuplexInit_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double)(double) ((arg1)->expDuplexInit);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_exptetra_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_exptetra_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_exptetra_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double *)(double *) ((arg1)->exptetra);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_exptri_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_exptri_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_exptri_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double *)(double *) ((arg1)->exptri);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_exphex_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_exphex_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_exphex_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double *)(double *) ((arg1)->exphex);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_Tetraloops_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_Tetraloops_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_Tetraloops_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (char *)(char *) ((arg1)->Tetraloops);
    {
      size_t size = SWIG_strnlen(result, 1401);
      
      
      
      ST(argvi) = SWIG_FromCharPtrAndSize(result, size); argvi++ ;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expTriloop_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expTriloop_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expTriloop_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double *)(double *) ((arg1)->expTriloop);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_Triloops_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_Triloops_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_Triloops_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (char *)(char *) ((arg1)->Triloops);
    {
      size_t size = SWIG_strnlen(result, 241);
      
      
      
      ST(argvi) = SWIG_FromCharPtrAndSize(result, size); argvi++ ;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_Hexaloops_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_Hexaloops_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_Hexaloops_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (char *)(char *) ((arg1)->Hexaloops);
    {
      size_t size = SWIG_strnlen(result, 1801);
      
      
      
      ST(argvi) = SWIG_FromCharPtrAndSize(result, size); argvi++ ;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expTripleC_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expTripleC_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expTripleC_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double)(double) ((arg1)->expTripleC);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expMultipleCA_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expMultipleCA_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expMultipleCA_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double)(double) ((arg1)->expMultipleCA);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expMultipleCB_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expMultipleCB_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expMultipleCB_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double)(double) ((arg1)->expMultipleCB);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expgquad_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double (*result)[3*VRNA_GQUAD_MAX_LINKER_LENGTH+1] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expgquad_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expgquad_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double (*)[3*VRNA_GQUAD_MAX_LINKER_LENGTH+1])(double (*)[3*VRNA_GQUAD_MAX_LINKER_LENGTH+1]) ((arg1)->expgquad);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_3_VRNA_GQUAD_MAX_LINKER_LENGTH_1__double, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_expgquadLayerMismatch_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_expgquadLayerMismatch_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_expgquadLayerMismatch_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double)(double) ((arg1)->expgquadLayerMismatch);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_gquadLayerMismatchMax_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_gquadLayerMismatchMax_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_gquadLayerMismatchMax_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (int)(int) ((arg1)->gquadLayerMismatchMax);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_kT_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_kT_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_kT_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double)(double) ((arg1)->kT);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_pf_scale_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_pf_scale_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_pf_scale_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double)(double) ((arg1)->pf_scale);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_temperature_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_temperature_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_temperature_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double)(double) ((arg1)->temperature);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_alpha_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_alpha_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_alpha_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (double)(double) ((arg1)->alpha);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_model_details_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_model_details_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_model_details_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (vrna_md_t *)& ((arg1)->model_details);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_param_param_file_get) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: exp_param_param_file_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "exp_param_param_file_get" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    result = (char *)(char *) ((arg1)->param_file);
    {
      size_t size = SWIG_strnlen(result, 256);
      
      
      
      ST(argvi) = SWIG_FromCharPtrAndSize(result, size); argvi++ ;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_exp_param__SWIG_0) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    vrna_exp_param_t *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_exp_param(model_details);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_exp_param" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    {
      try {
        result = (vrna_exp_param_t *)new_vrna_exp_param_t__SWIG_0(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_exp_param_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_exp_param__SWIG_1) {
  {
    int argvi = 0;
    vrna_exp_param_t *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_exp_param();");
    }
    {
      try {
        result = (vrna_exp_param_t *)new_vrna_exp_param_t__SWIG_0();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_exp_param_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_exp_param) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_md_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_exp_param__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_exp_param__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'new_exp_param'");
  XSRETURN(0);
}


XS(_wrap_delete_exp_param) {
  {
    vrna_exp_param_t *arg1 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_exp_param(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_exp_param_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_exp_param" "', argument " "1"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_exp_param_t * >(argp1);
    {
      try {
        delete arg1;
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_params_load__SWIG_0) {
  {
    std::string arg1 ;
    unsigned int arg2 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: params_load(filename,options);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "params_load" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "params_load" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try {
        result = (int)my_params_load(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_params_load__SWIG_1) {
  {
    std::string arg1 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: params_load(filename);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "params_load" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (int)my_params_load(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_params_load__SWIG_2) {
  {
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: params_load();");
    }
    {
      try {
        result = (int)my_params_load();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_params_load) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_params_load__SWIG_2); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_params_load__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_params_load__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'params_load'");
  XSRETURN(0);
}


XS(_wrap_params_save__SWIG_0) {
  {
    std::string arg1 ;
    unsigned int arg2 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: params_save(filename,options);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "params_save" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "params_save" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try {
        result = (int)my_params_save(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_params_save__SWIG_1) {
  {
    std::string arg1 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: params_save(filename);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "params_save" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (int)my_params_save(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_params_save) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_params_save__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_params_save__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'params_save'");
  XSRETURN(0);
}


XS(_wrap_params_load_from_string__SWIG_0) {
  {
    std::string arg1 ;
    std::string arg2 ;
    unsigned int arg3 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: params_load_from_string(parameters,name,options);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "params_load_from_string" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "params_load_from_string" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "params_load_from_string" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = (int)my_params_load_from_string(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_params_load_from_string__SWIG_1) {
  {
    std::string arg1 ;
    std::string arg2 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: params_load_from_string(parameters,name);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "params_load_from_string" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "params_load_from_string" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (int)my_params_load_from_string(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_params_load_from_string__SWIG_2) {
  {
    std::string arg1 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: params_load_from_string(parameters);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "params_load_from_string" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (int)my_params_load_from_string(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_params_load_from_string) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_params_load_from_string__SWIG_2); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_params_load_from_string__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_params_load_from_string__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'params_load_from_string'");
  XSRETURN(0);
}


XS(_wrap_params_load_RNA_Turner2004) {
  {
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: params_load_RNA_Turner2004();");
    }
    {
      try {
        result = (int)vrna_params_load_RNA_Turner2004();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_params_load_RNA_Turner1999) {
  {
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: params_load_RNA_Turner1999();");
    }
    {
      try {
        result = (int)vrna_params_load_RNA_Turner1999();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_params_load_RNA_Andronescu2007) {
  {
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: params_load_RNA_Andronescu2007();");
    }
    {
      try {
        result = (int)vrna_params_load_RNA_Andronescu2007();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_params_load_RNA_Langdon2018) {
  {
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: params_load_RNA_Langdon2018();");
    }
    {
      try {
        result = (int)vrna_params_load_RNA_Langdon2018();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_params_load_RNA_misc_special_hairpins) {
  {
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: params_load_RNA_misc_special_hairpins();");
    }
    {
      try {
        result = (int)vrna_params_load_RNA_misc_special_hairpins();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_params_load_DNA_Mathews2004) {
  {
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: params_load_DNA_Mathews2004();");
    }
    {
      try {
        result = (int)vrna_params_load_DNA_Mathews2004();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_params_load_DNA_Mathews1999) {
  {
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: params_load_DNA_Mathews1999();");
    }
    {
      try {
        result = (int)vrna_params_load_DNA_Mathews1999();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_last_parameter_file) {
  {
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: last_parameter_file();");
    }
    {
      try {
        result = (char *)last_parameter_file();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_read_parameter_file) {
  {
    char *arg1 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: read_parameter_file(fname);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "read_parameter_file" "', argument " "1"" of type '" "char const []""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        read_parameter_file((char const (*))arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_write_parameter_file) {
  {
    char *arg1 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: write_parameter_file(fname);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "write_parameter_file" "', argument " "1"" of type '" "char const []""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        write_parameter_file((char const (*))arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_gettype) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    enum parset result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: gettype(ident);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gettype" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (enum parset)gettype((char const *)arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_settype) {
  {
    enum parset arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: settype(s);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "settype" "', argument " "1"" of type '" "enum parset""'");
    } 
    arg1 = static_cast< enum parset >(val1);
    {
      try {
        result = (char *)settype(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_temperature_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_temperature_set(self,temperature);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_temperature_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_temperature_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (arg1) (arg1)->temperature = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_temperature_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_temperature_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_temperature_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (double) ((arg1)->temperature);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_betaScale_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_betaScale_set(self,betaScale);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_betaScale_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_betaScale_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (arg1) (arg1)->betaScale = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_betaScale_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_betaScale_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_betaScale_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (double) ((arg1)->betaScale);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_pf_smooth_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_pf_smooth_set(self,pf_smooth);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_pf_smooth_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_pf_smooth_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->pf_smooth = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_pf_smooth_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_pf_smooth_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_pf_smooth_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (int) ((arg1)->pf_smooth);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_dangles_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_dangles_set(self,dangles);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_dangles_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_dangles_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->dangles = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_dangles_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_dangles_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_dangles_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (int) ((arg1)->dangles);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_special_hp_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_special_hp_set(self,special_hp);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_special_hp_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_special_hp_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->special_hp = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_special_hp_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_special_hp_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_special_hp_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (int) ((arg1)->special_hp);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_noLP_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_noLP_set(self,noLP);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_noLP_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_noLP_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->noLP = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_noLP_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_noLP_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_noLP_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (int) ((arg1)->noLP);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_noGU_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_noGU_set(self,noGU);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_noGU_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_noGU_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->noGU = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_noGU_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_noGU_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_noGU_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (int) ((arg1)->noGU);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_noGUclosure_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_noGUclosure_set(self,noGUclosure);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_noGUclosure_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_noGUclosure_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->noGUclosure = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_noGUclosure_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_noGUclosure_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_noGUclosure_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (int) ((arg1)->noGUclosure);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_logML_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_logML_set(self,logML);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_logML_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_logML_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->logML = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_logML_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_logML_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_logML_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (int) ((arg1)->logML);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_circ_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_circ_set(self,circ);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_circ_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_circ_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->circ = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_circ_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_circ_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_circ_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (int) ((arg1)->circ);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_gquad_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_gquad_set(self,gquad);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_gquad_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_gquad_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->gquad = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_gquad_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_gquad_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_gquad_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (int) ((arg1)->gquad);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_uniq_ML_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_uniq_ML_set(self,uniq_ML);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_uniq_ML_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_uniq_ML_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->uniq_ML = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_uniq_ML_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_uniq_ML_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_uniq_ML_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (int) ((arg1)->uniq_ML);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_energy_set_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_energy_set_set(self,energy_set);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_energy_set_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_energy_set_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->energy_set = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_energy_set_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_energy_set_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_energy_set_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (int) ((arg1)->energy_set);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_backtrack_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_backtrack_set(self,backtrack);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_backtrack_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_backtrack_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->backtrack = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_backtrack_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_backtrack_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_backtrack_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (int) ((arg1)->backtrack);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_backtrack_type_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_backtrack_type_set(self,backtrack_type);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_backtrack_type_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_backtrack_type_set" "', argument " "2"" of type '" "char""'");
    } 
    arg2 = static_cast< char >(val2);
    if (arg1) (arg1)->backtrack_type = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_backtrack_type_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_backtrack_type_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_backtrack_type_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (char) ((arg1)->backtrack_type);
    ST(argvi) = SWIG_From_char  SWIG_PERL_CALL_ARGS_1(static_cast< char >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_compute_bpp_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_compute_bpp_set(self,compute_bpp);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_compute_bpp_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_compute_bpp_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->compute_bpp = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_compute_bpp_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_compute_bpp_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_compute_bpp_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (int) ((arg1)->compute_bpp);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_nonstandards_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    char *arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char temp2[64] ;
    int res2 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_nonstandards_set(self,nonstandards);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_nonstandards_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    res2 = SWIG_AsCharArray(ST(1), temp2, 64);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "md_nonstandards_set" "', argument " "2"" of type '" "char [64]""'");
    }
    arg2 = reinterpret_cast< char * >(temp2);
    if (arg2) memcpy(arg1->nonstandards,arg2,64*sizeof(char));
    else memset(arg1->nonstandards,0,64*sizeof(char));
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_nonstandards_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_nonstandards_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_nonstandards_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (char *)(char *) ((arg1)->nonstandards);
    {
      size_t size = SWIG_strnlen(result, 64);
      
      
      
      ST(argvi) = SWIG_FromCharPtrAndSize(result, size); argvi++ ;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_max_bp_span_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_max_bp_span_set(self,max_bp_span);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_max_bp_span_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_max_bp_span_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->max_bp_span = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_max_bp_span_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_max_bp_span_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_max_bp_span_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (int) ((arg1)->max_bp_span);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_min_loop_size_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_min_loop_size_set(self,min_loop_size);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_min_loop_size_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_min_loop_size_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->min_loop_size = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_min_loop_size_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_min_loop_size_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_min_loop_size_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (int) ((arg1)->min_loop_size);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_window_size_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_window_size_set(self,window_size);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_window_size_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_window_size_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->window_size = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_window_size_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_window_size_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_window_size_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (int) ((arg1)->window_size);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_oldAliEn_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_oldAliEn_set(self,oldAliEn);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_oldAliEn_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_oldAliEn_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->oldAliEn = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_oldAliEn_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_oldAliEn_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_oldAliEn_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (int) ((arg1)->oldAliEn);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_ribo_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_ribo_set(self,ribo);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_ribo_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_ribo_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->ribo = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_ribo_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_ribo_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_ribo_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (int) ((arg1)->ribo);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_cv_fact_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_cv_fact_set(self,cv_fact);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_cv_fact_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_cv_fact_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (arg1) (arg1)->cv_fact = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_cv_fact_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_cv_fact_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_cv_fact_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (double) ((arg1)->cv_fact);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_nc_fact_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_nc_fact_set(self,nc_fact);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_nc_fact_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_nc_fact_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (arg1) (arg1)->nc_fact = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_nc_fact_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_nc_fact_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_nc_fact_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (double) ((arg1)->nc_fact);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_sfact_set) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: md_sfact_set(self,sfact);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_sfact_set" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "md_sfact_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (arg1) (arg1)->sfact = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_sfact_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_sfact_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_sfact_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (double) ((arg1)->sfact);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_rtype_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_rtype_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_rtype_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (int *)(int *) ((arg1)->rtype);
    {
      AV* av = newAV();
      int i = 0,len = 0;
      len = 8;
      
      for (i = 0; i < len ; i++) {
        SV* perlval = newSV(0);
        sv_setiv(perlval, (IV)result[i]);
        av_push(av, perlval);
      }
      ST(argvi) = newRV_noinc((SV*) av );
      sv_2mortal( ST(argvi) );
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_alias_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    short *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_alias_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_alias_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (short *)(short *) ((arg1)->alias);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_short, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_pair_get) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int (*result)[MAXALPHA+1] = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_pair_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_pair_get" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    result = (int (*)[MAXALPHA+1])(int (*)[MAXALPHA+1]) ((arg1)->pair);
    {
      AV *arr = newAV();
      int i,j = 0, len1 = 0, len2 = 0;
      
      len1 = MAXALPHA+1;
      len2 = MAXALPHA+1;
      
      for (i = 0; i < len1 ; i++) {
        AV *vec = newAV();
        for (j = 0; j < len2; j++) {
          SV *v = newSViv(result[i][j]);
          if (!av_store(vec, j, v))
          SvREFCNT_dec(v);
        }
        /* store reference to array */
        av_store(arr, i, newRV_noinc((SV*) vec));
      }
      
      ST(argvi) = newRV_noinc((SV*) arr );
      sv_2mortal( ST(argvi) );
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_0) {
  {
    double arg1 ;
    double arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int arg8 ;
    int arg9 ;
    int arg10 ;
    int arg11 ;
    int arg12 ;
    int arg13 ;
    int arg14 ;
    char arg15 ;
    int arg16 ;
    int arg17 ;
    int arg18 ;
    int arg19 ;
    int arg20 ;
    int arg21 ;
    double arg22 ;
    double arg23 ;
    double arg24 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int val8 ;
    int ecode8 = 0 ;
    int val9 ;
    int ecode9 = 0 ;
    int val10 ;
    int ecode10 = 0 ;
    int val11 ;
    int ecode11 = 0 ;
    int val12 ;
    int ecode12 = 0 ;
    int val13 ;
    int ecode13 = 0 ;
    int val14 ;
    int ecode14 = 0 ;
    char val15 ;
    int ecode15 = 0 ;
    int val16 ;
    int ecode16 = 0 ;
    int val17 ;
    int ecode17 = 0 ;
    int val18 ;
    int ecode18 = 0 ;
    int val19 ;
    int ecode19 = 0 ;
    int val20 ;
    int ecode20 = 0 ;
    int val21 ;
    int ecode21 = 0 ;
    double val22 ;
    int ecode22 = 0 ;
    double val23 ;
    int ecode23 = 0 ;
    double val24 ;
    int ecode24 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 24) || (items > 24)) {
      SWIG_croak("Usage: new_md(temperature,betaScale,pf_smooth,dangles,special_hp,noLP,noGU,noGUclosure,logML,circ,gquad,uniq_ML,energy_set,backtrack,backtrack_type,compute_bpp,max_bp_span,min_loop_size,window_size,oldAliEn,ribo,cv_fact,nc_fact,sfact);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_md" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_md" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_md" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_md" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_md" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_md" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    ecode8 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_md" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
    ecode9 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_md" "', argument " "9"" of type '" "int""'");
    } 
    arg9 = static_cast< int >(val9);
    ecode10 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_md" "', argument " "10"" of type '" "int""'");
    } 
    arg10 = static_cast< int >(val10);
    ecode11 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_md" "', argument " "11"" of type '" "int""'");
    } 
    arg11 = static_cast< int >(val11);
    ecode12 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), &val12);
    if (!SWIG_IsOK(ecode12)) {
      SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "new_md" "', argument " "12"" of type '" "int""'");
    } 
    arg12 = static_cast< int >(val12);
    ecode13 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), &val13);
    if (!SWIG_IsOK(ecode13)) {
      SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "new_md" "', argument " "13"" of type '" "int""'");
    } 
    arg13 = static_cast< int >(val13);
    ecode14 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(13), &val14);
    if (!SWIG_IsOK(ecode14)) {
      SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "new_md" "', argument " "14"" of type '" "int""'");
    } 
    arg14 = static_cast< int >(val14);
    ecode15 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(14), &val15);
    if (!SWIG_IsOK(ecode15)) {
      SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "new_md" "', argument " "15"" of type '" "char""'");
    } 
    arg15 = static_cast< char >(val15);
    ecode16 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(15), &val16);
    if (!SWIG_IsOK(ecode16)) {
      SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "new_md" "', argument " "16"" of type '" "int""'");
    } 
    arg16 = static_cast< int >(val16);
    ecode17 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(16), &val17);
    if (!SWIG_IsOK(ecode17)) {
      SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "new_md" "', argument " "17"" of type '" "int""'");
    } 
    arg17 = static_cast< int >(val17);
    ecode18 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(17), &val18);
    if (!SWIG_IsOK(ecode18)) {
      SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "new_md" "', argument " "18"" of type '" "int""'");
    } 
    arg18 = static_cast< int >(val18);
    ecode19 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(18), &val19);
    if (!SWIG_IsOK(ecode19)) {
      SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "new_md" "', argument " "19"" of type '" "int""'");
    } 
    arg19 = static_cast< int >(val19);
    ecode20 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(19), &val20);
    if (!SWIG_IsOK(ecode20)) {
      SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "new_md" "', argument " "20"" of type '" "int""'");
    } 
    arg20 = static_cast< int >(val20);
    ecode21 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(20), &val21);
    if (!SWIG_IsOK(ecode21)) {
      SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "new_md" "', argument " "21"" of type '" "int""'");
    } 
    arg21 = static_cast< int >(val21);
    ecode22 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(21), &val22);
    if (!SWIG_IsOK(ecode22)) {
      SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "new_md" "', argument " "22"" of type '" "double""'");
    } 
    arg22 = static_cast< double >(val22);
    ecode23 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(22), &val23);
    if (!SWIG_IsOK(ecode23)) {
      SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "new_md" "', argument " "23"" of type '" "double""'");
    } 
    arg23 = static_cast< double >(val23);
    ecode24 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(23), &val24);
    if (!SWIG_IsOK(ecode24)) {
      SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "new_md" "', argument " "24"" of type '" "double""'");
    } 
    arg24 = static_cast< double >(val24);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_1) {
  {
    double arg1 ;
    double arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int arg8 ;
    int arg9 ;
    int arg10 ;
    int arg11 ;
    int arg12 ;
    int arg13 ;
    int arg14 ;
    char arg15 ;
    int arg16 ;
    int arg17 ;
    int arg18 ;
    int arg19 ;
    int arg20 ;
    int arg21 ;
    double arg22 ;
    double arg23 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int val8 ;
    int ecode8 = 0 ;
    int val9 ;
    int ecode9 = 0 ;
    int val10 ;
    int ecode10 = 0 ;
    int val11 ;
    int ecode11 = 0 ;
    int val12 ;
    int ecode12 = 0 ;
    int val13 ;
    int ecode13 = 0 ;
    int val14 ;
    int ecode14 = 0 ;
    char val15 ;
    int ecode15 = 0 ;
    int val16 ;
    int ecode16 = 0 ;
    int val17 ;
    int ecode17 = 0 ;
    int val18 ;
    int ecode18 = 0 ;
    int val19 ;
    int ecode19 = 0 ;
    int val20 ;
    int ecode20 = 0 ;
    int val21 ;
    int ecode21 = 0 ;
    double val22 ;
    int ecode22 = 0 ;
    double val23 ;
    int ecode23 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 23) || (items > 23)) {
      SWIG_croak("Usage: new_md(temperature,betaScale,pf_smooth,dangles,special_hp,noLP,noGU,noGUclosure,logML,circ,gquad,uniq_ML,energy_set,backtrack,backtrack_type,compute_bpp,max_bp_span,min_loop_size,window_size,oldAliEn,ribo,cv_fact,nc_fact);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_md" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_md" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_md" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_md" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_md" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_md" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    ecode8 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_md" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
    ecode9 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_md" "', argument " "9"" of type '" "int""'");
    } 
    arg9 = static_cast< int >(val9);
    ecode10 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_md" "', argument " "10"" of type '" "int""'");
    } 
    arg10 = static_cast< int >(val10);
    ecode11 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_md" "', argument " "11"" of type '" "int""'");
    } 
    arg11 = static_cast< int >(val11);
    ecode12 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), &val12);
    if (!SWIG_IsOK(ecode12)) {
      SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "new_md" "', argument " "12"" of type '" "int""'");
    } 
    arg12 = static_cast< int >(val12);
    ecode13 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), &val13);
    if (!SWIG_IsOK(ecode13)) {
      SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "new_md" "', argument " "13"" of type '" "int""'");
    } 
    arg13 = static_cast< int >(val13);
    ecode14 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(13), &val14);
    if (!SWIG_IsOK(ecode14)) {
      SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "new_md" "', argument " "14"" of type '" "int""'");
    } 
    arg14 = static_cast< int >(val14);
    ecode15 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(14), &val15);
    if (!SWIG_IsOK(ecode15)) {
      SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "new_md" "', argument " "15"" of type '" "char""'");
    } 
    arg15 = static_cast< char >(val15);
    ecode16 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(15), &val16);
    if (!SWIG_IsOK(ecode16)) {
      SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "new_md" "', argument " "16"" of type '" "int""'");
    } 
    arg16 = static_cast< int >(val16);
    ecode17 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(16), &val17);
    if (!SWIG_IsOK(ecode17)) {
      SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "new_md" "', argument " "17"" of type '" "int""'");
    } 
    arg17 = static_cast< int >(val17);
    ecode18 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(17), &val18);
    if (!SWIG_IsOK(ecode18)) {
      SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "new_md" "', argument " "18"" of type '" "int""'");
    } 
    arg18 = static_cast< int >(val18);
    ecode19 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(18), &val19);
    if (!SWIG_IsOK(ecode19)) {
      SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "new_md" "', argument " "19"" of type '" "int""'");
    } 
    arg19 = static_cast< int >(val19);
    ecode20 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(19), &val20);
    if (!SWIG_IsOK(ecode20)) {
      SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "new_md" "', argument " "20"" of type '" "int""'");
    } 
    arg20 = static_cast< int >(val20);
    ecode21 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(20), &val21);
    if (!SWIG_IsOK(ecode21)) {
      SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "new_md" "', argument " "21"" of type '" "int""'");
    } 
    arg21 = static_cast< int >(val21);
    ecode22 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(21), &val22);
    if (!SWIG_IsOK(ecode22)) {
      SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "new_md" "', argument " "22"" of type '" "double""'");
    } 
    arg22 = static_cast< double >(val22);
    ecode23 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(22), &val23);
    if (!SWIG_IsOK(ecode23)) {
      SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "new_md" "', argument " "23"" of type '" "double""'");
    } 
    arg23 = static_cast< double >(val23);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_2) {
  {
    double arg1 ;
    double arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int arg8 ;
    int arg9 ;
    int arg10 ;
    int arg11 ;
    int arg12 ;
    int arg13 ;
    int arg14 ;
    char arg15 ;
    int arg16 ;
    int arg17 ;
    int arg18 ;
    int arg19 ;
    int arg20 ;
    int arg21 ;
    double arg22 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int val8 ;
    int ecode8 = 0 ;
    int val9 ;
    int ecode9 = 0 ;
    int val10 ;
    int ecode10 = 0 ;
    int val11 ;
    int ecode11 = 0 ;
    int val12 ;
    int ecode12 = 0 ;
    int val13 ;
    int ecode13 = 0 ;
    int val14 ;
    int ecode14 = 0 ;
    char val15 ;
    int ecode15 = 0 ;
    int val16 ;
    int ecode16 = 0 ;
    int val17 ;
    int ecode17 = 0 ;
    int val18 ;
    int ecode18 = 0 ;
    int val19 ;
    int ecode19 = 0 ;
    int val20 ;
    int ecode20 = 0 ;
    int val21 ;
    int ecode21 = 0 ;
    double val22 ;
    int ecode22 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 22) || (items > 22)) {
      SWIG_croak("Usage: new_md(temperature,betaScale,pf_smooth,dangles,special_hp,noLP,noGU,noGUclosure,logML,circ,gquad,uniq_ML,energy_set,backtrack,backtrack_type,compute_bpp,max_bp_span,min_loop_size,window_size,oldAliEn,ribo,cv_fact);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_md" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_md" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_md" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_md" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_md" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_md" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    ecode8 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_md" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
    ecode9 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_md" "', argument " "9"" of type '" "int""'");
    } 
    arg9 = static_cast< int >(val9);
    ecode10 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_md" "', argument " "10"" of type '" "int""'");
    } 
    arg10 = static_cast< int >(val10);
    ecode11 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_md" "', argument " "11"" of type '" "int""'");
    } 
    arg11 = static_cast< int >(val11);
    ecode12 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), &val12);
    if (!SWIG_IsOK(ecode12)) {
      SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "new_md" "', argument " "12"" of type '" "int""'");
    } 
    arg12 = static_cast< int >(val12);
    ecode13 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), &val13);
    if (!SWIG_IsOK(ecode13)) {
      SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "new_md" "', argument " "13"" of type '" "int""'");
    } 
    arg13 = static_cast< int >(val13);
    ecode14 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(13), &val14);
    if (!SWIG_IsOK(ecode14)) {
      SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "new_md" "', argument " "14"" of type '" "int""'");
    } 
    arg14 = static_cast< int >(val14);
    ecode15 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(14), &val15);
    if (!SWIG_IsOK(ecode15)) {
      SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "new_md" "', argument " "15"" of type '" "char""'");
    } 
    arg15 = static_cast< char >(val15);
    ecode16 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(15), &val16);
    if (!SWIG_IsOK(ecode16)) {
      SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "new_md" "', argument " "16"" of type '" "int""'");
    } 
    arg16 = static_cast< int >(val16);
    ecode17 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(16), &val17);
    if (!SWIG_IsOK(ecode17)) {
      SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "new_md" "', argument " "17"" of type '" "int""'");
    } 
    arg17 = static_cast< int >(val17);
    ecode18 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(17), &val18);
    if (!SWIG_IsOK(ecode18)) {
      SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "new_md" "', argument " "18"" of type '" "int""'");
    } 
    arg18 = static_cast< int >(val18);
    ecode19 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(18), &val19);
    if (!SWIG_IsOK(ecode19)) {
      SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "new_md" "', argument " "19"" of type '" "int""'");
    } 
    arg19 = static_cast< int >(val19);
    ecode20 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(19), &val20);
    if (!SWIG_IsOK(ecode20)) {
      SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "new_md" "', argument " "20"" of type '" "int""'");
    } 
    arg20 = static_cast< int >(val20);
    ecode21 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(20), &val21);
    if (!SWIG_IsOK(ecode21)) {
      SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "new_md" "', argument " "21"" of type '" "int""'");
    } 
    arg21 = static_cast< int >(val21);
    ecode22 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(21), &val22);
    if (!SWIG_IsOK(ecode22)) {
      SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "new_md" "', argument " "22"" of type '" "double""'");
    } 
    arg22 = static_cast< double >(val22);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_3) {
  {
    double arg1 ;
    double arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int arg8 ;
    int arg9 ;
    int arg10 ;
    int arg11 ;
    int arg12 ;
    int arg13 ;
    int arg14 ;
    char arg15 ;
    int arg16 ;
    int arg17 ;
    int arg18 ;
    int arg19 ;
    int arg20 ;
    int arg21 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int val8 ;
    int ecode8 = 0 ;
    int val9 ;
    int ecode9 = 0 ;
    int val10 ;
    int ecode10 = 0 ;
    int val11 ;
    int ecode11 = 0 ;
    int val12 ;
    int ecode12 = 0 ;
    int val13 ;
    int ecode13 = 0 ;
    int val14 ;
    int ecode14 = 0 ;
    char val15 ;
    int ecode15 = 0 ;
    int val16 ;
    int ecode16 = 0 ;
    int val17 ;
    int ecode17 = 0 ;
    int val18 ;
    int ecode18 = 0 ;
    int val19 ;
    int ecode19 = 0 ;
    int val20 ;
    int ecode20 = 0 ;
    int val21 ;
    int ecode21 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 21) || (items > 21)) {
      SWIG_croak("Usage: new_md(temperature,betaScale,pf_smooth,dangles,special_hp,noLP,noGU,noGUclosure,logML,circ,gquad,uniq_ML,energy_set,backtrack,backtrack_type,compute_bpp,max_bp_span,min_loop_size,window_size,oldAliEn,ribo);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_md" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_md" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_md" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_md" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_md" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_md" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    ecode8 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_md" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
    ecode9 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_md" "', argument " "9"" of type '" "int""'");
    } 
    arg9 = static_cast< int >(val9);
    ecode10 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_md" "', argument " "10"" of type '" "int""'");
    } 
    arg10 = static_cast< int >(val10);
    ecode11 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_md" "', argument " "11"" of type '" "int""'");
    } 
    arg11 = static_cast< int >(val11);
    ecode12 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), &val12);
    if (!SWIG_IsOK(ecode12)) {
      SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "new_md" "', argument " "12"" of type '" "int""'");
    } 
    arg12 = static_cast< int >(val12);
    ecode13 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), &val13);
    if (!SWIG_IsOK(ecode13)) {
      SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "new_md" "', argument " "13"" of type '" "int""'");
    } 
    arg13 = static_cast< int >(val13);
    ecode14 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(13), &val14);
    if (!SWIG_IsOK(ecode14)) {
      SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "new_md" "', argument " "14"" of type '" "int""'");
    } 
    arg14 = static_cast< int >(val14);
    ecode15 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(14), &val15);
    if (!SWIG_IsOK(ecode15)) {
      SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "new_md" "', argument " "15"" of type '" "char""'");
    } 
    arg15 = static_cast< char >(val15);
    ecode16 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(15), &val16);
    if (!SWIG_IsOK(ecode16)) {
      SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "new_md" "', argument " "16"" of type '" "int""'");
    } 
    arg16 = static_cast< int >(val16);
    ecode17 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(16), &val17);
    if (!SWIG_IsOK(ecode17)) {
      SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "new_md" "', argument " "17"" of type '" "int""'");
    } 
    arg17 = static_cast< int >(val17);
    ecode18 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(17), &val18);
    if (!SWIG_IsOK(ecode18)) {
      SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "new_md" "', argument " "18"" of type '" "int""'");
    } 
    arg18 = static_cast< int >(val18);
    ecode19 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(18), &val19);
    if (!SWIG_IsOK(ecode19)) {
      SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "new_md" "', argument " "19"" of type '" "int""'");
    } 
    arg19 = static_cast< int >(val19);
    ecode20 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(19), &val20);
    if (!SWIG_IsOK(ecode20)) {
      SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "new_md" "', argument " "20"" of type '" "int""'");
    } 
    arg20 = static_cast< int >(val20);
    ecode21 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(20), &val21);
    if (!SWIG_IsOK(ecode21)) {
      SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "new_md" "', argument " "21"" of type '" "int""'");
    } 
    arg21 = static_cast< int >(val21);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_4) {
  {
    double arg1 ;
    double arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int arg8 ;
    int arg9 ;
    int arg10 ;
    int arg11 ;
    int arg12 ;
    int arg13 ;
    int arg14 ;
    char arg15 ;
    int arg16 ;
    int arg17 ;
    int arg18 ;
    int arg19 ;
    int arg20 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int val8 ;
    int ecode8 = 0 ;
    int val9 ;
    int ecode9 = 0 ;
    int val10 ;
    int ecode10 = 0 ;
    int val11 ;
    int ecode11 = 0 ;
    int val12 ;
    int ecode12 = 0 ;
    int val13 ;
    int ecode13 = 0 ;
    int val14 ;
    int ecode14 = 0 ;
    char val15 ;
    int ecode15 = 0 ;
    int val16 ;
    int ecode16 = 0 ;
    int val17 ;
    int ecode17 = 0 ;
    int val18 ;
    int ecode18 = 0 ;
    int val19 ;
    int ecode19 = 0 ;
    int val20 ;
    int ecode20 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 20) || (items > 20)) {
      SWIG_croak("Usage: new_md(temperature,betaScale,pf_smooth,dangles,special_hp,noLP,noGU,noGUclosure,logML,circ,gquad,uniq_ML,energy_set,backtrack,backtrack_type,compute_bpp,max_bp_span,min_loop_size,window_size,oldAliEn);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_md" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_md" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_md" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_md" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_md" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_md" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    ecode8 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_md" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
    ecode9 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_md" "', argument " "9"" of type '" "int""'");
    } 
    arg9 = static_cast< int >(val9);
    ecode10 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_md" "', argument " "10"" of type '" "int""'");
    } 
    arg10 = static_cast< int >(val10);
    ecode11 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_md" "', argument " "11"" of type '" "int""'");
    } 
    arg11 = static_cast< int >(val11);
    ecode12 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), &val12);
    if (!SWIG_IsOK(ecode12)) {
      SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "new_md" "', argument " "12"" of type '" "int""'");
    } 
    arg12 = static_cast< int >(val12);
    ecode13 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), &val13);
    if (!SWIG_IsOK(ecode13)) {
      SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "new_md" "', argument " "13"" of type '" "int""'");
    } 
    arg13 = static_cast< int >(val13);
    ecode14 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(13), &val14);
    if (!SWIG_IsOK(ecode14)) {
      SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "new_md" "', argument " "14"" of type '" "int""'");
    } 
    arg14 = static_cast< int >(val14);
    ecode15 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(14), &val15);
    if (!SWIG_IsOK(ecode15)) {
      SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "new_md" "', argument " "15"" of type '" "char""'");
    } 
    arg15 = static_cast< char >(val15);
    ecode16 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(15), &val16);
    if (!SWIG_IsOK(ecode16)) {
      SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "new_md" "', argument " "16"" of type '" "int""'");
    } 
    arg16 = static_cast< int >(val16);
    ecode17 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(16), &val17);
    if (!SWIG_IsOK(ecode17)) {
      SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "new_md" "', argument " "17"" of type '" "int""'");
    } 
    arg17 = static_cast< int >(val17);
    ecode18 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(17), &val18);
    if (!SWIG_IsOK(ecode18)) {
      SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "new_md" "', argument " "18"" of type '" "int""'");
    } 
    arg18 = static_cast< int >(val18);
    ecode19 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(18), &val19);
    if (!SWIG_IsOK(ecode19)) {
      SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "new_md" "', argument " "19"" of type '" "int""'");
    } 
    arg19 = static_cast< int >(val19);
    ecode20 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(19), &val20);
    if (!SWIG_IsOK(ecode20)) {
      SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "new_md" "', argument " "20"" of type '" "int""'");
    } 
    arg20 = static_cast< int >(val20);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_5) {
  {
    double arg1 ;
    double arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int arg8 ;
    int arg9 ;
    int arg10 ;
    int arg11 ;
    int arg12 ;
    int arg13 ;
    int arg14 ;
    char arg15 ;
    int arg16 ;
    int arg17 ;
    int arg18 ;
    int arg19 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int val8 ;
    int ecode8 = 0 ;
    int val9 ;
    int ecode9 = 0 ;
    int val10 ;
    int ecode10 = 0 ;
    int val11 ;
    int ecode11 = 0 ;
    int val12 ;
    int ecode12 = 0 ;
    int val13 ;
    int ecode13 = 0 ;
    int val14 ;
    int ecode14 = 0 ;
    char val15 ;
    int ecode15 = 0 ;
    int val16 ;
    int ecode16 = 0 ;
    int val17 ;
    int ecode17 = 0 ;
    int val18 ;
    int ecode18 = 0 ;
    int val19 ;
    int ecode19 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 19) || (items > 19)) {
      SWIG_croak("Usage: new_md(temperature,betaScale,pf_smooth,dangles,special_hp,noLP,noGU,noGUclosure,logML,circ,gquad,uniq_ML,energy_set,backtrack,backtrack_type,compute_bpp,max_bp_span,min_loop_size,window_size);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_md" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_md" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_md" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_md" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_md" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_md" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    ecode8 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_md" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
    ecode9 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_md" "', argument " "9"" of type '" "int""'");
    } 
    arg9 = static_cast< int >(val9);
    ecode10 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_md" "', argument " "10"" of type '" "int""'");
    } 
    arg10 = static_cast< int >(val10);
    ecode11 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_md" "', argument " "11"" of type '" "int""'");
    } 
    arg11 = static_cast< int >(val11);
    ecode12 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), &val12);
    if (!SWIG_IsOK(ecode12)) {
      SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "new_md" "', argument " "12"" of type '" "int""'");
    } 
    arg12 = static_cast< int >(val12);
    ecode13 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), &val13);
    if (!SWIG_IsOK(ecode13)) {
      SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "new_md" "', argument " "13"" of type '" "int""'");
    } 
    arg13 = static_cast< int >(val13);
    ecode14 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(13), &val14);
    if (!SWIG_IsOK(ecode14)) {
      SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "new_md" "', argument " "14"" of type '" "int""'");
    } 
    arg14 = static_cast< int >(val14);
    ecode15 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(14), &val15);
    if (!SWIG_IsOK(ecode15)) {
      SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "new_md" "', argument " "15"" of type '" "char""'");
    } 
    arg15 = static_cast< char >(val15);
    ecode16 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(15), &val16);
    if (!SWIG_IsOK(ecode16)) {
      SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "new_md" "', argument " "16"" of type '" "int""'");
    } 
    arg16 = static_cast< int >(val16);
    ecode17 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(16), &val17);
    if (!SWIG_IsOK(ecode17)) {
      SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "new_md" "', argument " "17"" of type '" "int""'");
    } 
    arg17 = static_cast< int >(val17);
    ecode18 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(17), &val18);
    if (!SWIG_IsOK(ecode18)) {
      SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "new_md" "', argument " "18"" of type '" "int""'");
    } 
    arg18 = static_cast< int >(val18);
    ecode19 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(18), &val19);
    if (!SWIG_IsOK(ecode19)) {
      SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "new_md" "', argument " "19"" of type '" "int""'");
    } 
    arg19 = static_cast< int >(val19);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_6) {
  {
    double arg1 ;
    double arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int arg8 ;
    int arg9 ;
    int arg10 ;
    int arg11 ;
    int arg12 ;
    int arg13 ;
    int arg14 ;
    char arg15 ;
    int arg16 ;
    int arg17 ;
    int arg18 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int val8 ;
    int ecode8 = 0 ;
    int val9 ;
    int ecode9 = 0 ;
    int val10 ;
    int ecode10 = 0 ;
    int val11 ;
    int ecode11 = 0 ;
    int val12 ;
    int ecode12 = 0 ;
    int val13 ;
    int ecode13 = 0 ;
    int val14 ;
    int ecode14 = 0 ;
    char val15 ;
    int ecode15 = 0 ;
    int val16 ;
    int ecode16 = 0 ;
    int val17 ;
    int ecode17 = 0 ;
    int val18 ;
    int ecode18 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 18) || (items > 18)) {
      SWIG_croak("Usage: new_md(temperature,betaScale,pf_smooth,dangles,special_hp,noLP,noGU,noGUclosure,logML,circ,gquad,uniq_ML,energy_set,backtrack,backtrack_type,compute_bpp,max_bp_span,min_loop_size);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_md" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_md" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_md" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_md" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_md" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_md" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    ecode8 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_md" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
    ecode9 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_md" "', argument " "9"" of type '" "int""'");
    } 
    arg9 = static_cast< int >(val9);
    ecode10 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_md" "', argument " "10"" of type '" "int""'");
    } 
    arg10 = static_cast< int >(val10);
    ecode11 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_md" "', argument " "11"" of type '" "int""'");
    } 
    arg11 = static_cast< int >(val11);
    ecode12 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), &val12);
    if (!SWIG_IsOK(ecode12)) {
      SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "new_md" "', argument " "12"" of type '" "int""'");
    } 
    arg12 = static_cast< int >(val12);
    ecode13 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), &val13);
    if (!SWIG_IsOK(ecode13)) {
      SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "new_md" "', argument " "13"" of type '" "int""'");
    } 
    arg13 = static_cast< int >(val13);
    ecode14 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(13), &val14);
    if (!SWIG_IsOK(ecode14)) {
      SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "new_md" "', argument " "14"" of type '" "int""'");
    } 
    arg14 = static_cast< int >(val14);
    ecode15 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(14), &val15);
    if (!SWIG_IsOK(ecode15)) {
      SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "new_md" "', argument " "15"" of type '" "char""'");
    } 
    arg15 = static_cast< char >(val15);
    ecode16 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(15), &val16);
    if (!SWIG_IsOK(ecode16)) {
      SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "new_md" "', argument " "16"" of type '" "int""'");
    } 
    arg16 = static_cast< int >(val16);
    ecode17 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(16), &val17);
    if (!SWIG_IsOK(ecode17)) {
      SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "new_md" "', argument " "17"" of type '" "int""'");
    } 
    arg17 = static_cast< int >(val17);
    ecode18 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(17), &val18);
    if (!SWIG_IsOK(ecode18)) {
      SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "new_md" "', argument " "18"" of type '" "int""'");
    } 
    arg18 = static_cast< int >(val18);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_7) {
  {
    double arg1 ;
    double arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int arg8 ;
    int arg9 ;
    int arg10 ;
    int arg11 ;
    int arg12 ;
    int arg13 ;
    int arg14 ;
    char arg15 ;
    int arg16 ;
    int arg17 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int val8 ;
    int ecode8 = 0 ;
    int val9 ;
    int ecode9 = 0 ;
    int val10 ;
    int ecode10 = 0 ;
    int val11 ;
    int ecode11 = 0 ;
    int val12 ;
    int ecode12 = 0 ;
    int val13 ;
    int ecode13 = 0 ;
    int val14 ;
    int ecode14 = 0 ;
    char val15 ;
    int ecode15 = 0 ;
    int val16 ;
    int ecode16 = 0 ;
    int val17 ;
    int ecode17 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 17) || (items > 17)) {
      SWIG_croak("Usage: new_md(temperature,betaScale,pf_smooth,dangles,special_hp,noLP,noGU,noGUclosure,logML,circ,gquad,uniq_ML,energy_set,backtrack,backtrack_type,compute_bpp,max_bp_span);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_md" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_md" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_md" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_md" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_md" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_md" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    ecode8 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_md" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
    ecode9 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_md" "', argument " "9"" of type '" "int""'");
    } 
    arg9 = static_cast< int >(val9);
    ecode10 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_md" "', argument " "10"" of type '" "int""'");
    } 
    arg10 = static_cast< int >(val10);
    ecode11 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_md" "', argument " "11"" of type '" "int""'");
    } 
    arg11 = static_cast< int >(val11);
    ecode12 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), &val12);
    if (!SWIG_IsOK(ecode12)) {
      SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "new_md" "', argument " "12"" of type '" "int""'");
    } 
    arg12 = static_cast< int >(val12);
    ecode13 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), &val13);
    if (!SWIG_IsOK(ecode13)) {
      SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "new_md" "', argument " "13"" of type '" "int""'");
    } 
    arg13 = static_cast< int >(val13);
    ecode14 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(13), &val14);
    if (!SWIG_IsOK(ecode14)) {
      SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "new_md" "', argument " "14"" of type '" "int""'");
    } 
    arg14 = static_cast< int >(val14);
    ecode15 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(14), &val15);
    if (!SWIG_IsOK(ecode15)) {
      SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "new_md" "', argument " "15"" of type '" "char""'");
    } 
    arg15 = static_cast< char >(val15);
    ecode16 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(15), &val16);
    if (!SWIG_IsOK(ecode16)) {
      SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "new_md" "', argument " "16"" of type '" "int""'");
    } 
    arg16 = static_cast< int >(val16);
    ecode17 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(16), &val17);
    if (!SWIG_IsOK(ecode17)) {
      SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "new_md" "', argument " "17"" of type '" "int""'");
    } 
    arg17 = static_cast< int >(val17);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_8) {
  {
    double arg1 ;
    double arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int arg8 ;
    int arg9 ;
    int arg10 ;
    int arg11 ;
    int arg12 ;
    int arg13 ;
    int arg14 ;
    char arg15 ;
    int arg16 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int val8 ;
    int ecode8 = 0 ;
    int val9 ;
    int ecode9 = 0 ;
    int val10 ;
    int ecode10 = 0 ;
    int val11 ;
    int ecode11 = 0 ;
    int val12 ;
    int ecode12 = 0 ;
    int val13 ;
    int ecode13 = 0 ;
    int val14 ;
    int ecode14 = 0 ;
    char val15 ;
    int ecode15 = 0 ;
    int val16 ;
    int ecode16 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 16) || (items > 16)) {
      SWIG_croak("Usage: new_md(temperature,betaScale,pf_smooth,dangles,special_hp,noLP,noGU,noGUclosure,logML,circ,gquad,uniq_ML,energy_set,backtrack,backtrack_type,compute_bpp);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_md" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_md" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_md" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_md" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_md" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_md" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    ecode8 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_md" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
    ecode9 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_md" "', argument " "9"" of type '" "int""'");
    } 
    arg9 = static_cast< int >(val9);
    ecode10 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_md" "', argument " "10"" of type '" "int""'");
    } 
    arg10 = static_cast< int >(val10);
    ecode11 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_md" "', argument " "11"" of type '" "int""'");
    } 
    arg11 = static_cast< int >(val11);
    ecode12 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), &val12);
    if (!SWIG_IsOK(ecode12)) {
      SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "new_md" "', argument " "12"" of type '" "int""'");
    } 
    arg12 = static_cast< int >(val12);
    ecode13 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), &val13);
    if (!SWIG_IsOK(ecode13)) {
      SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "new_md" "', argument " "13"" of type '" "int""'");
    } 
    arg13 = static_cast< int >(val13);
    ecode14 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(13), &val14);
    if (!SWIG_IsOK(ecode14)) {
      SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "new_md" "', argument " "14"" of type '" "int""'");
    } 
    arg14 = static_cast< int >(val14);
    ecode15 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(14), &val15);
    if (!SWIG_IsOK(ecode15)) {
      SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "new_md" "', argument " "15"" of type '" "char""'");
    } 
    arg15 = static_cast< char >(val15);
    ecode16 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(15), &val16);
    if (!SWIG_IsOK(ecode16)) {
      SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "new_md" "', argument " "16"" of type '" "int""'");
    } 
    arg16 = static_cast< int >(val16);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_9) {
  {
    double arg1 ;
    double arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int arg8 ;
    int arg9 ;
    int arg10 ;
    int arg11 ;
    int arg12 ;
    int arg13 ;
    int arg14 ;
    char arg15 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int val8 ;
    int ecode8 = 0 ;
    int val9 ;
    int ecode9 = 0 ;
    int val10 ;
    int ecode10 = 0 ;
    int val11 ;
    int ecode11 = 0 ;
    int val12 ;
    int ecode12 = 0 ;
    int val13 ;
    int ecode13 = 0 ;
    int val14 ;
    int ecode14 = 0 ;
    char val15 ;
    int ecode15 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 15) || (items > 15)) {
      SWIG_croak("Usage: new_md(temperature,betaScale,pf_smooth,dangles,special_hp,noLP,noGU,noGUclosure,logML,circ,gquad,uniq_ML,energy_set,backtrack,backtrack_type);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_md" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_md" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_md" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_md" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_md" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_md" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    ecode8 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_md" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
    ecode9 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_md" "', argument " "9"" of type '" "int""'");
    } 
    arg9 = static_cast< int >(val9);
    ecode10 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_md" "', argument " "10"" of type '" "int""'");
    } 
    arg10 = static_cast< int >(val10);
    ecode11 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_md" "', argument " "11"" of type '" "int""'");
    } 
    arg11 = static_cast< int >(val11);
    ecode12 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), &val12);
    if (!SWIG_IsOK(ecode12)) {
      SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "new_md" "', argument " "12"" of type '" "int""'");
    } 
    arg12 = static_cast< int >(val12);
    ecode13 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), &val13);
    if (!SWIG_IsOK(ecode13)) {
      SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "new_md" "', argument " "13"" of type '" "int""'");
    } 
    arg13 = static_cast< int >(val13);
    ecode14 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(13), &val14);
    if (!SWIG_IsOK(ecode14)) {
      SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "new_md" "', argument " "14"" of type '" "int""'");
    } 
    arg14 = static_cast< int >(val14);
    ecode15 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(14), &val15);
    if (!SWIG_IsOK(ecode15)) {
      SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "new_md" "', argument " "15"" of type '" "char""'");
    } 
    arg15 = static_cast< char >(val15);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_10) {
  {
    double arg1 ;
    double arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int arg8 ;
    int arg9 ;
    int arg10 ;
    int arg11 ;
    int arg12 ;
    int arg13 ;
    int arg14 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int val8 ;
    int ecode8 = 0 ;
    int val9 ;
    int ecode9 = 0 ;
    int val10 ;
    int ecode10 = 0 ;
    int val11 ;
    int ecode11 = 0 ;
    int val12 ;
    int ecode12 = 0 ;
    int val13 ;
    int ecode13 = 0 ;
    int val14 ;
    int ecode14 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 14) || (items > 14)) {
      SWIG_croak("Usage: new_md(temperature,betaScale,pf_smooth,dangles,special_hp,noLP,noGU,noGUclosure,logML,circ,gquad,uniq_ML,energy_set,backtrack);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_md" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_md" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_md" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_md" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_md" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_md" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    ecode8 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_md" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
    ecode9 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_md" "', argument " "9"" of type '" "int""'");
    } 
    arg9 = static_cast< int >(val9);
    ecode10 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_md" "', argument " "10"" of type '" "int""'");
    } 
    arg10 = static_cast< int >(val10);
    ecode11 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_md" "', argument " "11"" of type '" "int""'");
    } 
    arg11 = static_cast< int >(val11);
    ecode12 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), &val12);
    if (!SWIG_IsOK(ecode12)) {
      SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "new_md" "', argument " "12"" of type '" "int""'");
    } 
    arg12 = static_cast< int >(val12);
    ecode13 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), &val13);
    if (!SWIG_IsOK(ecode13)) {
      SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "new_md" "', argument " "13"" of type '" "int""'");
    } 
    arg13 = static_cast< int >(val13);
    ecode14 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(13), &val14);
    if (!SWIG_IsOK(ecode14)) {
      SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "new_md" "', argument " "14"" of type '" "int""'");
    } 
    arg14 = static_cast< int >(val14);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_11) {
  {
    double arg1 ;
    double arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int arg8 ;
    int arg9 ;
    int arg10 ;
    int arg11 ;
    int arg12 ;
    int arg13 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int val8 ;
    int ecode8 = 0 ;
    int val9 ;
    int ecode9 = 0 ;
    int val10 ;
    int ecode10 = 0 ;
    int val11 ;
    int ecode11 = 0 ;
    int val12 ;
    int ecode12 = 0 ;
    int val13 ;
    int ecode13 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 13) || (items > 13)) {
      SWIG_croak("Usage: new_md(temperature,betaScale,pf_smooth,dangles,special_hp,noLP,noGU,noGUclosure,logML,circ,gquad,uniq_ML,energy_set);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_md" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_md" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_md" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_md" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_md" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_md" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    ecode8 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_md" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
    ecode9 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_md" "', argument " "9"" of type '" "int""'");
    } 
    arg9 = static_cast< int >(val9);
    ecode10 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_md" "', argument " "10"" of type '" "int""'");
    } 
    arg10 = static_cast< int >(val10);
    ecode11 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_md" "', argument " "11"" of type '" "int""'");
    } 
    arg11 = static_cast< int >(val11);
    ecode12 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), &val12);
    if (!SWIG_IsOK(ecode12)) {
      SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "new_md" "', argument " "12"" of type '" "int""'");
    } 
    arg12 = static_cast< int >(val12);
    ecode13 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), &val13);
    if (!SWIG_IsOK(ecode13)) {
      SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "new_md" "', argument " "13"" of type '" "int""'");
    } 
    arg13 = static_cast< int >(val13);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_12) {
  {
    double arg1 ;
    double arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int arg8 ;
    int arg9 ;
    int arg10 ;
    int arg11 ;
    int arg12 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int val8 ;
    int ecode8 = 0 ;
    int val9 ;
    int ecode9 = 0 ;
    int val10 ;
    int ecode10 = 0 ;
    int val11 ;
    int ecode11 = 0 ;
    int val12 ;
    int ecode12 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 12) || (items > 12)) {
      SWIG_croak("Usage: new_md(temperature,betaScale,pf_smooth,dangles,special_hp,noLP,noGU,noGUclosure,logML,circ,gquad,uniq_ML);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_md" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_md" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_md" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_md" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_md" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_md" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    ecode8 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_md" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
    ecode9 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_md" "', argument " "9"" of type '" "int""'");
    } 
    arg9 = static_cast< int >(val9);
    ecode10 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_md" "', argument " "10"" of type '" "int""'");
    } 
    arg10 = static_cast< int >(val10);
    ecode11 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_md" "', argument " "11"" of type '" "int""'");
    } 
    arg11 = static_cast< int >(val11);
    ecode12 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), &val12);
    if (!SWIG_IsOK(ecode12)) {
      SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "new_md" "', argument " "12"" of type '" "int""'");
    } 
    arg12 = static_cast< int >(val12);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_13) {
  {
    double arg1 ;
    double arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int arg8 ;
    int arg9 ;
    int arg10 ;
    int arg11 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int val8 ;
    int ecode8 = 0 ;
    int val9 ;
    int ecode9 = 0 ;
    int val10 ;
    int ecode10 = 0 ;
    int val11 ;
    int ecode11 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 11) || (items > 11)) {
      SWIG_croak("Usage: new_md(temperature,betaScale,pf_smooth,dangles,special_hp,noLP,noGU,noGUclosure,logML,circ,gquad);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_md" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_md" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_md" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_md" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_md" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_md" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    ecode8 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_md" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
    ecode9 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_md" "', argument " "9"" of type '" "int""'");
    } 
    arg9 = static_cast< int >(val9);
    ecode10 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_md" "', argument " "10"" of type '" "int""'");
    } 
    arg10 = static_cast< int >(val10);
    ecode11 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "new_md" "', argument " "11"" of type '" "int""'");
    } 
    arg11 = static_cast< int >(val11);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_14) {
  {
    double arg1 ;
    double arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int arg8 ;
    int arg9 ;
    int arg10 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int val8 ;
    int ecode8 = 0 ;
    int val9 ;
    int ecode9 = 0 ;
    int val10 ;
    int ecode10 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 10) || (items > 10)) {
      SWIG_croak("Usage: new_md(temperature,betaScale,pf_smooth,dangles,special_hp,noLP,noGU,noGUclosure,logML,circ);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_md" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_md" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_md" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_md" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_md" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_md" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    ecode8 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_md" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
    ecode9 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_md" "', argument " "9"" of type '" "int""'");
    } 
    arg9 = static_cast< int >(val9);
    ecode10 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "new_md" "', argument " "10"" of type '" "int""'");
    } 
    arg10 = static_cast< int >(val10);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_15) {
  {
    double arg1 ;
    double arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int arg8 ;
    int arg9 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int val8 ;
    int ecode8 = 0 ;
    int val9 ;
    int ecode9 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 9) || (items > 9)) {
      SWIG_croak("Usage: new_md(temperature,betaScale,pf_smooth,dangles,special_hp,noLP,noGU,noGUclosure,logML);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_md" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_md" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_md" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_md" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_md" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_md" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    ecode8 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_md" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
    ecode9 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "new_md" "', argument " "9"" of type '" "int""'");
    } 
    arg9 = static_cast< int >(val9);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_16) {
  {
    double arg1 ;
    double arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int arg8 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int val8 ;
    int ecode8 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 8) || (items > 8)) {
      SWIG_croak("Usage: new_md(temperature,betaScale,pf_smooth,dangles,special_hp,noLP,noGU,noGUclosure);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_md" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_md" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_md" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_md" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_md" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_md" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    ecode8 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new_md" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_17) {
  {
    double arg1 ;
    double arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 7) || (items > 7)) {
      SWIG_croak("Usage: new_md(temperature,betaScale,pf_smooth,dangles,special_hp,noLP,noGU);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_md" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_md" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_md" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_md" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_md" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new_md" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_18) {
  {
    double arg1 ;
    double arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: new_md(temperature,betaScale,pf_smooth,dangles,special_hp,noLP);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_md" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_md" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_md" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_md" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_md" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_19) {
  {
    double arg1 ;
    double arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: new_md(temperature,betaScale,pf_smooth,dangles,special_hp);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_md" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_md" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_md" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_md" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_20) {
  {
    double arg1 ;
    double arg2 ;
    int arg3 ;
    int arg4 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: new_md(temperature,betaScale,pf_smooth,dangles);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_md" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_md" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_md" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_21) {
  {
    double arg1 ;
    double arg2 ;
    int arg3 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: new_md(temperature,betaScale,pf_smooth);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_md" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_md" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_22) {
  {
    double arg1 ;
    double arg2 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_md(temperature,betaScale);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_md" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_23) {
  {
    double arg1 ;
    double val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_md(temperature);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_md" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_md__SWIG_24) {
  {
    int argvi = 0;
    vrna_md_t *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_md();");
    }
    {
      try {
        result = (vrna_md_t *)new_vrna_md_t__SWIG_0();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_md_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_md) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 6;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_6:
    
    if (items == 6) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 7;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_7:
    
    if (items == 7) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 8;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_8:
    
    if (items == 8) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 9;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_9:
    
    if (items == 9) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 10;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_10:
    
    if (items == 10) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_11;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 11;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_11:
    
    if (items == 11) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_12;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 12;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_12:
    
    if (items == 12) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_13;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 13;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_13:
    
    if (items == 13) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_14;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_14;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_14;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_14;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_14;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_14;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_14;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_14;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_14;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_14;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_14;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_14;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_14;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 14;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_14:
    
    if (items == 14) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_15;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_15;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_15;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_15;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_15;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_15;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_15;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_15;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_15;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_15;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_15;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_15;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_15;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(13), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_15;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 15;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_15:
    
    if (items == 15) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_16;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_16;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_16;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_16;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_16;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_16;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_16;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_16;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_16;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_16;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_16;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_16;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_16;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(13), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_16;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(14), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_16;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 16;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_16:
    
    if (items == 16) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_17;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_17;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_17;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_17;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_17;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_17;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_17;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_17;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_17;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_17;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_17;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_17;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_17;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(13), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_17;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(14), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_17;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(15), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_17;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 17;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_17:
    
    if (items == 17) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_18;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_18;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_18;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_18;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_18;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_18;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_18;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_18;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_18;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_18;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_18;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_18;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_18;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(13), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_18;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(14), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_18;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(15), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_18;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(16), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_18;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 18;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_18:
    
    if (items == 18) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_19;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_19;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_19;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_19;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_19;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_19;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_19;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_19;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_19;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_19;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_19;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_19;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_19;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(13), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_19;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(14), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_19;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(15), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_19;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(16), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_19;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(17), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_19;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 19;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_19:
    
    if (items == 19) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_20;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_20;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_20;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_20;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_20;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_20;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_20;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_20;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_20;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_20;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_20;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_20;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_20;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(13), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_20;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(14), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_20;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(15), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_20;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(16), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_20;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(17), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_20;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(18), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_20;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 20;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_20:
    
    if (items == 20) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_21;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_21;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_21;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_21;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_21;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_21;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_21;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_21;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_21;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_21;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_21;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_21;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_21;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(13), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_21;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(14), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_21;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(15), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_21;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(16), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_21;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(17), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_21;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(18), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_21;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(19), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_21;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 21;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_21:
    
    if (items == 21) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_22;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_22;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_22;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_22;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_22;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_22;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_22;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_22;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_22;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_22;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_22;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_22;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_22;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(13), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_22;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(14), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_22;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(15), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_22;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(16), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_22;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(17), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_22;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(18), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_22;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(19), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_22;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(20), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_22;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 22;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_22:
    
    if (items == 22) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_23;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_23;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_23;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_23;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_23;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_23;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_23;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_23;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_23;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_23;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_23;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_23;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_23;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(13), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_23;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(14), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_23;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(15), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_23;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(16), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_23;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(17), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_23;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(18), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_23;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(19), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_23;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(20), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_23;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(21), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_23;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 23;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_23:
    
    if (items == 23) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_24;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_24;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_24;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_24;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_24;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_24;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_24;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_24;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_24;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_24;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_24;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_24;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_24;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(13), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_24;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(14), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_24;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(15), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_24;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(16), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_24;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(17), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_24;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(18), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_24;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(19), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_24;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(20), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_24;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(21), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_24;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(22), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_24;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 24;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_24:
    
    if (items == 24) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(8), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(9), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(10), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(12), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(13), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(14), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(15), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(16), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(17), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(18), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(19), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(20), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(21), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(22), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(23), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_25;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 25;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_25:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_24); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_23); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_22); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_21); return;
    case 5:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_20); return;
    case 6:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_19); return;
    case 7:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_18); return;
    case 8:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_17); return;
    case 9:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_16); return;
    case 10:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_15); return;
    case 11:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_14); return;
    case 12:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_13); return;
    case 13:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_12); return;
    case 14:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_11); return;
    case 15:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_10); return;
    case 16:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_9); return;
    case 17:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_8); return;
    case 18:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_7); return;
    case 19:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_6); return;
    case 20:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_5); return;
    case 21:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_4); return;
    case 22:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_3); return;
    case 23:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_2); return;
    case 24:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_1); return;
    case 25:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_md__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'new_md'");
  XSRETURN(0);
}


XS(_wrap_delete_md) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_md(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_md" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    {
      try {
        delete_vrna_md_t(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_reset) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_reset(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_reset" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    {
      try {
        vrna_md_t_reset(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_set_from_globals) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_set_from_globals(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_set_from_globals" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    {
      try {
        vrna_md_t_set_from_globals(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_md_option_string) {
  {
    vrna_md_t *arg1 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: md_option_string(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "md_option_string" "', argument " "1"" of type '" "vrna_md_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_md_t * >(argp1);
    {
      try {
        result = (char *)vrna_md_t_option_string(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_init_rand) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: init_rand();");
    }
    {
      try {
        init_rand();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_urn) {
  {
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: urn();");
    }
    {
      try {
        result = (double)urn();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_int_urn) {
  {
    int arg1 ;
    int arg2 ;
    int val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: int_urn(from,to);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "int_urn" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_urn" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        result = (int)int_urn(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_hamming) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: hamming(s1,s2);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hamming" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hamming" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        result = (int)my_hamming((char const *)arg1,(char const *)arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_hamming_bound) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: hamming_bound(s1,s2,n);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hamming_bound" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hamming_bound" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hamming_bound" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (int)my_hamming_bound((char const *)arg1,(char const *)arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_encode_seq) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    short *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: encode_seq(sequence);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "encode_seq" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (short *)encode_seq(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_short, 0 | 0); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_random_string) {
  {
    int arg1 ;
    char *arg2 ;
    int val1 ;
    int ecode1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: random_string(l,symbols);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "random_string" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "random_string" "', argument " "2"" of type '" "char const []""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        result = (char *)vrna_random_string(arg1,(char const (*))arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    delete[] result;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_hamming_distance) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: hamming_distance(s1,s2);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hamming_distance" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hamming_distance" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        result = (int)vrna_hamming_distance((char const *)arg1,(char const *)arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_hamming_distance_bound) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: hamming_distance_bound(s1,s2,n);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hamming_distance_bound" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hamming_distance_bound" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hamming_distance_bound" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (int)vrna_hamming_distance_bound((char const *)arg1,(char const *)arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_ep_i_set) {
  {
    vrna_ep_t *arg1 = (vrna_ep_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ep_i_set(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_ep_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_i_set" "', argument " "1"" of type '" "vrna_ep_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_ep_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_i_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->i = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ep_i_get) {
  {
    vrna_ep_t *arg1 = (vrna_ep_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ep_i_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_ep_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_i_get" "', argument " "1"" of type '" "vrna_ep_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_ep_t * >(argp1);
    result = (int) ((arg1)->i);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ep_j_set) {
  {
    vrna_ep_t *arg1 = (vrna_ep_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ep_j_set(self,j);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_ep_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_j_set" "', argument " "1"" of type '" "vrna_ep_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_ep_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_j_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->j = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ep_j_get) {
  {
    vrna_ep_t *arg1 = (vrna_ep_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ep_j_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_ep_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_j_get" "', argument " "1"" of type '" "vrna_ep_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_ep_t * >(argp1);
    result = (int) ((arg1)->j);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ep_p_set) {
  {
    vrna_ep_t *arg1 = (vrna_ep_t *) 0 ;
    float arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ep_p_set(self,p);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_ep_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_p_set" "', argument " "1"" of type '" "vrna_ep_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_ep_t * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_p_set" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
    if (arg1) (arg1)->p = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ep_p_get) {
  {
    vrna_ep_t *arg1 = (vrna_ep_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ep_p_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_ep_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_p_get" "', argument " "1"" of type '" "vrna_ep_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_ep_t * >(argp1);
    result = (float) ((arg1)->p);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ep_type_set) {
  {
    vrna_ep_t *arg1 = (vrna_ep_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ep_type_set(self,type);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_ep_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_type_set" "', argument " "1"" of type '" "vrna_ep_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_ep_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ep_type_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->type = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ep_type_get) {
  {
    vrna_ep_t *arg1 = (vrna_ep_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ep_type_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_ep_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ep_type_get" "', argument " "1"" of type '" "vrna_ep_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_ep_t * >(argp1);
    result = (int) ((arg1)->type);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ep__SWIG_0) {
  {
    unsigned int arg1 ;
    unsigned int arg2 ;
    float arg3 ;
    int arg4 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    float val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    vrna_ep_t *result = 0 ;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: new_ep(i,j,p,type);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ep" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ep" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ep" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ep" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      try {
        result = (vrna_ep_t *)new_vrna_ep_t__SWIG_0(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_ep_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ep__SWIG_1) {
  {
    unsigned int arg1 ;
    unsigned int arg2 ;
    float arg3 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    float val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    vrna_ep_t *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: new_ep(i,j,p);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ep" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ep" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ep" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
    {
      try {
        result = (vrna_ep_t *)new_vrna_ep_t__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_ep_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ep__SWIG_2) {
  {
    unsigned int arg1 ;
    unsigned int arg2 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    vrna_ep_t *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_ep(i,j);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ep" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ep" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try {
        result = (vrna_ep_t *)new_vrna_ep_t__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_ep_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_ep) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ep__SWIG_2); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ep__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_ep__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'new_ep'");
  XSRETURN(0);
}


XS(_wrap_delete_ep) {
  {
    vrna_ep_t *arg1 = (vrna_ep_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_ep(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_ep_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ep" "', argument " "1"" of type '" "vrna_ep_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_ep_t * >(argp1);
    {
      try {
        delete arg1;
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_pack_structure) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: pack_structure(s);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pack_structure" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (char *)my_pack_structure((char const *)arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_unpack_structure) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: unpack_structure(packed);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unpack_structure" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (char *)my_unpack_structure((char const *)arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_db_from_ptable) {
  {
    std::vector< int > arg1 ;
    std::vector< int > *v1 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: db_from_ptable(pt);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of db_from_ptable. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg1)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "db_from_ptable. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of db_from_ptable. "
          "Expected an array of ""int");
      }
    }
    {
      try {
        result = (char *)my_db_from_ptable(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_db_flatten__SWIG_0) {
  {
    char *arg1 = (char *) 0 ;
    unsigned int arg2 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: db_flatten(structure,options);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "db_flatten" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "db_flatten" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try {
        db_flatten(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    SWIG_croak_null();
  }
}


XS(_wrap_db_flatten__SWIG_1) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: db_flatten(structure);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "db_flatten" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        db_flatten(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_db_flatten__SWIG_2) {
  {
    char *arg1 = (char *) 0 ;
    std::string arg2 ;
    unsigned int arg3 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: db_flatten(structure,target,options);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "db_flatten" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "db_flatten" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "db_flatten" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        db_flatten(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_db_flatten__SWIG_3) {
  {
    char *arg1 = (char *) 0 ;
    std::string arg2 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: db_flatten(structure,target);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "db_flatten" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "db_flatten" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        db_flatten(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    SWIG_croak_null();
  }
}


XS(_wrap_db_flatten) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_db_flatten__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_db_flatten__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_db_flatten__SWIG_3); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_db_flatten__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'db_flatten'");
  XSRETURN(0);
}


XS(_wrap_db_from_WUSS) {
  {
    std::string arg1 ;
    int argvi = 0;
    std::string result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: db_from_WUSS(wuss);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "db_from_WUSS" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = db_from_WUSS(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_abstract_shapes__SWIG_0) {
  {
    std::string arg1 ;
    unsigned int arg2 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::string result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: abstract_shapes(structure,level);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "abstract_shapes" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "abstract_shapes" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try {
        result = abstract_shapes(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_abstract_shapes__SWIG_1) {
  {
    std::string arg1 ;
    int argvi = 0;
    std::string result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: abstract_shapes(structure);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "abstract_shapes" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = abstract_shapes(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_abstract_shapes__SWIG_2) {
  {
    std::vector< int > arg1 ;
    unsigned int arg2 ;
    std::vector< int > *v1 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::string result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: abstract_shapes(std::vector< int >,level);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of abstract_shapes. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg1)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "abstract_shapes. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of abstract_shapes. "
          "Expected an array of ""int");
      }
    }
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "abstract_shapes" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try {
        result = abstract_shapes(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_abstract_shapes__SWIG_3) {
  {
    std::vector< int > arg1 ;
    std::vector< int > *v1 ;
    int argvi = 0;
    std::string result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: abstract_shapes(std::vector< int >);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of abstract_shapes. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg1)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "abstract_shapes. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of abstract_shapes. "
          "Expected an array of ""int");
      }
    }
    {
      try {
        result = abstract_shapes(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(result)); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_abstract_shapes) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< int >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< int >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_abstract_shapes__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_abstract_shapes__SWIG_3); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_abstract_shapes__SWIG_0); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_abstract_shapes__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'abstract_shapes'");
  XSRETURN(0);
}


XS(_wrap_ptable__SWIG_0) {
  {
    std::string arg1 ;
    unsigned int arg2 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::vector< int > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: ptable(str,options);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ptable" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ptable" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try {
        result = my_ptable(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        sv_setiv(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ptable__SWIG_1) {
  {
    std::string arg1 ;
    int argvi = 0;
    std::vector< int > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ptable(str);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ptable" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = my_ptable(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        sv_setiv(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_ptable) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_ptable__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_ptable__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'ptable'");
  XSRETURN(0);
}


XS(_wrap_ptable_pk) {
  {
    std::string arg1 ;
    int argvi = 0;
    std::vector< int > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: ptable_pk(str);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ptable_pk" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = my_ptable_pk(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        sv_setiv(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_pt_pk_remove__SWIG_0) {
  {
    std::vector< int > arg1 ;
    unsigned int arg2 ;
    std::vector< int > *v1 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::vector< int > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: pt_pk_remove(pt,options);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of pt_pk_remove. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg1)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "pt_pk_remove. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of pt_pk_remove. "
          "Expected an array of ""int");
      }
    }
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pt_pk_remove" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try {
        result = my_pt_pk_remove(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        sv_setiv(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_pt_pk_remove__SWIG_1) {
  {
    std::vector< int > arg1 ;
    std::vector< int > *v1 ;
    int argvi = 0;
    std::vector< int > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: pt_pk_remove(pt);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of pt_pk_remove. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg1)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "pt_pk_remove. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of pt_pk_remove. "
          "Expected an array of ""int");
      }
    }
    {
      try {
        result = my_pt_pk_remove(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        sv_setiv(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_pt_pk_remove) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< int >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< int >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_pt_pk_remove__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_pt_pk_remove__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'pt_pk_remove'");
  XSRETURN(0);
}


XS(_wrap_plist) {
  {
    std::string arg1 ;
    float arg2 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::vector< vrna_ep_t > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: plist(structure,pr);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "plist" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "plist" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
    {
      try {
        result = my_plist(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        vrna_ep_t* ptr = new vrna_ep_t(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_vrna_ep_t, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_db_from_plist) {
  {
    std::vector< vrna_ep_t > arg1 ;
    unsigned int arg2 ;
    std::vector< vrna_ep_t > *v1 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::string result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: db_from_plist(elem_probs,length);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_vrna_ep_t_t,1) != -1) {
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of db_from_plist. "
          "Expected an array of " "vrna_ep_t");
        SV **tv;
        I32 len = av_len(av) + 1;
        vrna_ep_t* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_vrna_ep_t,0) != -1) {
            (&arg1)->push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "db_from_plist. "
              "Expected an array of " "vrna_ep_t");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of db_from_plist. "
          "Expected an array of " "vrna_ep_t");
      }
    }
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "db_from_plist" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try {
        result = db_from_plist(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_db_pk_remove__SWIG_0) {
  {
    std::string arg1 ;
    unsigned int arg2 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::string result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: db_pk_remove(structure,options);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "db_pk_remove" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "db_pk_remove" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try {
        result = db_pk_remove(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_db_pk_remove__SWIG_1) {
  {
    std::string arg1 ;
    int argvi = 0;
    std::string result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: db_pk_remove(structure);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "db_pk_remove" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = db_pk_remove(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_db_pk_remove) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_db_pk_remove__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_db_pk_remove__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'db_pk_remove'");
  XSRETURN(0);
}


XS(_wrap_db_to_tree_string) {
  {
    std::string arg1 ;
    unsigned int arg2 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::string result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: db_to_tree_string(structure,type);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "db_to_tree_string" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "db_to_tree_string" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try {
        result = db_to_tree_string(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_tree_string_unweight) {
  {
    std::string arg1 ;
    int argvi = 0;
    std::string result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: tree_string_unweight(structure);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "tree_string_unweight" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = tree_string_unweight(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_tree_string_to_db) {
  {
    std::string arg1 ;
    int argvi = 0;
    std::string result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: tree_string_to_db(structure);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "tree_string_to_db" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = tree_string_to_db(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_make_loop_index) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    short *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: make_loop_index(structure);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "make_loop_index" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (short *)make_loop_index((char const *)arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_short, 0 | 0); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_loopidx_from_ptable) {
  {
    std::vector< int > arg1 ;
    std::vector< int > *v1 ;
    int argvi = 0;
    std::vector< int > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: loopidx_from_ptable(pt);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of loopidx_from_ptable. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg1)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "loopidx_from_ptable. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of loopidx_from_ptable. "
          "Expected an array of ""int");
      }
    }
    {
      try {
        result = my_loopidx_from_ptable(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        sv_setiv(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_bp_distance) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: bp_distance(str1,str2);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bp_distance" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "bp_distance" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        result = (int)my_bp_distance((char const *)arg1,(char const *)arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_dist_mountain__SWIG_0) {
  {
    std::string arg1 ;
    std::string arg2 ;
    unsigned int arg3 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: dist_mountain(str1,str2,p);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "dist_mountain" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "dist_mountain" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "dist_mountain" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = (double)my_dist_mountain(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_dist_mountain__SWIG_1) {
  {
    std::string arg1 ;
    std::string arg2 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: dist_mountain(str1,str2);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "dist_mountain" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "dist_mountain" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (double)my_dist_mountain(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_dist_mountain) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_dist_mountain__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_dist_mountain__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'dist_mountain'");
  XSRETURN(0);
}


XS(_wrap_db_pack) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: db_pack(struc);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "db_pack" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (char *)vrna_db_pack((char const *)arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_db_unpack) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: db_unpack(packed);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "db_unpack" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (char *)vrna_db_unpack((char const *)arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_db_to_element_string) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: db_to_element_string(structure);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "db_to_element_string" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (char *)vrna_db_to_element_string((char const *)arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_consensus__SWIG_0) {
  {
    std::vector< std::string > arg1 ;
    vrna_md_t *arg2 = (vrna_md_t *) 0 ;
    std::vector< std::string > *v1 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    std::string result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: consensus(alignment,md_p);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of consensus. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "consensus. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of consensus. "
          "Expected an array of ""std::string");
      }
    }
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "consensus" "', argument " "2"" of type '" "vrna_md_t *""'"); 
    }
    arg2 = reinterpret_cast< vrna_md_t * >(argp2);
    {
      try {
        result = my_consensus_sequence(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_consensus__SWIG_1) {
  {
    std::vector< std::string > arg1 ;
    std::vector< std::string > *v1 ;
    int argvi = 0;
    std::string result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: consensus(alignment);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of consensus. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "consensus. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of consensus. "
          "Expected an array of ""std::string");
      }
    }
    {
      try {
        result = my_consensus_sequence(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(result)); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_consensus) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_vrna_md_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_consensus__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_consensus__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'consensus'");
  XSRETURN(0);
}


XS(_wrap_consens_mis__SWIG_0) {
  {
    std::vector< std::string > arg1 ;
    vrna_md_t *arg2 = (vrna_md_t *) 0 ;
    std::vector< std::string > *v1 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    std::string result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: consens_mis(alignment,md_p);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of consens_mis. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "consens_mis. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of consens_mis. "
          "Expected an array of ""std::string");
      }
    }
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "consens_mis" "', argument " "2"" of type '" "vrna_md_t *""'"); 
    }
    arg2 = reinterpret_cast< vrna_md_t * >(argp2);
    {
      try {
        result = my_aln_consensus_mis(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_consens_mis__SWIG_1) {
  {
    std::vector< std::string > arg1 ;
    std::vector< std::string > *v1 ;
    int argvi = 0;
    std::string result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: consens_mis(alignment);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of consens_mis. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "consens_mis. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of consens_mis. "
          "Expected an array of ""std::string");
      }
    }
    {
      try {
        result = my_aln_consensus_mis(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(result)); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_consens_mis) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_vrna_md_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_consens_mis__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_consens_mis__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'consens_mis'");
  XSRETURN(0);
}


XS(_wrap_aln_mpi) {
  {
    std::vector< std::string > arg1 ;
    std::vector< std::string > *v1 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: aln_mpi(alignment);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of aln_mpi. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "aln_mpi. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of aln_mpi. "
          "Expected an array of ""std::string");
      }
    }
    {
      try {
        result = (int)my_aln_mpi(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_aln_pscore__SWIG_0) {
  {
    std::vector< std::string > arg1 ;
    vrna_md_t *arg2 = (vrna_md_t *) 0 ;
    std::vector< std::string > *v1 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    std::vector< std::vector< int > > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: aln_pscore(alignment,md);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of aln_pscore. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "aln_pscore. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of aln_pscore. "
          "Expected an array of ""std::string");
      }
    }
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "aln_pscore" "', argument " "2"" of type '" "vrna_md_t *""'"); 
    }
    arg2 = reinterpret_cast< vrna_md_t * >(argp2);
    {
      try {
        result = my_aln_pscore(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      AV *arr = newAV();
      for(unsigned int i = 0; i < (&result)->size(); i++) {
        AV *vec = newAV();
        for(unsigned int j = 0; j < result[i].size(); j++) {
          SV *v = newSViv(result[i][j]);
          if (!av_store(vec, j, v))
          SvREFCNT_dec(v);
        }
        /* store reference to array */
        av_store(arr, i, newRV_noinc((SV*) vec));
      }
      
      ST(argvi) = newRV_noinc((SV*) arr);
      sv_2mortal( ST(argvi) );
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_aln_pscore__SWIG_1) {
  {
    std::vector< std::string > arg1 ;
    std::vector< std::string > *v1 ;
    int argvi = 0;
    std::vector< std::vector< int > > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: aln_pscore(alignment);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of aln_pscore. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "aln_pscore. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of aln_pscore. "
          "Expected an array of ""std::string");
      }
    }
    {
      try {
        result = my_aln_pscore(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      AV *arr = newAV();
      for(unsigned int i = 0; i < (&result)->size(); i++) {
        AV *vec = newAV();
        for(unsigned int j = 0; j < result[i].size(); j++) {
          SV *v = newSViv(result[i][j]);
          if (!av_store(vec, j, v))
          SvREFCNT_dec(v);
        }
        /* store reference to array */
        av_store(arr, i, newRV_noinc((SV*) vec));
      }
      
      ST(argvi) = newRV_noinc((SV*) arr);
      sv_2mortal( ST(argvi) );
      argvi++;
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_aln_pscore) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_vrna_md_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_aln_pscore__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_aln_pscore__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'aln_pscore'");
  XSRETURN(0);
}


XS(_wrap_aln_conservation_struct__SWIG_0) {
  {
    std::vector< std::string > arg1 ;
    std::string arg2 ;
    vrna_md_t *arg3 = (vrna_md_t *) 0 ;
    std::vector< std::string > *v1 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    std::vector< double > result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: aln_conservation_struct(alignment,structure,md);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of aln_conservation_struct. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "aln_conservation_struct. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of aln_conservation_struct. "
          "Expected an array of ""std::string");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "aln_conservation_struct" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "aln_conservation_struct" "', argument " "3"" of type '" "vrna_md_t *""'"); 
    }
    arg3 = reinterpret_cast< vrna_md_t * >(argp3);
    {
      try {
        result = my_aln_conservation_struct(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        sv_setnv(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_aln_conservation_struct__SWIG_1) {
  {
    std::vector< std::string > arg1 ;
    std::string arg2 ;
    std::vector< std::string > *v1 ;
    int argvi = 0;
    std::vector< double > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: aln_conservation_struct(alignment,structure);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of aln_conservation_struct. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "aln_conservation_struct. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of aln_conservation_struct. "
          "Expected an array of ""std::string");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "aln_conservation_struct" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = my_aln_conservation_struct(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        sv_setnv(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_aln_conservation_struct) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(2), &vptr, SWIGTYPE_p_vrna_md_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_aln_conservation_struct__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_aln_conservation_struct__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'aln_conservation_struct'");
  XSRETURN(0);
}


XS(_wrap_aln_conservation_col__SWIG_0) {
  {
    std::vector< std::string > arg1 ;
    vrna_md_t *arg2 = (vrna_md_t *) 0 ;
    unsigned int arg3 ;
    std::vector< std::string > *v1 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    std::vector< double > result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: aln_conservation_col(alignment,md,options);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of aln_conservation_col. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "aln_conservation_col. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of aln_conservation_col. "
          "Expected an array of ""std::string");
      }
    }
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "aln_conservation_col" "', argument " "2"" of type '" "vrna_md_t *""'"); 
    }
    arg2 = reinterpret_cast< vrna_md_t * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "aln_conservation_col" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = my_aln_conservation_col(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        sv_setnv(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_aln_conservation_col__SWIG_1) {
  {
    std::vector< std::string > arg1 ;
    vrna_md_t *arg2 = (vrna_md_t *) 0 ;
    std::vector< std::string > *v1 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    std::vector< double > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: aln_conservation_col(alignment,md);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of aln_conservation_col. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "aln_conservation_col. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of aln_conservation_col. "
          "Expected an array of ""std::string");
      }
    }
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "aln_conservation_col" "', argument " "2"" of type '" "vrna_md_t *""'"); 
    }
    arg2 = reinterpret_cast< vrna_md_t * >(argp2);
    {
      try {
        result = my_aln_conservation_col(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        sv_setnv(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_aln_conservation_col__SWIG_2) {
  {
    std::vector< std::string > arg1 ;
    std::vector< std::string > *v1 ;
    int argvi = 0;
    std::vector< double > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: aln_conservation_col(alignment);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of aln_conservation_col. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "aln_conservation_col. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of aln_conservation_col. "
          "Expected an array of ""std::string");
      }
    }
    {
      try {
        result = my_aln_conservation_col(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        sv_setnv(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_aln_conservation_col) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_vrna_md_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_vrna_md_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_aln_conservation_col__SWIG_2); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_aln_conservation_col__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_aln_conservation_col__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'aln_conservation_col'");
  XSRETURN(0);
}


XS(_wrap_move_standard) {
  {
    int *arg1 = (int *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    enum MOVE_TYPE arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int temp1 ;
    int res1 = SWIG_TMPOBJ ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg1 = &temp1;
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: move_standard(seq,struc,type,verbosity_level,shifts,noLP);");
    }
    res2 = SWIG_AsCharPtrAndSize(ST(0), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "move_standard" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_AsCharPtrAndSize(ST(1), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "move_standard" "', argument " "3"" of type '" "char *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "move_standard" "', argument " "4"" of type '" "enum MOVE_TYPE""'");
    } 
    arg4 = static_cast< enum MOVE_TYPE >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "move_standard" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "move_standard" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "move_standard" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    {
      try {
        result = (char *)my_move_standard(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res1)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1((*arg1)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res1) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg1), SWIGTYPE_p_int, new_flags); argvi++  ;
    }
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_struct_en_energy_set) {
  {
    _struct_en *arg1 = (_struct_en *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: struct_en_energy_set(self,energy);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p__struct_en, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "struct_en_energy_set" "', argument " "1"" of type '" "_struct_en *""'"); 
    }
    arg1 = reinterpret_cast< _struct_en * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "struct_en_energy_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->energy = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_struct_en_energy_get) {
  {
    _struct_en *arg1 = (_struct_en *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: struct_en_energy_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p__struct_en, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "struct_en_energy_get" "', argument " "1"" of type '" "_struct_en *""'"); 
    }
    arg1 = reinterpret_cast< _struct_en * >(argp1);
    result = (int) ((arg1)->energy);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_struct_en_structure_set) {
  {
    _struct_en *arg1 = (_struct_en *) 0 ;
    short *arg2 = (short *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: struct_en_structure_set(self,structure);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p__struct_en, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "struct_en_structure_set" "', argument " "1"" of type '" "_struct_en *""'"); 
    }
    arg1 = reinterpret_cast< _struct_en * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_short, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "struct_en_structure_set" "', argument " "2"" of type '" "short *""'"); 
    }
    arg2 = reinterpret_cast< short * >(argp2);
    if (arg1) (arg1)->structure = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_struct_en_structure_get) {
  {
    _struct_en *arg1 = (_struct_en *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    short *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: struct_en_structure_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p__struct_en, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "struct_en_structure_get" "', argument " "1"" of type '" "_struct_en *""'"); 
    }
    arg1 = reinterpret_cast< _struct_en * >(argp1);
    result = (short *) ((arg1)->structure);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_short, 0 | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_struct_en) {
  {
    int argvi = 0;
    _struct_en *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_struct_en();");
    }
    {
      try {
        result = (_struct_en *)new _struct_en();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__struct_en, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_struct_en) {
  {
    _struct_en *arg1 = (_struct_en *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_struct_en(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p__struct_en, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_struct_en" "', argument " "1"" of type '" "_struct_en *""'"); 
    }
    arg1 = reinterpret_cast< _struct_en * >(argp1);
    {
      try {
        delete arg1;
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_filename_sanitize__SWIG_0) {
  {
    std::string arg1 ;
    int argvi = 0;
    std::string result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: filename_sanitize(name);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "filename_sanitize" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = my_filename_sanitize(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_filename_sanitize__SWIG_1) {
  {
    std::string arg1 ;
    char arg2 ;
    char val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::string result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: filename_sanitize(name,c);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "filename_sanitize" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "filename_sanitize" "', argument " "2"" of type '" "char""'");
    } 
    arg2 = static_cast< char >(val2);
    {
      try {
        result = my_filename_sanitize(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1(static_cast< std::string >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_filename_sanitize) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_filename_sanitize__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_filename_sanitize__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'filename_sanitize'");
  XSRETURN(0);
}


XS(_wrap_get_xy_coordinates) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    COORDINATE *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: get_xy_coordinates(structure);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_xy_coordinates" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (COORDINATE *)get_xy_coordinates((char const *)arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_COORDINATE, 0 | SWIG_SHADOW); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_simple_xy_coordinates__SWIG_0) {
  {
    std::string arg1 ;
    int argvi = 0;
    std::vector< COORDINATE > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: simple_xy_coordinates(std::string);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "simple_xy_coordinates" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = my_simple_xy_coordinates(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        COORDINATE* ptr = new COORDINATE(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_COORDINATE, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_simple_circplot_coordinates) {
  {
    std::string arg1 ;
    int argvi = 0;
    std::vector< COORDINATE > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: simple_circplot_coordinates(std::string);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "simple_circplot_coordinates" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = my_simple_circplot_coordinates(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        COORDINATE* ptr = new COORDINATE(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_COORDINATE, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_naview_xy_coordinates) {
  {
    std::string arg1 ;
    int argvi = 0;
    std::vector< COORDINATE > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: naview_xy_coordinates(std::string);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "naview_xy_coordinates" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = my_naview_xy_coordinates(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        COORDINATE* ptr = new COORDINATE(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_COORDINATE, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_COORDINATE_get) {
  {
    COORDINATE *arg1 = (COORDINATE *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    COORDINATE *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: COORDINATE_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_COORDINATE, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "COORDINATE_get" "', argument " "1"" of type '" "COORDINATE *""'"); 
    }
    arg1 = reinterpret_cast< COORDINATE * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "COORDINATE_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        result = (COORDINATE *)COORDINATE_get(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_COORDINATE, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_COORDINATE_X_set) {
  {
    COORDINATE *arg1 = (COORDINATE *) 0 ;
    float arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: COORDINATE_X_set(self,X);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_COORDINATE, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "COORDINATE_X_set" "', argument " "1"" of type '" "COORDINATE *""'"); 
    }
    arg1 = reinterpret_cast< COORDINATE * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "COORDINATE_X_set" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
    if (arg1) (arg1)->X = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_COORDINATE_X_get) {
  {
    COORDINATE *arg1 = (COORDINATE *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: COORDINATE_X_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_COORDINATE, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "COORDINATE_X_get" "', argument " "1"" of type '" "COORDINATE *""'"); 
    }
    arg1 = reinterpret_cast< COORDINATE * >(argp1);
    result = (float) ((arg1)->X);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_COORDINATE_Y_set) {
  {
    COORDINATE *arg1 = (COORDINATE *) 0 ;
    float arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: COORDINATE_Y_set(self,Y);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_COORDINATE, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "COORDINATE_Y_set" "', argument " "1"" of type '" "COORDINATE *""'"); 
    }
    arg1 = reinterpret_cast< COORDINATE * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "COORDINATE_Y_set" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
    if (arg1) (arg1)->Y = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_COORDINATE_Y_get) {
  {
    COORDINATE *arg1 = (COORDINATE *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: COORDINATE_Y_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_COORDINATE, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "COORDINATE_Y_get" "', argument " "1"" of type '" "COORDINATE *""'"); 
    }
    arg1 = reinterpret_cast< COORDINATE * >(argp1);
    result = (float) ((arg1)->Y);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_COORDINATE) {
  {
    int argvi = 0;
    COORDINATE *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_COORDINATE();");
    }
    {
      try {
        result = (COORDINATE *)new COORDINATE();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_COORDINATE, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_COORDINATE) {
  {
    COORDINATE *arg1 = (COORDINATE *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_COORDINATE(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_COORDINATE, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_COORDINATE" "', argument " "1"" of type '" "COORDINATE *""'"); 
    }
    arg1 = reinterpret_cast< COORDINATE * >(argp1);
    {
      try {
        delete arg1;
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_simple_xy_coordinates__SWIG_1) {
  {
    short *arg1 = (short *) 0 ;
    float *arg2 = (float *) 0 ;
    float *arg3 = (float *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: simple_xy_coordinates(pair_table,X,Y);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_short, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "simple_xy_coordinates" "', argument " "1"" of type '" "short *""'"); 
    }
    arg1 = reinterpret_cast< short * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_float, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "simple_xy_coordinates" "', argument " "2"" of type '" "float *""'"); 
    }
    arg2 = reinterpret_cast< float * >(argp2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_float, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "simple_xy_coordinates" "', argument " "3"" of type '" "float *""'"); 
    }
    arg3 = reinterpret_cast< float * >(argp3);
    {
      try {
        result = (int)simple_xy_coordinates(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_simple_xy_coordinates) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_short, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_float, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(2), &vptr, SWIGTYPE_p_float, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_simple_xy_coordinates__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_simple_xy_coordinates__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'simple_xy_coordinates'");
  XSRETURN(0);
}


XS(_wrap_my_PS_rna_plot_snoop_a) {
  {
    std::string arg1 ;
    std::string arg2 ;
    std::string arg3 ;
    std::vector< int > arg4 ;
    std::vector< std::string > arg5 ;
    std::vector< int > *v4 ;
    std::vector< std::string > *v5 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: my_PS_rna_plot_snoop_a(sequence,structure,filename,relative_access,seqs);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "my_PS_rna_plot_snoop_a" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "my_PS_rna_plot_snoop_a" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "my_PS_rna_plot_snoop_a" "', argument " "3"" of type '" "std::string""'"); 
      }
      arg3 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      if (SWIG_ConvertPtr(ST(3),(void **) &v4, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg4 = *v4;
      } else if (SvROK(ST(3))) {
        AV *av = (AV *)SvRV(ST(3));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 4 of my_PS_rna_plot_snoop_a. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg4)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 4 of "
              "my_PS_rna_plot_snoop_a. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 4 of my_PS_rna_plot_snoop_a. "
          "Expected an array of ""int");
      }
    }
    {
      if (SWIG_ConvertPtr(ST(4),(void **) &v5, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg5 = *v5;
      } else if (SvROK(ST(4))) {
        AV *av = (AV *)SvRV(ST(4));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 5 of my_PS_rna_plot_snoop_a. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg5)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 5 of "
              "my_PS_rna_plot_snoop_a. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 5 of my_PS_rna_plot_snoop_a. "
          "Expected an array of ""std::string");
      }
    }
    {
      try {
        result = (int)my_PS_rna_plot_snoop_a(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_PS_rnaplot__SWIG_0) {
  {
    std::string arg1 ;
    std::string arg2 ;
    std::string arg3 ;
    vrna_md_t *arg4 = (vrna_md_t *) 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: file_PS_rnaplot(sequence,structure,filename,md_p);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_rnaplot" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_rnaplot" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_rnaplot" "', argument " "3"" of type '" "std::string""'"); 
      }
      arg3 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "file_PS_rnaplot" "', argument " "4"" of type '" "vrna_md_t *""'"); 
    }
    arg4 = reinterpret_cast< vrna_md_t * >(argp4);
    {
      try {
        result = (int)file_PS_rnaplot(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_PS_rnaplot__SWIG_1) {
  {
    std::string arg1 ;
    std::string arg2 ;
    std::string arg3 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: file_PS_rnaplot(sequence,structure,filename);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_rnaplot" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_rnaplot" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_rnaplot" "', argument " "3"" of type '" "std::string""'"); 
      }
      arg3 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (int)file_PS_rnaplot(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_PS_rnaplot) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(3), &vptr, SWIGTYPE_p_vrna_md_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_PS_rnaplot__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_PS_rnaplot__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'file_PS_rnaplot'");
  XSRETURN(0);
}


XS(_wrap_file_PS_rnaplot_a__SWIG_0) {
  {
    std::string arg1 ;
    std::string arg2 ;
    std::string arg3 ;
    std::string arg4 ;
    std::string arg5 ;
    vrna_md_t *arg6 = (vrna_md_t *) 0 ;
    void *argp6 = 0 ;
    int res6 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: file_PS_rnaplot_a(sequence,structure,filename,pre,post,md_p);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_rnaplot_a" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_rnaplot_a" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_rnaplot_a" "', argument " "3"" of type '" "std::string""'"); 
      }
      arg3 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_rnaplot_a" "', argument " "4"" of type '" "std::string""'"); 
      }
      arg4 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(4), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_rnaplot_a" "', argument " "5"" of type '" "std::string""'"); 
      }
      arg5 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    res6 = SWIG_ConvertPtr(ST(5), &argp6,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "file_PS_rnaplot_a" "', argument " "6"" of type '" "vrna_md_t *""'"); 
    }
    arg6 = reinterpret_cast< vrna_md_t * >(argp6);
    {
      try {
        result = (int)file_PS_rnaplot_a(arg1,arg2,arg3,arg4,arg5,arg6);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_PS_rnaplot_a__SWIG_1) {
  {
    std::string arg1 ;
    std::string arg2 ;
    std::string arg3 ;
    std::string arg4 ;
    std::string arg5 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: file_PS_rnaplot_a(sequence,structure,filename,pre,post);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_rnaplot_a" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_rnaplot_a" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_rnaplot_a" "', argument " "3"" of type '" "std::string""'"); 
      }
      arg3 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_rnaplot_a" "', argument " "4"" of type '" "std::string""'"); 
      }
      arg4 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(4), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_rnaplot_a" "', argument " "5"" of type '" "std::string""'"); 
      }
      arg5 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (int)file_PS_rnaplot_a(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_PS_rnaplot_a) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(4), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 6) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(4), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(5), &vptr, SWIGTYPE_p_vrna_md_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_PS_rnaplot_a__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_PS_rnaplot_a__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'file_PS_rnaplot_a'");
  XSRETURN(0);
}


XS(_wrap_gmlRNA) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char arg4 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    char val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: gmlRNA(string,structure,ssfile,option);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gmlRNA" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "gmlRNA" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "gmlRNA" "', argument " "3"" of type '" "char *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    ecode4 = SWIG_AsVal_char SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "gmlRNA" "', argument " "4"" of type '" "char""'");
    } 
    arg4 = static_cast< char >(val4);
    {
      try {
        result = (int)gmlRNA(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_ssv_rna_plot) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: ssv_rna_plot(string,structure,ssfile);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ssv_rna_plot" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ssv_rna_plot" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ssv_rna_plot" "', argument " "3"" of type '" "char *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    {
      try {
        result = (int)ssv_rna_plot(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    SWIG_croak_null();
  }
}


XS(_wrap_svg_rna_plot) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: svg_rna_plot(string,structure,ssfile);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "svg_rna_plot" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "svg_rna_plot" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "svg_rna_plot" "', argument " "3"" of type '" "char *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    {
      try {
        result = (int)svg_rna_plot(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    SWIG_croak_null();
  }
}


XS(_wrap_xrna_plot) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: xrna_plot(string,structure,ssfile);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xrna_plot" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "xrna_plot" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "xrna_plot" "', argument " "3"" of type '" "char *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    {
      try {
        result = (int)xrna_plot(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    SWIG_croak_null();
  }
}


XS(_wrap_PS_rna_plot) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: PS_rna_plot(string,structure,file);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PS_rna_plot" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PS_rna_plot" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PS_rna_plot" "', argument " "3"" of type '" "char *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    {
      try {
        result = (int)PS_rna_plot(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    SWIG_croak_null();
  }
}


XS(_wrap_PS_rna_plot_a) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *arg4 = (char *) 0 ;
    char *arg5 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int res4 ;
    char *buf4 = 0 ;
    int alloc4 = 0 ;
    int res5 ;
    char *buf5 = 0 ;
    int alloc5 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: PS_rna_plot_a(string,structure,file,pre,post);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PS_rna_plot_a" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PS_rna_plot_a" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PS_rna_plot_a" "', argument " "3"" of type '" "char *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    res4 = SWIG_AsCharPtrAndSize(ST(3), &buf4, NULL, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PS_rna_plot_a" "', argument " "4"" of type '" "char *""'");
    }
    arg4 = reinterpret_cast< char * >(buf4);
    res5 = SWIG_AsCharPtrAndSize(ST(4), &buf5, NULL, &alloc5);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PS_rna_plot_a" "', argument " "5"" of type '" "char *""'");
    }
    arg5 = reinterpret_cast< char * >(buf5);
    {
      try {
        result = (int)PS_rna_plot_a(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    SWIG_croak_null();
  }
}


XS(_wrap_PS_rna_plot_a_gquad) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *arg4 = (char *) 0 ;
    char *arg5 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int res4 ;
    char *buf4 = 0 ;
    int alloc4 = 0 ;
    int res5 ;
    char *buf5 = 0 ;
    int alloc5 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: PS_rna_plot_a_gquad(string,structure,ssfile,pre,post);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PS_rna_plot_a_gquad" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PS_rna_plot_a_gquad" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PS_rna_plot_a_gquad" "', argument " "3"" of type '" "char *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    res4 = SWIG_AsCharPtrAndSize(ST(3), &buf4, NULL, &alloc4);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PS_rna_plot_a_gquad" "', argument " "4"" of type '" "char *""'");
    }
    arg4 = reinterpret_cast< char * >(buf4);
    res5 = SWIG_AsCharPtrAndSize(ST(4), &buf5, NULL, &alloc5);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PS_rna_plot_a_gquad" "', argument " "5"" of type '" "char *""'");
    }
    arg5 = reinterpret_cast< char * >(buf5);
    {
      try {
        result = (int)PS_rna_plot_a_gquad(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    SWIG_croak_null();
  }
}


XS(_wrap_file_PS_aln__SWIG_0) {
  {
    std::string arg1 ;
    std::vector< std::string > arg2 ;
    std::vector< std::string > arg3 ;
    std::string arg4 ;
    unsigned int arg5 ;
    unsigned int arg6 ;
    int arg7 ;
    unsigned int arg8 ;
    std::vector< std::string > *v2 ;
    std::vector< std::string > *v3 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    unsigned int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    unsigned int val8 ;
    int ecode8 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 8) || (items > 8)) {
      SWIG_croak("Usage: file_PS_aln(filename,alignment,identifiers,structure,start,end,offset,columns);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_aln" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of file_PS_aln. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg2)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "file_PS_aln. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of file_PS_aln. "
          "Expected an array of ""std::string");
      }
    }
    {
      if (SWIG_ConvertPtr(ST(2),(void **) &v3, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg3 = *v3;
      } else if (SvROK(ST(2))) {
        AV *av = (AV *)SvRV(ST(2));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 3 of file_PS_aln. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg3)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 3 of "
              "file_PS_aln. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 3 of file_PS_aln. "
          "Expected an array of ""std::string");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_aln" "', argument " "4"" of type '" "std::string""'"); 
      }
      arg4 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "file_PS_aln" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "file_PS_aln" "', argument " "6"" of type '" "unsigned int""'");
    } 
    arg6 = static_cast< unsigned int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "file_PS_aln" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    ecode8 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "file_PS_aln" "', argument " "8"" of type '" "unsigned int""'");
    } 
    arg8 = static_cast< unsigned int >(val8);
    {
      try {
        result = (int)file_PS_aln(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_PS_aln__SWIG_1) {
  {
    std::string arg1 ;
    std::vector< std::string > arg2 ;
    std::vector< std::string > arg3 ;
    std::string arg4 ;
    unsigned int arg5 ;
    unsigned int arg6 ;
    int arg7 ;
    std::vector< std::string > *v2 ;
    std::vector< std::string > *v3 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    unsigned int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 7) || (items > 7)) {
      SWIG_croak("Usage: file_PS_aln(filename,alignment,identifiers,structure,start,end,offset);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_aln" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of file_PS_aln. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg2)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "file_PS_aln. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of file_PS_aln. "
          "Expected an array of ""std::string");
      }
    }
    {
      if (SWIG_ConvertPtr(ST(2),(void **) &v3, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg3 = *v3;
      } else if (SvROK(ST(2))) {
        AV *av = (AV *)SvRV(ST(2));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 3 of file_PS_aln. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg3)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 3 of "
              "file_PS_aln. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 3 of file_PS_aln. "
          "Expected an array of ""std::string");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_aln" "', argument " "4"" of type '" "std::string""'"); 
      }
      arg4 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "file_PS_aln" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "file_PS_aln" "', argument " "6"" of type '" "unsigned int""'");
    } 
    arg6 = static_cast< unsigned int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "file_PS_aln" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    {
      try {
        result = (int)file_PS_aln(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_PS_aln__SWIG_2) {
  {
    std::string arg1 ;
    std::vector< std::string > arg2 ;
    std::vector< std::string > arg3 ;
    std::string arg4 ;
    unsigned int arg5 ;
    unsigned int arg6 ;
    std::vector< std::string > *v2 ;
    std::vector< std::string > *v3 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    unsigned int val6 ;
    int ecode6 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: file_PS_aln(filename,alignment,identifiers,structure,start,end);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_aln" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of file_PS_aln. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg2)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "file_PS_aln. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of file_PS_aln. "
          "Expected an array of ""std::string");
      }
    }
    {
      if (SWIG_ConvertPtr(ST(2),(void **) &v3, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg3 = *v3;
      } else if (SvROK(ST(2))) {
        AV *av = (AV *)SvRV(ST(2));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 3 of file_PS_aln. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg3)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 3 of "
              "file_PS_aln. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 3 of file_PS_aln. "
          "Expected an array of ""std::string");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_aln" "', argument " "4"" of type '" "std::string""'"); 
      }
      arg4 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "file_PS_aln" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "file_PS_aln" "', argument " "6"" of type '" "unsigned int""'");
    } 
    arg6 = static_cast< unsigned int >(val6);
    {
      try {
        result = (int)file_PS_aln(arg1,arg2,arg3,arg4,arg5,arg6);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_PS_aln__SWIG_3) {
  {
    std::string arg1 ;
    std::vector< std::string > arg2 ;
    std::vector< std::string > arg3 ;
    std::string arg4 ;
    unsigned int arg5 ;
    std::vector< std::string > *v2 ;
    std::vector< std::string > *v3 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: file_PS_aln(filename,alignment,identifiers,structure,start);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_aln" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of file_PS_aln. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg2)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "file_PS_aln. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of file_PS_aln. "
          "Expected an array of ""std::string");
      }
    }
    {
      if (SWIG_ConvertPtr(ST(2),(void **) &v3, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg3 = *v3;
      } else if (SvROK(ST(2))) {
        AV *av = (AV *)SvRV(ST(2));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 3 of file_PS_aln. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg3)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 3 of "
              "file_PS_aln. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 3 of file_PS_aln. "
          "Expected an array of ""std::string");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_aln" "', argument " "4"" of type '" "std::string""'"); 
      }
      arg4 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "file_PS_aln" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    {
      try {
        result = (int)file_PS_aln(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_PS_aln__SWIG_4) {
  {
    std::string arg1 ;
    std::vector< std::string > arg2 ;
    std::vector< std::string > arg3 ;
    std::string arg4 ;
    std::vector< std::string > *v2 ;
    std::vector< std::string > *v3 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: file_PS_aln(filename,alignment,identifiers,structure);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_aln" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of file_PS_aln. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg2)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "file_PS_aln. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of file_PS_aln. "
          "Expected an array of ""std::string");
      }
    }
    {
      if (SWIG_ConvertPtr(ST(2),(void **) &v3, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg3 = *v3;
      } else if (SvROK(ST(2))) {
        AV *av = (AV *)SvRV(ST(2));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 3 of file_PS_aln. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg3)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 3 of "
              "file_PS_aln. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 3 of file_PS_aln. "
          "Expected an array of ""std::string");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_PS_aln" "', argument " "4"" of type '" "std::string""'"); 
      }
      arg4 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (int)file_PS_aln(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_PS_aln) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(2),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(2))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(2));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(2),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(2))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(2));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 6) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(2),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(2))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(2));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 7) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(2),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(2))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(2));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 8) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(2),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(2))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(2));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(7), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_PS_aln__SWIG_4); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_PS_aln__SWIG_3); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_PS_aln__SWIG_2); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_PS_aln__SWIG_1); return;
    case 5:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_PS_aln__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'file_PS_aln'");
  XSRETURN(0);
}


XS(_wrap_PS_color_dot_plot) {
  {
    char *arg1 = (char *) 0 ;
    cpair *arg2 = (cpair *) 0 ;
    char *arg3 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: PS_color_dot_plot(string,pi,filename);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PS_color_dot_plot" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_vrna_cpair_s, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PS_color_dot_plot" "', argument " "2"" of type '" "cpair *""'"); 
    }
    arg2 = reinterpret_cast< cpair * >(argp2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PS_color_dot_plot" "', argument " "3"" of type '" "char *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    {
      try {
        result = (int)PS_color_dot_plot(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    SWIG_croak_null();
  }
}


XS(_wrap_PS_color_dot_plot_turn) {
  {
    char *arg1 = (char *) 0 ;
    cpair *arg2 = (cpair *) 0 ;
    char *arg3 = (char *) 0 ;
    int arg4 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: PS_color_dot_plot_turn(seq,pi,filename,winSize);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PS_color_dot_plot_turn" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_vrna_cpair_s, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PS_color_dot_plot_turn" "', argument " "2"" of type '" "cpair *""'"); 
    }
    arg2 = reinterpret_cast< cpair * >(argp2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PS_color_dot_plot_turn" "', argument " "3"" of type '" "char *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PS_color_dot_plot_turn" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      try {
        result = (int)PS_color_dot_plot_turn(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_PS_dot_plot_turn) {
  {
    char *arg1 = (char *) 0 ;
    plist *arg2 = (plist *) 0 ;
    char *arg3 = (char *) 0 ;
    int arg4 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: PS_dot_plot_turn(seq,pl,filename,winSize);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PS_dot_plot_turn" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_vrna_elem_prob_s, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PS_dot_plot_turn" "', argument " "2"" of type '" "plist *""'"); 
    }
    arg2 = reinterpret_cast< plist * >(argp2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PS_dot_plot_turn" "', argument " "3"" of type '" "char *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PS_dot_plot_turn" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      try {
        result = (int)PS_dot_plot_turn(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_PS_dot_plot_list) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    plist *arg3 = (plist *) 0 ;
    plist *arg4 = (plist *) 0 ;
    char *arg5 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int res5 ;
    char *buf5 = 0 ;
    int alloc5 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: PS_dot_plot_list(seq,filename,pl,mf,comment);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PS_dot_plot_list" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PS_dot_plot_list" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_vrna_elem_prob_s, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PS_dot_plot_list" "', argument " "3"" of type '" "plist *""'"); 
    }
    arg3 = reinterpret_cast< plist * >(argp3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_vrna_elem_prob_s, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PS_dot_plot_list" "', argument " "4"" of type '" "plist *""'"); 
    }
    arg4 = reinterpret_cast< plist * >(argp4);
    res5 = SWIG_AsCharPtrAndSize(ST(4), &buf5, NULL, &alloc5);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "PS_dot_plot_list" "', argument " "5"" of type '" "char *""'");
    }
    arg5 = reinterpret_cast< char * >(buf5);
    {
      try {
        result = (int)PS_dot_plot_list(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    SWIG_croak_null();
  }
}


XS(_wrap_PS_dot_plot) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: PS_dot_plot(string,file);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PS_dot_plot" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PS_dot_plot" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        result = (int)PS_dot_plot(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_eval_structure_simple__SWIG_0) {
  {
    std::string arg1 ;
    std::string arg2 ;
    int arg3 ;
    FILE *arg4 = (FILE *) 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: eval_structure_simple(sequence,structure,verbosity_level,file);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_structure_simple" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_structure_simple" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "eval_structure_simple" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      if (SvOK(ST(3))) /* check for undef */
      arg4 = PerlIO_findFILE(IoIFP(sv_2io(ST(3))));
      else  arg4 = NULL;
    }
    {
      try {
        result = (float)my_eval_structure_simple(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_structure_simple__SWIG_1) {
  {
    std::string arg1 ;
    std::string arg2 ;
    int arg3 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: eval_structure_simple(sequence,structure,verbosity_level);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_structure_simple" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_structure_simple" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "eval_structure_simple" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (float)my_eval_structure_simple(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_structure_simple__SWIG_2) {
  {
    std::string arg1 ;
    std::string arg2 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: eval_structure_simple(sequence,structure);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_structure_simple" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_structure_simple" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (float)my_eval_structure_simple(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_circ_structure__SWIG_0) {
  {
    std::string arg1 ;
    std::string arg2 ;
    int arg3 ;
    FILE *arg4 = (FILE *) 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: eval_circ_structure(sequence,structure,verbosity_level,file);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_circ_structure" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_circ_structure" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "eval_circ_structure" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      if (SvOK(ST(3))) /* check for undef */
      arg4 = PerlIO_findFILE(IoIFP(sv_2io(ST(3))));
      else  arg4 = NULL;
    }
    {
      try {
        result = (float)my_eval_circ_structure(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_circ_structure__SWIG_1) {
  {
    std::string arg1 ;
    std::string arg2 ;
    int arg3 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: eval_circ_structure(sequence,structure,verbosity_level);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_circ_structure" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_circ_structure" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "eval_circ_structure" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (float)my_eval_circ_structure(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_circ_structure__SWIG_2) {
  {
    std::string arg1 ;
    std::string arg2 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: eval_circ_structure(sequence,structure);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_circ_structure" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_circ_structure" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (float)my_eval_circ_structure(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_gquad_structure__SWIG_0) {
  {
    std::string arg1 ;
    std::string arg2 ;
    int arg3 ;
    FILE *arg4 = (FILE *) 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: eval_gquad_structure(sequence,structure,verbosity_level,file);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_gquad_structure" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_gquad_structure" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "eval_gquad_structure" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      if (SvOK(ST(3))) /* check for undef */
      arg4 = PerlIO_findFILE(IoIFP(sv_2io(ST(3))));
      else  arg4 = NULL;
    }
    {
      try {
        result = (float)my_eval_gquad_structure(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_gquad_structure__SWIG_1) {
  {
    std::string arg1 ;
    std::string arg2 ;
    int arg3 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: eval_gquad_structure(sequence,structure,verbosity_level);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_gquad_structure" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_gquad_structure" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "eval_gquad_structure" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (float)my_eval_gquad_structure(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_gquad_structure__SWIG_2) {
  {
    std::string arg1 ;
    std::string arg2 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: eval_gquad_structure(sequence,structure);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_gquad_structure" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_gquad_structure" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (float)my_eval_gquad_structure(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_circ_gquad_structure__SWIG_0) {
  {
    std::string arg1 ;
    std::string arg2 ;
    int arg3 ;
    FILE *arg4 = (FILE *) 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: eval_circ_gquad_structure(sequence,structure,verbosity_level,file);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_circ_gquad_structure" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_circ_gquad_structure" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "eval_circ_gquad_structure" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      if (SvOK(ST(3))) /* check for undef */
      arg4 = PerlIO_findFILE(IoIFP(sv_2io(ST(3))));
      else  arg4 = NULL;
    }
    {
      try {
        result = (float)my_eval_circ_gquad_structure(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_circ_gquad_structure__SWIG_1) {
  {
    std::string arg1 ;
    std::string arg2 ;
    int arg3 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: eval_circ_gquad_structure(sequence,structure,verbosity_level);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_circ_gquad_structure" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_circ_gquad_structure" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "eval_circ_gquad_structure" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (float)my_eval_circ_gquad_structure(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_circ_gquad_structure__SWIG_2) {
  {
    std::string arg1 ;
    std::string arg2 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: eval_circ_gquad_structure(sequence,structure);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_circ_gquad_structure" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_circ_gquad_structure" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (float)my_eval_circ_gquad_structure(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_structure_simple__SWIG_3) {
  {
    std::vector< std::string > arg1 ;
    std::string arg2 ;
    int arg3 ;
    FILE *arg4 = (FILE *) 0 ;
    std::vector< std::string > *v1 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: eval_structure_simple(alignment,structure,verbosity_level,file);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of eval_structure_simple. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "eval_structure_simple. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of eval_structure_simple. "
          "Expected an array of ""std::string");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_structure_simple" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "eval_structure_simple" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      if (SvOK(ST(3))) /* check for undef */
      arg4 = PerlIO_findFILE(IoIFP(sv_2io(ST(3))));
      else  arg4 = NULL;
    }
    {
      try {
        result = (float)my_eval_structure_simple(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_structure_simple__SWIG_4) {
  {
    std::vector< std::string > arg1 ;
    std::string arg2 ;
    int arg3 ;
    std::vector< std::string > *v1 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: eval_structure_simple(alignment,structure,verbosity_level);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of eval_structure_simple. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "eval_structure_simple. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of eval_structure_simple. "
          "Expected an array of ""std::string");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_structure_simple" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "eval_structure_simple" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (float)my_eval_structure_simple(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_structure_simple__SWIG_5) {
  {
    std::vector< std::string > arg1 ;
    std::string arg2 ;
    std::vector< std::string > *v1 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: eval_structure_simple(alignment,structure);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of eval_structure_simple. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "eval_structure_simple. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of eval_structure_simple. "
          "Expected an array of ""std::string");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_structure_simple" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (float)my_eval_structure_simple(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_structure_simple) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          if (SvOK(ST(3)))
          _v = (sv_2io(ST(3))) ? 1 : 0;
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          if (SvOK(ST(3)))
          _v = (sv_2io(ST(3))) ? 1 : 0;
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 6;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_6:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_structure_simple__SWIG_2); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_structure_simple__SWIG_5); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_structure_simple__SWIG_1); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_structure_simple__SWIG_4); return;
    case 5:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_structure_simple__SWIG_0); return;
    case 6:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_structure_simple__SWIG_3); return;
    }
  }
  
  croak("No matching function for overloaded 'eval_structure_simple'");
  XSRETURN(0);
}


XS(_wrap_eval_circ_structure__SWIG_3) {
  {
    std::vector< std::string > arg1 ;
    std::string arg2 ;
    int arg3 ;
    FILE *arg4 = (FILE *) 0 ;
    std::vector< std::string > *v1 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: eval_circ_structure(alignment,structure,verbosity_level,file);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of eval_circ_structure. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "eval_circ_structure. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of eval_circ_structure. "
          "Expected an array of ""std::string");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_circ_structure" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "eval_circ_structure" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      if (SvOK(ST(3))) /* check for undef */
      arg4 = PerlIO_findFILE(IoIFP(sv_2io(ST(3))));
      else  arg4 = NULL;
    }
    {
      try {
        result = (float)my_eval_circ_structure(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_circ_structure__SWIG_4) {
  {
    std::vector< std::string > arg1 ;
    std::string arg2 ;
    int arg3 ;
    std::vector< std::string > *v1 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: eval_circ_structure(alignment,structure,verbosity_level);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of eval_circ_structure. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "eval_circ_structure. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of eval_circ_structure. "
          "Expected an array of ""std::string");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_circ_structure" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "eval_circ_structure" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (float)my_eval_circ_structure(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_circ_structure__SWIG_5) {
  {
    std::vector< std::string > arg1 ;
    std::string arg2 ;
    std::vector< std::string > *v1 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: eval_circ_structure(alignment,structure);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of eval_circ_structure. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "eval_circ_structure. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of eval_circ_structure. "
          "Expected an array of ""std::string");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_circ_structure" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (float)my_eval_circ_structure(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_circ_structure) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          if (SvOK(ST(3)))
          _v = (sv_2io(ST(3))) ? 1 : 0;
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          if (SvOK(ST(3)))
          _v = (sv_2io(ST(3))) ? 1 : 0;
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 6;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_6:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_circ_structure__SWIG_2); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_circ_structure__SWIG_5); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_circ_structure__SWIG_1); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_circ_structure__SWIG_4); return;
    case 5:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_circ_structure__SWIG_0); return;
    case 6:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_circ_structure__SWIG_3); return;
    }
  }
  
  croak("No matching function for overloaded 'eval_circ_structure'");
  XSRETURN(0);
}


XS(_wrap_eval_gquad_structure__SWIG_3) {
  {
    std::vector< std::string > arg1 ;
    std::string arg2 ;
    int arg3 ;
    FILE *arg4 = (FILE *) 0 ;
    std::vector< std::string > *v1 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: eval_gquad_structure(alignment,structure,verbosity_level,file);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of eval_gquad_structure. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "eval_gquad_structure. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of eval_gquad_structure. "
          "Expected an array of ""std::string");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_gquad_structure" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "eval_gquad_structure" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      if (SvOK(ST(3))) /* check for undef */
      arg4 = PerlIO_findFILE(IoIFP(sv_2io(ST(3))));
      else  arg4 = NULL;
    }
    {
      try {
        result = (float)my_eval_gquad_structure(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_gquad_structure__SWIG_4) {
  {
    std::vector< std::string > arg1 ;
    std::string arg2 ;
    int arg3 ;
    std::vector< std::string > *v1 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: eval_gquad_structure(alignment,structure,verbosity_level);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of eval_gquad_structure. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "eval_gquad_structure. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of eval_gquad_structure. "
          "Expected an array of ""std::string");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_gquad_structure" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "eval_gquad_structure" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (float)my_eval_gquad_structure(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_gquad_structure__SWIG_5) {
  {
    std::vector< std::string > arg1 ;
    std::string arg2 ;
    std::vector< std::string > *v1 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: eval_gquad_structure(alignment,structure);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of eval_gquad_structure. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "eval_gquad_structure. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of eval_gquad_structure. "
          "Expected an array of ""std::string");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_gquad_structure" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (float)my_eval_gquad_structure(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_gquad_structure) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          if (SvOK(ST(3)))
          _v = (sv_2io(ST(3))) ? 1 : 0;
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          if (SvOK(ST(3)))
          _v = (sv_2io(ST(3))) ? 1 : 0;
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 6;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_6:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_gquad_structure__SWIG_2); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_gquad_structure__SWIG_5); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_gquad_structure__SWIG_1); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_gquad_structure__SWIG_4); return;
    case 5:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_gquad_structure__SWIG_0); return;
    case 6:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_gquad_structure__SWIG_3); return;
    }
  }
  
  croak("No matching function for overloaded 'eval_gquad_structure'");
  XSRETURN(0);
}


XS(_wrap_eval_circ_gquad_structure__SWIG_3) {
  {
    std::vector< std::string > arg1 ;
    std::string arg2 ;
    int arg3 ;
    FILE *arg4 = (FILE *) 0 ;
    std::vector< std::string > *v1 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: eval_circ_gquad_structure(alignment,structure,verbosity_level,file);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of eval_circ_gquad_structure. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "eval_circ_gquad_structure. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of eval_circ_gquad_structure. "
          "Expected an array of ""std::string");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_circ_gquad_structure" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "eval_circ_gquad_structure" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      if (SvOK(ST(3))) /* check for undef */
      arg4 = PerlIO_findFILE(IoIFP(sv_2io(ST(3))));
      else  arg4 = NULL;
    }
    {
      try {
        result = (float)my_eval_circ_gquad_structure(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_circ_gquad_structure__SWIG_4) {
  {
    std::vector< std::string > arg1 ;
    std::string arg2 ;
    int arg3 ;
    std::vector< std::string > *v1 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: eval_circ_gquad_structure(alignment,structure,verbosity_level);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of eval_circ_gquad_structure. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "eval_circ_gquad_structure. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of eval_circ_gquad_structure. "
          "Expected an array of ""std::string");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_circ_gquad_structure" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "eval_circ_gquad_structure" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (float)my_eval_circ_gquad_structure(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_circ_gquad_structure__SWIG_5) {
  {
    std::vector< std::string > arg1 ;
    std::string arg2 ;
    std::vector< std::string > *v1 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: eval_circ_gquad_structure(alignment,structure);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of eval_circ_gquad_structure. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "eval_circ_gquad_structure. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of eval_circ_gquad_structure. "
          "Expected an array of ""std::string");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_circ_gquad_structure" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (float)my_eval_circ_gquad_structure(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_circ_gquad_structure) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          if (SvOK(ST(3)))
          _v = (sv_2io(ST(3))) ? 1 : 0;
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          if (SvOK(ST(3)))
          _v = (sv_2io(ST(3))) ? 1 : 0;
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 6;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_6:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_circ_gquad_structure__SWIG_2); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_circ_gquad_structure__SWIG_5); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_circ_gquad_structure__SWIG_1); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_circ_gquad_structure__SWIG_4); return;
    case 5:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_circ_gquad_structure__SWIG_0); return;
    case 6:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_circ_gquad_structure__SWIG_3); return;
    }
  }
  
  croak("No matching function for overloaded 'eval_circ_gquad_structure'");
  XSRETURN(0);
}


XS(_wrap_eval_structure_pt_simple__SWIG_0) {
  {
    std::string arg1 ;
    std::vector< int > arg2 ;
    int arg3 ;
    FILE *arg4 = (FILE *) 0 ;
    std::vector< int > *v2 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: eval_structure_pt_simple(sequence,pt,verbosity_level,file);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_structure_pt_simple" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of eval_structure_pt_simple. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg2)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "eval_structure_pt_simple. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of eval_structure_pt_simple. "
          "Expected an array of ""int");
      }
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "eval_structure_pt_simple" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      if (SvOK(ST(3))) /* check for undef */
      arg4 = PerlIO_findFILE(IoIFP(sv_2io(ST(3))));
      else  arg4 = NULL;
    }
    {
      try {
        result = (float)my_eval_structure_pt_simple(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_structure_pt_simple__SWIG_1) {
  {
    std::string arg1 ;
    std::vector< int > arg2 ;
    int arg3 ;
    std::vector< int > *v2 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: eval_structure_pt_simple(sequence,pt,verbosity_level);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_structure_pt_simple" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of eval_structure_pt_simple. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg2)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "eval_structure_pt_simple. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of eval_structure_pt_simple. "
          "Expected an array of ""int");
      }
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "eval_structure_pt_simple" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (float)my_eval_structure_pt_simple(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_structure_pt_simple__SWIG_2) {
  {
    std::string arg1 ;
    std::vector< int > arg2 ;
    std::vector< int > *v2 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: eval_structure_pt_simple(sequence,pt);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "eval_structure_pt_simple" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of eval_structure_pt_simple. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg2)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "eval_structure_pt_simple. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of eval_structure_pt_simple. "
          "Expected an array of ""int");
      }
    }
    {
      try {
        result = (float)my_eval_structure_pt_simple(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_structure_pt_simple__SWIG_3) {
  {
    std::vector< std::string > arg1 ;
    std::vector< int > arg2 ;
    int arg3 ;
    FILE *arg4 = (FILE *) 0 ;
    std::vector< std::string > *v1 ;
    std::vector< int > *v2 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: eval_structure_pt_simple(alignment,pt,verbosity_level,file);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of eval_structure_pt_simple. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "eval_structure_pt_simple. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of eval_structure_pt_simple. "
          "Expected an array of ""std::string");
      }
    }
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of eval_structure_pt_simple. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg2)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "eval_structure_pt_simple. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of eval_structure_pt_simple. "
          "Expected an array of ""int");
      }
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "eval_structure_pt_simple" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      if (SvOK(ST(3))) /* check for undef */
      arg4 = PerlIO_findFILE(IoIFP(sv_2io(ST(3))));
      else  arg4 = NULL;
    }
    {
      try {
        result = (float)my_eval_structure_pt_simple(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_structure_pt_simple__SWIG_4) {
  {
    std::vector< std::string > arg1 ;
    std::vector< int > arg2 ;
    int arg3 ;
    std::vector< std::string > *v1 ;
    std::vector< int > *v2 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: eval_structure_pt_simple(alignment,pt,verbosity_level);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of eval_structure_pt_simple. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "eval_structure_pt_simple. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of eval_structure_pt_simple. "
          "Expected an array of ""std::string");
      }
    }
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of eval_structure_pt_simple. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg2)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "eval_structure_pt_simple. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of eval_structure_pt_simple. "
          "Expected an array of ""int");
      }
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "eval_structure_pt_simple" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (float)my_eval_structure_pt_simple(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_eval_structure_pt_simple__SWIG_5) {
  {
    std::vector< std::string > arg1 ;
    std::vector< int > arg2 ;
    std::vector< std::string > *v1 ;
    std::vector< int > *v2 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: eval_structure_pt_simple(alignment,pt);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of eval_structure_pt_simple. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "eval_structure_pt_simple. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of eval_structure_pt_simple. "
          "Expected an array of ""std::string");
      }
    }
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of eval_structure_pt_simple. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg2)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "eval_structure_pt_simple. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of eval_structure_pt_simple. "
          "Expected an array of ""int");
      }
    }
    {
      try {
        result = (float)my_eval_structure_pt_simple(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_eval_structure_pt_simple) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< int >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< int >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< int >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< int >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< int >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          if (SvOK(ST(3)))
          _v = (sv_2io(ST(3))) ? 1 : 0;
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< int >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          if (SvOK(ST(3)))
          _v = (sv_2io(ST(3))) ? 1 : 0;
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 6;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_6:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_structure_pt_simple__SWIG_2); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_structure_pt_simple__SWIG_5); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_structure_pt_simple__SWIG_1); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_structure_pt_simple__SWIG_4); return;
    case 5:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_structure_pt_simple__SWIG_0); return;
    case 6:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_eval_structure_pt_simple__SWIG_3); return;
    }
  }
  
  croak("No matching function for overloaded 'eval_structure_pt_simple'");
  XSRETURN(0);
}


XS(_wrap_energy_of_structure) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: energy_of_structure(string,structure,verbosity_level);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "energy_of_structure" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "energy_of_structure" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "energy_of_structure" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (float)energy_of_structure((char const *)arg1,(char const *)arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_energy_of_circ_structure) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: energy_of_circ_structure(string,structure,verbosity_level);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "energy_of_circ_structure" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "energy_of_circ_structure" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "energy_of_circ_structure" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (float)energy_of_circ_structure((char const *)arg1,(char const *)arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_energy_of_gquad_structure) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: energy_of_gquad_structure(string,structure,verbosity_level);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "energy_of_gquad_structure" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "energy_of_gquad_structure" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "energy_of_gquad_structure" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (float)energy_of_gquad_structure((char const *)arg1,(char const *)arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_energy_of_structure_pt) {
  {
    char *arg1 = (char *) 0 ;
    short *arg2 = (short *) 0 ;
    short *arg3 = (short *) 0 ;
    short *arg4 = (short *) 0 ;
    int arg5 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: energy_of_structure_pt(string,ptable,s,s1,verbosity_level);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "energy_of_structure_pt" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_short, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "energy_of_structure_pt" "', argument " "2"" of type '" "short *""'"); 
    }
    arg2 = reinterpret_cast< short * >(argp2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_short, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "energy_of_structure_pt" "', argument " "3"" of type '" "short *""'"); 
    }
    arg3 = reinterpret_cast< short * >(argp3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_short, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "energy_of_structure_pt" "', argument " "4"" of type '" "short *""'"); 
    }
    arg4 = reinterpret_cast< short * >(argp4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "energy_of_structure_pt" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    {
      try {
        result = (int)energy_of_structure_pt((char const *)arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_energy_of_move) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    int arg4 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: energy_of_move(string,structure,m1,m2);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "energy_of_move" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "energy_of_move" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "energy_of_move" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "energy_of_move" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      try {
        result = (float)energy_of_move((char const *)arg1,(char const *)arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_energy_of_move_pt) {
  {
    short *arg1 = (short *) 0 ;
    short *arg2 = (short *) 0 ;
    short *arg3 = (short *) 0 ;
    int arg4 ;
    int arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: energy_of_move_pt(pt,s,s1,m1,m2);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_short, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "energy_of_move_pt" "', argument " "1"" of type '" "short *""'"); 
    }
    arg1 = reinterpret_cast< short * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_short, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "energy_of_move_pt" "', argument " "2"" of type '" "short *""'"); 
    }
    arg2 = reinterpret_cast< short * >(argp2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_short, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "energy_of_move_pt" "', argument " "3"" of type '" "short *""'"); 
    }
    arg3 = reinterpret_cast< short * >(argp3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "energy_of_move_pt" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "energy_of_move_pt" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    {
      try {
        result = (int)energy_of_move_pt(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_loop_energy) {
  {
    short *arg1 = (short *) 0 ;
    short *arg2 = (short *) 0 ;
    short *arg3 = (short *) 0 ;
    int arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: loop_energy(ptable,s,s1,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_short, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "loop_energy" "', argument " "1"" of type '" "short *""'"); 
    }
    arg1 = reinterpret_cast< short * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_short, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "loop_energy" "', argument " "2"" of type '" "short *""'"); 
    }
    arg2 = reinterpret_cast< short * >(argp2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_short, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "loop_energy" "', argument " "3"" of type '" "short *""'"); 
    }
    arg3 = reinterpret_cast< short * >(argp3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "loop_energy" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      try {
        result = (int)loop_energy(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_energy_of_struct) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: energy_of_struct(string,structure);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "energy_of_struct" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "energy_of_struct" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        result = (float)energy_of_struct((char const *)arg1,(char const *)arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_energy_of_struct_pt) {
  {
    char *arg1 = (char *) 0 ;
    short *arg2 = (short *) 0 ;
    short *arg3 = (short *) 0 ;
    short *arg4 = (short *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: energy_of_struct_pt(string,ptable,s,s1);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "energy_of_struct_pt" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_short, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "energy_of_struct_pt" "', argument " "2"" of type '" "short *""'"); 
    }
    arg2 = reinterpret_cast< short * >(argp2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_short, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "energy_of_struct_pt" "', argument " "3"" of type '" "short *""'"); 
    }
    arg3 = reinterpret_cast< short * >(argp3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_short, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "energy_of_struct_pt" "', argument " "4"" of type '" "short *""'"); 
    }
    arg4 = reinterpret_cast< short * >(argp4);
    {
      try {
        result = (int)energy_of_struct_pt((char const *)arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_energy_of_circ_struct) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: energy_of_circ_struct(string,structure);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "energy_of_circ_struct" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "energy_of_circ_struct" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        result = (float)energy_of_circ_struct((char const *)arg1,(char const *)arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_E_ext_stem) {
  {
    unsigned int arg1 ;
    int arg2 ;
    int arg3 ;
    vrna_param_t *arg4 = (vrna_param_t *) 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: E_ext_stem(type,n5d,n3d,p);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "E_ext_stem" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "E_ext_stem" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "E_ext_stem" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "E_ext_stem" "', argument " "4"" of type '" "vrna_param_t *""'"); 
    }
    arg4 = reinterpret_cast< vrna_param_t * >(argp4);
    {
      try {
        result = (int)vrna_E_ext_stem(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_E_ext_stem) {
  {
    unsigned int arg1 ;
    int arg2 ;
    int arg3 ;
    vrna_exp_param_t *arg4 = (vrna_exp_param_t *) 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    FLT_OR_DBL result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: exp_E_ext_stem(type,n5d,n3d,p);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "exp_E_ext_stem" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "exp_E_ext_stem" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "exp_E_ext_stem" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "exp_E_ext_stem" "', argument " "4"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg4 = reinterpret_cast< vrna_exp_param_t * >(argp4);
    {
      try {
        result = (FLT_OR_DBL)vrna_exp_E_ext_stem(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_E_Stem) {
  {
    int arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    vrna_param_t *arg5 = (vrna_param_t *) 0 ;
    int val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    void *argp5 = 0 ;
    int res5 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: E_Stem(type,si1,sj1,extLoop,P);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "E_Stem" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "E_Stem" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "E_Stem" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "E_Stem" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    res5 = SWIG_ConvertPtr(ST(4), &argp5,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "E_Stem" "', argument " "5"" of type '" "vrna_param_t *""'"); 
    }
    arg5 = reinterpret_cast< vrna_param_t * >(argp5);
    {
      try {
        result = (int)E_Stem(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_E_ExtLoop) {
  {
    int arg1 ;
    int arg2 ;
    int arg3 ;
    vrna_param_t *arg4 = (vrna_param_t *) 0 ;
    int val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: E_ExtLoop(type,si1,sj1,P);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "E_ExtLoop" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "E_ExtLoop" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "E_ExtLoop" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "E_ExtLoop" "', argument " "4"" of type '" "vrna_param_t *""'"); 
    }
    arg4 = reinterpret_cast< vrna_param_t * >(argp4);
    {
      try {
        result = (int)E_ExtLoop(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_E_ExtLoop) {
  {
    int arg1 ;
    int arg2 ;
    int arg3 ;
    vrna_exp_param_t *arg4 = (vrna_exp_param_t *) 0 ;
    int val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    FLT_OR_DBL result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: exp_E_ExtLoop(type,si1,sj1,P);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "exp_E_ExtLoop" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "exp_E_ExtLoop" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "exp_E_ExtLoop" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "exp_E_ExtLoop" "', argument " "4"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg4 = reinterpret_cast< vrna_exp_param_t * >(argp4);
    {
      try {
        result = (FLT_OR_DBL)exp_E_ExtLoop(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_E_Stem) {
  {
    int arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    vrna_exp_param_t *arg5 = (vrna_exp_param_t *) 0 ;
    int val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    void *argp5 = 0 ;
    int res5 = 0 ;
    int argvi = 0;
    FLT_OR_DBL result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: exp_E_Stem(type,si1,sj1,extLoop,P);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "exp_E_Stem" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "exp_E_Stem" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "exp_E_Stem" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "exp_E_Stem" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    res5 = SWIG_ConvertPtr(ST(4), &argp5,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "exp_E_Stem" "', argument " "5"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg5 = reinterpret_cast< vrna_exp_param_t * >(argp5);
    {
      try {
        result = (FLT_OR_DBL)exp_E_Stem(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_E_Hairpin) {
  {
    int arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    char *arg5 = (char *) 0 ;
    vrna_param_t *arg6 = (vrna_param_t *) 0 ;
    int val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int res5 ;
    char *buf5 = 0 ;
    int alloc5 = 0 ;
    void *argp6 = 0 ;
    int res6 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: E_Hairpin(size,type,si1,sj1,string,P);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "E_Hairpin" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "E_Hairpin" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "E_Hairpin" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "E_Hairpin" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    res5 = SWIG_AsCharPtrAndSize(ST(4), &buf5, NULL, &alloc5);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "E_Hairpin" "', argument " "5"" of type '" "char const *""'");
    }
    arg5 = reinterpret_cast< char * >(buf5);
    res6 = SWIG_ConvertPtr(ST(5), &argp6,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "E_Hairpin" "', argument " "6"" of type '" "vrna_param_t *""'"); 
    }
    arg6 = reinterpret_cast< vrna_param_t * >(argp6);
    {
      try {
        result = (int)E_Hairpin(arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_E_Hairpin) {
  {
    int arg1 ;
    int arg2 ;
    short arg3 ;
    short arg4 ;
    char *arg5 = (char *) 0 ;
    vrna_exp_param_t *arg6 = (vrna_exp_param_t *) 0 ;
    int val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    short val3 ;
    int ecode3 = 0 ;
    short val4 ;
    int ecode4 = 0 ;
    int res5 ;
    char *buf5 = 0 ;
    int alloc5 = 0 ;
    void *argp6 = 0 ;
    int res6 = 0 ;
    int argvi = 0;
    FLT_OR_DBL result;
    dXSARGS;
    
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: exp_E_Hairpin(u,type,si1,sj1,string,P);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "exp_E_Hairpin" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "exp_E_Hairpin" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "exp_E_Hairpin" "', argument " "3"" of type '" "short""'");
    } 
    arg3 = static_cast< short >(val3);
    ecode4 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "exp_E_Hairpin" "', argument " "4"" of type '" "short""'");
    } 
    arg4 = static_cast< short >(val4);
    res5 = SWIG_AsCharPtrAndSize(ST(4), &buf5, NULL, &alloc5);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "exp_E_Hairpin" "', argument " "5"" of type '" "char const *""'");
    }
    arg5 = reinterpret_cast< char * >(buf5);
    res6 = SWIG_ConvertPtr(ST(5), &argp6,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "exp_E_Hairpin" "', argument " "6"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg6 = reinterpret_cast< vrna_exp_param_t * >(argp6);
    {
      try {
        result = (FLT_OR_DBL)exp_E_Hairpin(arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    
    
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    
    SWIG_croak_null();
  }
}


XS(_wrap_E_IntLoop) {
  {
    int arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int arg8 ;
    vrna_param_t *arg9 = (vrna_param_t *) 0 ;
    int val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int val8 ;
    int ecode8 = 0 ;
    void *argp9 = 0 ;
    int res9 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 9) || (items > 9)) {
      SWIG_croak("Usage: E_IntLoop(n1,n2,type,type_2,si1,sj1,sp1,sq1,P);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "E_IntLoop" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "E_IntLoop" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "E_IntLoop" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "E_IntLoop" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "E_IntLoop" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "E_IntLoop" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "E_IntLoop" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    ecode8 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "E_IntLoop" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
    res9 = SWIG_ConvertPtr(ST(8), &argp9,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "E_IntLoop" "', argument " "9"" of type '" "vrna_param_t *""'"); 
    }
    arg9 = reinterpret_cast< vrna_param_t * >(argp9);
    {
      try {
        result = (int)E_IntLoop(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_E_IntLoop) {
  {
    int arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    short arg5 ;
    short arg6 ;
    short arg7 ;
    short arg8 ;
    vrna_exp_param_t *arg9 = (vrna_exp_param_t *) 0 ;
    int val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    short val5 ;
    int ecode5 = 0 ;
    short val6 ;
    int ecode6 = 0 ;
    short val7 ;
    int ecode7 = 0 ;
    short val8 ;
    int ecode8 = 0 ;
    void *argp9 = 0 ;
    int res9 = 0 ;
    int argvi = 0;
    FLT_OR_DBL result;
    dXSARGS;
    
    if ((items < 9) || (items > 9)) {
      SWIG_croak("Usage: exp_E_IntLoop(u1,u2,type,type2,si1,sj1,sp1,sq1,P);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "exp_E_IntLoop" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "exp_E_IntLoop" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "exp_E_IntLoop" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "exp_E_IntLoop" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "exp_E_IntLoop" "', argument " "5"" of type '" "short""'");
    } 
    arg5 = static_cast< short >(val5);
    ecode6 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "exp_E_IntLoop" "', argument " "6"" of type '" "short""'");
    } 
    arg6 = static_cast< short >(val6);
    ecode7 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "exp_E_IntLoop" "', argument " "7"" of type '" "short""'");
    } 
    arg7 = static_cast< short >(val7);
    ecode8 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "exp_E_IntLoop" "', argument " "8"" of type '" "short""'");
    } 
    arg8 = static_cast< short >(val8);
    res9 = SWIG_ConvertPtr(ST(8), &argp9,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "exp_E_IntLoop" "', argument " "9"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg9 = reinterpret_cast< vrna_exp_param_t * >(argp9);
    {
      try {
        result = (FLT_OR_DBL)exp_E_IntLoop(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_E_IntLoop_Co) {
  {
    int arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    short arg8 ;
    short arg9 ;
    short arg10 ;
    short arg11 ;
    int arg12 ;
    vrna_param_t *arg13 = (vrna_param_t *) 0 ;
    int val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    short val8 ;
    int ecode8 = 0 ;
    short val9 ;
    int ecode9 = 0 ;
    short val10 ;
    int ecode10 = 0 ;
    short val11 ;
    int ecode11 = 0 ;
    int val12 ;
    int ecode12 = 0 ;
    void *argp13 = 0 ;
    int res13 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 13) || (items > 13)) {
      SWIG_croak("Usage: E_IntLoop_Co(type,type_2,i,j,p,q,cutpoint,si1,sj1,sp1,sq1,dangles,P);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "E_IntLoop_Co" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "E_IntLoop_Co" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "E_IntLoop_Co" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "E_IntLoop_Co" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "E_IntLoop_Co" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "E_IntLoop_Co" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "E_IntLoop_Co" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    ecode8 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "E_IntLoop_Co" "', argument " "8"" of type '" "short""'");
    } 
    arg8 = static_cast< short >(val8);
    ecode9 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "E_IntLoop_Co" "', argument " "9"" of type '" "short""'");
    } 
    arg9 = static_cast< short >(val9);
    ecode10 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(9), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "E_IntLoop_Co" "', argument " "10"" of type '" "short""'");
    } 
    arg10 = static_cast< short >(val10);
    ecode11 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(10), &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "E_IntLoop_Co" "', argument " "11"" of type '" "short""'");
    } 
    arg11 = static_cast< short >(val11);
    ecode12 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(11), &val12);
    if (!SWIG_IsOK(ecode12)) {
      SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "E_IntLoop_Co" "', argument " "12"" of type '" "int""'");
    } 
    arg12 = static_cast< int >(val12);
    res13 = SWIG_ConvertPtr(ST(12), &argp13,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res13)) {
      SWIG_exception_fail(SWIG_ArgError(res13), "in method '" "E_IntLoop_Co" "', argument " "13"" of type '" "vrna_param_t *""'"); 
    }
    arg13 = reinterpret_cast< vrna_param_t * >(argp13);
    {
      try {
        result = (int)E_IntLoop_Co(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ubf_eval_int_loop) {
  {
    int arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int arg8 ;
    short arg9 ;
    short arg10 ;
    short arg11 ;
    short arg12 ;
    unsigned char arg13 ;
    unsigned char arg14 ;
    int *arg15 = (int *) 0 ;
    int arg16 ;
    int arg17 ;
    vrna_param_t *arg18 = (vrna_param_t *) 0 ;
    vrna_sc_t *arg19 = (vrna_sc_t *) 0 ;
    int val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int val8 ;
    int ecode8 = 0 ;
    short val9 ;
    int ecode9 = 0 ;
    short val10 ;
    int ecode10 = 0 ;
    short val11 ;
    int ecode11 = 0 ;
    short val12 ;
    int ecode12 = 0 ;
    unsigned char val13 ;
    int ecode13 = 0 ;
    unsigned char val14 ;
    int ecode14 = 0 ;
    void *argp15 = 0 ;
    int res15 = 0 ;
    int val16 ;
    int ecode16 = 0 ;
    int val17 ;
    int ecode17 = 0 ;
    void *argp18 = 0 ;
    int res18 = 0 ;
    void *argp19 = 0 ;
    int res19 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 19) || (items > 19)) {
      SWIG_croak("Usage: ubf_eval_int_loop(i,j,p,q,i1,j1,p1,q1,si,sj,sp,sq,type,type_2,rtype,ij,cp,P,sc);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ubf_eval_int_loop" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ubf_eval_int_loop" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ubf_eval_int_loop" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ubf_eval_int_loop" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ubf_eval_int_loop" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ubf_eval_int_loop" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ubf_eval_int_loop" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    ecode8 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ubf_eval_int_loop" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
    ecode9 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ubf_eval_int_loop" "', argument " "9"" of type '" "short""'");
    } 
    arg9 = static_cast< short >(val9);
    ecode10 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(9), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ubf_eval_int_loop" "', argument " "10"" of type '" "short""'");
    } 
    arg10 = static_cast< short >(val10);
    ecode11 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(10), &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "ubf_eval_int_loop" "', argument " "11"" of type '" "short""'");
    } 
    arg11 = static_cast< short >(val11);
    ecode12 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(11), &val12);
    if (!SWIG_IsOK(ecode12)) {
      SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "ubf_eval_int_loop" "', argument " "12"" of type '" "short""'");
    } 
    arg12 = static_cast< short >(val12);
    ecode13 = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(12), &val13);
    if (!SWIG_IsOK(ecode13)) {
      SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "ubf_eval_int_loop" "', argument " "13"" of type '" "unsigned char""'");
    } 
    arg13 = static_cast< unsigned char >(val13);
    ecode14 = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(13), &val14);
    if (!SWIG_IsOK(ecode14)) {
      SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "ubf_eval_int_loop" "', argument " "14"" of type '" "unsigned char""'");
    } 
    arg14 = static_cast< unsigned char >(val14);
    res15 = SWIG_ConvertPtr(ST(14), &argp15,SWIGTYPE_p_int, 0 |  0 );
    if (!SWIG_IsOK(res15)) {
      SWIG_exception_fail(SWIG_ArgError(res15), "in method '" "ubf_eval_int_loop" "', argument " "15"" of type '" "int *""'"); 
    }
    arg15 = reinterpret_cast< int * >(argp15);
    ecode16 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(15), &val16);
    if (!SWIG_IsOK(ecode16)) {
      SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "ubf_eval_int_loop" "', argument " "16"" of type '" "int""'");
    } 
    arg16 = static_cast< int >(val16);
    ecode17 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(16), &val17);
    if (!SWIG_IsOK(ecode17)) {
      SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "ubf_eval_int_loop" "', argument " "17"" of type '" "int""'");
    } 
    arg17 = static_cast< int >(val17);
    res18 = SWIG_ConvertPtr(ST(17), &argp18,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res18)) {
      SWIG_exception_fail(SWIG_ArgError(res18), "in method '" "ubf_eval_int_loop" "', argument " "18"" of type '" "vrna_param_t *""'"); 
    }
    arg18 = reinterpret_cast< vrna_param_t * >(argp18);
    res19 = SWIG_ConvertPtr(ST(18), &argp19,SWIGTYPE_p_vrna_sc_s, 0 |  0 );
    if (!SWIG_IsOK(res19)) {
      SWIG_exception_fail(SWIG_ArgError(res19), "in method '" "ubf_eval_int_loop" "', argument " "19"" of type '" "vrna_sc_t *""'"); 
    }
    arg19 = reinterpret_cast< vrna_sc_t * >(argp19);
    {
      try {
        result = (int)ubf_eval_int_loop(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ubf_eval_int_loop2) {
  {
    int arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int arg8 ;
    short arg9 ;
    short arg10 ;
    short arg11 ;
    short arg12 ;
    unsigned char arg13 ;
    unsigned char arg14 ;
    int *arg15 = (int *) 0 ;
    int arg16 ;
    unsigned int *arg17 = (unsigned int *) 0 ;
    unsigned int *arg18 = (unsigned int *) 0 ;
    vrna_param_t *arg19 = (vrna_param_t *) 0 ;
    vrna_sc_t *arg20 = (vrna_sc_t *) 0 ;
    int val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int val8 ;
    int ecode8 = 0 ;
    short val9 ;
    int ecode9 = 0 ;
    short val10 ;
    int ecode10 = 0 ;
    short val11 ;
    int ecode11 = 0 ;
    short val12 ;
    int ecode12 = 0 ;
    unsigned char val13 ;
    int ecode13 = 0 ;
    unsigned char val14 ;
    int ecode14 = 0 ;
    void *argp15 = 0 ;
    int res15 = 0 ;
    int val16 ;
    int ecode16 = 0 ;
    void *argp17 = 0 ;
    int res17 = 0 ;
    void *argp18 = 0 ;
    int res18 = 0 ;
    void *argp19 = 0 ;
    int res19 = 0 ;
    void *argp20 = 0 ;
    int res20 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 20) || (items > 20)) {
      SWIG_croak("Usage: ubf_eval_int_loop2(i,j,p,q,i1,j1,p1,q1,si,sj,sp,sq,type,type_2,rtype,ij,sn,ss,P,sc);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ubf_eval_int_loop2" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ubf_eval_int_loop2" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ubf_eval_int_loop2" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ubf_eval_int_loop2" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ubf_eval_int_loop2" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ubf_eval_int_loop2" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ubf_eval_int_loop2" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    ecode8 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ubf_eval_int_loop2" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
    ecode9 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ubf_eval_int_loop2" "', argument " "9"" of type '" "short""'");
    } 
    arg9 = static_cast< short >(val9);
    ecode10 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(9), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ubf_eval_int_loop2" "', argument " "10"" of type '" "short""'");
    } 
    arg10 = static_cast< short >(val10);
    ecode11 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(10), &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "ubf_eval_int_loop2" "', argument " "11"" of type '" "short""'");
    } 
    arg11 = static_cast< short >(val11);
    ecode12 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(11), &val12);
    if (!SWIG_IsOK(ecode12)) {
      SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "ubf_eval_int_loop2" "', argument " "12"" of type '" "short""'");
    } 
    arg12 = static_cast< short >(val12);
    ecode13 = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(12), &val13);
    if (!SWIG_IsOK(ecode13)) {
      SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "ubf_eval_int_loop2" "', argument " "13"" of type '" "unsigned char""'");
    } 
    arg13 = static_cast< unsigned char >(val13);
    ecode14 = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(13), &val14);
    if (!SWIG_IsOK(ecode14)) {
      SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "ubf_eval_int_loop2" "', argument " "14"" of type '" "unsigned char""'");
    } 
    arg14 = static_cast< unsigned char >(val14);
    res15 = SWIG_ConvertPtr(ST(14), &argp15,SWIGTYPE_p_int, 0 |  0 );
    if (!SWIG_IsOK(res15)) {
      SWIG_exception_fail(SWIG_ArgError(res15), "in method '" "ubf_eval_int_loop2" "', argument " "15"" of type '" "int *""'"); 
    }
    arg15 = reinterpret_cast< int * >(argp15);
    ecode16 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(15), &val16);
    if (!SWIG_IsOK(ecode16)) {
      SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "ubf_eval_int_loop2" "', argument " "16"" of type '" "int""'");
    } 
    arg16 = static_cast< int >(val16);
    res17 = SWIG_ConvertPtr(ST(16), &argp17,SWIGTYPE_p_unsigned_int, 0 |  0 );
    if (!SWIG_IsOK(res17)) {
      SWIG_exception_fail(SWIG_ArgError(res17), "in method '" "ubf_eval_int_loop2" "', argument " "17"" of type '" "unsigned int *""'"); 
    }
    arg17 = reinterpret_cast< unsigned int * >(argp17);
    res18 = SWIG_ConvertPtr(ST(17), &argp18,SWIGTYPE_p_unsigned_int, 0 |  0 );
    if (!SWIG_IsOK(res18)) {
      SWIG_exception_fail(SWIG_ArgError(res18), "in method '" "ubf_eval_int_loop2" "', argument " "18"" of type '" "unsigned int *""'"); 
    }
    arg18 = reinterpret_cast< unsigned int * >(argp18);
    res19 = SWIG_ConvertPtr(ST(18), &argp19,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res19)) {
      SWIG_exception_fail(SWIG_ArgError(res19), "in method '" "ubf_eval_int_loop2" "', argument " "19"" of type '" "vrna_param_t *""'"); 
    }
    arg19 = reinterpret_cast< vrna_param_t * >(argp19);
    res20 = SWIG_ConvertPtr(ST(19), &argp20,SWIGTYPE_p_vrna_sc_s, 0 |  0 );
    if (!SWIG_IsOK(res20)) {
      SWIG_exception_fail(SWIG_ArgError(res20), "in method '" "ubf_eval_int_loop2" "', argument " "20"" of type '" "vrna_sc_t *""'"); 
    }
    arg20 = reinterpret_cast< vrna_sc_t * >(argp20);
    {
      try {
        result = (int)ubf_eval_int_loop2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ubf_eval_ext_int_loop) {
  {
    int arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    int arg6 ;
    int arg7 ;
    int arg8 ;
    short arg9 ;
    short arg10 ;
    short arg11 ;
    short arg12 ;
    unsigned char arg13 ;
    unsigned char arg14 ;
    int arg15 ;
    vrna_param_t *arg16 = (vrna_param_t *) 0 ;
    vrna_sc_t *arg17 = (vrna_sc_t *) 0 ;
    int val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int val6 ;
    int ecode6 = 0 ;
    int val7 ;
    int ecode7 = 0 ;
    int val8 ;
    int ecode8 = 0 ;
    short val9 ;
    int ecode9 = 0 ;
    short val10 ;
    int ecode10 = 0 ;
    short val11 ;
    int ecode11 = 0 ;
    short val12 ;
    int ecode12 = 0 ;
    unsigned char val13 ;
    int ecode13 = 0 ;
    unsigned char val14 ;
    int ecode14 = 0 ;
    int val15 ;
    int ecode15 = 0 ;
    void *argp16 = 0 ;
    int res16 = 0 ;
    void *argp17 = 0 ;
    int res17 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 17) || (items > 17)) {
      SWIG_croak("Usage: ubf_eval_ext_int_loop(i,j,p,q,i1,j1,p1,q1,si,sj,sp,sq,type,type_2,length,P,sc);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ubf_eval_ext_int_loop" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ubf_eval_ext_int_loop" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ubf_eval_ext_int_loop" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ubf_eval_ext_int_loop" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ubf_eval_ext_int_loop" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    ecode6 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ubf_eval_ext_int_loop" "', argument " "6"" of type '" "int""'");
    } 
    arg6 = static_cast< int >(val6);
    ecode7 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "ubf_eval_ext_int_loop" "', argument " "7"" of type '" "int""'");
    } 
    arg7 = static_cast< int >(val7);
    ecode8 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(7), &val8);
    if (!SWIG_IsOK(ecode8)) {
      SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "ubf_eval_ext_int_loop" "', argument " "8"" of type '" "int""'");
    } 
    arg8 = static_cast< int >(val8);
    ecode9 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(8), &val9);
    if (!SWIG_IsOK(ecode9)) {
      SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "ubf_eval_ext_int_loop" "', argument " "9"" of type '" "short""'");
    } 
    arg9 = static_cast< short >(val9);
    ecode10 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(9), &val10);
    if (!SWIG_IsOK(ecode10)) {
      SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ubf_eval_ext_int_loop" "', argument " "10"" of type '" "short""'");
    } 
    arg10 = static_cast< short >(val10);
    ecode11 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(10), &val11);
    if (!SWIG_IsOK(ecode11)) {
      SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "ubf_eval_ext_int_loop" "', argument " "11"" of type '" "short""'");
    } 
    arg11 = static_cast< short >(val11);
    ecode12 = SWIG_AsVal_short SWIG_PERL_CALL_ARGS_2(ST(11), &val12);
    if (!SWIG_IsOK(ecode12)) {
      SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "ubf_eval_ext_int_loop" "', argument " "12"" of type '" "short""'");
    } 
    arg12 = static_cast< short >(val12);
    ecode13 = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(12), &val13);
    if (!SWIG_IsOK(ecode13)) {
      SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "ubf_eval_ext_int_loop" "', argument " "13"" of type '" "unsigned char""'");
    } 
    arg13 = static_cast< unsigned char >(val13);
    ecode14 = SWIG_AsVal_unsigned_SS_char SWIG_PERL_CALL_ARGS_2(ST(13), &val14);
    if (!SWIG_IsOK(ecode14)) {
      SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "ubf_eval_ext_int_loop" "', argument " "14"" of type '" "unsigned char""'");
    } 
    arg14 = static_cast< unsigned char >(val14);
    ecode15 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(14), &val15);
    if (!SWIG_IsOK(ecode15)) {
      SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "ubf_eval_ext_int_loop" "', argument " "15"" of type '" "int""'");
    } 
    arg15 = static_cast< int >(val15);
    res16 = SWIG_ConvertPtr(ST(15), &argp16,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res16)) {
      SWIG_exception_fail(SWIG_ArgError(res16), "in method '" "ubf_eval_ext_int_loop" "', argument " "16"" of type '" "vrna_param_t *""'"); 
    }
    arg16 = reinterpret_cast< vrna_param_t * >(argp16);
    res17 = SWIG_ConvertPtr(ST(16), &argp17,SWIGTYPE_p_vrna_sc_s, 0 |  0 );
    if (!SWIG_IsOK(res17)) {
      SWIG_exception_fail(SWIG_ArgError(res17), "in method '" "ubf_eval_ext_int_loop" "', argument " "17"" of type '" "vrna_sc_t *""'"); 
    }
    arg17 = reinterpret_cast< vrna_sc_t * >(argp17);
    {
      try {
        result = (int)ubf_eval_ext_int_loop(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_E_ml_rightmost_stem) {
  {
    int arg1 ;
    int arg2 ;
    vrna_fold_compound_t *arg3 = (vrna_fold_compound_t *) 0 ;
    int val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: E_ml_rightmost_stem(i,j,fc);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "E_ml_rightmost_stem" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "E_ml_rightmost_stem" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "E_ml_rightmost_stem" "', argument " "3"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg3 = reinterpret_cast< vrna_fold_compound_t * >(argp3);
    {
      try {
        result = (int)E_ml_rightmost_stem(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_E_MLstem) {
  {
    int arg1 ;
    int arg2 ;
    int arg3 ;
    vrna_param_t *arg4 = (vrna_param_t *) 0 ;
    int val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: E_MLstem(type,si1,sj1,P);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "E_MLstem" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "E_MLstem" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "E_MLstem" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "E_MLstem" "', argument " "4"" of type '" "vrna_param_t *""'"); 
    }
    arg4 = reinterpret_cast< vrna_param_t * >(argp4);
    {
      try {
        result = (int)E_MLstem(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_exp_E_MLstem) {
  {
    int arg1 ;
    int arg2 ;
    int arg3 ;
    vrna_exp_param_t *arg4 = (vrna_exp_param_t *) 0 ;
    int val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    FLT_OR_DBL result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: exp_E_MLstem(type,si1,sj1,P);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "exp_E_MLstem" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "exp_E_MLstem" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "exp_E_MLstem" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "exp_E_MLstem" "', argument " "4"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg4 = reinterpret_cast< vrna_exp_param_t * >(argp4);
    {
      try {
        result = (FLT_OR_DBL)exp_E_MLstem(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_maximum_matching) {
  {
    std::string arg1 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: maximum_matching(sequence);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "maximum_matching" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (int)my_maximum_matching(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold__SWIG_0) {
  {
    char *arg1 = (char *) 0 ;
    float *arg2 = (float *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    float temp2 ;
    int res2 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg2 = &temp2;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold(string);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (char *)my_fold(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold__SWIG_1) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    float *arg3 = (float *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    float temp3 ;
    int res3 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold(string,constraints);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        result = (char *)my_fold(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'fold'");
  XSRETURN(0);
}


XS(_wrap_alifold__SWIG_0) {
  {
    std::vector< std::string > arg1 ;
    float *arg2 = (float *) 0 ;
    std::vector< std::string > *v1 ;
    float temp2 ;
    int res2 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg2 = &temp2;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: alifold(alignment);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of alifold. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "alifold. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of alifold. "
          "Expected an array of ""std::string");
      }
    }
    {
      try {
        result = (char *)my_alifold(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_alifold__SWIG_1) {
  {
    std::vector< std::string > arg1 ;
    char *arg2 = (char *) 0 ;
    float *arg3 = (float *) 0 ;
    std::vector< std::string > *v1 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    float temp3 ;
    int res3 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: alifold(alignment,constraints);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of alifold. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "alifold. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of alifold. "
          "Expected an array of ""std::string");
      }
    }
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "alifold" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        result = (char *)my_alifold(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_alifold) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_alifold__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_alifold__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'alifold'");
  XSRETURN(0);
}


XS(_wrap_cofold__SWIG_0) {
  {
    char *arg1 = (char *) 0 ;
    float *arg2 = (float *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    float temp2 ;
    int res2 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg2 = &temp2;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: cofold(string);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cofold" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (char *)my_cofold(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    SWIG_croak_null();
  }
}


XS(_wrap_cofold__SWIG_1) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    float *arg3 = (float *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    float temp3 ;
    int res3 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: cofold(string,constraints);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cofold" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cofold" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        result = (char *)my_cofold(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_cofold) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_cofold__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_cofold__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'cofold'");
  XSRETURN(0);
}


XS(_wrap_circfold__SWIG_0) {
  {
    char *arg1 = (char *) 0 ;
    float *arg2 = (float *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    float temp2 ;
    int res2 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg2 = &temp2;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: circfold(string);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "circfold" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (char *)my_circfold(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    SWIG_croak_null();
  }
}


XS(_wrap_circfold__SWIG_1) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    float *arg3 = (float *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    float temp3 ;
    int res3 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: circfold(string,constraints);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "circfold" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "circfold" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        result = (char *)my_circfold(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_circfold) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_circfold__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_circfold__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'circfold'");
  XSRETURN(0);
}


XS(_wrap_circalifold__SWIG_0) {
  {
    std::vector< std::string > arg1 ;
    float *arg2 = (float *) 0 ;
    std::vector< std::string > *v1 ;
    float temp2 ;
    int res2 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg2 = &temp2;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: circalifold(alignment);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of circalifold. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "circalifold. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of circalifold. "
          "Expected an array of ""std::string");
      }
    }
    {
      try {
        result = (char *)my_circalifold(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_circalifold__SWIG_1) {
  {
    std::vector< std::string > arg1 ;
    char *arg2 = (char *) 0 ;
    float *arg3 = (float *) 0 ;
    std::vector< std::string > *v1 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    float temp3 ;
    int res3 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: circalifold(alignment,constraints);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of circalifold. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "circalifold. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of circalifold. "
          "Expected an array of ""std::string");
      }
    }
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "circalifold" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        result = (char *)my_circalifold(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_free_arrays) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: free_arrays();");
    }
    {
      try {
        free_arrays();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_update_fold_params) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: update_fold_params();");
    }
    {
      try {
        update_fold_params();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_circalifold__SWIG_2) {
  {
    char **arg1 = (char **) 0 ;
    char *arg2 = (char *) 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: circalifold(strings,structure);");
    }
    {
      AV *tempav;
      I32 len;
      int i;
      SV  **tv;
      if (!SvROK(ST(0)))
      croak("Argument 1 is not a reference.");
      if (SvTYPE(SvRV(ST(0))) != SVt_PVAV)
      croak("Argument 1 is not an array.");
      tempav = (AV*)SvRV(ST(0));
      len = av_len(tempav);
      arg1 = (char **) malloc((len+2)*sizeof(char *));
      for (i = 0; i <= len; i++) {
        tv = av_fetch(tempav, i, 0);
        arg1[i] = (char *) SvPV(*tv,PL_na);
      }
      arg1[i] = NULL;
    }
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "circalifold" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        result = (float)circalifold((char const **)arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    {
      free(arg1);
    }
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    {
      free(arg1);
    }
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_circalifold) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_p_char, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_circalifold__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_circalifold__SWIG_2); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_circalifold__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'circalifold'");
  XSRETURN(0);
}


XS(_wrap_free_alifold_arrays) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: free_alifold_arrays();");
    }
    {
      try {
        free_alifold_arrays();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_free_co_arrays) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: free_co_arrays();");
    }
    {
      try {
        free_co_arrays();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_update_cofold_params) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: update_cofold_params();");
    }
    {
      try {
        update_cofold_params();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_initialize_cofold) {
  {
    int arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: initialize_cofold(length);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "initialize_cofold" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    {
      try {
        initialize_cofold(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Lfoldz__SWIG_0) {
  {
    std::string arg1 ;
    int arg2 ;
    double arg3 ;
    FILE *arg4 = (FILE *) 0 ;
    int val2 ;
    int ecode2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: Lfoldz(sequence,window_size,min_z,nullfile);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Lfoldz" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lfoldz" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Lfoldz" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    {
      if (SvOK(ST(3))) /* check for undef */
      arg4 = PerlIO_findFILE(IoIFP(sv_2io(ST(3))));
      else  arg4 = NULL;
    }
    {
      try {
        result = (float)my_Lfoldz(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Lfoldz__SWIG_1) {
  {
    std::string arg1 ;
    int arg2 ;
    double arg3 ;
    int val2 ;
    int ecode2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: Lfoldz(sequence,window_size,min_z);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Lfoldz" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lfoldz" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Lfoldz" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    {
      try {
        result = (float)my_Lfoldz(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Lfoldz) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          if (SvOK(ST(3)))
          _v = (sv_2io(ST(3))) ? 1 : 0;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Lfoldz__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Lfoldz__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'Lfoldz'");
  XSRETURN(0);
}


XS(_wrap_Lfold__SWIG_0) {
  {
    std::string arg1 ;
    int arg2 ;
    FILE *arg3 = (FILE *) 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: Lfold(sequence,window_size,nullfile);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Lfold" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lfold" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      if (SvOK(ST(2))) /* check for undef */
      arg3 = PerlIO_findFILE(IoIFP(sv_2io(ST(2))));
      else  arg3 = NULL;
    }
    {
      try {
        result = (float)my_Lfold(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Lfold__SWIG_1) {
  {
    std::string arg1 ;
    int arg2 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Lfold(sequence,window_size);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Lfold" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lfold" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        result = (float)my_Lfold(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Lfold) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          if (SvOK(ST(2)))
          _v = (sv_2io(ST(2))) ? 1 : 0;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Lfold__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Lfold__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'Lfold'");
  XSRETURN(0);
}


XS(_wrap_aliLfold__SWIG_0) {
  {
    std::vector< std::string > arg1 ;
    int arg2 ;
    FILE *arg3 = (FILE *) 0 ;
    std::vector< std::string > *v1 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: aliLfold(alignment,window_size,nullfile);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of aliLfold. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "aliLfold. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of aliLfold. "
          "Expected an array of ""std::string");
      }
    }
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "aliLfold" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      if (SvOK(ST(2))) /* check for undef */
      arg3 = PerlIO_findFILE(IoIFP(sv_2io(ST(2))));
      else  arg3 = NULL;
    }
    {
      try {
        result = (float)my_aliLfold(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_aliLfold__SWIG_1) {
  {
    std::vector< std::string > arg1 ;
    int arg2 ;
    std::vector< std::string > *v1 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: aliLfold(alignment,window_size);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of aliLfold. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "aliLfold. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of aliLfold. "
          "Expected an array of ""std::string");
      }
    }
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "aliLfold" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        result = (float)my_aliLfold(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_aliLfold) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          if (SvOK(ST(2)))
          _v = (sv_2io(ST(2))) ? 1 : 0;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_aliLfold__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_aliLfold__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'aliLfold'");
  XSRETURN(0);
}


XS(_wrap_pf_fold__SWIG_0) {
  {
    char *arg1 = (char *) 0 ;
    float *arg2 = (float *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    float temp2 ;
    int res2 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg2 = &temp2;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: pf_fold(string);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pf_fold" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (char *)my_pf_fold(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    SWIG_croak_null();
  }
}


XS(_wrap_pf_fold__SWIG_1) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    float *arg3 = (float *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    float temp3 ;
    int res3 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: pf_fold(string,constraints);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pf_fold" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pf_fold" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        result = (char *)my_pf_fold(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_pf_fold) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_pf_fold__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_pf_fold__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'pf_fold'");
  XSRETURN(0);
}


XS(_wrap_pf_circ_fold__SWIG_0) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    float *arg3 = (float *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    float temp3 ;
    int res3 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: pf_circ_fold(string,constraints);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pf_circ_fold" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pf_circ_fold" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        result = (char *)my_pf_circ_fold(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_pf_circ_fold__SWIG_1) {
  {
    char *arg1 = (char *) 0 ;
    float *arg2 = (float *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    float temp2 ;
    int res2 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg2 = &temp2;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: pf_circ_fold(string);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pf_circ_fold" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (char *)my_pf_circ_fold(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    SWIG_croak_null();
  }
}


XS(_wrap_pf_circ_fold) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_pf_circ_fold__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_pf_circ_fold__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'pf_circ_fold'");
  XSRETURN(0);
}


XS(_wrap_pf_float_precision) {
  {
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: pf_float_precision();");
    }
    {
      try {
        result = (int)vrna_pf_float_precision();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_pbacktrack) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: pbacktrack(sequence);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pbacktrack" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (char *)pbacktrack(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_pbacktrack5) {
  {
    char *arg1 = (char *) 0 ;
    int arg2 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: pbacktrack5(sequence,length);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pbacktrack5" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pbacktrack5" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        result = (char *)pbacktrack5(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    SWIG_croak_null();
  }
}


XS(_wrap_pbacktrack_circ) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: pbacktrack_circ(sequence);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pbacktrack_circ" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (char *)pbacktrack_circ(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_free_pf_arrays) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: free_pf_arrays();");
    }
    {
      try {
        free_pf_arrays();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_update_pf_params) {
  {
    int arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: update_pf_params(length);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "update_pf_params" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    {
      try {
        update_pf_params(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_mean_bp_distance) {
  {
    int arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: mean_bp_distance(length);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mean_bp_distance" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    {
      try {
        result = (double)mean_bp_distance(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_init_pf_fold) {
  {
    int arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: init_pf_fold(length);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "init_pf_fold" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    {
      try {
        init_pf_fold(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_centroid) {
  {
    int arg1 ;
    double *arg2 = (double *) 0 ;
    int val1 ;
    int ecode1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: centroid(length,dist);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "centroid" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_double, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "centroid" "', argument " "2"" of type '" "double *""'"); 
    }
    arg2 = reinterpret_cast< double * >(argp2);
    {
      try {
        result = (char *)centroid(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_co_pf_fold__SWIG_0) {
  {
    char *arg1 = (char *) 0 ;
    float *arg2 = (float *) 0 ;
    float *arg3 = (float *) 0 ;
    float *arg4 = (float *) 0 ;
    float *arg5 = (float *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    float temp2 ;
    int res2 = SWIG_TMPOBJ ;
    float temp3 ;
    int res3 = SWIG_TMPOBJ ;
    float temp4 ;
    int res4 = SWIG_TMPOBJ ;
    float temp5 ;
    int res5 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg2 = &temp2;
    arg3 = &temp3;
    arg4 = &temp4;
    arg5 = &temp5;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: co_pf_fold(string);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "co_pf_fold" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (char *)my_co_pf_fold(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res5)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg5)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_co_pf_fold__SWIG_1) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    float *arg3 = (float *) 0 ;
    float *arg4 = (float *) 0 ;
    float *arg5 = (float *) 0 ;
    float *arg6 = (float *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    float temp3 ;
    int res3 = SWIG_TMPOBJ ;
    float temp4 ;
    int res4 = SWIG_TMPOBJ ;
    float temp5 ;
    int res5 = SWIG_TMPOBJ ;
    float temp6 ;
    int res6 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg3 = &temp3;
    arg4 = &temp4;
    arg5 = &temp5;
    arg6 = &temp6;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: co_pf_fold(string,constraints);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "co_pf_fold" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "co_pf_fold" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        result = (char *)my_co_pf_fold(arg1,arg2,arg3,arg4,arg5,arg6);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res5)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg5)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res6)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg6)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_co_pf_fold) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_co_pf_fold__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_co_pf_fold__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'co_pf_fold'");
  XSRETURN(0);
}


XS(_wrap_get_concentrations) {
  {
    double arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    double arg6 ;
    double arg7 ;
    double *arg8 = (double *) 0 ;
    double *arg9 = (double *) 0 ;
    double *arg10 = (double *) 0 ;
    double *arg11 = (double *) 0 ;
    double *arg12 = (double *) 0 ;
    double val1 ;
    int ecode1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    double val4 ;
    int ecode4 = 0 ;
    double val5 ;
    int ecode5 = 0 ;
    double val6 ;
    int ecode6 = 0 ;
    double val7 ;
    int ecode7 = 0 ;
    double temp8 ;
    int res8 = SWIG_TMPOBJ ;
    double temp9 ;
    int res9 = SWIG_TMPOBJ ;
    double temp10 ;
    int res10 = SWIG_TMPOBJ ;
    double temp11 ;
    int res11 = SWIG_TMPOBJ ;
    double temp12 ;
    int res12 = SWIG_TMPOBJ ;
    int argvi = 0;
    dXSARGS;
    
    arg8 = &temp8;
    arg9 = &temp9;
    arg10 = &temp10;
    arg11 = &temp11;
    arg12 = &temp12;
    if ((items < 7) || (items > 7)) {
      SWIG_croak("Usage: get_concentrations(FcAB,FcAA,FcBB,FEA,FEB,A0,BO);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_concentrations" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "get_concentrations" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "get_concentrations" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    ecode4 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "get_concentrations" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
    ecode5 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "get_concentrations" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
    ecode6 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "get_concentrations" "', argument " "6"" of type '" "double""'");
    } 
    arg6 = static_cast< double >(val6);
    ecode7 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "get_concentrations" "', argument " "7"" of type '" "double""'");
    } 
    arg7 = static_cast< double >(val7);
    {
      try {
        my_get_concentrations(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    if (SWIG_IsTmpObj(res8)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1((*arg8)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res8) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg8), SWIGTYPE_p_double, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res9)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1((*arg9)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res9) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg9), SWIGTYPE_p_double, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res10)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1((*arg10)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res10) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg10), SWIGTYPE_p_double, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res11)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1((*arg11)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res11) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg11), SWIGTYPE_p_double, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res12)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1((*arg12)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res12) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg12), SWIGTYPE_p_double, new_flags); argvi++  ;
    }
    
    
    
    
    
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_free_co_pf_arrays) {
  {
    int argvi = 0;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: free_co_pf_arrays();");
    }
    {
      try {
        free_co_pf_arrays();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_update_co_pf_params) {
  {
    int arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: update_co_pf_params(length);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "update_co_pf_params" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    {
      try {
        update_co_pf_params(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_get_pr) {
  {
    int arg1 ;
    int arg2 ;
    int val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: get_pr(i,j);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_pr" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "get_pr" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        result = (double)get_pr(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_get_centroid_struct_pl) {
  {
    int arg1 ;
    double *arg2 = (double *) 0 ;
    vrna_ep_t *arg3 = (vrna_ep_t *) 0 ;
    int val1 ;
    int ecode1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: get_centroid_struct_pl(length,dist,pl);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_centroid_struct_pl" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_double, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_centroid_struct_pl" "', argument " "2"" of type '" "double *""'"); 
    }
    arg2 = reinterpret_cast< double * >(argp2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_vrna_ep_t, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "get_centroid_struct_pl" "', argument " "3"" of type '" "vrna_ep_t *""'"); 
    }
    arg3 = reinterpret_cast< vrna_ep_t * >(argp3);
    {
      try {
        result = (char *)get_centroid_struct_pl(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_get_centroid_struct_pr) {
  {
    int arg1 ;
    double *arg2 = (double *) 0 ;
    FLT_OR_DBL *arg3 = (FLT_OR_DBL *) 0 ;
    int val1 ;
    int ecode1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: get_centroid_struct_pr(length,dist,pr);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_centroid_struct_pr" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_double, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_centroid_struct_pr" "', argument " "2"" of type '" "double *""'"); 
    }
    arg2 = reinterpret_cast< double * >(argp2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_double, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "get_centroid_struct_pr" "', argument " "3"" of type '" "FLT_OR_DBL *""'"); 
    }
    arg3 = reinterpret_cast< FLT_OR_DBL * >(argp3);
    {
      try {
        result = (char *)get_centroid_struct_pr(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_MEA_from_plist__SWIG_0) {
  {
    std::vector< vrna_ep_t > arg1 ;
    std::string arg2 ;
    double arg3 ;
    vrna_md_t *arg4 = (vrna_md_t *) 0 ;
    float *arg5 = (float *) 0 ;
    std::vector< vrna_ep_t > *v1 ;
    double val3 ;
    int ecode3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    float temp5 ;
    int res5 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg5 = &temp5;
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: MEA_from_plist(plist,sequence,gamma,md);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_vrna_ep_t_t,1) != -1) {
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of MEA_from_plist. "
          "Expected an array of " "vrna_ep_t");
        SV **tv;
        I32 len = av_len(av) + 1;
        vrna_ep_t* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_vrna_ep_t,0) != -1) {
            (&arg1)->push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "MEA_from_plist. "
              "Expected an array of " "vrna_ep_t");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of MEA_from_plist. "
          "Expected an array of " "vrna_ep_t");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "MEA_from_plist" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MEA_from_plist" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MEA_from_plist" "', argument " "4"" of type '" "vrna_md_t *""'"); 
    }
    arg4 = reinterpret_cast< vrna_md_t * >(argp4);
    {
      try {
        result = (char *)my_MEA_from_plist(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res5)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg5)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_MEA_from_plist__SWIG_1) {
  {
    std::vector< vrna_ep_t > arg1 ;
    std::string arg2 ;
    vrna_md_t *arg3 = (vrna_md_t *) 0 ;
    float *arg4 = (float *) 0 ;
    std::vector< vrna_ep_t > *v1 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    float temp4 ;
    int res4 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg4 = &temp4;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: MEA_from_plist(plist,sequence,md);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_vrna_ep_t_t,1) != -1) {
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of MEA_from_plist. "
          "Expected an array of " "vrna_ep_t");
        SV **tv;
        I32 len = av_len(av) + 1;
        vrna_ep_t* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_vrna_ep_t,0) != -1) {
            (&arg1)->push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "MEA_from_plist. "
              "Expected an array of " "vrna_ep_t");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of MEA_from_plist. "
          "Expected an array of " "vrna_ep_t");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "MEA_from_plist" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MEA_from_plist" "', argument " "3"" of type '" "vrna_md_t *""'"); 
    }
    arg3 = reinterpret_cast< vrna_md_t * >(argp3);
    {
      try {
        result = (char *)my_MEA_from_plist(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_MEA_from_plist__SWIG_2) {
  {
    std::vector< vrna_ep_t > arg1 ;
    std::string arg2 ;
    double arg3 ;
    float *arg4 = (float *) 0 ;
    std::vector< vrna_ep_t > *v1 ;
    double val3 ;
    int ecode3 = 0 ;
    float temp4 ;
    int res4 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg4 = &temp4;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: MEA_from_plist(plist,sequence,gamma);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_vrna_ep_t_t,1) != -1) {
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of MEA_from_plist. "
          "Expected an array of " "vrna_ep_t");
        SV **tv;
        I32 len = av_len(av) + 1;
        vrna_ep_t* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_vrna_ep_t,0) != -1) {
            (&arg1)->push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "MEA_from_plist. "
              "Expected an array of " "vrna_ep_t");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of MEA_from_plist. "
          "Expected an array of " "vrna_ep_t");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "MEA_from_plist" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MEA_from_plist" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    {
      try {
        result = (char *)my_MEA_from_plist(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_MEA_from_plist__SWIG_3) {
  {
    std::vector< vrna_ep_t > arg1 ;
    std::string arg2 ;
    float *arg3 = (float *) 0 ;
    std::vector< vrna_ep_t > *v1 ;
    float temp3 ;
    int res3 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: MEA_from_plist(plist,sequence);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_vrna_ep_t_t,1) != -1) {
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of MEA_from_plist. "
          "Expected an array of " "vrna_ep_t");
        SV **tv;
        I32 len = av_len(av) + 1;
        vrna_ep_t* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_vrna_ep_t,0) != -1) {
            (&arg1)->push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "MEA_from_plist. "
              "Expected an array of " "vrna_ep_t");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of MEA_from_plist. "
          "Expected an array of " "vrna_ep_t");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "MEA_from_plist" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (char *)my_MEA_from_plist(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_MEA_from_plist) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< vrna_ep_t >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_vrna_ep_t_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  vrna_ep_t* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_vrna_ep_t,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< vrna_ep_t >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_vrna_ep_t_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  vrna_ep_t* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_vrna_ep_t,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(2), &vptr, SWIGTYPE_p_vrna_md_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< vrna_ep_t >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_vrna_ep_t_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  vrna_ep_t* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_vrna_ep_t,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< vrna_ep_t >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_vrna_ep_t_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  vrna_ep_t* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_vrna_ep_t,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(3), &vptr, SWIGTYPE_p_vrna_md_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_MEA_from_plist__SWIG_3); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_MEA_from_plist__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_MEA_from_plist__SWIG_2); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_MEA_from_plist__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'MEA_from_plist'");
  XSRETURN(0);
}


XS(_wrap_new_pbacktrack_mem) {
  {
    int argvi = 0;
    vrna_pbacktrack_mem_t *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_pbacktrack_mem();");
    }
    {
      try {
        result = (vrna_pbacktrack_mem_t *)new_vrna_pbacktrack_mem_t();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_pbacktrack_mem_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_pbacktrack_mem) {
  {
    vrna_pbacktrack_mem_t *arg1 = (vrna_pbacktrack_mem_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_pbacktrack_mem(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_pbacktrack_mem_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pbacktrack_mem" "', argument " "1"" of type '" "vrna_pbacktrack_mem_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_pbacktrack_mem_t * >(argp1);
    {
      try {
        delete_vrna_pbacktrack_mem_t(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_pfl_fold) {
  {
    std::string arg1 ;
    int arg2 ;
    int arg3 ;
    double arg4 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    double val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    std::vector< vrna_ep_t > result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: pfl_fold(sequence,w,L,cutoff);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "pfl_fold" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pfl_fold" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pfl_fold" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pfl_fold" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
    {
      try {
        result = my_pfl_fold(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        vrna_ep_t* ptr = new vrna_ep_t(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_vrna_ep_t, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_pfl_fold_up) {
  {
    std::string arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    std::vector< std::vector< double > > result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: pfl_fold_up(sequence,ulength,window_size,max_bp_span);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "pfl_fold_up" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pfl_fold_up" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pfl_fold_up" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pfl_fold_up" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      try {
        result = pfl_fold_up(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      AV *arr = newAV();
      for(unsigned int i = 0; i < (&result)->size(); i++) {
        AV *vec = newAV();
        for(unsigned int j = 0; j < result[i].size(); j++) {
          SV *v = newSVnv(result[i][j]);
          if (!av_store(vec, j, v))
          SvREFCNT_dec(v);
        }
        /* store reference to array */
        av_store(arr, i, newRV_noinc((SV*) vec));
      }
      
      ST(argvi) = newRV_noinc((SV*) arr);
      sv_2mortal( ST(argvi) );
      argvi++;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SOLUTION_energy_set) {
  {
    SOLUTION *arg1 = (SOLUTION *) 0 ;
    float arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SOLUTION_energy_set(self,energy);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_SOLUTION, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SOLUTION_energy_set" "', argument " "1"" of type '" "SOLUTION *""'"); 
    }
    arg1 = reinterpret_cast< SOLUTION * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SOLUTION_energy_set" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
    if (arg1) (arg1)->energy = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SOLUTION_energy_get) {
  {
    SOLUTION *arg1 = (SOLUTION *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SOLUTION_energy_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_SOLUTION, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SOLUTION_energy_get" "', argument " "1"" of type '" "SOLUTION *""'"); 
    }
    arg1 = reinterpret_cast< SOLUTION * >(argp1);
    result = (float) ((arg1)->energy);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SOLUTION_structure_set) {
  {
    SOLUTION *arg1 = (SOLUTION *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SOLUTION_structure_set(self,structure);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_SOLUTION, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SOLUTION_structure_set" "', argument " "1"" of type '" "SOLUTION *""'"); 
    }
    arg1 = reinterpret_cast< SOLUTION * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SOLUTION_structure_set" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    if (arg1->structure) delete[] arg1->structure;
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
      arg1->structure = (char *)reinterpret_cast< char* >(memcpy(new char[size], reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
    } else {
      arg1->structure = 0;
    }
    ST(argvi) = &PL_sv_undef;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_SOLUTION_structure_get) {
  {
    SOLUTION *arg1 = (SOLUTION *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SOLUTION_structure_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_SOLUTION, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SOLUTION_structure_get" "', argument " "1"" of type '" "SOLUTION *""'"); 
    }
    arg1 = reinterpret_cast< SOLUTION * >(argp1);
    result = (char *) ((arg1)->structure);
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SOLUTION_get) {
  {
    SOLUTION *arg1 = (SOLUTION *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    SOLUTION *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SOLUTION_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_SOLUTION, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SOLUTION_get" "', argument " "1"" of type '" "SOLUTION *""'"); 
    }
    arg1 = reinterpret_cast< SOLUTION * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SOLUTION_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        result = (SOLUTION *)SOLUTION_get(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SOLUTION, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SOLUTION_size) {
  {
    SOLUTION *arg1 = (SOLUTION *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SOLUTION_size(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_SOLUTION, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SOLUTION_size" "', argument " "1"" of type '" "SOLUTION *""'"); 
    }
    arg1 = reinterpret_cast< SOLUTION * >(argp1);
    {
      try {
        result = (int)SOLUTION_size(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_SOLUTION) {
  {
    SOLUTION *arg1 = (SOLUTION *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_SOLUTION(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_SOLUTION, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SOLUTION" "', argument " "1"" of type '" "SOLUTION *""'"); 
    }
    arg1 = reinterpret_cast< SOLUTION * >(argp1);
    {
      try {
        delete_SOLUTION(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SOLUTION) {
  {
    int argvi = 0;
    SOLUTION *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_SOLUTION();");
    }
    {
      try {
        result = (SOLUTION *)new SOLUTION();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SOLUTION, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_subopt_solution_energy_set) {
  {
    subopt_solution *arg1 = (subopt_solution *) 0 ;
    float arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: subopt_solution_energy_set(self,energy);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_subopt_solution, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "subopt_solution_energy_set" "', argument " "1"" of type '" "subopt_solution *""'"); 
    }
    arg1 = reinterpret_cast< subopt_solution * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "subopt_solution_energy_set" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
    if (arg1) (arg1)->energy = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_subopt_solution_energy_get) {
  {
    subopt_solution *arg1 = (subopt_solution *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: subopt_solution_energy_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_subopt_solution, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "subopt_solution_energy_get" "', argument " "1"" of type '" "subopt_solution *""'"); 
    }
    arg1 = reinterpret_cast< subopt_solution * >(argp1);
    result = (float) ((arg1)->energy);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_subopt_solution_structure_set) {
  {
    subopt_solution *arg1 = (subopt_solution *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: subopt_solution_structure_set(self,structure);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_subopt_solution, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "subopt_solution_structure_set" "', argument " "1"" of type '" "subopt_solution *""'"); 
    }
    arg1 = reinterpret_cast< subopt_solution * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "subopt_solution_structure_set" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    if (arg1->structure) delete[] arg1->structure;
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
      arg1->structure = (char *)reinterpret_cast< char* >(memcpy(new char[size], reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
    } else {
      arg1->structure = 0;
    }
    ST(argvi) = &PL_sv_undef;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_subopt_solution_structure_get) {
  {
    subopt_solution *arg1 = (subopt_solution *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: subopt_solution_structure_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_subopt_solution, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "subopt_solution_structure_get" "', argument " "1"" of type '" "subopt_solution *""'"); 
    }
    arg1 = reinterpret_cast< subopt_solution * >(argp1);
    result = (char *) ((arg1)->structure);
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_subopt_solution) {
  {
    subopt_solution *arg1 = (subopt_solution *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_subopt_solution(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_subopt_solution, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_subopt_solution" "', argument " "1"" of type '" "subopt_solution *""'"); 
    }
    arg1 = reinterpret_cast< subopt_solution * >(argp1);
    {
      try {
        delete_subopt_solution(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_subopt_solution) {
  {
    int argvi = 0;
    subopt_solution *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_subopt_solution();");
    }
    {
      try {
        result = (subopt_solution *)new subopt_solution();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_subopt_solution, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_SuboptVector__SWIG_0) {
  {
    unsigned int arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::vector< subopt_solution > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_SuboptVector(size);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SuboptVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      try {
        result = (std::vector< subopt_solution > *)new std::vector< subopt_solution >(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_subopt_solution_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SuboptVector__SWIG_1) {
  {
    int argvi = 0;
    std::vector< subopt_solution > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_SuboptVector();");
    }
    {
      try {
        result = (std::vector< subopt_solution > *)new std::vector< subopt_solution >();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_subopt_solution_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_SuboptVector__SWIG_2) {
  {
    unsigned int arg1 ;
    subopt_solution *arg2 = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    std::vector< subopt_solution > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_SuboptVector(size,value);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SuboptVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_subopt_solution,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SuboptVector" "', argument " "2"" of type '" "subopt_solution const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SuboptVector" "', argument " "2"" of type '" "subopt_solution const &""'"); 
    }
    arg2 = reinterpret_cast< subopt_solution * >(argp2);
    {
      try {
        result = (std::vector< subopt_solution > *)new std::vector< subopt_solution >(arg1,(subopt_solution const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_subopt_solution_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SuboptVector__SWIG_3) {
  {
    std::vector< subopt_solution > *arg1 = 0 ;
    std::vector< subopt_solution > temp1 ;
    std::vector< subopt_solution > *v1 ;
    int argvi = 0;
    std::vector< subopt_solution > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_SuboptVector(other);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_subopt_solution_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_SuboptVector. "
          "Expected an array of " "subopt_solution");
        SV **tv;
        I32 len = av_len(av) + 1;
        subopt_solution* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_subopt_solution,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_SuboptVector. "
              "Expected an array of " "subopt_solution");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_SuboptVector. "
          "Expected an array of " "subopt_solution");
      }
    }
    {
      try {
        result = (std::vector< subopt_solution > *)new std::vector< subopt_solution >((std::vector< subopt_solution > const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_subopt_solution_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_SuboptVector) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< subopt_solution >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_subopt_solution_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  subopt_solution* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_subopt_solution,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_subopt_solution, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_SuboptVector__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_SuboptVector__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_SuboptVector__SWIG_3); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_SuboptVector__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_SuboptVector'");
  XSRETURN(0);
}


XS(_wrap_SuboptVector_size) {
  {
    std::vector< subopt_solution > *arg1 = (std::vector< subopt_solution > *) 0 ;
    std::vector< subopt_solution > temp1 ;
    std::vector< subopt_solution > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SuboptVector_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_subopt_solution_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of SuboptVector_size. "
          "Expected an array of " "subopt_solution");
        SV **tv;
        I32 len = av_len(av) + 1;
        subopt_solution* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_subopt_solution,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "SuboptVector_size. "
              "Expected an array of " "subopt_solution");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of SuboptVector_size. "
          "Expected an array of " "subopt_solution");
      }
    }
    {
      try {
        result = (unsigned int)((std::vector< subopt_solution > const *)arg1)->size();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SuboptVector_empty) {
  {
    std::vector< subopt_solution > *arg1 = (std::vector< subopt_solution > *) 0 ;
    std::vector< subopt_solution > temp1 ;
    std::vector< subopt_solution > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SuboptVector_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_subopt_solution_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of SuboptVector_empty. "
          "Expected an array of " "subopt_solution");
        SV **tv;
        I32 len = av_len(av) + 1;
        subopt_solution* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_subopt_solution,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "SuboptVector_empty. "
              "Expected an array of " "subopt_solution");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of SuboptVector_empty. "
          "Expected an array of " "subopt_solution");
      }
    }
    {
      try {
        result = (bool)((std::vector< subopt_solution > const *)arg1)->empty();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SuboptVector_clear) {
  {
    std::vector< subopt_solution > *arg1 = (std::vector< subopt_solution > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SuboptVector_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_subopt_solution_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SuboptVector_clear" "', argument " "1"" of type '" "std::vector< subopt_solution > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< subopt_solution > * >(argp1);
    {
      try {
        (arg1)->clear();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SuboptVector_push) {
  {
    std::vector< subopt_solution > *arg1 = (std::vector< subopt_solution > *) 0 ;
    subopt_solution *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SuboptVector_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_subopt_solution_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SuboptVector_push" "', argument " "1"" of type '" "std::vector< subopt_solution > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< subopt_solution > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_subopt_solution,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SuboptVector_push" "', argument " "2"" of type '" "subopt_solution const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SuboptVector_push" "', argument " "2"" of type '" "subopt_solution const &""'"); 
    }
    arg2 = reinterpret_cast< subopt_solution * >(argp2);
    {
      try {
        (arg1)->push_back((subopt_solution const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SuboptVector_pop) {
  {
    std::vector< subopt_solution > *arg1 = (std::vector< subopt_solution > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    subopt_solution result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: SuboptVector_pop(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_subopt_solution_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SuboptVector_pop" "', argument " "1"" of type '" "std::vector< subopt_solution > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< subopt_solution > * >(argp1);
    {
      try {
        try {
          result = std_vector_Sl_subopt_solution_Sg__pop(arg1);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj((new subopt_solution(static_cast< const subopt_solution& >(result))), SWIGTYPE_p_subopt_solution, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_SuboptVector_get) {
  {
    std::vector< subopt_solution > *arg1 = (std::vector< subopt_solution > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    subopt_solution *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: SuboptVector_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_subopt_solution_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SuboptVector_get" "', argument " "1"" of type '" "std::vector< subopt_solution > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< subopt_solution > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SuboptVector_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        try {
          result = (subopt_solution *) &std_vector_Sl_subopt_solution_Sg__get(arg1,arg2);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_subopt_solution, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_SuboptVector_set) {
  {
    std::vector< subopt_solution > *arg1 = (std::vector< subopt_solution > *) 0 ;
    int arg2 ;
    subopt_solution *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 ;
    int res3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: SuboptVector_set(self,i,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_subopt_solution_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SuboptVector_set" "', argument " "1"" of type '" "std::vector< subopt_solution > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< subopt_solution > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SuboptVector_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3, SWIGTYPE_p_subopt_solution,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SuboptVector_set" "', argument " "3"" of type '" "subopt_solution const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SuboptVector_set" "', argument " "3"" of type '" "subopt_solution const &""'"); 
    }
    arg3 = reinterpret_cast< subopt_solution * >(argp3);
    {
      try {
        try {
          std_vector_Sl_subopt_solution_Sg__set(arg1,arg2,(subopt_solution const &)*arg3);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_SuboptVector) {
  {
    std::vector< subopt_solution > *arg1 = (std::vector< subopt_solution > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_SuboptVector(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_subopt_solution_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SuboptVector" "', argument " "1"" of type '" "std::vector< subopt_solution > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< subopt_solution > * >(argp1);
    {
      try {
        delete arg1;
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_subopt__SWIG_0) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    FILE *arg4 = (FILE *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    SOLUTION *result = 0 ;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: subopt(seq,constraint,delta,nullfile);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "subopt" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "subopt" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "subopt" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      if (SvOK(ST(3))) /* check for undef */
      arg4 = PerlIO_findFILE(IoIFP(sv_2io(ST(3))));
      else  arg4 = NULL;
    }
    {
      try {
        result = (SOLUTION *)my_subopt(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SOLUTION, 0 | SWIG_SHADOW); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_subopt__SWIG_1) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    SOLUTION *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: subopt(seq,constraint,delta);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "subopt" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "subopt" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "subopt" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (SOLUTION *)my_subopt(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SOLUTION, 0 | SWIG_SHADOW); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_subopt__SWIG_2) {
  {
    char *arg1 = (char *) 0 ;
    int arg2 ;
    FILE *arg3 = (FILE *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::vector< subopt_solution > result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: subopt(seq,delta,nullfile);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "subopt" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "subopt" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      if (SvOK(ST(2))) /* check for undef */
      arg3 = PerlIO_findFILE(IoIFP(sv_2io(ST(2))));
      else  arg3 = NULL;
    }
    {
      try {
        result = my_subopt(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        subopt_solution* ptr = new subopt_solution(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_subopt_solution, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_subopt__SWIG_3) {
  {
    char *arg1 = (char *) 0 ;
    int arg2 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::vector< subopt_solution > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: subopt(seq,delta);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "subopt" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "subopt" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        result = my_subopt(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        subopt_solution* ptr = new subopt_solution(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_subopt_solution, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    SWIG_croak_null();
  }
}


XS(_wrap_subopt) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          if (SvOK(ST(2)))
          _v = (sv_2io(ST(2))) ? 1 : 0;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          if (SvOK(ST(3)))
          _v = (sv_2io(ST(3))) ? 1 : 0;
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_subopt__SWIG_3); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_subopt__SWIG_2); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_subopt__SWIG_1); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_subopt__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'subopt'");
  XSRETURN(0);
}


XS(_wrap_zukersubopt) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    SOLUTION *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: zukersubopt(string);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "zukersubopt" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (SOLUTION *)zukersubopt((char const *)arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SOLUTION, 0 | SWIG_SHADOW); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_inverse_fold) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    float *arg3 = (float *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    float temp3 ;
    int res3 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: inverse_fold(start,target);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "inverse_fold" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "inverse_fold" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        result = (char *)my_inverse_fold(arg1,(char const *)arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_inverse_pf_fold) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    float *arg3 = (float *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    float temp3 ;
    int res3 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: inverse_pf_fold(start,target);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "inverse_pf_fold" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "inverse_pf_fold" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        result = (char *)my_inverse_pf_fold(arg1,(char const *)arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_b2HIT) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: b2HIT(structure);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2HIT" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (char *)b2HIT(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_b2C) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: b2C(structure);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2C" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (char *)b2C(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_b2Shapiro) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: b2Shapiro(structure);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "b2Shapiro" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (char *)b2Shapiro(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_add_root) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: add_root(char *);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "add_root" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (char *)add_root(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_expand_Shapiro) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: expand_Shapiro(coarse);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "expand_Shapiro" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (char *)expand_Shapiro(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_expand_Full) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: expand_Full(structure);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "expand_Full" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (char *)expand_Full(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_unexpand_Full) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: unexpand_Full(ffull);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unexpand_Full" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (char *)unexpand_Full(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_unweight) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: unweight(wcoarse);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unweight" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (char *)unweight(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    delete[] result;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_unexpand_aligned_F) {
  {
    char **arg1 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: unexpand_aligned_F(align);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_p_char, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unexpand_aligned_F" "', argument " "1"" of type '" "char *[2]""'"); 
    } 
    arg1 = reinterpret_cast< char ** >(argp1);
    {
      try {
        unexpand_aligned_F(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_parse_structure) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: parse_structure(structure);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse_structure" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        parse_structure(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_make_tree) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    Tree *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: make_tree(struc);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "make_tree" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (Tree *)make_tree(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Tree, 0 | 0); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_tree_edit_distance) {
  {
    Tree *arg1 = (Tree *) 0 ;
    Tree *arg2 = (Tree *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: tree_edit_distance(T1,T2);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Tree, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tree_edit_distance" "', argument " "1"" of type '" "Tree *""'"); 
    }
    arg1 = reinterpret_cast< Tree * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_Tree, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tree_edit_distance" "', argument " "2"" of type '" "Tree *""'"); 
    }
    arg2 = reinterpret_cast< Tree * >(argp2);
    {
      try {
        result = (float)tree_edit_distance(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_print_tree) {
  {
    Tree *arg1 = (Tree *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: print_tree(t);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Tree, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "print_tree" "', argument " "1"" of type '" "Tree *""'"); 
    }
    arg1 = reinterpret_cast< Tree * >(argp1);
    {
      try {
        print_tree(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_free_tree) {
  {
    Tree *arg1 = (Tree *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: free_tree(t);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_Tree, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "free_tree" "', argument " "1"" of type '" "Tree *""'"); 
    }
    arg1 = reinterpret_cast< Tree * >(argp1);
    {
      try {
        free_tree(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Make_swString) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    swString *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Make_swString(string);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Make_swString" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (swString *)Make_swString(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swString, 0 | 0); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_string_edit_distance) {
  {
    swString *arg1 = (swString *) 0 ;
    swString *arg2 = (swString *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: string_edit_distance(T1,T2);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_swString, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_edit_distance" "', argument " "1"" of type '" "swString *""'"); 
    }
    arg1 = reinterpret_cast< swString * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_swString, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_edit_distance" "', argument " "2"" of type '" "swString *""'"); 
    }
    arg2 = reinterpret_cast< swString * >(argp2);
    {
      try {
        result = (float)string_edit_distance(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_profile_edit_distance) {
  {
    float *arg1 = (float *) 0 ;
    float *arg2 = (float *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: profile_edit_distance(T1,T2);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_float, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "profile_edit_distance" "', argument " "1"" of type '" "float const *""'"); 
    }
    arg1 = reinterpret_cast< float * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_float, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "profile_edit_distance" "', argument " "2"" of type '" "float const *""'"); 
    }
    arg2 = reinterpret_cast< float * >(argp2);
    {
      try {
        result = (float)profile_edit_distance((float const *)arg1,(float const *)arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Make_bp_profile_bppm) {
  {
    FLT_OR_DBL *arg1 = (FLT_OR_DBL *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    float *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: Make_bp_profile_bppm(bppm,length);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_double, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Make_bp_profile_bppm" "', argument " "1"" of type '" "FLT_OR_DBL *""'"); 
    }
    arg1 = reinterpret_cast< FLT_OR_DBL * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Make_bp_profile_bppm" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        result = (float *)Make_bp_profile_bppm(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, 0 | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_print_bppm) {
  {
    float *arg1 = (float *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: print_bppm(T);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_float, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "print_bppm" "', argument " "1"" of type '" "float const *""'"); 
    }
    arg1 = reinterpret_cast< float * >(argp1);
    {
      try {
        print_bppm((float const *)arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_free_profile) {
  {
    float *arg1 = (float *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: free_profile(T);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_float, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "free_profile" "', argument " "1"" of type '" "float *""'"); 
    }
    arg1 = reinterpret_cast< float * >(argp1);
    {
      try {
        free_profile(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_Make_bp_profile) {
  {
    int arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    float *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: Make_bp_profile(length);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Make_bp_profile" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    {
      try {
        result = (float *)Make_bp_profile(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_float, SWIG_OWNER | 0); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_deref_any) {
  {
    void **arg1 = (void **) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    void *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: deref_any(ptr,index);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_p_void, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "deref_any" "', argument " "1"" of type '" "void **""'"); 
    }
    arg1 = reinterpret_cast< void ** >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "deref_any" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        result = (void *)deref_any(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 | 0); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_get_aligned_line) {
  {
    int arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: get_aligned_line(int);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_aligned_line" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    {
      try {
        result = (char *)get_aligned_line(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_SHAPE_read) {
  {
    char *arg1 = (char *) 0 ;
    int arg2 ;
    double arg3 ;
    std::string *arg4 = (std::string *) 0 ;
    int *arg5 = (int *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    std::string temp4 ;
    int res4 = SWIG_TMPOBJ ;
    int temp5 ;
    int res5 = SWIG_TMPOBJ ;
    int argvi = 0;
    std::vector< double > result;
    dXSARGS;
    
    arg4 = &temp4;
    arg5 = &temp5;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: file_SHAPE_read(file_name,length,default_value);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "file_SHAPE_read" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_SHAPE_read" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "file_SHAPE_read" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    {
      try {
        result = my_file_SHAPE_read((char const *)arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        sv_setnv(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_std__string, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res5)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1((*arg5)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags); argvi++  ;
    }
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_fasta_read__SWIG_0) {
  {
    std::string *arg1 = (std::string *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    std::vector< std::string > *arg3 = (std::vector< std::string > *) 0 ;
    FILE *arg4 = (FILE *) 0 ;
    unsigned int arg5 ;
    std::string temp1 ;
    int res1 = SWIG_TMPOBJ ;
    std::string temp2 ;
    int res2 = SWIG_TMPOBJ ;
    std::vector< std::string > junk3 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    arg1 = &temp1;
    arg2 = &temp2;
    {
      arg3 = &junk3;
    }
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: file_fasta_read(file,options);");
    }
    {
      if (SvOK(ST(0))) /* check for undef */
      arg4 = PerlIO_findFILE(IoIFP(sv_2io(ST(0))));
      else  arg4 = NULL;
    }
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "file_fasta_read" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    {
      try {
        result = (int)my_file_fasta_read(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (SWIG_IsTmpObj(res1)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1((*arg1)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res1) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg1), SWIGTYPE_p_std__string, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_std__string, new_flags); argvi++  ;
    }
    {
      SV **svs;
      int i = 0;
      svs = (SV **) malloc(arg3->size() * sizeof(SV *));
      for (std::vector<std::string>::iterator it = arg3->begin(); it != arg3->end(); it++, i++) {
        svs[i] = sv_newmortal();
        sv_setpv((SV*)svs[i], it->c_str());
      }
      ST(argvi) = newRV_noinc((SV*)av_make(arg3->size(), svs));
      sv_2mortal( ST(argvi) );
      free(svs);
      argvi++;
    }
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_fasta_read__SWIG_1) {
  {
    std::string *arg1 = (std::string *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    std::vector< std::string > *arg3 = (std::vector< std::string > *) 0 ;
    FILE *arg4 = (FILE *) 0 ;
    std::string temp1 ;
    int res1 = SWIG_TMPOBJ ;
    std::string temp2 ;
    int res2 = SWIG_TMPOBJ ;
    std::vector< std::string > junk3 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    arg1 = &temp1;
    arg2 = &temp2;
    {
      arg3 = &junk3;
    }
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: file_fasta_read(file);");
    }
    {
      if (SvOK(ST(0))) /* check for undef */
      arg4 = PerlIO_findFILE(IoIFP(sv_2io(ST(0))));
      else  arg4 = NULL;
    }
    {
      try {
        result = (int)my_file_fasta_read(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (SWIG_IsTmpObj(res1)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1((*arg1)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res1) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg1), SWIGTYPE_p_std__string, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_std__string, new_flags); argvi++  ;
    }
    {
      SV **svs;
      int i = 0;
      svs = (SV **) malloc(arg3->size() * sizeof(SV *));
      for (std::vector<std::string>::iterator it = arg3->begin(); it != arg3->end(); it++, i++) {
        svs[i] = sv_newmortal();
        sv_setpv((SV*)svs[i], it->c_str());
      }
      ST(argvi) = newRV_noinc((SV*)av_make(arg3->size(), svs));
      sv_2mortal( ST(argvi) );
      free(svs);
      argvi++;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_fasta_read) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          if (SvOK(ST(0)))
          _v = (sv_2io(ST(0))) ? 1 : 0;
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          if (SvOK(ST(0)))
          _v = (sv_2io(ST(0))) ? 1 : 0;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_fasta_read__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_fasta_read__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'file_fasta_read'");
  XSRETURN(0);
}


XS(_wrap_extract_record_rest_structure) {
  {
    char **arg1 = (char **) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: extract_record_rest_structure(lines,length,option);");
    }
    {
      AV *tempav;
      I32 len;
      int i;
      SV  **tv;
      if (!SvROK(ST(0)))
      croak("Argument 1 is not a reference.");
      if (SvTYPE(SvRV(ST(0))) != SVt_PVAV)
      croak("Argument 1 is not an array.");
      tempav = (AV*)SvRV(ST(0));
      len = av_len(tempav);
      arg1 = (char **) malloc((len+2)*sizeof(char *));
      for (i = 0; i <= len; i++) {
        tv = av_fetch(tempav, i, 0);
        arg1[i] = (char *) SvPV(*tv,PL_na);
      }
      arg1[i] = NULL;
    }
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "extract_record_rest_structure" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "extract_record_rest_structure" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = (char *)extract_record_rest_structure((char const **)arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    {
      free(arg1);
    }
    
    
    XSRETURN(argvi);
  fail:
    {
      free(arg1);
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_read_record) {
  {
    char **arg1 = (char **) 0 ;
    char **arg2 = (char **) 0 ;
    char ***arg3 = (char ***) 0 ;
    unsigned int arg4 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: read_record(header,sequence,rest,options);");
    }
    {
      AV *tempav;
      I32 len;
      int i;
      SV  **tv;
      if (!SvROK(ST(0)))
      croak("Argument 1 is not a reference.");
      if (SvTYPE(SvRV(ST(0))) != SVt_PVAV)
      croak("Argument 1 is not an array.");
      tempav = (AV*)SvRV(ST(0));
      len = av_len(tempav);
      arg1 = (char **) malloc((len+2)*sizeof(char *));
      for (i = 0; i <= len; i++) {
        tv = av_fetch(tempav, i, 0);
        arg1[i] = (char *) SvPV(*tv,PL_na);
      }
      arg1[i] = NULL;
    }
    {
      AV *tempav;
      I32 len;
      int i;
      SV  **tv;
      if (!SvROK(ST(1)))
      croak("Argument 2 is not a reference.");
      if (SvTYPE(SvRV(ST(1))) != SVt_PVAV)
      croak("Argument 2 is not an array.");
      tempav = (AV*)SvRV(ST(1));
      len = av_len(tempav);
      arg2 = (char **) malloc((len+2)*sizeof(char *));
      for (i = 0; i <= len; i++) {
        tv = av_fetch(tempav, i, 0);
        arg2[i] = (char *) SvPV(*tv,PL_na);
      }
      arg2[i] = NULL;
    }
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_p_p_char, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "read_record" "', argument " "3"" of type '" "char ***""'"); 
    }
    arg3 = reinterpret_cast< char *** >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "read_record" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    {
      try {
        result = (unsigned int)read_record(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    {
      free(arg1);
    }
    {
      free(arg2);
    }
    
    
    XSRETURN(argvi);
  fail:
    {
      free(arg1);
    }
    {
      free(arg2);
    }
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_get_multi_input_line) {
  {
    char **arg1 = (char **) 0 ;
    unsigned int arg2 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: get_multi_input_line(string,options);");
    }
    {
      AV *tempav;
      I32 len;
      int i;
      SV  **tv;
      if (!SvROK(ST(0)))
      croak("Argument 1 is not a reference.");
      if (SvTYPE(SvRV(ST(0))) != SVt_PVAV)
      croak("Argument 1 is not an array.");
      tempav = (AV*)SvRV(ST(0));
      len = av_len(tempav);
      arg1 = (char **) malloc((len+2)*sizeof(char *));
      for (i = 0; i <= len; i++) {
        tv = av_fetch(tempav, i, 0);
        arg1[i] = (char *) SvPV(*tv,PL_na);
      }
      arg1[i] = NULL;
    }
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "get_multi_input_line" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try {
        result = (unsigned int)get_multi_input_line(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    {
      free(arg1);
    }
    
    XSRETURN(argvi);
  fail:
    {
      free(arg1);
    }
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_msa_detect_format__SWIG_0) {
  {
    std::string arg1 ;
    unsigned int arg2 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: file_msa_detect_format(filename,options);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_msa_detect_format" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_msa_detect_format" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try {
        result = (unsigned int)my_file_msa_detect_format(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_msa_detect_format__SWIG_1) {
  {
    std::string arg1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: file_msa_detect_format(filename);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_msa_detect_format" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (unsigned int)my_file_msa_detect_format(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_msa_detect_format) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_msa_detect_format__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_msa_detect_format__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'file_msa_detect_format'");
  XSRETURN(0);
}


XS(_wrap_file_msa_write__SWIG_0) {
  {
    std::string arg1 ;
    std::vector< std::string > arg2 ;
    std::vector< std::string > arg3 ;
    std::string arg4 ;
    std::string arg5 ;
    std::string arg6 ;
    unsigned int arg7 ;
    std::vector< std::string > *v2 ;
    std::vector< std::string > *v3 ;
    unsigned int val7 ;
    int ecode7 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 7) || (items > 7)) {
      SWIG_croak("Usage: file_msa_write(filename,names,alignment,id,structure,source,options);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_msa_write" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of file_msa_write. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg2)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "file_msa_write. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of file_msa_write. "
          "Expected an array of ""std::string");
      }
    }
    {
      if (SWIG_ConvertPtr(ST(2),(void **) &v3, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg3 = *v3;
      } else if (SvROK(ST(2))) {
        AV *av = (AV *)SvRV(ST(2));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 3 of file_msa_write. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg3)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 3 of "
              "file_msa_write. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 3 of file_msa_write. "
          "Expected an array of ""std::string");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_msa_write" "', argument " "4"" of type '" "std::string""'"); 
      }
      arg4 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(4), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_msa_write" "', argument " "5"" of type '" "std::string""'"); 
      }
      arg5 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(5), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_msa_write" "', argument " "6"" of type '" "std::string""'"); 
      }
      arg6 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode7 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "file_msa_write" "', argument " "7"" of type '" "unsigned int""'");
    } 
    arg7 = static_cast< unsigned int >(val7);
    {
      try {
        result = (int)my_file_msa_write(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_msa_write__SWIG_1) {
  {
    std::string arg1 ;
    std::vector< std::string > arg2 ;
    std::vector< std::string > arg3 ;
    std::string arg4 ;
    std::string arg5 ;
    std::string arg6 ;
    std::vector< std::string > *v2 ;
    std::vector< std::string > *v3 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: file_msa_write(filename,names,alignment,id,structure,source);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_msa_write" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of file_msa_write. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg2)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "file_msa_write. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of file_msa_write. "
          "Expected an array of ""std::string");
      }
    }
    {
      if (SWIG_ConvertPtr(ST(2),(void **) &v3, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg3 = *v3;
      } else if (SvROK(ST(2))) {
        AV *av = (AV *)SvRV(ST(2));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 3 of file_msa_write. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg3)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 3 of "
              "file_msa_write. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 3 of file_msa_write. "
          "Expected an array of ""std::string");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_msa_write" "', argument " "4"" of type '" "std::string""'"); 
      }
      arg4 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(4), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_msa_write" "', argument " "5"" of type '" "std::string""'"); 
      }
      arg5 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(5), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_msa_write" "', argument " "6"" of type '" "std::string""'"); 
      }
      arg6 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (int)my_file_msa_write(arg1,arg2,arg3,arg4,arg5,arg6);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_msa_write__SWIG_2) {
  {
    std::string arg1 ;
    std::vector< std::string > arg2 ;
    std::vector< std::string > arg3 ;
    std::string arg4 ;
    std::string arg5 ;
    std::vector< std::string > *v2 ;
    std::vector< std::string > *v3 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: file_msa_write(filename,names,alignment,id,structure);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_msa_write" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of file_msa_write. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg2)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "file_msa_write. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of file_msa_write. "
          "Expected an array of ""std::string");
      }
    }
    {
      if (SWIG_ConvertPtr(ST(2),(void **) &v3, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg3 = *v3;
      } else if (SvROK(ST(2))) {
        AV *av = (AV *)SvRV(ST(2));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 3 of file_msa_write. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg3)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 3 of "
              "file_msa_write. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 3 of file_msa_write. "
          "Expected an array of ""std::string");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_msa_write" "', argument " "4"" of type '" "std::string""'"); 
      }
      arg4 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(4), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_msa_write" "', argument " "5"" of type '" "std::string""'"); 
      }
      arg5 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (int)my_file_msa_write(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_msa_write__SWIG_3) {
  {
    std::string arg1 ;
    std::vector< std::string > arg2 ;
    std::vector< std::string > arg3 ;
    std::string arg4 ;
    std::vector< std::string > *v2 ;
    std::vector< std::string > *v3 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: file_msa_write(filename,names,alignment,id);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_msa_write" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of file_msa_write. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg2)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "file_msa_write. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of file_msa_write. "
          "Expected an array of ""std::string");
      }
    }
    {
      if (SWIG_ConvertPtr(ST(2),(void **) &v3, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg3 = *v3;
      } else if (SvROK(ST(2))) {
        AV *av = (AV *)SvRV(ST(2));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 3 of file_msa_write. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg3)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 3 of "
              "file_msa_write. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 3 of file_msa_write. "
          "Expected an array of ""std::string");
      }
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_msa_write" "', argument " "4"" of type '" "std::string""'"); 
      }
      arg4 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (int)my_file_msa_write(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_msa_write__SWIG_4) {
  {
    std::string arg1 ;
    std::vector< std::string > arg2 ;
    std::vector< std::string > arg3 ;
    std::vector< std::string > *v2 ;
    std::vector< std::string > *v3 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: file_msa_write(filename,names,alignment);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_msa_write" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of file_msa_write. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg2)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "file_msa_write. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of file_msa_write. "
          "Expected an array of ""std::string");
      }
    }
    {
      if (SWIG_ConvertPtr(ST(2),(void **) &v3, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg3 = *v3;
      } else if (SvROK(ST(2))) {
        AV *av = (AV *)SvRV(ST(2));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 3 of file_msa_write. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg3)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 3 of "
              "file_msa_write. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 3 of file_msa_write. "
          "Expected an array of ""std::string");
      }
    }
    {
      try {
        result = (int)my_file_msa_write(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_msa_write) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(2),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(2))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(2));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(2),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(2))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(2));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(2),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(2))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(2));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(4), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 6) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(2),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(2))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(2));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(4), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(5), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 7) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(2),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(2))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(2));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(4), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(5), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(6), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_msa_write__SWIG_4); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_msa_write__SWIG_3); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_msa_write__SWIG_2); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_msa_write__SWIG_1); return;
    case 5:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_msa_write__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'file_msa_write'");
  XSRETURN(0);
}


XS(_wrap_file_msa_read__SWIG_0) {
  {
    std::string arg1 ;
    std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
    std::vector< std::string > *arg3 = (std::vector< std::string > *) 0 ;
    std::string *arg4 = (std::string *) 0 ;
    std::string *arg5 = (std::string *) 0 ;
    unsigned int arg6 ;
    std::vector< std::string > junk2 ;
    std::vector< std::string > junk3 ;
    std::string temp4 ;
    int res4 = SWIG_TMPOBJ ;
    std::string temp5 ;
    int res5 = SWIG_TMPOBJ ;
    unsigned int val6 ;
    int ecode6 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    {
      arg2 = &junk2;
    }
    {
      arg3 = &junk3;
    }
    arg4 = &temp4;
    arg5 = &temp5;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: file_msa_read(filename,options);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_msa_read" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "file_msa_read" "', argument " "6"" of type '" "unsigned int""'");
    } 
    arg6 = static_cast< unsigned int >(val6);
    {
      try {
        result = (int)my_file_msa_read(arg1,arg2,arg3,arg4,arg5,arg6);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    {
      SV **svs;
      int i = 0;
      svs = (SV **) malloc(arg2->size() * sizeof(SV *));
      for (std::vector<std::string>::iterator it = arg2->begin(); it != arg2->end(); it++, i++) {
        svs[i] = sv_newmortal();
        sv_setpv((SV*)svs[i], it->c_str());
      }
      ST(argvi) = newRV_noinc((SV*)av_make(arg2->size(), svs));
      sv_2mortal( ST(argvi) );
      free(svs);
      argvi++;
    }
    {
      SV **svs;
      int i = 0;
      svs = (SV **) malloc(arg3->size() * sizeof(SV *));
      for (std::vector<std::string>::iterator it = arg3->begin(); it != arg3->end(); it++, i++) {
        svs[i] = sv_newmortal();
        sv_setpv((SV*)svs[i], it->c_str());
      }
      ST(argvi) = newRV_noinc((SV*)av_make(arg3->size(), svs));
      sv_2mortal( ST(argvi) );
      free(svs);
      argvi++;
    }
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_std__string, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res5)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1((*arg5)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_std__string, new_flags); argvi++  ;
    }
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_msa_read__SWIG_1) {
  {
    std::string arg1 ;
    std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
    std::vector< std::string > *arg3 = (std::vector< std::string > *) 0 ;
    std::string *arg4 = (std::string *) 0 ;
    std::string *arg5 = (std::string *) 0 ;
    std::vector< std::string > junk2 ;
    std::vector< std::string > junk3 ;
    std::string temp4 ;
    int res4 = SWIG_TMPOBJ ;
    std::string temp5 ;
    int res5 = SWIG_TMPOBJ ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    {
      arg2 = &junk2;
    }
    {
      arg3 = &junk3;
    }
    arg4 = &temp4;
    arg5 = &temp5;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: file_msa_read(filename);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_msa_read" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (int)my_file_msa_read(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    {
      SV **svs;
      int i = 0;
      svs = (SV **) malloc(arg2->size() * sizeof(SV *));
      for (std::vector<std::string>::iterator it = arg2->begin(); it != arg2->end(); it++, i++) {
        svs[i] = sv_newmortal();
        sv_setpv((SV*)svs[i], it->c_str());
      }
      ST(argvi) = newRV_noinc((SV*)av_make(arg2->size(), svs));
      sv_2mortal( ST(argvi) );
      free(svs);
      argvi++;
    }
    {
      SV **svs;
      int i = 0;
      svs = (SV **) malloc(arg3->size() * sizeof(SV *));
      for (std::vector<std::string>::iterator it = arg3->begin(); it != arg3->end(); it++, i++) {
        svs[i] = sv_newmortal();
        sv_setpv((SV*)svs[i], it->c_str());
      }
      ST(argvi) = newRV_noinc((SV*)av_make(arg3->size(), svs));
      sv_2mortal( ST(argvi) );
      free(svs);
      argvi++;
    }
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_std__string, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res5)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1((*arg5)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_std__string, new_flags); argvi++  ;
    }
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_msa_read) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_msa_read__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_msa_read__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'file_msa_read'");
  XSRETURN(0);
}


XS(_wrap_file_msa_read_record__SWIG_0) {
  {
    FILE *arg1 = (FILE *) 0 ;
    std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
    std::vector< std::string > *arg3 = (std::vector< std::string > *) 0 ;
    std::string *arg4 = (std::string *) 0 ;
    std::string *arg5 = (std::string *) 0 ;
    unsigned int arg6 ;
    std::vector< std::string > junk2 ;
    std::vector< std::string > junk3 ;
    std::string temp4 ;
    int res4 = SWIG_TMPOBJ ;
    std::string temp5 ;
    int res5 = SWIG_TMPOBJ ;
    unsigned int val6 ;
    int ecode6 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    {
      arg2 = &junk2;
    }
    {
      arg3 = &junk3;
    }
    arg4 = &temp4;
    arg5 = &temp5;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: file_msa_read_record(filehandle,options);");
    }
    {
      if (SvOK(ST(0))) /* check for undef */
      arg1 = PerlIO_findFILE(IoIFP(sv_2io(ST(0))));
      else  arg1 = NULL;
    }
    ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "file_msa_read_record" "', argument " "6"" of type '" "unsigned int""'");
    } 
    arg6 = static_cast< unsigned int >(val6);
    {
      try {
        result = (int)my_file_msa_read_record(arg1,arg2,arg3,arg4,arg5,arg6);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    {
      SV **svs;
      int i = 0;
      svs = (SV **) malloc(arg2->size() * sizeof(SV *));
      for (std::vector<std::string>::iterator it = arg2->begin(); it != arg2->end(); it++, i++) {
        svs[i] = sv_newmortal();
        sv_setpv((SV*)svs[i], it->c_str());
      }
      ST(argvi) = newRV_noinc((SV*)av_make(arg2->size(), svs));
      sv_2mortal( ST(argvi) );
      free(svs);
      argvi++;
    }
    {
      SV **svs;
      int i = 0;
      svs = (SV **) malloc(arg3->size() * sizeof(SV *));
      for (std::vector<std::string>::iterator it = arg3->begin(); it != arg3->end(); it++, i++) {
        svs[i] = sv_newmortal();
        sv_setpv((SV*)svs[i], it->c_str());
      }
      ST(argvi) = newRV_noinc((SV*)av_make(arg3->size(), svs));
      sv_2mortal( ST(argvi) );
      free(svs);
      argvi++;
    }
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_std__string, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res5)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1((*arg5)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_std__string, new_flags); argvi++  ;
    }
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_msa_read_record__SWIG_1) {
  {
    FILE *arg1 = (FILE *) 0 ;
    std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
    std::vector< std::string > *arg3 = (std::vector< std::string > *) 0 ;
    std::string *arg4 = (std::string *) 0 ;
    std::string *arg5 = (std::string *) 0 ;
    std::vector< std::string > junk2 ;
    std::vector< std::string > junk3 ;
    std::string temp4 ;
    int res4 = SWIG_TMPOBJ ;
    std::string temp5 ;
    int res5 = SWIG_TMPOBJ ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    {
      arg2 = &junk2;
    }
    {
      arg3 = &junk3;
    }
    arg4 = &temp4;
    arg5 = &temp5;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: file_msa_read_record(filehandle);");
    }
    {
      if (SvOK(ST(0))) /* check for undef */
      arg1 = PerlIO_findFILE(IoIFP(sv_2io(ST(0))));
      else  arg1 = NULL;
    }
    {
      try {
        result = (int)my_file_msa_read_record(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    {
      SV **svs;
      int i = 0;
      svs = (SV **) malloc(arg2->size() * sizeof(SV *));
      for (std::vector<std::string>::iterator it = arg2->begin(); it != arg2->end(); it++, i++) {
        svs[i] = sv_newmortal();
        sv_setpv((SV*)svs[i], it->c_str());
      }
      ST(argvi) = newRV_noinc((SV*)av_make(arg2->size(), svs));
      sv_2mortal( ST(argvi) );
      free(svs);
      argvi++;
    }
    {
      SV **svs;
      int i = 0;
      svs = (SV **) malloc(arg3->size() * sizeof(SV *));
      for (std::vector<std::string>::iterator it = arg3->begin(); it != arg3->end(); it++, i++) {
        svs[i] = sv_newmortal();
        sv_setpv((SV*)svs[i], it->c_str());
      }
      ST(argvi) = newRV_noinc((SV*)av_make(arg3->size(), svs));
      sv_2mortal( ST(argvi) );
      free(svs);
      argvi++;
    }
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_std__string, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res5)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_std_string  SWIG_PERL_CALL_ARGS_1((*arg5)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_std__string, new_flags); argvi++  ;
    }
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_msa_read_record) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          if (SvOK(ST(0)))
          _v = (sv_2io(ST(0))) ? 1 : 0;
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          if (SvOK(ST(0)))
          _v = (sv_2io(ST(0))) ? 1 : 0;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_msa_read_record__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_msa_read_record__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'file_msa_read_record'");
  XSRETURN(0);
}


XS(_wrap_seq_encode__SWIG_0) {
  {
    std::string arg1 ;
    vrna_md_t *arg2 = (vrna_md_t *) 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    std::vector< int > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: seq_encode(sequence,md_p);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "seq_encode" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "seq_encode" "', argument " "2"" of type '" "vrna_md_t *""'"); 
    }
    arg2 = reinterpret_cast< vrna_md_t * >(argp2);
    {
      try {
        result = my_seq_encode(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        sv_setiv(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_seq_encode__SWIG_1) {
  {
    std::string arg1 ;
    int argvi = 0;
    std::vector< int > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: seq_encode(sequence);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "seq_encode" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = my_seq_encode(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        sv_setiv(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_seq_encode) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_vrna_md_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_seq_encode__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_seq_encode__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'seq_encode'");
  XSRETURN(0);
}


XS(_wrap_new_cmd) {
  {
    int argvi = 0;
    vrna_command_s *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_cmd();");
    }
    {
      try {
        result = (vrna_command_s *)new_vrna_command_s();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_command_s, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_cmd) {
  {
    vrna_command_s *arg1 = (vrna_command_s *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_cmd(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_command_s, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_cmd" "', argument " "1"" of type '" "vrna_command_s *""'"); 
    }
    arg1 = reinterpret_cast< vrna_command_s * >(argp1);
    {
      try {
        delete_vrna_command_s(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_commands_read__SWIG_0) {
  {
    std::string arg1 ;
    unsigned int arg2 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    vrna_command_s *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: file_commands_read(filename,options);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_commands_read" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "file_commands_read" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try {
        result = (vrna_command_s *)my_file_commands_read(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_command_s, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_commands_read__SWIG_1) {
  {
    std::string arg1 ;
    int argvi = 0;
    vrna_command_s *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: file_commands_read(filename);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "file_commands_read" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (vrna_command_s *)my_file_commands_read(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_command_s, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_file_commands_read) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_commands_read__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_file_commands_read__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'file_commands_read'");
  XSRETURN(0);
}


XS(_wrap_enumerate_necklaces) {
  {
    std::vector< unsigned int > arg1 ;
    std::vector< unsigned int > *v1 ;
    int argvi = 0;
    std::vector< std::vector< int > > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: enumerate_necklaces(entity_counts);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_unsigned_int_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of enumerate_necklaces. "
          "Expected an array of ""unsigned int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg1)->push_back((unsigned int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "enumerate_necklaces. "
              "Expected an array of ""unsigned int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of enumerate_necklaces. "
          "Expected an array of ""unsigned int");
      }
    }
    {
      try {
        result = my_enumerate_necklaces(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      AV *arr = newAV();
      for(unsigned int i = 0; i < (&result)->size(); i++) {
        AV *vec = newAV();
        for(unsigned int j = 0; j < result[i].size(); j++) {
          SV *v = newSViv(result[i][j]);
          if (!av_store(vec, j, v))
          SvREFCNT_dec(v);
        }
        /* store reference to array */
        av_store(arr, i, newRV_noinc((SV*) vec));
      }
      
      ST(argvi) = newRV_noinc((SV*) arr);
      sv_2mortal( ST(argvi) );
      argvi++;
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_rotational_symmetry__SWIG_0) {
  {
    std::vector< unsigned int > arg1 ;
    std::vector< unsigned int > *v1 ;
    int argvi = 0;
    std::vector< unsigned int > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: rotational_symmetry(string);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_unsigned_int_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of rotational_symmetry. "
          "Expected an array of ""unsigned int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg1)->push_back((unsigned int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "rotational_symmetry. "
              "Expected an array of ""unsigned int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of rotational_symmetry. "
          "Expected an array of ""unsigned int");
      }
    }
    {
      try {
        result = my_rotational_symmetry(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        sv_setiv(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_rotational_symmetry__SWIG_1) {
  {
    std::string arg1 ;
    int argvi = 0;
    std::vector< unsigned int > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: rotational_symmetry(string);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "rotational_symmetry" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = my_rotational_symmetry(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        sv_setiv(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_rotational_symmetry) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< unsigned int >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_unsigned_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_rotational_symmetry__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_rotational_symmetry__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'rotational_symmetry'");
  XSRETURN(0);
}


XS(_wrap_duplexT_i_set) {
  {
    duplexT *arg1 = (duplexT *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: duplexT_i_set(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_duplexT, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "duplexT_i_set" "', argument " "1"" of type '" "duplexT *""'"); 
    }
    arg1 = reinterpret_cast< duplexT * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "duplexT_i_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->i = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_duplexT_i_get) {
  {
    duplexT *arg1 = (duplexT *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: duplexT_i_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_duplexT, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "duplexT_i_get" "', argument " "1"" of type '" "duplexT *""'"); 
    }
    arg1 = reinterpret_cast< duplexT * >(argp1);
    result = (int) ((arg1)->i);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_duplexT_j_set) {
  {
    duplexT *arg1 = (duplexT *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: duplexT_j_set(self,j);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_duplexT, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "duplexT_j_set" "', argument " "1"" of type '" "duplexT *""'"); 
    }
    arg1 = reinterpret_cast< duplexT * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "duplexT_j_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->j = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_duplexT_j_get) {
  {
    duplexT *arg1 = (duplexT *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: duplexT_j_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_duplexT, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "duplexT_j_get" "', argument " "1"" of type '" "duplexT *""'"); 
    }
    arg1 = reinterpret_cast< duplexT * >(argp1);
    result = (int) ((arg1)->j);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_duplexT_structure_set) {
  {
    duplexT *arg1 = (duplexT *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: duplexT_structure_set(self,structure);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_duplexT, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "duplexT_structure_set" "', argument " "1"" of type '" "duplexT *""'"); 
    }
    arg1 = reinterpret_cast< duplexT * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "duplexT_structure_set" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    if (arg1->structure) delete[] arg1->structure;
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
      arg1->structure = (char *)reinterpret_cast< char* >(memcpy(new char[size], reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
    } else {
      arg1->structure = 0;
    }
    ST(argvi) = &PL_sv_undef;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_duplexT_structure_get) {
  {
    duplexT *arg1 = (duplexT *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: duplexT_structure_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_duplexT, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "duplexT_structure_get" "', argument " "1"" of type '" "duplexT *""'"); 
    }
    arg1 = reinterpret_cast< duplexT * >(argp1);
    result = (char *) ((arg1)->structure);
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_duplexT_energy_set) {
  {
    duplexT *arg1 = (duplexT *) 0 ;
    float arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: duplexT_energy_set(self,energy);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_duplexT, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "duplexT_energy_set" "', argument " "1"" of type '" "duplexT *""'"); 
    }
    arg1 = reinterpret_cast< duplexT * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "duplexT_energy_set" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
    if (arg1) (arg1)->energy = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_duplexT_energy_get) {
  {
    duplexT *arg1 = (duplexT *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: duplexT_energy_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_duplexT, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "duplexT_energy_get" "', argument " "1"" of type '" "duplexT *""'"); 
    }
    arg1 = reinterpret_cast< duplexT * >(argp1);
    result = (float) ((arg1)->energy);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_duplexT) {
  {
    duplexT *arg1 = (duplexT *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_duplexT(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_duplexT, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_duplexT" "', argument " "1"" of type '" "duplexT *""'"); 
    }
    arg1 = reinterpret_cast< duplexT * >(argp1);
    {
      try {
        delete_duplexT(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_duplex_list_t_i_set) {
  {
    duplex_list_t *arg1 = (duplex_list_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: duplex_list_t_i_set(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_duplex_list_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "duplex_list_t_i_set" "', argument " "1"" of type '" "duplex_list_t *""'"); 
    }
    arg1 = reinterpret_cast< duplex_list_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "duplex_list_t_i_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->i = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_duplex_list_t_i_get) {
  {
    duplex_list_t *arg1 = (duplex_list_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: duplex_list_t_i_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_duplex_list_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "duplex_list_t_i_get" "', argument " "1"" of type '" "duplex_list_t *""'"); 
    }
    arg1 = reinterpret_cast< duplex_list_t * >(argp1);
    result = (int) ((arg1)->i);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_duplex_list_t_j_set) {
  {
    duplex_list_t *arg1 = (duplex_list_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: duplex_list_t_j_set(self,j);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_duplex_list_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "duplex_list_t_j_set" "', argument " "1"" of type '" "duplex_list_t *""'"); 
    }
    arg1 = reinterpret_cast< duplex_list_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "duplex_list_t_j_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->j = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_duplex_list_t_j_get) {
  {
    duplex_list_t *arg1 = (duplex_list_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: duplex_list_t_j_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_duplex_list_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "duplex_list_t_j_get" "', argument " "1"" of type '" "duplex_list_t *""'"); 
    }
    arg1 = reinterpret_cast< duplex_list_t * >(argp1);
    result = (int) ((arg1)->j);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_duplex_list_t_energy_set) {
  {
    duplex_list_t *arg1 = (duplex_list_t *) 0 ;
    float arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: duplex_list_t_energy_set(self,energy);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_duplex_list_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "duplex_list_t_energy_set" "', argument " "1"" of type '" "duplex_list_t *""'"); 
    }
    arg1 = reinterpret_cast< duplex_list_t * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "duplex_list_t_energy_set" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
    if (arg1) (arg1)->energy = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_duplex_list_t_energy_get) {
  {
    duplex_list_t *arg1 = (duplex_list_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: duplex_list_t_energy_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_duplex_list_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "duplex_list_t_energy_get" "', argument " "1"" of type '" "duplex_list_t *""'"); 
    }
    arg1 = reinterpret_cast< duplex_list_t * >(argp1);
    result = (float) ((arg1)->energy);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_duplex_list_t_structure_set) {
  {
    duplex_list_t *arg1 = (duplex_list_t *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: duplex_list_t_structure_set(self,structure);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_duplex_list_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "duplex_list_t_structure_set" "', argument " "1"" of type '" "duplex_list_t *""'"); 
    }
    arg1 = reinterpret_cast< duplex_list_t * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "duplex_list_t_structure_set" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    if (arg1->structure) delete[] arg1->structure;
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
      arg1->structure = (char *)reinterpret_cast< char* >(memcpy(new char[size], reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
    } else {
      arg1->structure = 0;
    }
    ST(argvi) = &PL_sv_undef;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_duplex_list_t_structure_get) {
  {
    duplex_list_t *arg1 = (duplex_list_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: duplex_list_t_structure_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_duplex_list_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "duplex_list_t_structure_get" "', argument " "1"" of type '" "duplex_list_t *""'"); 
    }
    arg1 = reinterpret_cast< duplex_list_t * >(argp1);
    result = (char *) ((arg1)->structure);
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_duplex_list_t) {
  {
    duplex_list_t *arg1 = (duplex_list_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_duplex_list_t(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_duplex_list_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_duplex_list_t" "', argument " "1"" of type '" "duplex_list_t *""'"); 
    }
    arg1 = reinterpret_cast< duplex_list_t * >(argp1);
    {
      try {
        delete_duplex_list_t(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_duplex_list_t) {
  {
    int argvi = 0;
    duplex_list_t *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_duplex_list_t();");
    }
    {
      try {
        result = (duplex_list_t *)new duplex_list_t();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duplex_list_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_DuplexVector__SWIG_0) {
  {
    unsigned int arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::vector< duplex_list_t > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_DuplexVector(size);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DuplexVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      try {
        result = (std::vector< duplex_list_t > *)new std::vector< duplex_list_t >(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_duplex_list_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DuplexVector__SWIG_1) {
  {
    int argvi = 0;
    std::vector< duplex_list_t > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_DuplexVector();");
    }
    {
      try {
        result = (std::vector< duplex_list_t > *)new std::vector< duplex_list_t >();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_duplex_list_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_DuplexVector__SWIG_2) {
  {
    unsigned int arg1 ;
    duplex_list_t *arg2 = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    std::vector< duplex_list_t > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_DuplexVector(size,value);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DuplexVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_duplex_list_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DuplexVector" "', argument " "2"" of type '" "duplex_list_t const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DuplexVector" "', argument " "2"" of type '" "duplex_list_t const &""'"); 
    }
    arg2 = reinterpret_cast< duplex_list_t * >(argp2);
    {
      try {
        result = (std::vector< duplex_list_t > *)new std::vector< duplex_list_t >(arg1,(duplex_list_t const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_duplex_list_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DuplexVector__SWIG_3) {
  {
    std::vector< duplex_list_t > *arg1 = 0 ;
    std::vector< duplex_list_t > temp1 ;
    std::vector< duplex_list_t > *v1 ;
    int argvi = 0;
    std::vector< duplex_list_t > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_DuplexVector(other);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_duplex_list_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_DuplexVector. "
          "Expected an array of " "duplex_list_t");
        SV **tv;
        I32 len = av_len(av) + 1;
        duplex_list_t* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_duplex_list_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_DuplexVector. "
              "Expected an array of " "duplex_list_t");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_DuplexVector. "
          "Expected an array of " "duplex_list_t");
      }
    }
    {
      try {
        result = (std::vector< duplex_list_t > *)new std::vector< duplex_list_t >((std::vector< duplex_list_t > const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_duplex_list_t_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_DuplexVector) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< duplex_list_t >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_duplex_list_t_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  duplex_list_t* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_duplex_list_t,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_duplex_list_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_DuplexVector__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_DuplexVector__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_DuplexVector__SWIG_3); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_DuplexVector__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_DuplexVector'");
  XSRETURN(0);
}


XS(_wrap_DuplexVector_size) {
  {
    std::vector< duplex_list_t > *arg1 = (std::vector< duplex_list_t > *) 0 ;
    std::vector< duplex_list_t > temp1 ;
    std::vector< duplex_list_t > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DuplexVector_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_duplex_list_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of DuplexVector_size. "
          "Expected an array of " "duplex_list_t");
        SV **tv;
        I32 len = av_len(av) + 1;
        duplex_list_t* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_duplex_list_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "DuplexVector_size. "
              "Expected an array of " "duplex_list_t");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of DuplexVector_size. "
          "Expected an array of " "duplex_list_t");
      }
    }
    {
      try {
        result = (unsigned int)((std::vector< duplex_list_t > const *)arg1)->size();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DuplexVector_empty) {
  {
    std::vector< duplex_list_t > *arg1 = (std::vector< duplex_list_t > *) 0 ;
    std::vector< duplex_list_t > temp1 ;
    std::vector< duplex_list_t > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DuplexVector_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_duplex_list_t_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of DuplexVector_empty. "
          "Expected an array of " "duplex_list_t");
        SV **tv;
        I32 len = av_len(av) + 1;
        duplex_list_t* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_duplex_list_t,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "DuplexVector_empty. "
              "Expected an array of " "duplex_list_t");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of DuplexVector_empty. "
          "Expected an array of " "duplex_list_t");
      }
    }
    {
      try {
        result = (bool)((std::vector< duplex_list_t > const *)arg1)->empty();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DuplexVector_clear) {
  {
    std::vector< duplex_list_t > *arg1 = (std::vector< duplex_list_t > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DuplexVector_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_duplex_list_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DuplexVector_clear" "', argument " "1"" of type '" "std::vector< duplex_list_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< duplex_list_t > * >(argp1);
    {
      try {
        (arg1)->clear();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DuplexVector_push) {
  {
    std::vector< duplex_list_t > *arg1 = (std::vector< duplex_list_t > *) 0 ;
    duplex_list_t *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DuplexVector_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_duplex_list_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DuplexVector_push" "', argument " "1"" of type '" "std::vector< duplex_list_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< duplex_list_t > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_duplex_list_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DuplexVector_push" "', argument " "2"" of type '" "duplex_list_t const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DuplexVector_push" "', argument " "2"" of type '" "duplex_list_t const &""'"); 
    }
    arg2 = reinterpret_cast< duplex_list_t * >(argp2);
    {
      try {
        (arg1)->push_back((duplex_list_t const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DuplexVector_pop) {
  {
    std::vector< duplex_list_t > *arg1 = (std::vector< duplex_list_t > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    duplex_list_t result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: DuplexVector_pop(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_duplex_list_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DuplexVector_pop" "', argument " "1"" of type '" "std::vector< duplex_list_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< duplex_list_t > * >(argp1);
    {
      try {
        try {
          result = std_vector_Sl_duplex_list_t_Sg__pop(arg1);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj((new duplex_list_t(static_cast< const duplex_list_t& >(result))), SWIGTYPE_p_duplex_list_t, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_DuplexVector_get) {
  {
    std::vector< duplex_list_t > *arg1 = (std::vector< duplex_list_t > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    duplex_list_t *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: DuplexVector_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_duplex_list_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DuplexVector_get" "', argument " "1"" of type '" "std::vector< duplex_list_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< duplex_list_t > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DuplexVector_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        try {
          result = (duplex_list_t *) &std_vector_Sl_duplex_list_t_Sg__get(arg1,arg2);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_duplex_list_t, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_DuplexVector_set) {
  {
    std::vector< duplex_list_t > *arg1 = (std::vector< duplex_list_t > *) 0 ;
    int arg2 ;
    duplex_list_t *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 ;
    int res3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: DuplexVector_set(self,i,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_duplex_list_t_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DuplexVector_set" "', argument " "1"" of type '" "std::vector< duplex_list_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< duplex_list_t > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DuplexVector_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3, SWIGTYPE_p_duplex_list_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DuplexVector_set" "', argument " "3"" of type '" "duplex_list_t const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DuplexVector_set" "', argument " "3"" of type '" "duplex_list_t const &""'"); 
    }
    arg3 = reinterpret_cast< duplex_list_t * >(argp3);
    {
      try {
        try {
          std_vector_Sl_duplex_list_t_Sg__set(arg1,arg2,(duplex_list_t const &)*arg3);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_DuplexVector) {
  {
    std::vector< duplex_list_t > *arg1 = (std::vector< duplex_list_t > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_DuplexVector(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_duplex_list_t_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DuplexVector" "', argument " "1"" of type '" "std::vector< duplex_list_t > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< duplex_list_t > * >(argp1);
    {
      try {
        delete arg1;
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_duplexfold) {
  {
    std::string arg1 ;
    std::string arg2 ;
    int argvi = 0;
    duplexT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: duplexfold(s1,s2);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "duplexfold" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "duplexfold" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = my_duplexfold(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj((new duplexT(static_cast< const duplexT& >(result))), SWIGTYPE_p_duplexT, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_duplex_subopt) {
  {
    std::string arg1 ;
    std::string arg2 ;
    int arg3 ;
    int arg4 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    std::vector< duplex_list_t > result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: duplex_subopt(s1,s2,delta,w);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "duplex_subopt" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "duplex_subopt" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "duplex_subopt" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "duplex_subopt" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      try {
        result = my_duplex_subopt(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        duplex_list_t* ptr = new duplex_list_t(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_duplex_list_t, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_aliduplexfold) {
  {
    std::vector< std::string > arg1 ;
    std::vector< std::string > arg2 ;
    std::vector< std::string > *v1 ;
    std::vector< std::string > *v2 ;
    int argvi = 0;
    duplexT result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: aliduplexfold(alignment1,alignment2);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of aliduplexfold. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "aliduplexfold. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of aliduplexfold. "
          "Expected an array of ""std::string");
      }
    }
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of aliduplexfold. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg2)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "aliduplexfold. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of aliduplexfold. "
          "Expected an array of ""std::string");
      }
    }
    {
      try {
        result = my_aliduplexfold(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj((new duplexT(static_cast< const duplexT& >(result))), SWIGTYPE_p_duplexT, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_aliduplex_subopt) {
  {
    std::vector< std::string > arg1 ;
    std::vector< std::string > arg2 ;
    int arg3 ;
    int arg4 ;
    std::vector< std::string > *v1 ;
    std::vector< std::string > *v2 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    std::vector< duplex_list_t > result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: aliduplex_subopt(alignment1,alignment2,delta,w);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of aliduplex_subopt. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "aliduplex_subopt. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of aliduplex_subopt. "
          "Expected an array of ""std::string");
      }
    }
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of aliduplex_subopt. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg2)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "aliduplex_subopt. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of aliduplex_subopt. "
          "Expected an array of ""std::string");
      }
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "aliduplex_subopt" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "aliduplex_subopt" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      try {
        result = aliduplex_subopt(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        duplex_list_t* ptr = new duplex_list_t(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_duplex_list_t, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_move_pos_5_set) {
  {
    vrna_move_t *arg1 = (vrna_move_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: move_pos_5_set(self,pos_5);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_move_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "move_pos_5_set" "', argument " "1"" of type '" "vrna_move_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_move_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "move_pos_5_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->pos_5 = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_move_pos_5_get) {
  {
    vrna_move_t *arg1 = (vrna_move_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: move_pos_5_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_move_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "move_pos_5_get" "', argument " "1"" of type '" "vrna_move_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_move_t * >(argp1);
    result = (int) ((arg1)->pos_5);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_move_pos_3_set) {
  {
    vrna_move_t *arg1 = (vrna_move_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: move_pos_3_set(self,pos_3);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_move_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "move_pos_3_set" "', argument " "1"" of type '" "vrna_move_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_move_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "move_pos_3_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->pos_3 = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_move_pos_3_get) {
  {
    vrna_move_t *arg1 = (vrna_move_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: move_pos_3_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_move_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "move_pos_3_get" "', argument " "1"" of type '" "vrna_move_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_move_t * >(argp1);
    result = (int) ((arg1)->pos_3);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_move__SWIG_0) {
  {
    int arg1 ;
    int arg2 ;
    int val1 ;
    int ecode1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    vrna_move_t *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_move(pos_5,pos_3);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_move" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_move" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        result = (vrna_move_t *)new_vrna_move_t__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_move_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_move__SWIG_1) {
  {
    int arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    vrna_move_t *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_move(pos_5);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_move" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    {
      try {
        result = (vrna_move_t *)new_vrna_move_t__SWIG_0(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_move_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_move__SWIG_2) {
  {
    int argvi = 0;
    vrna_move_t *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_move();");
    }
    {
      try {
        result = (vrna_move_t *)new_vrna_move_t__SWIG_0();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_move_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_move) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_move__SWIG_2); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_move__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_move__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'new_move'");
  XSRETURN(0);
}


XS(_wrap_delete_move) {
  {
    vrna_move_t *arg1 = (vrna_move_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_move(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_move_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_move" "', argument " "1"" of type '" "vrna_move_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_move_t * >(argp1);
    {
      try {
        delete_vrna_move_t(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_move_is_removal) {
  {
    vrna_move_t *arg1 = (vrna_move_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: move_is_removal(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_move_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "move_is_removal" "', argument " "1"" of type '" "vrna_move_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_move_t * >(argp1);
    {
      try {
        result = (int)vrna_move_t_is_removal(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_move_is_insertion) {
  {
    vrna_move_t *arg1 = (vrna_move_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: move_is_insertion(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_move_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "move_is_insertion" "', argument " "1"" of type '" "vrna_move_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_move_t * >(argp1);
    {
      try {
        result = (int)vrna_move_t_is_insertion(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_move_is_shift) {
  {
    vrna_move_t *arg1 = (vrna_move_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: move_is_shift(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_move_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "move_is_shift" "', argument " "1"" of type '" "vrna_move_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_move_t * >(argp1);
    {
      try {
        result = (int)vrna_move_t_is_shift(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_move_compare__SWIG_0) {
  {
    vrna_move_t *arg1 = (vrna_move_t *) 0 ;
    vrna_move_t *arg2 = (vrna_move_t *) 0 ;
    std::vector< int > arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    std::vector< int > *v3 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: move_compare(self,b,pt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_move_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "move_compare" "', argument " "1"" of type '" "vrna_move_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_move_t * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_vrna_move_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "move_compare" "', argument " "2"" of type '" "vrna_move_t const *""'"); 
    }
    arg2 = reinterpret_cast< vrna_move_t * >(argp2);
    {
      if (SWIG_ConvertPtr(ST(2),(void **) &v3, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg3 = *v3;
      } else if (SvROK(ST(2))) {
        AV *av = (AV *)SvRV(ST(2));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 3 of move_compare. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg3)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 3 of "
              "move_compare. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 3 of move_compare. "
          "Expected an array of ""int");
      }
    }
    {
      try {
        result = (int)vrna_move_t_compare__SWIG_0(arg1,(vrna_move_t const *)arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_move_compare__SWIG_1) {
  {
    vrna_move_t *arg1 = (vrna_move_t *) 0 ;
    vrna_move_t *arg2 = (vrna_move_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: move_compare(self,b);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_move_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "move_compare" "', argument " "1"" of type '" "vrna_move_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_move_t * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_vrna_move_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "move_compare" "', argument " "2"" of type '" "vrna_move_t const *""'"); 
    }
    arg2 = reinterpret_cast< vrna_move_t * >(argp2);
    {
      try {
        result = (int)vrna_move_t_compare__SWIG_0(arg1,(vrna_move_t const *)arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_move_compare) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_move_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_vrna_move_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_move_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_vrna_move_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< int >* v;
            if (SWIG_ConvertPtr(ST(2),(void **) &v, 
                SWIGTYPE_p_std__vectorT_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(2))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(2));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_move_compare__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_move_compare__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'move_compare'");
  XSRETURN(0);
}


XS(_wrap_path_type_set) {
  {
    vrna_path_t *arg1 = (vrna_path_t *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: path_type_set(self,type);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_path_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "path_type_set" "', argument " "1"" of type '" "vrna_path_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_path_t * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "path_type_set" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    if (arg1) (arg1)->type = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_path_type_get) {
  {
    vrna_path_t *arg1 = (vrna_path_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: path_type_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_path_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "path_type_get" "', argument " "1"" of type '" "vrna_path_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_path_t * >(argp1);
    result = (unsigned int) ((arg1)->type);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_path_en_set) {
  {
    vrna_path_t *arg1 = (vrna_path_t *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: path_en_set(self,en);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_path_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "path_en_set" "', argument " "1"" of type '" "vrna_path_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_path_t * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "path_en_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (arg1) (arg1)->en = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_path_en_get) {
  {
    vrna_path_t *arg1 = (vrna_path_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: path_en_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_path_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "path_en_get" "', argument " "1"" of type '" "vrna_path_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_path_t * >(argp1);
    result = (double) ((arg1)->en);
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_path_s_set) {
  {
    vrna_path_t *arg1 = (vrna_path_t *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: path_s_set(self,s);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_path_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "path_s_set" "', argument " "1"" of type '" "vrna_path_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_path_t * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "path_s_set" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    if (arg1->s) delete[] arg1->s;
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
      arg1->s = (char *)reinterpret_cast< char* >(memcpy(new char[size], reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
    } else {
      arg1->s = 0;
    }
    ST(argvi) = &PL_sv_undef;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_path_s_get) {
  {
    vrna_path_t *arg1 = (vrna_path_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: path_s_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_path_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "path_s_get" "', argument " "1"" of type '" "vrna_path_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_path_t * >(argp1);
    result = (char *) ((arg1)->s);
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_path_move_set) {
  {
    vrna_path_t *arg1 = (vrna_path_t *) 0 ;
    vrna_move_t *arg2 = (vrna_move_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: path_move_set(self,move);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_path_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "path_move_set" "', argument " "1"" of type '" "vrna_path_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_path_t * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_vrna_move_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "path_move_set" "', argument " "2"" of type '" "vrna_move_t *""'"); 
    }
    arg2 = reinterpret_cast< vrna_move_t * >(argp2);
    if (arg1) (arg1)->move = *arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_path_move_get) {
  {
    vrna_path_t *arg1 = (vrna_path_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    vrna_move_t *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: path_move_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_path_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "path_move_get" "', argument " "1"" of type '" "vrna_path_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_path_t * >(argp1);
    result = (vrna_move_t *)& ((arg1)->move);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_move_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_path__SWIG_0) {
  {
    double arg1 ;
    std::string arg2 ;
    vrna_move_t *arg3 = (vrna_move_t *) 0 ;
    unsigned int arg4 ;
    double val1 ;
    int ecode1 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    vrna_path_t *result = 0 ;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: new_path(en,s,move,type);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_path" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_path" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_vrna_move_t, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_path" "', argument " "3"" of type '" "vrna_move_t *""'"); 
    }
    arg3 = reinterpret_cast< vrna_move_t * >(argp3);
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_path" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    {
      try {
        result = (vrna_path_t *)new_vrna_path_t__SWIG_0(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_path_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_path__SWIG_1) {
  {
    double arg1 ;
    std::string arg2 ;
    vrna_move_t *arg3 = (vrna_move_t *) 0 ;
    double val1 ;
    int ecode1 = 0 ;
    void *argp3 = 0 ;
    int res3 = 0 ;
    int argvi = 0;
    vrna_path_t *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: new_path(en,s,move);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_path" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_path" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    res3 = SWIG_ConvertPtr(ST(2), &argp3,SWIGTYPE_p_vrna_move_t, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_path" "', argument " "3"" of type '" "vrna_move_t *""'"); 
    }
    arg3 = reinterpret_cast< vrna_move_t * >(argp3);
    {
      try {
        result = (vrna_path_t *)new_vrna_path_t__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_path_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_path__SWIG_2) {
  {
    double arg1 ;
    std::string arg2 ;
    double val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    vrna_path_t *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_path(en,s);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_path" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_path" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (vrna_path_t *)new_vrna_path_t__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_path_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_path__SWIG_3) {
  {
    double arg1 ;
    double val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    vrna_path_t *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_path(en);");
    }
    ecode1 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_path" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
    {
      try {
        result = (vrna_path_t *)new_vrna_path_t__SWIG_0(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_path_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_path) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(2), &vptr, SWIGTYPE_p_vrna_move_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(2), &vptr, SWIGTYPE_p_vrna_move_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_path__SWIG_3); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_path__SWIG_2); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_path__SWIG_1); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_path__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'new_path'");
  XSRETURN(0);
}


XS(_wrap_delete_path) {
  {
    vrna_path_t *arg1 = (vrna_path_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_path(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_path_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_path" "', argument " "1"" of type '" "vrna_path_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_path_t * >(argp1);
    {
      try {
        delete_vrna_path_t(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_path_options) {
  {
    int argvi = 0;
    vrna_path_options_s *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_path_options();");
    }
    {
      try {
        result = (vrna_path_options_s *)new_vrna_path_options_s();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_path_options_s, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_path_options) {
  {
    vrna_path_options_s *arg1 = (vrna_path_options_s *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_path_options(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_path_options_s, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_path_options" "', argument " "1"" of type '" "vrna_path_options_s *""'"); 
    }
    arg1 = reinterpret_cast< vrna_path_options_s * >(argp1);
    {
      try {
        delete_vrna_path_options_s(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_path_options_findpath__SWIG_0) {
  {
    int arg1 ;
    unsigned int arg2 ;
    int val1 ;
    int ecode1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    vrna_path_options_s *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: path_options_findpath(width,type);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "path_options_findpath" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "path_options_findpath" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try {
        result = (vrna_path_options_s *)my_path_options_findpath(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_path_options_s, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_path_options_findpath__SWIG_1) {
  {
    int arg1 ;
    int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    vrna_path_options_s *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: path_options_findpath(width);");
    }
    ecode1 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "path_options_findpath" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
    {
      try {
        result = (vrna_path_options_s *)my_path_options_findpath(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_path_options_s, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_path_options_findpath__SWIG_2) {
  {
    int argvi = 0;
    vrna_path_options_s *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: path_options_findpath();");
    }
    {
      try {
        result = (vrna_path_options_s *)my_path_options_findpath();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_path_options_s, 0 | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_path_options_findpath) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_path_options_findpath__SWIG_2); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_path_options_findpath__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_path_options_findpath__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'path_options_findpath'");
  XSRETURN(0);
}


XS(_wrap_get_path) {
  {
    std::string arg1 ;
    std::string arg2 ;
    std::string arg3 ;
    int arg4 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    std::vector< vrna_path_t > result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: get_path(seq,s1,s2,maxkeep);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "get_path" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "get_path" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "get_path" "', argument " "3"" of type '" "std::string""'"); 
      }
      arg3 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "get_path" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      try {
        result = my_get_path(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        vrna_path_t* ptr = new vrna_path_t(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_vrna_path_t, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_find_saddle) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    int arg4 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: find_saddle(seq,s1,s2,width);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "find_saddle" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "find_saddle" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "find_saddle" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "find_saddle" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      try {
        result = (int)find_saddle((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_free_path) {
  {
    vrna_path_t *arg1 = (vrna_path_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: free_path(path);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_path_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "free_path" "', argument " "1"" of type '" "vrna_path_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_path_t * >(argp1);
    {
      try {
        free_path(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_heat_capacity_result_temperature_set) {
  {
    heat_capacity_result *arg1 = (heat_capacity_result *) 0 ;
    float arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: heat_capacity_result_temperature_set(self,temperature);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_heat_capacity_result, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "heat_capacity_result_temperature_set" "', argument " "1"" of type '" "heat_capacity_result *""'"); 
    }
    arg1 = reinterpret_cast< heat_capacity_result * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "heat_capacity_result_temperature_set" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
    if (arg1) (arg1)->temperature = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_heat_capacity_result_temperature_get) {
  {
    heat_capacity_result *arg1 = (heat_capacity_result *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: heat_capacity_result_temperature_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_heat_capacity_result, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "heat_capacity_result_temperature_get" "', argument " "1"" of type '" "heat_capacity_result *""'"); 
    }
    arg1 = reinterpret_cast< heat_capacity_result * >(argp1);
    result = (float) ((arg1)->temperature);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_heat_capacity_result_heat_capacity_set) {
  {
    heat_capacity_result *arg1 = (heat_capacity_result *) 0 ;
    float arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: heat_capacity_result_heat_capacity_set(self,heat_capacity);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_heat_capacity_result, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "heat_capacity_result_heat_capacity_set" "', argument " "1"" of type '" "heat_capacity_result *""'"); 
    }
    arg1 = reinterpret_cast< heat_capacity_result * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "heat_capacity_result_heat_capacity_set" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
    if (arg1) (arg1)->heat_capacity = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_heat_capacity_result_heat_capacity_get) {
  {
    heat_capacity_result *arg1 = (heat_capacity_result *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: heat_capacity_result_heat_capacity_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_heat_capacity_result, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "heat_capacity_result_heat_capacity_get" "', argument " "1"" of type '" "heat_capacity_result *""'"); 
    }
    arg1 = reinterpret_cast< heat_capacity_result * >(argp1);
    result = (float) ((arg1)->heat_capacity);
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_heat_capacity_result) {
  {
    int argvi = 0;
    heat_capacity_result *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_heat_capacity_result();");
    }
    {
      try {
        result = (heat_capacity_result *)new heat_capacity_result();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_heat_capacity_result, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_heat_capacity_result) {
  {
    heat_capacity_result *arg1 = (heat_capacity_result *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_heat_capacity_result(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_heat_capacity_result, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_heat_capacity_result" "', argument " "1"" of type '" "heat_capacity_result *""'"); 
    }
    arg1 = reinterpret_cast< heat_capacity_result * >(argp1);
    {
      try {
        delete arg1;
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_HeatCapacityVector__SWIG_0) {
  {
    unsigned int arg1 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    int argvi = 0;
    std::vector< heat_capacity_result > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_HeatCapacityVector(size);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HeatCapacityVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    {
      try {
        result = (std::vector< heat_capacity_result > *)new std::vector< heat_capacity_result >(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_heat_capacity_result_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_HeatCapacityVector__SWIG_1) {
  {
    int argvi = 0;
    std::vector< heat_capacity_result > *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_HeatCapacityVector();");
    }
    {
      try {
        result = (std::vector< heat_capacity_result > *)new std::vector< heat_capacity_result >();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_heat_capacity_result_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_HeatCapacityVector__SWIG_2) {
  {
    unsigned int arg1 ;
    heat_capacity_result *arg2 = 0 ;
    unsigned int val1 ;
    int ecode1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    std::vector< heat_capacity_result > *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_HeatCapacityVector(size,value);");
    }
    ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HeatCapacityVector" "', argument " "1"" of type '" "unsigned int""'");
    } 
    arg1 = static_cast< unsigned int >(val1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_heat_capacity_result,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HeatCapacityVector" "', argument " "2"" of type '" "heat_capacity_result const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HeatCapacityVector" "', argument " "2"" of type '" "heat_capacity_result const &""'"); 
    }
    arg2 = reinterpret_cast< heat_capacity_result * >(argp2);
    {
      try {
        result = (std::vector< heat_capacity_result > *)new std::vector< heat_capacity_result >(arg1,(heat_capacity_result const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_heat_capacity_result_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_HeatCapacityVector__SWIG_3) {
  {
    std::vector< heat_capacity_result > *arg1 = 0 ;
    std::vector< heat_capacity_result > temp1 ;
    std::vector< heat_capacity_result > *v1 ;
    int argvi = 0;
    std::vector< heat_capacity_result > *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_HeatCapacityVector(other);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_heat_capacity_result_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_HeatCapacityVector. "
          "Expected an array of " "heat_capacity_result");
        SV **tv;
        I32 len = av_len(av) + 1;
        heat_capacity_result* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_heat_capacity_result,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_HeatCapacityVector. "
              "Expected an array of " "heat_capacity_result");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of new_HeatCapacityVector. "
          "Expected an array of " "heat_capacity_result");
      }
    }
    {
      try {
        result = (std::vector< heat_capacity_result > *)new std::vector< heat_capacity_result >((std::vector< heat_capacity_result > const &)*arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_heat_capacity_result_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_HeatCapacityVector) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 0) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< heat_capacity_result >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_heat_capacity_result_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  heat_capacity_result* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_heat_capacity_result,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(0), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_heat_capacity_result, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_HeatCapacityVector__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_HeatCapacityVector__SWIG_0); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_HeatCapacityVector__SWIG_3); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_HeatCapacityVector__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'new_HeatCapacityVector'");
  XSRETURN(0);
}


XS(_wrap_HeatCapacityVector_size) {
  {
    std::vector< heat_capacity_result > *arg1 = (std::vector< heat_capacity_result > *) 0 ;
    std::vector< heat_capacity_result > temp1 ;
    std::vector< heat_capacity_result > *v1 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HeatCapacityVector_size(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_heat_capacity_result_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of HeatCapacityVector_size. "
          "Expected an array of " "heat_capacity_result");
        SV **tv;
        I32 len = av_len(av) + 1;
        heat_capacity_result* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_heat_capacity_result,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "HeatCapacityVector_size. "
              "Expected an array of " "heat_capacity_result");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of HeatCapacityVector_size. "
          "Expected an array of " "heat_capacity_result");
      }
    }
    {
      try {
        result = (unsigned int)((std::vector< heat_capacity_result > const *)arg1)->size();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HeatCapacityVector_empty) {
  {
    std::vector< heat_capacity_result > *arg1 = (std::vector< heat_capacity_result > *) 0 ;
    std::vector< heat_capacity_result > temp1 ;
    std::vector< heat_capacity_result > *v1 ;
    int argvi = 0;
    bool result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HeatCapacityVector_empty(self);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_heat_capacity_result_t,1) != -1) {
        arg1 = v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of HeatCapacityVector_empty. "
          "Expected an array of " "heat_capacity_result");
        SV **tv;
        I32 len = av_len(av) + 1;
        heat_capacity_result* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_heat_capacity_result,0) != -1) {
            temp1.push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 1 of "
              "HeatCapacityVector_empty. "
              "Expected an array of " "heat_capacity_result");
          }
        }
        arg1 = &temp1;
      } else {
        SWIG_croak("Type error in argument 1 of HeatCapacityVector_empty. "
          "Expected an array of " "heat_capacity_result");
      }
    }
    {
      try {
        result = (bool)((std::vector< heat_capacity_result > const *)arg1)->empty();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_bool  SWIG_PERL_CALL_ARGS_1(static_cast< bool >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HeatCapacityVector_clear) {
  {
    std::vector< heat_capacity_result > *arg1 = (std::vector< heat_capacity_result > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HeatCapacityVector_clear(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_heat_capacity_result_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HeatCapacityVector_clear" "', argument " "1"" of type '" "std::vector< heat_capacity_result > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< heat_capacity_result > * >(argp1);
    {
      try {
        (arg1)->clear();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HeatCapacityVector_push) {
  {
    std::vector< heat_capacity_result > *arg1 = (std::vector< heat_capacity_result > *) 0 ;
    heat_capacity_result *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HeatCapacityVector_push(self,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_heat_capacity_result_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HeatCapacityVector_push" "', argument " "1"" of type '" "std::vector< heat_capacity_result > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< heat_capacity_result > * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_heat_capacity_result,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HeatCapacityVector_push" "', argument " "2"" of type '" "heat_capacity_result const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HeatCapacityVector_push" "', argument " "2"" of type '" "heat_capacity_result const &""'"); 
    }
    arg2 = reinterpret_cast< heat_capacity_result * >(argp2);
    {
      try {
        (arg1)->push_back((heat_capacity_result const &)*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HeatCapacityVector_pop) {
  {
    std::vector< heat_capacity_result > *arg1 = (std::vector< heat_capacity_result > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    heat_capacity_result result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: HeatCapacityVector_pop(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_heat_capacity_result_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HeatCapacityVector_pop" "', argument " "1"" of type '" "std::vector< heat_capacity_result > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< heat_capacity_result > * >(argp1);
    {
      try {
        try {
          result = std_vector_Sl_heat_capacity_result_Sg__pop(arg1);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj((new heat_capacity_result(static_cast< const heat_capacity_result& >(result))), SWIGTYPE_p_heat_capacity_result, SWIG_POINTER_OWN | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_HeatCapacityVector_get) {
  {
    std::vector< heat_capacity_result > *arg1 = (std::vector< heat_capacity_result > *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    heat_capacity_result *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: HeatCapacityVector_get(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_heat_capacity_result_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HeatCapacityVector_get" "', argument " "1"" of type '" "std::vector< heat_capacity_result > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< heat_capacity_result > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HeatCapacityVector_get" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        try {
          result = (heat_capacity_result *) &std_vector_Sl_heat_capacity_result_Sg__get(arg1,arg2);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_heat_capacity_result, 0 | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_HeatCapacityVector_set) {
  {
    std::vector< heat_capacity_result > *arg1 = (std::vector< heat_capacity_result > *) 0 ;
    int arg2 ;
    heat_capacity_result *arg3 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    void *argp3 ;
    int res3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: HeatCapacityVector_set(self,i,x);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_heat_capacity_result_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HeatCapacityVector_set" "', argument " "1"" of type '" "std::vector< heat_capacity_result > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< heat_capacity_result > * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HeatCapacityVector_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    res3 = SWIG_ConvertPtr(ST(2), &argp3, SWIGTYPE_p_heat_capacity_result,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HeatCapacityVector_set" "', argument " "3"" of type '" "heat_capacity_result const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HeatCapacityVector_set" "', argument " "3"" of type '" "heat_capacity_result const &""'"); 
    }
    arg3 = reinterpret_cast< heat_capacity_result * >(argp3);
    {
      try {
        try {
          std_vector_Sl_heat_capacity_result_Sg__set(arg1,arg2,(heat_capacity_result const &)*arg3);
        } catch(std::out_of_range &_e) {
          sv_setsv(get_sv("@", GV_ADD), SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail ;
        }
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_delete_HeatCapacityVector) {
  {
    std::vector< heat_capacity_result > *arg1 = (std::vector< heat_capacity_result > *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_HeatCapacityVector(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_std__vectorT_heat_capacity_result_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HeatCapacityVector" "', argument " "1"" of type '" "std::vector< heat_capacity_result > *""'"); 
    }
    arg1 = reinterpret_cast< std::vector< heat_capacity_result > * >(argp1);
    {
      try {
        delete arg1;
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_heat_capacity__SWIG_0) {
  {
    std::string arg1 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    unsigned int arg5 ;
    float val2 ;
    int ecode2 = 0 ;
    float val3 ;
    int ecode3 = 0 ;
    float val4 ;
    int ecode4 = 0 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    std::vector< heat_capacity_result > result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: heat_capacity(sequence,T_min,T_max,T_increment,mpoints);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "heat_capacity" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "heat_capacity" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
    ecode3 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "heat_capacity" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
    ecode4 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "heat_capacity" "', argument " "4"" of type '" "float""'");
    } 
    arg4 = static_cast< float >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "heat_capacity" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    {
      try {
        result = my_heat_capacity(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        heat_capacity_result* ptr = new heat_capacity_result(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_heat_capacity_result, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_heat_capacity__SWIG_1) {
  {
    std::string arg1 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    float val2 ;
    int ecode2 = 0 ;
    float val3 ;
    int ecode3 = 0 ;
    float val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    std::vector< heat_capacity_result > result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: heat_capacity(sequence,T_min,T_max,T_increment);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "heat_capacity" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "heat_capacity" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
    ecode3 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "heat_capacity" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
    ecode4 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "heat_capacity" "', argument " "4"" of type '" "float""'");
    } 
    arg4 = static_cast< float >(val4);
    {
      try {
        result = my_heat_capacity(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        heat_capacity_result* ptr = new heat_capacity_result(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_heat_capacity_result, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_heat_capacity__SWIG_2) {
  {
    std::string arg1 ;
    float arg2 ;
    float arg3 ;
    float val2 ;
    int ecode2 = 0 ;
    float val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    std::vector< heat_capacity_result > result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: heat_capacity(sequence,T_min,T_max);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "heat_capacity" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "heat_capacity" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
    ecode3 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "heat_capacity" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
    {
      try {
        result = my_heat_capacity(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        heat_capacity_result* ptr = new heat_capacity_result(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_heat_capacity_result, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_heat_capacity__SWIG_3) {
  {
    std::string arg1 ;
    float arg2 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::vector< heat_capacity_result > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: heat_capacity(sequence,T_min);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "heat_capacity" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "heat_capacity" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
    {
      try {
        result = my_heat_capacity(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        heat_capacity_result* ptr = new heat_capacity_result(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_heat_capacity_result, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_heat_capacity__SWIG_4) {
  {
    std::string arg1 ;
    int argvi = 0;
    std::vector< heat_capacity_result > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: heat_capacity(sequence);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "heat_capacity" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = my_heat_capacity(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        heat_capacity_result* ptr = new heat_capacity_result(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_heat_capacity_result, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_heat_capacity) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_heat_capacity__SWIG_4); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_heat_capacity__SWIG_3); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_heat_capacity__SWIG_2); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_heat_capacity__SWIG_1); return;
    case 5:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_heat_capacity__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'heat_capacity'");
  XSRETURN(0);
}


XS(_wrap_basepair_i_set) {
  {
    vrna_basepair_t *arg1 = (vrna_basepair_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: basepair_i_set(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_basepair_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basepair_i_set" "', argument " "1"" of type '" "vrna_basepair_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_basepair_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "basepair_i_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->i = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_basepair_i_get) {
  {
    vrna_basepair_t *arg1 = (vrna_basepair_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: basepair_i_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_basepair_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basepair_i_get" "', argument " "1"" of type '" "vrna_basepair_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_basepair_t * >(argp1);
    result = (int) ((arg1)->i);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_basepair_j_set) {
  {
    vrna_basepair_t *arg1 = (vrna_basepair_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: basepair_j_set(self,j);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_basepair_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basepair_j_set" "', argument " "1"" of type '" "vrna_basepair_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_basepair_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "basepair_j_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    if (arg1) (arg1)->j = arg2;
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_basepair_j_get) {
  {
    vrna_basepair_t *arg1 = (vrna_basepair_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: basepair_j_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_basepair_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "basepair_j_get" "', argument " "1"" of type '" "vrna_basepair_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_basepair_t * >(argp1);
    result = (int) ((arg1)->j);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_basepair) {
  {
    int argvi = 0;
    vrna_basepair_t *result = 0 ;
    dXSARGS;
    
    if ((items < 0) || (items > 0)) {
      SWIG_croak("Usage: new_basepair();");
    }
    {
      try {
        result = (vrna_basepair_t *)new vrna_basepair_t();
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_basepair_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_delete_basepair) {
  {
    vrna_basepair_t *arg1 = (vrna_basepair_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_basepair(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_basepair_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_basepair" "', argument " "1"" of type '" "vrna_basepair_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_basepair_t * >(argp1);
    {
      try {
        delete arg1;
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fc_add_perl_callback) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    SV *arg2 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fc_add_perl_callback(vc,PerlFunc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fc_add_perl_callback" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      arg2 = ST(1);
    }
    {
      try {
        fc_add_perl_callback(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fc_add_perl_data) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    SV *arg2 = (SV *) 0 ;
    SV *arg3 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fc_add_perl_data(vc,data,PerlFunc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fc_add_perl_data" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      arg2 = ST(1);
    }
    {
      arg3 = ST(2);
    }
    {
      try {
        fc_add_perl_data(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_sc_add_f_perl_callback) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    SV *arg2 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: sc_add_f_perl_callback(vc,PerlFunc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sc_add_f_perl_callback" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      arg2 = ST(1);
    }
    {
      try {
        result = (int)sc_add_f_perl_callback(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_sc_add_bt_perl_callback) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    SV *arg2 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: sc_add_bt_perl_callback(vc,PerlFunc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sc_add_bt_perl_callback" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      arg2 = ST(1);
    }
    {
      try {
        result = (int)sc_add_bt_perl_callback(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_sc_add_exp_f_perl_callback) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    SV *arg2 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: sc_add_exp_f_perl_callback(vc,PerlFunc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sc_add_exp_f_perl_callback" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      arg2 = ST(1);
    }
    {
      try {
        result = (int)sc_add_exp_f_perl_callback(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_sc_add_perl_data) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    SV *arg2 = (SV *) 0 ;
    SV *arg3 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: sc_add_perl_data(vc,data,PerlFunc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sc_add_perl_data" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      arg2 = ST(1);
    }
    {
      arg3 = ST(2);
    }
    {
      try {
        result = (int)sc_add_perl_data(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ud_set_data) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    SV *arg2 = (SV *) 0 ;
    SV *arg3 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: ud_set_data(vc,data,PerlFunc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_set_data" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      arg2 = ST(1);
    }
    {
      arg3 = ST(2);
    }
    {
      try {
        ud_set_data(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ud_set_prod_rule_cb) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    SV *arg2 = (SV *) 0 ;
    SV *arg3 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: ud_set_prod_rule_cb(vc,prod_cb,eval_cb);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_set_prod_rule_cb" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    arg2 = ST(1);
    arg3 = ST(2);
    {
      try {
        ud_set_prod_rule_cb(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ud_set_exp_prod_rule_cb) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    SV *arg2 = (SV *) 0 ;
    SV *arg3 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: ud_set_exp_prod_rule_cb(vc,prod_cb,eval_cb);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_set_exp_prod_rule_cb" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    arg2 = ST(1);
    arg3 = ST(2);
    {
      try {
        ud_set_exp_prod_rule_cb(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_ud_set_prob_cb) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    SV *arg2 = (SV *) 0 ;
    SV *arg3 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: ud_set_prob_cb(vc,setter,getter);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_set_prob_cb" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    arg2 = ST(1);
    arg3 = ST(2);
    {
      try {
        ud_set_prob_cb(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Lfold_cb__SWIG_0) {
  {
    char *arg1 = (char *) 0 ;
    int arg2 ;
    SV *arg3 = (SV *) 0 ;
    SV *arg4 = (SV *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: Lfold_cb(string,window_size,PerlFunc,PerlData);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lfold_cb" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lfold_cb" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      arg3 = ST(2);
    }
    arg4 = ST(3);
    {
      try {
        result = (float)my_Lfold_cb(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Lfold_cb__SWIG_1) {
  {
    char *arg1 = (char *) 0 ;
    int arg2 ;
    SV *arg3 = (SV *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: Lfold_cb(string,window_size,PerlFunc);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lfold_cb" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lfold_cb" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      arg3 = ST(2);
    }
    {
      try {
        result = (float)my_Lfold_cb(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Lfold_cb) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(2) != 0);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(2) != 0);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(3) != 0);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Lfold_cb__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Lfold_cb__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'Lfold_cb'");
  XSRETURN(0);
}


XS(_wrap_Lfoldz_cb__SWIG_0) {
  {
    char *arg1 = (char *) 0 ;
    int arg2 ;
    double arg3 ;
    SV *arg4 = (SV *) 0 ;
    SV *arg5 = (SV *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: Lfoldz_cb(string,window_size,min_z,PerlFunc,PerlData);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lfoldz_cb" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lfoldz_cb" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Lfoldz_cb" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    {
      arg4 = ST(3);
    }
    arg5 = ST(4);
    {
      try {
        result = (float)my_Lfoldz_cb(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Lfoldz_cb__SWIG_1) {
  {
    char *arg1 = (char *) 0 ;
    int arg2 ;
    double arg3 ;
    SV *arg4 = (SV *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: Lfoldz_cb(string,window_size,min_z,PerlFunc);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Lfoldz_cb" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lfoldz_cb" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Lfoldz_cb" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    {
      arg4 = ST(3);
    }
    {
      try {
        result = (float)my_Lfoldz_cb(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_Lfoldz_cb) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(3) != 0);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(3) != 0);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(4) != 0);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Lfoldz_cb__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_Lfoldz_cb__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'Lfoldz_cb'");
  XSRETURN(0);
}


XS(_wrap_aliLfold_cb__SWIG_0) {
  {
    std::vector< std::string > arg1 ;
    int arg2 ;
    SV *arg3 = (SV *) 0 ;
    SV *arg4 = (SV *) 0 ;
    std::vector< std::string > *v1 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: aliLfold_cb(alignment,window_size,PerlFunc,PerlData);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of aliLfold_cb. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "aliLfold_cb. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of aliLfold_cb. "
          "Expected an array of ""std::string");
      }
    }
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "aliLfold_cb" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      arg3 = ST(2);
    }
    arg4 = ST(3);
    {
      try {
        result = (float)my_aliLfold_cb(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_aliLfold_cb__SWIG_1) {
  {
    std::vector< std::string > arg1 ;
    int arg2 ;
    SV *arg3 = (SV *) 0 ;
    std::vector< std::string > *v1 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: aliLfold_cb(alignment,window_size,PerlFunc);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of aliLfold_cb. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "aliLfold_cb. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of aliLfold_cb. "
          "Expected an array of ""std::string");
      }
    }
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "aliLfold_cb" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      arg3 = ST(2);
    }
    {
      try {
        result = (float)my_aliLfold_cb(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_aliLfold_cb) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(2) != 0);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(2) != 0);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(3) != 0);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_aliLfold_cb__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_aliLfold_cb__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'aliLfold_cb'");
  XSRETURN(0);
}


XS(_wrap_pfl_fold_cb__SWIG_0) {
  {
    std::string arg1 ;
    int arg2 ;
    int arg3 ;
    SV *arg4 = (SV *) 0 ;
    SV *arg5 = (SV *) 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: pfl_fold_cb(sequence,window_size,max_bp_span,PerlFunc,PerlData);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "pfl_fold_cb" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pfl_fold_cb" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pfl_fold_cb" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      arg4 = ST(3);
    }
    arg5 = ST(4);
    {
      try {
        result = (int)pfl_fold_cb(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_pfl_fold_cb__SWIG_1) {
  {
    std::string arg1 ;
    int arg2 ;
    int arg3 ;
    SV *arg4 = (SV *) 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: pfl_fold_cb(sequence,window_size,max_bp_span,PerlFunc);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "pfl_fold_cb" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pfl_fold_cb" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pfl_fold_cb" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      arg4 = ST(3);
    }
    {
      try {
        result = (int)pfl_fold_cb(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_pfl_fold_cb) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(3) != 0);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(3) != 0);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(4) != 0);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_pfl_fold_cb__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_pfl_fold_cb__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'pfl_fold_cb'");
  XSRETURN(0);
}


XS(_wrap_pfl_fold_up_cb__SWIG_0) {
  {
    std::string arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    SV *arg5 = (SV *) 0 ;
    SV *arg6 = (SV *) 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: pfl_fold_up_cb(sequence,ulength,window_size,max_bp_span,PerlFunc,PerlData);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "pfl_fold_up_cb" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pfl_fold_up_cb" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pfl_fold_up_cb" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pfl_fold_up_cb" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      arg5 = ST(4);
    }
    arg6 = ST(5);
    {
      try {
        result = (int)pfl_fold_up_cb(arg1,arg2,arg3,arg4,arg5,arg6);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_pfl_fold_up_cb__SWIG_1) {
  {
    std::string arg1 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    SV *arg5 = (SV *) 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: pfl_fold_up_cb(sequence,ulength,window_size,max_bp_span,PerlFunc);");
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "pfl_fold_up_cb" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pfl_fold_up_cb" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pfl_fold_up_cb" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pfl_fold_up_cb" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      arg5 = ST(4);
    }
    {
      try {
        result = (int)pfl_fold_up_cb(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_pfl_fold_up_cb) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(4) != 0);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 6) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(0), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(4) != 0);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(5) != 0);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_pfl_fold_up_cb__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_pfl_fold_up_cb__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'pfl_fold_up_cb'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_params_reset__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    vrna_md_t *arg2 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_params_reset(self,md);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_params_reset" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold_compound_params_reset" "', argument " "2"" of type '" "vrna_md_t *""'"); 
    }
    arg2 = reinterpret_cast< vrna_md_t * >(argp2);
    {
      try {
        vrna_fold_compound_t_params_reset__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_params_reset__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_params_reset(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_params_reset" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        vrna_fold_compound_t_params_reset__SWIG_0(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_params_reset) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_vrna_md_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_params_reset__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_params_reset__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_params_reset'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_params_subst__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    vrna_param_t *arg2 = (vrna_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_params_subst(self,par);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_params_subst" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_vrna_param_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold_compound_params_subst" "', argument " "2"" of type '" "vrna_param_t *""'"); 
    }
    arg2 = reinterpret_cast< vrna_param_t * >(argp2);
    {
      try {
        vrna_fold_compound_t_params_subst__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_params_subst__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_params_subst(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_params_subst" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        vrna_fold_compound_t_params_subst__SWIG_0(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_params_subst) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_vrna_param_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_params_subst__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_params_subst__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_params_subst'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_exp_params_rescale__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_exp_params_rescale(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_exp_params_rescale" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        vrna_fold_compound_t_exp_params_rescale__SWIG_0(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_exp_params_rescale__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_exp_params_rescale(self,fe);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_exp_params_rescale" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_exp_params_rescale" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      try {
        vrna_fold_compound_t_exp_params_rescale__SWIG_1(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_exp_params_rescale) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_exp_params_rescale__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_exp_params_rescale__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_exp_params_rescale'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_exp_params_reset__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    vrna_md_t *arg2 = (vrna_md_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_exp_params_reset(self,md);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_exp_params_reset" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold_compound_exp_params_reset" "', argument " "2"" of type '" "vrna_md_t *""'"); 
    }
    arg2 = reinterpret_cast< vrna_md_t * >(argp2);
    {
      try {
        vrna_fold_compound_t_exp_params_reset__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_exp_params_reset__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_exp_params_reset(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_exp_params_reset" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        vrna_fold_compound_t_exp_params_reset__SWIG_0(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_exp_params_reset) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_vrna_md_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_exp_params_reset__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_exp_params_reset__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_exp_params_reset'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_exp_params_subst) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    vrna_exp_param_t *arg2 = (vrna_exp_param_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_exp_params_subst(self,par);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_exp_params_subst" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_vrna_exp_param_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold_compound_exp_params_subst" "', argument " "2"" of type '" "vrna_exp_param_t *""'"); 
    }
    arg2 = reinterpret_cast< vrna_exp_param_t * >(argp2);
    {
      try {
        vrna_fold_compound_t_exp_params_subst(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_plist_from_probs) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::vector< vrna_ep_t > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_plist_from_probs(self,cutoff);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_plist_from_probs" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_plist_from_probs" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      try {
        result = vrna_fold_compound_t_plist_from_probs(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        vrna_ep_t* ptr = new vrna_ep_t(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_vrna_ep_t, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_constraints_add__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    char *arg2 = (char *) 0 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_constraints_add(self,constraint,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_constraints_add" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold_compound_constraints_add" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_constraints_add" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        vrna_fold_compound_t_constraints_add__SWIG_0(arg1,(char const *)arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_constraints_add__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_constraints_add(self,constraint);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_constraints_add" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold_compound_constraints_add" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        vrna_fold_compound_t_constraints_add__SWIG_0(arg1,(char const *)arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_constraints_add) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_constraints_add__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_constraints_add__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_constraints_add'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_hc_init) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_hc_init(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_hc_init" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        vrna_fold_compound_t_hc_init(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_hc_add_up__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_hc_add_up(self,i,option);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_hc_add_up" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_hc_add_up" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_hc_add_up" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        vrna_fold_compound_t_hc_add_up__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_hc_add_up__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_hc_add_up(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_hc_add_up" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_hc_add_up" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        vrna_fold_compound_t_hc_add_up__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_hc_add_up) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_hc_add_up__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_hc_add_up__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_hc_add_up'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_hc_add_bp_nonspecific__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    int arg3 ;
    unsigned int arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_hc_add_bp_nonspecific(self,i,d,option);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_hc_add_bp_nonspecific" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_hc_add_bp_nonspecific" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_hc_add_bp_nonspecific" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_hc_add_bp_nonspecific" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    {
      try {
        vrna_fold_compound_t_hc_add_bp_nonspecific__SWIG_0(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_hc_add_bp_nonspecific__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_hc_add_bp_nonspecific(self,i,d);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_hc_add_bp_nonspecific" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_hc_add_bp_nonspecific" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_hc_add_bp_nonspecific" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        vrna_fold_compound_t_hc_add_bp_nonspecific__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_hc_add_bp_nonspecific) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_hc_add_bp_nonspecific__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_hc_add_bp_nonspecific__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_hc_add_bp_nonspecific'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_hc_add_bp__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    int arg3 ;
    unsigned int arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_hc_add_bp(self,i,j,option);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_hc_add_bp" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_hc_add_bp" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_hc_add_bp" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_hc_add_bp" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    {
      try {
        vrna_fold_compound_t_hc_add_bp__SWIG_0(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_hc_add_bp__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_hc_add_bp(self,i,j);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_hc_add_bp" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_hc_add_bp" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_hc_add_bp" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        vrna_fold_compound_t_hc_add_bp__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_hc_add_bp) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_hc_add_bp__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_hc_add_bp__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_hc_add_bp'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_hc_add_from_db__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    char *arg2 = (char *) 0 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_hc_add_from_db(self,constraint,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_hc_add_from_db" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold_compound_hc_add_from_db" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_hc_add_from_db" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = (int)vrna_fold_compound_t_hc_add_from_db__SWIG_0(arg1,(char const *)arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_hc_add_from_db__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_hc_add_from_db(self,constraint);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_hc_add_from_db" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold_compound_hc_add_from_db" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        result = (int)vrna_fold_compound_t_hc_add_from_db__SWIG_0(arg1,(char const *)arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_hc_add_from_db) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_hc_add_from_db__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_hc_add_from_db__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_hc_add_from_db'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_sc_remove) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_sc_remove(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_remove" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        vrna_fold_compound_t_sc_remove(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_init) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_sc_init(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_init" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        vrna_fold_compound_t_sc_init(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_up__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    double arg3 ;
    unsigned int arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_sc_add_up(self,i,energy,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_up" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_sc_add_up" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_sc_add_up" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_sc_add_up" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_up__SWIG_0(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_up__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    double arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_sc_add_up(self,i,energy);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_up" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_sc_add_up" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_sc_add_up" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_up__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_up__SWIG_2) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< double > arg2 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< double > *v2 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_sc_add_up(self,constraints,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_up" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_double_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_sc_add_up. "
          "Expected an array of ""double");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvNIOK(*tv)) {
            (&arg2)->push_back((double)SwigSvToNumber(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_sc_add_up. "
              "Expected an array of ""double");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_sc_add_up. "
          "Expected an array of ""double");
      }
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_sc_add_up" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_up__SWIG_2(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_up__SWIG_3) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< double > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< double > *v2 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_sc_add_up(self,constraints);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_up" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_double_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_sc_add_up. "
          "Expected an array of ""double");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvNIOK(*tv)) {
            (&arg2)->push_back((double)SwigSvToNumber(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_sc_add_up. "
              "Expected an array of ""double");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_sc_add_up. "
          "Expected an array of ""double");
      }
    }
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_up__SWIG_2(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_up) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< double >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_double_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvNIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< double >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_double_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvNIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_add_up__SWIG_3); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_add_up__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_add_up__SWIG_2); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_add_up__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_sc_add_up'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_sc_add_bp__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    int arg3 ;
    double arg4 ;
    unsigned int arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    double val4 ;
    int ecode4 = 0 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: fold_compound_sc_add_bp(self,i,j,energy,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_bp" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_sc_add_bp" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_sc_add_bp" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_sc_add_bp" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fold_compound_sc_add_bp" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_bp__SWIG_0(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_bp__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    int arg3 ;
    double arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    double val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_sc_add_bp(self,i,j,energy);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_bp" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_sc_add_bp" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_sc_add_bp" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_sc_add_bp" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_bp__SWIG_0(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_bp__SWIG_2) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< std::vector< double > > arg2 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< std::vector< double > > *v2 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_sc_add_bp(self,constraints,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_bp" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,1) != -1) {
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_sc_add_bp. "
          "Expected an array of " "std::vector< double >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::vector< double >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__vectorT_double_t,0) != -1) {
            (&arg2)->push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_sc_add_bp. "
              "Expected an array of " "std::vector< double >");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_sc_add_bp. "
          "Expected an array of " "std::vector< double >");
      }
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_sc_add_bp" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_bp__SWIG_2(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_bp__SWIG_3) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< std::vector< double > > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< std::vector< double > > *v2 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_sc_add_bp(self,constraints);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_bp" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,1) != -1) {
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_sc_add_bp. "
          "Expected an array of " "std::vector< double >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::vector< double >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__vectorT_double_t,0) != -1) {
            (&arg2)->push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_sc_add_bp. "
              "Expected an array of " "std::vector< double >");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_sc_add_bp. "
          "Expected an array of " "std::vector< double >");
      }
    }
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_bp__SWIG_2(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_bp) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::vector< double > >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  std::vector< double >* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_std__vectorT_double_t,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::vector< double > >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  std::vector< double >* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_std__vectorT_double_t,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_add_bp__SWIG_3); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_add_bp__SWIG_2); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_add_bp__SWIG_1); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_add_bp__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_sc_add_bp'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_sc_set_bp__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< std::vector< double > > arg2 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< std::vector< double > > *v2 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_sc_set_bp(self,constraints,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_set_bp" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,1) != -1) {
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_sc_set_bp. "
          "Expected an array of " "std::vector< double >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::vector< double >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__vectorT_double_t,0) != -1) {
            (&arg2)->push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_sc_set_bp. "
              "Expected an array of " "std::vector< double >");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_sc_set_bp. "
          "Expected an array of " "std::vector< double >");
      }
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_sc_set_bp" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = (int)vrna_fold_compound_t_sc_set_bp__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_set_bp__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< std::vector< double > > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< std::vector< double > > *v2 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_sc_set_bp(self,constraints);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_set_bp" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,1) != -1) {
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_sc_set_bp. "
          "Expected an array of " "std::vector< double >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::vector< double >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__vectorT_double_t,0) != -1) {
            (&arg2)->push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_sc_set_bp. "
              "Expected an array of " "std::vector< double >");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_sc_set_bp. "
          "Expected an array of " "std::vector< double >");
      }
    }
    {
      try {
        result = (int)vrna_fold_compound_t_sc_set_bp__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_set_bp) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::vector< double > >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  std::vector< double >* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_std__vectorT_double_t,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::vector< double > >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  std::vector< double >* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_std__vectorT_double_t,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_set_bp__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_set_bp__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_sc_set_bp'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_sc_set_up__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< double > arg2 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< double > *v2 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_sc_set_up(self,constraints,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_set_up" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_double_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_sc_set_up. "
          "Expected an array of ""double");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvNIOK(*tv)) {
            (&arg2)->push_back((double)SwigSvToNumber(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_sc_set_up. "
              "Expected an array of ""double");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_sc_set_up. "
          "Expected an array of ""double");
      }
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_sc_set_up" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = (int)vrna_fold_compound_t_sc_set_up__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_set_up__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< double > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< double > *v2 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_sc_set_up(self,constraints);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_set_up" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_double_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_sc_set_up. "
          "Expected an array of ""double");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvNIOK(*tv)) {
            (&arg2)->push_back((double)SwigSvToNumber(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_sc_set_up. "
              "Expected an array of ""double");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_sc_set_up. "
          "Expected an array of ""double");
      }
    }
    {
      try {
        result = (int)vrna_fold_compound_t_sc_set_up__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_set_up) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< double >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_double_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvNIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< double >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_double_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvNIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_set_up__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_set_up__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_sc_set_up'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_sc_set_stack__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< double > arg2 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< double > *v2 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_sc_set_stack(self,constraints,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_set_stack" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_double_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_sc_set_stack. "
          "Expected an array of ""double");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvNIOK(*tv)) {
            (&arg2)->push_back((double)SwigSvToNumber(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_sc_set_stack. "
              "Expected an array of ""double");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_sc_set_stack. "
          "Expected an array of ""double");
      }
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_sc_set_stack" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = (int)vrna_fold_compound_t_sc_set_stack__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_set_stack__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< double > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< double > *v2 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_sc_set_stack(self,constraints);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_set_stack" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_double_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_sc_set_stack. "
          "Expected an array of ""double");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvNIOK(*tv)) {
            (&arg2)->push_back((double)SwigSvToNumber(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_sc_set_stack. "
              "Expected an array of ""double");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_sc_set_stack. "
          "Expected an array of ""double");
      }
    }
    {
      try {
        result = (int)vrna_fold_compound_t_sc_set_stack__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_set_stack__SWIG_2) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< std::vector< double > > arg2 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< std::vector< double > > *v2 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_sc_set_stack(self,constraints,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_set_stack" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,1) != -1) {
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_sc_set_stack. "
          "Expected an array of " "std::vector< double >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::vector< double >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__vectorT_double_t,0) != -1) {
            (&arg2)->push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_sc_set_stack. "
              "Expected an array of " "std::vector< double >");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_sc_set_stack. "
          "Expected an array of " "std::vector< double >");
      }
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_sc_set_stack" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = (int)vrna_fold_compound_t_sc_set_stack__SWIG_2(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_set_stack__SWIG_3) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< std::vector< double > > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< std::vector< double > > *v2 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_sc_set_stack(self,constraints);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_set_stack" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,1) != -1) {
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_sc_set_stack. "
          "Expected an array of " "std::vector< double >");
        SV **tv;
        I32 len = av_len(av) + 1;
        std::vector< double >* obj;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SWIG_ConvertPtr(*tv, (void **)&obj, 
              SWIGTYPE_p_std__vectorT_double_t,0) != -1) {
            (&arg2)->push_back(*obj);
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_sc_set_stack. "
              "Expected an array of " "std::vector< double >");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_sc_set_stack. "
          "Expected an array of " "std::vector< double >");
      }
    }
    {
      try {
        result = (int)vrna_fold_compound_t_sc_set_stack__SWIG_2(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_set_stack) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< double >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_double_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvNIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::vector< double > >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  std::vector< double >* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_std__vectorT_double_t,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::vector< double > >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  std::vector< double >* obj;
                  SV **tv = av_fetch(av, 0, 0);
                  if (SWIG_ConvertPtr(*tv, (void **)&obj, 
                      SWIGTYPE_p_std__vectorT_double_t,0) != -1)
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< double >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_double_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvNIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_set_stack__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_set_stack__SWIG_3); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_set_stack__SWIG_2); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_set_stack__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_sc_set_stack'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_sc_add_stack__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    double arg3 ;
    unsigned int arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_sc_add_stack(self,i,energy,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_stack" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_sc_add_stack" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_sc_add_stack" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_sc_add_stack" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_stack__SWIG_0(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_stack__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    double arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_sc_add_stack(self,i,energy);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_stack" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_sc_add_stack" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_sc_add_stack" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_stack__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_stack__SWIG_2) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    std::vector< double > arg3 ;
    unsigned int arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    std::vector< double > *v3 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_sc_add_stack(self,i,energies,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_stack" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_sc_add_stack" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      if (SWIG_ConvertPtr(ST(2),(void **) &v3, 
          SWIGTYPE_p_std__vectorT_double_t,1) != -1){
        arg3 = *v3;
      } else if (SvROK(ST(2))) {
        AV *av = (AV *)SvRV(ST(2));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 3 of fold_compound_sc_add_stack. "
          "Expected an array of ""double");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvNIOK(*tv)) {
            (&arg3)->push_back((double)SwigSvToNumber(*tv));
          } else {
            SWIG_croak("Type error in argument 3 of "
              "fold_compound_sc_add_stack. "
              "Expected an array of ""double");
          }
        }
      } else {
        SWIG_croak("Type error in argument 3 of fold_compound_sc_add_stack. "
          "Expected an array of ""double");
      }
    }
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_sc_add_stack" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_stack__SWIG_2(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_stack__SWIG_3) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    std::vector< double > arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    std::vector< double > *v3 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_sc_add_stack(self,i,energies);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_stack" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_sc_add_stack" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      if (SWIG_ConvertPtr(ST(2),(void **) &v3, 
          SWIGTYPE_p_std__vectorT_double_t,1) != -1){
        arg3 = *v3;
      } else if (SvROK(ST(2))) {
        AV *av = (AV *)SvRV(ST(2));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 3 of fold_compound_sc_add_stack. "
          "Expected an array of ""double");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvNIOK(*tv)) {
            (&arg3)->push_back((double)SwigSvToNumber(*tv));
          } else {
            SWIG_croak("Type error in argument 3 of "
              "fold_compound_sc_add_stack. "
              "Expected an array of ""double");
          }
        }
      } else {
        SWIG_croak("Type error in argument 3 of fold_compound_sc_add_stack. "
          "Expected an array of ""double");
      }
    }
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_stack__SWIG_2(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_stack) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< double >* v;
            if (SWIG_ConvertPtr(ST(2),(void **) &v, 
                SWIGTYPE_p_std__vectorT_double_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(2))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(2));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvNIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< double >* v;
            if (SWIG_ConvertPtr(ST(2),(void **) &v, 
                SWIGTYPE_p_std__vectorT_double_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(2))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(2));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvNIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_add_stack__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_add_stack__SWIG_3); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_add_stack__SWIG_0); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_add_stack__SWIG_2); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_sc_add_stack'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_sc_add_SHAPE_deigan__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< double > arg2 ;
    double arg3 ;
    double arg4 ;
    unsigned int arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< double > *v2 ;
    double val3 ;
    int ecode3 = 0 ;
    double val4 ;
    int ecode4 = 0 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: fold_compound_sc_add_SHAPE_deigan(self,reactivities,m,b,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_SHAPE_deigan" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_double_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_sc_add_SHAPE_deigan. "
          "Expected an array of ""double");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvNIOK(*tv)) {
            (&arg2)->push_back((double)SwigSvToNumber(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_sc_add_SHAPE_deigan. "
              "Expected an array of ""double");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_sc_add_SHAPE_deigan. "
          "Expected an array of ""double");
      }
    }
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_sc_add_SHAPE_deigan" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    ecode4 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_sc_add_SHAPE_deigan" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fold_compound_sc_add_SHAPE_deigan" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_SHAPE_deigan__SWIG_0(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_SHAPE_deigan__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< double > arg2 ;
    double arg3 ;
    double arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< double > *v2 ;
    double val3 ;
    int ecode3 = 0 ;
    double val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_sc_add_SHAPE_deigan(self,reactivities,m,b);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_SHAPE_deigan" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_double_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_sc_add_SHAPE_deigan. "
          "Expected an array of ""double");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvNIOK(*tv)) {
            (&arg2)->push_back((double)SwigSvToNumber(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_sc_add_SHAPE_deigan. "
              "Expected an array of ""double");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_sc_add_SHAPE_deigan. "
          "Expected an array of ""double");
      }
    }
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_sc_add_SHAPE_deigan" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    ecode4 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_sc_add_SHAPE_deigan" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_SHAPE_deigan__SWIG_0(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_SHAPE_deigan) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< double >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_double_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvNIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< double >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_double_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvNIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_add_SHAPE_deigan__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_add_SHAPE_deigan__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_sc_add_SHAPE_deigan'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_sc_add_SHAPE_deigan_ali__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< std::string > arg2 ;
    std::vector< int > arg3 ;
    double arg4 ;
    double arg5 ;
    unsigned int arg6 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< std::string > *v2 ;
    std::vector< int > *v3 ;
    double val4 ;
    int ecode4 = 0 ;
    double val5 ;
    int ecode5 = 0 ;
    unsigned int val6 ;
    int ecode6 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: fold_compound_sc_add_SHAPE_deigan_ali(self,shape_files,shape_file_association,m,b,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_SHAPE_deigan_ali" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_sc_add_SHAPE_deigan_ali. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg2)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_sc_add_SHAPE_deigan_ali. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_sc_add_SHAPE_deigan_ali. "
          "Expected an array of ""std::string");
      }
    }
    {
      if (SWIG_ConvertPtr(ST(2),(void **) &v3, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg3 = *v3;
      } else if (SvROK(ST(2))) {
        AV *av = (AV *)SvRV(ST(2));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 3 of fold_compound_sc_add_SHAPE_deigan_ali. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg3)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 3 of "
              "fold_compound_sc_add_SHAPE_deigan_ali. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 3 of fold_compound_sc_add_SHAPE_deigan_ali. "
          "Expected an array of ""int");
      }
    }
    ecode4 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_sc_add_SHAPE_deigan_ali" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
    ecode5 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fold_compound_sc_add_SHAPE_deigan_ali" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
    ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fold_compound_sc_add_SHAPE_deigan_ali" "', argument " "6"" of type '" "unsigned int""'");
    } 
    arg6 = static_cast< unsigned int >(val6);
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_SHAPE_deigan_ali__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_SHAPE_deigan_ali__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< std::string > arg2 ;
    std::vector< int > arg3 ;
    double arg4 ;
    double arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< std::string > *v2 ;
    std::vector< int > *v3 ;
    double val4 ;
    int ecode4 = 0 ;
    double val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: fold_compound_sc_add_SHAPE_deigan_ali(self,shape_files,shape_file_association,m,b);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_SHAPE_deigan_ali" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_sc_add_SHAPE_deigan_ali. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg2)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_sc_add_SHAPE_deigan_ali. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_sc_add_SHAPE_deigan_ali. "
          "Expected an array of ""std::string");
      }
    }
    {
      if (SWIG_ConvertPtr(ST(2),(void **) &v3, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg3 = *v3;
      } else if (SvROK(ST(2))) {
        AV *av = (AV *)SvRV(ST(2));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 3 of fold_compound_sc_add_SHAPE_deigan_ali. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg3)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 3 of "
              "fold_compound_sc_add_SHAPE_deigan_ali. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 3 of fold_compound_sc_add_SHAPE_deigan_ali. "
          "Expected an array of ""int");
      }
    }
    ecode4 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_sc_add_SHAPE_deigan_ali" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
    ecode5 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fold_compound_sc_add_SHAPE_deigan_ali" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_SHAPE_deigan_ali__SWIG_0(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_SHAPE_deigan_ali) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< int >* v;
            if (SWIG_ConvertPtr(ST(2),(void **) &v, 
                SWIGTYPE_p_std__vectorT_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(2))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(2));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 6) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< int >* v;
            if (SWIG_ConvertPtr(ST(2),(void **) &v, 
                SWIGTYPE_p_std__vectorT_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(2))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(2));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_add_SHAPE_deigan_ali__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_add_SHAPE_deigan_ali__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_sc_add_SHAPE_deigan_ali'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_sc_add_SHAPE_zarringhalam__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< double > arg2 ;
    double arg3 ;
    double arg4 ;
    char *arg5 = (char *) 0 ;
    unsigned int arg6 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< double > *v2 ;
    double val3 ;
    int ecode3 = 0 ;
    double val4 ;
    int ecode4 = 0 ;
    int res5 ;
    char *buf5 = 0 ;
    int alloc5 = 0 ;
    unsigned int val6 ;
    int ecode6 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: fold_compound_sc_add_SHAPE_zarringhalam(self,reactivities,b,default_value,shape_conversion,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_SHAPE_zarringhalam" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_double_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_sc_add_SHAPE_zarringhalam. "
          "Expected an array of ""double");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvNIOK(*tv)) {
            (&arg2)->push_back((double)SwigSvToNumber(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_sc_add_SHAPE_zarringhalam. "
              "Expected an array of ""double");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_sc_add_SHAPE_zarringhalam. "
          "Expected an array of ""double");
      }
    }
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_sc_add_SHAPE_zarringhalam" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    ecode4 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_sc_add_SHAPE_zarringhalam" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
    res5 = SWIG_AsCharPtrAndSize(ST(4), &buf5, NULL, &alloc5);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "fold_compound_sc_add_SHAPE_zarringhalam" "', argument " "5"" of type '" "char const *""'");
    }
    arg5 = reinterpret_cast< char * >(buf5);
    ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fold_compound_sc_add_SHAPE_zarringhalam" "', argument " "6"" of type '" "unsigned int""'");
    } 
    arg6 = static_cast< unsigned int >(val6);
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_SHAPE_zarringhalam__SWIG_0(arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    
    XSRETURN(argvi);
  fail:
    
    
    
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_SHAPE_zarringhalam__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< double > arg2 ;
    double arg3 ;
    double arg4 ;
    char *arg5 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< double > *v2 ;
    double val3 ;
    int ecode3 = 0 ;
    double val4 ;
    int ecode4 = 0 ;
    int res5 ;
    char *buf5 = 0 ;
    int alloc5 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: fold_compound_sc_add_SHAPE_zarringhalam(self,reactivities,b,default_value,shape_conversion);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_SHAPE_zarringhalam" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_double_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_sc_add_SHAPE_zarringhalam. "
          "Expected an array of ""double");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvNIOK(*tv)) {
            (&arg2)->push_back((double)SwigSvToNumber(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_sc_add_SHAPE_zarringhalam. "
              "Expected an array of ""double");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_sc_add_SHAPE_zarringhalam. "
          "Expected an array of ""double");
      }
    }
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_sc_add_SHAPE_zarringhalam" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    ecode4 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_sc_add_SHAPE_zarringhalam" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
    res5 = SWIG_AsCharPtrAndSize(ST(4), &buf5, NULL, &alloc5);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "fold_compound_sc_add_SHAPE_zarringhalam" "', argument " "5"" of type '" "char const *""'");
    }
    arg5 = reinterpret_cast< char * >(buf5);
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_SHAPE_zarringhalam__SWIG_0(arg1,arg2,arg3,arg4,(char const *)arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    XSRETURN(argvi);
  fail:
    
    
    
    if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_SHAPE_zarringhalam) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< double >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_double_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvNIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(4), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 6) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< double >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_double_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvNIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(4), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_add_SHAPE_zarringhalam__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_add_SHAPE_zarringhalam__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_sc_add_SHAPE_zarringhalam'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_sc_add_hi_motif__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    FLT_OR_DBL arg4 ;
    unsigned int arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    double val4 ;
    int ecode4 = 0 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: fold_compound_sc_add_hi_motif(self,seq,structure,energy,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_hi_motif" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold_compound_sc_add_hi_motif" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fold_compound_sc_add_hi_motif" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    ecode4 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_sc_add_hi_motif" "', argument " "4"" of type '" "FLT_OR_DBL""'");
    } 
    arg4 = static_cast< FLT_OR_DBL >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fold_compound_sc_add_hi_motif" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_hi_motif__SWIG_0(arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_hi_motif__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    FLT_OR_DBL arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    double val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_sc_add_hi_motif(self,seq,structure,energy);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_hi_motif" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold_compound_sc_add_hi_motif" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "fold_compound_sc_add_hi_motif" "', argument " "3"" of type '" "char const *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    ecode4 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_sc_add_hi_motif" "', argument " "4"" of type '" "FLT_OR_DBL""'");
    } 
    arg4 = static_cast< FLT_OR_DBL >(val4);
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_hi_motif__SWIG_0(arg1,(char const *)arg2,(char const *)arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_hi_motif) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(2), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(2), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_add_hi_motif__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sc_add_hi_motif__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_sc_add_hi_motif'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_eval_structure) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_eval_structure(self,structure);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_eval_structure" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold_compound_eval_structure" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        result = (float)vrna_fold_compound_t_eval_structure(arg1,(char const *)arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_eval_structure_pt) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< int > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< int > *v2 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_eval_structure_pt(self,pt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_eval_structure_pt" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_eval_structure_pt. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg2)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_eval_structure_pt. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_eval_structure_pt. "
          "Expected an array of ""int");
      }
    }
    {
      try {
        result = (int)vrna_fold_compound_t_eval_structure_pt(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_eval_structure_verbose__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    char *arg2 = (char *) 0 ;
    FILE *arg3 = (FILE *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_eval_structure_verbose(self,structure,nullfile);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_eval_structure_verbose" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold_compound_eval_structure_verbose" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      if (SvOK(ST(2))) /* check for undef */
      arg3 = PerlIO_findFILE(IoIFP(sv_2io(ST(2))));
      else  arg3 = NULL;
    }
    {
      try {
        result = (float)vrna_fold_compound_t_eval_structure_verbose__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_eval_structure_verbose__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_eval_structure_verbose(self,structure);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_eval_structure_verbose" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold_compound_eval_structure_verbose" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        result = (float)vrna_fold_compound_t_eval_structure_verbose__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_eval_structure_verbose) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          if (SvOK(ST(2)))
          _v = (sv_2io(ST(2))) ? 1 : 0;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_eval_structure_verbose__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_eval_structure_verbose__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_eval_structure_verbose'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_eval_structure_pt_verbose__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< int > arg2 ;
    FILE *arg3 = (FILE *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< int > *v2 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_eval_structure_pt_verbose(self,pt,nullfile);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_eval_structure_pt_verbose" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_eval_structure_pt_verbose. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg2)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_eval_structure_pt_verbose. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_eval_structure_pt_verbose. "
          "Expected an array of ""int");
      }
    }
    {
      if (SvOK(ST(2))) /* check for undef */
      arg3 = PerlIO_findFILE(IoIFP(sv_2io(ST(2))));
      else  arg3 = NULL;
    }
    {
      try {
        result = (int)vrna_fold_compound_t_eval_structure_pt_verbose__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_eval_structure_pt_verbose__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< int > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< int > *v2 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_eval_structure_pt_verbose(self,pt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_eval_structure_pt_verbose" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_eval_structure_pt_verbose. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg2)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_eval_structure_pt_verbose. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_eval_structure_pt_verbose. "
          "Expected an array of ""int");
      }
    }
    {
      try {
        result = (int)vrna_fold_compound_t_eval_structure_pt_verbose__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_eval_structure_pt_verbose) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< int >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< int >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          if (SvOK(ST(2)))
          _v = (sv_2io(ST(2))) ? 1 : 0;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_eval_structure_pt_verbose__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_eval_structure_pt_verbose__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_eval_structure_pt_verbose'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_eval_covar_structure) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_eval_covar_structure(self,structure);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_eval_covar_structure" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold_compound_eval_covar_structure" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    {
      try {
        result = (float)vrna_fold_compound_t_eval_covar_structure(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_eval_loop_pt) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    std::vector< int > arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    std::vector< int > *v3 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_eval_loop_pt(self,i,pt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_eval_loop_pt" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_eval_loop_pt" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      if (SWIG_ConvertPtr(ST(2),(void **) &v3, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg3 = *v3;
      } else if (SvROK(ST(2))) {
        AV *av = (AV *)SvRV(ST(2));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 3 of fold_compound_eval_loop_pt. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg3)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 3 of "
              "fold_compound_eval_loop_pt. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 3 of fold_compound_eval_loop_pt. "
          "Expected an array of ""int");
      }
    }
    {
      try {
        result = (int)vrna_fold_compound_t_eval_loop_pt(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_eval_move) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    int arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_eval_move(self,structure,m1,m2);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_eval_move" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold_compound_eval_move" "', argument " "2"" of type '" "char const *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_eval_move" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_eval_move" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      try {
        result = (float)vrna_fold_compound_t_eval_move(arg1,(char const *)arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    XSRETURN(argvi);
  fail:
    
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_eval_move_pt) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< int > arg2 ;
    int arg3 ;
    int arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< int > *v2 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_eval_move_pt(self,pt,m1,m2);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_eval_move_pt" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_eval_move_pt. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg2)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_eval_move_pt. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_eval_move_pt. "
          "Expected an array of ""int");
      }
    }
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_eval_move_pt" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_eval_move_pt" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      try {
        result = (int)vrna_fold_compound_t_eval_move_pt(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_E_ext_loop) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_E_ext_loop(self,i,j);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_E_ext_loop" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_E_ext_loop" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_E_ext_loop" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (int)vrna_fold_compound_t_E_ext_loop(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_E_hp_loop) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_E_hp_loop(self,i,j);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_E_hp_loop" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_E_hp_loop" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_E_hp_loop" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (int)vrna_fold_compound_t_E_hp_loop(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_E_ext_hp_loop) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_E_ext_hp_loop(self,i,j);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_E_ext_hp_loop" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_E_ext_hp_loop" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_E_ext_hp_loop" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (int)vrna_fold_compound_t_E_ext_hp_loop(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_eval_ext_hp_loop) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_eval_ext_hp_loop(self,i,j);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_eval_ext_hp_loop" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_eval_ext_hp_loop" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_eval_ext_hp_loop" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (int)vrna_fold_compound_t_eval_ext_hp_loop(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_eval_hp_loop) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_eval_hp_loop(self,i,j);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_eval_hp_loop" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_eval_hp_loop" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_eval_hp_loop" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (int)vrna_fold_compound_t_eval_hp_loop(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_exp_E_hp_loop) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_exp_E_hp_loop(self,i,j);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_exp_E_hp_loop" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_exp_E_hp_loop" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_exp_E_hp_loop" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (double)vrna_fold_compound_t_exp_E_hp_loop(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_E_int_loop) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_E_int_loop(self,i,j);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_E_int_loop" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_E_int_loop" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_E_int_loop" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (int)vrna_fold_compound_t_E_int_loop(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_eval_int_loop) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: fold_compound_eval_int_loop(self,i,j,k,l);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_eval_int_loop" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_eval_int_loop" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_eval_int_loop" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_eval_int_loop" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fold_compound_eval_int_loop" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    {
      try {
        result = (int)vrna_fold_compound_t_eval_int_loop(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_E_ext_int_loop) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    int arg3 ;
    int *arg4 = (int *) 0 ;
    int *arg5 = (int *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int temp4 ;
    int res4 = SWIG_TMPOBJ ;
    int temp5 ;
    int res5 = SWIG_TMPOBJ ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    arg4 = &temp4;
    arg5 = &temp5;
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_E_ext_int_loop(self,i,j);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_E_ext_int_loop" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_E_ext_int_loop" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_E_ext_int_loop" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (int)vrna_fold_compound_t_E_ext_int_loop(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res5)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1((*arg5)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags); argvi++  ;
    }
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_E_stack) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_E_stack(self,i,j);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_E_stack" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_E_stack" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_E_stack" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (int)vrna_fold_compound_t_E_stack(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_exp_E_int_loop) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_exp_E_int_loop(self,i,j);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_exp_E_int_loop" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_exp_E_int_loop" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_exp_E_int_loop" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = (double)vrna_fold_compound_t_exp_E_int_loop(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_exp_E_interior_loop) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    int arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: fold_compound_exp_E_interior_loop(self,i,j,k,l);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_exp_E_interior_loop" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_exp_E_interior_loop" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_exp_E_interior_loop" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_exp_E_interior_loop" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fold_compound_exp_E_interior_loop" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    {
      try {
        result = (double)vrna_fold_compound_t_exp_E_interior_loop(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_maxmimum_matching) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_maxmimum_matching(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_maxmimum_matching" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        result = (int)vrna_fold_compound_t_maxmimum_matching(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_mfe) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    float *arg2 = (float *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float temp2 ;
    int res2 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg2 = &temp2;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_mfe(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_mfe" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        result = (char *)vrna_fold_compound_t_mfe(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_mfe_dimer) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    float *arg2 = (float *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float temp2 ;
    int res2 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg2 = &temp2;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_mfe_dimer(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_mfe_dimer" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        result = (char *)vrna_fold_compound_t_mfe_dimer(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_backtrack__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    unsigned int arg2 ;
    float *arg3 = (float *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    float temp3 ;
    int res3 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_backtrack(self,length);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_backtrack" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_backtrack" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try {
        result = (char *)vrna_fold_compound_t_backtrack__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    
    
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_backtrack__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    float *arg2 = (float *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float temp2 ;
    int res2 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg2 = &temp2;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_backtrack(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_backtrack" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        result = (char *)vrna_fold_compound_t_backtrack__SWIG_1(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_backtrack) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_backtrack__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_backtrack__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_backtrack'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_mfe_window__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_mfe_window(self,nullfile);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_mfe_window" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SvOK(ST(1))) /* check for undef */
      arg2 = PerlIO_findFILE(IoIFP(sv_2io(ST(1))));
      else  arg2 = NULL;
    }
    {
      try {
        result = (float)vrna_fold_compound_t_mfe_window__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_mfe_window__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_mfe_window(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_mfe_window" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        result = (float)vrna_fold_compound_t_mfe_window__SWIG_0(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_mfe_window) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          if (SvOK(ST(1)))
          _v = (sv_2io(ST(1))) ? 1 : 0;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_mfe_window__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_mfe_window__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_mfe_window'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_mfe_window_zscore__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    double arg2 ;
    FILE *arg3 = (FILE *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_mfe_window_zscore(self,min_z,nullfile);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_mfe_window_zscore" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_mfe_window_zscore" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      if (SvOK(ST(2))) /* check for undef */
      arg3 = PerlIO_findFILE(IoIFP(sv_2io(ST(2))));
      else  arg3 = NULL;
    }
    {
      try {
        result = (float)vrna_fold_compound_t_mfe_window_zscore__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_mfe_window_zscore__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_mfe_window_zscore(self,min_z);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_mfe_window_zscore" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_mfe_window_zscore" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      try {
        result = (float)vrna_fold_compound_t_mfe_window_zscore__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_mfe_window_zscore) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          if (SvOK(ST(2)))
          _v = (sv_2io(ST(2))) ? 1 : 0;
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_mfe_window_zscore__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_mfe_window_zscore__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_mfe_window_zscore'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_zsc_filter_init__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    double arg2 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_zsc_filter_init(self,min_z,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_zsc_filter_init" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_zsc_filter_init" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_zsc_filter_init" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = (int)vrna_fold_compound_t_zsc_filter_init__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_zsc_filter_init__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_zsc_filter_init(self,min_z);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_zsc_filter_init" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_zsc_filter_init" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      try {
        result = (int)vrna_fold_compound_t_zsc_filter_init__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_zsc_filter_init__SWIG_2) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_zsc_filter_init(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_zsc_filter_init" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        result = (int)vrna_fold_compound_t_zsc_filter_init__SWIG_0(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_zsc_filter_init) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_zsc_filter_init__SWIG_2); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_zsc_filter_init__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_zsc_filter_init__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_zsc_filter_init'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_zsc_filter_update__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    double arg2 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_zsc_filter_update(self,min_z,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_zsc_filter_update" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_zsc_filter_update" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_zsc_filter_update" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = (int)vrna_fold_compound_t_zsc_filter_update__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_zsc_filter_update__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_zsc_filter_update(self,min_z);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_zsc_filter_update" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_zsc_filter_update" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      try {
        result = (int)vrna_fold_compound_t_zsc_filter_update__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_zsc_filter_update) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_zsc_filter_update__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_zsc_filter_update__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_zsc_filter_update'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_zsc_filter_free) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_zsc_filter_free(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_zsc_filter_free" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        vrna_fold_compound_t_zsc_filter_free(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_zsc_filter_on) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_zsc_filter_on(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_zsc_filter_on" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        result = (int)vrna_fold_compound_t_zsc_filter_on(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_zsc_filter_threshold) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_zsc_filter_threshold(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_zsc_filter_threshold" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        result = (double)vrna_fold_compound_t_zsc_filter_threshold(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_zsc_compute) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    int arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_zsc_compute(self,i,j,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_zsc_compute" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_zsc_compute" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_zsc_compute" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_zsc_compute" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      try {
        result = (double)vrna_fold_compound_t_zsc_compute(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_pf) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    float *arg2 = (float *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float temp2 ;
    int res2 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg2 = &temp2;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_pf(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pf" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        result = (char *)vrna_fold_compound_t_pf(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_mean_bp_distance) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_mean_bp_distance(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_mean_bp_distance" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        result = (double)vrna_fold_compound_t_mean_bp_distance(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_ensemble_defect__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::string arg2 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_ensemble_defect(self,structure,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_ensemble_defect" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_ensemble_defect" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_ensemble_defect" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = (double)vrna_fold_compound_t_ensemble_defect__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_ensemble_defect__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::string arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_ensemble_defect(self,structure);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_ensemble_defect" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_ensemble_defect" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (double)vrna_fold_compound_t_ensemble_defect__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_ensemble_defect__SWIG_2) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< int > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< int > *v2 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_ensemble_defect(self,pair_table);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_ensemble_defect" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_ensemble_defect. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg2)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_ensemble_defect. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_ensemble_defect. "
          "Expected an array of ""int");
      }
    }
    {
      try {
        result = (double)vrna_fold_compound_t_ensemble_defect__SWIG_2(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_ensemble_defect) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< int >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_ensemble_defect__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_ensemble_defect__SWIG_2); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_ensemble_defect__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_ensemble_defect'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_positional_entropy) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::vector< double > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_positional_entropy(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_positional_entropy" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        result = vrna_fold_compound_t_positional_entropy(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        sv_setnv(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_pr_structure) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::string arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_pr_structure(self,structure);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pr_structure" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_pr_structure" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (double)vrna_fold_compound_t_pr_structure(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_pr_energy) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    double result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_pr_energy(self,e);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pr_energy" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_pr_energy" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      try {
        result = (double)vrna_fold_compound_t_pr_energy(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_pf_dimer) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    float *arg2 = (float *) 0 ;
    float *arg3 = (float *) 0 ;
    float *arg4 = (float *) 0 ;
    float *arg5 = (float *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float temp2 ;
    int res2 = SWIG_TMPOBJ ;
    float temp3 ;
    int res3 = SWIG_TMPOBJ ;
    float temp4 ;
    int res4 = SWIG_TMPOBJ ;
    float temp5 ;
    int res5 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg2 = &temp2;
    arg3 = &temp3;
    arg4 = &temp4;
    arg5 = &temp5;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_pf_dimer(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pf_dimer" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        result = (char *)vrna_fold_compound_t_pf_dimer(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res4)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg4)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    if (SWIG_IsTmpObj(res5)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg5)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    
    
    
    
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_bpp) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::vector< std::vector< double > > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_bpp(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_bpp" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        result = vrna_fold_compound_t_bpp(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      AV *arr = newAV();
      for(unsigned int i = 0; i < (&result)->size(); i++) {
        AV *vec = newAV();
        for(unsigned int j = 0; j < result[i].size(); j++) {
          SV *v = newSVnv(result[i][j]);
          if (!av_store(vec, j, v))
          SvREFCNT_dec(v);
        }
        /* store reference to array */
        av_store(arr, i, newRV_noinc((SV*) vec));
      }
      
      ST(argvi) = newRV_noinc((SV*) arr);
      sv_2mortal( ST(argvi) );
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_centroid) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    double *arg2 = (double *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double temp2 ;
    int res2 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg2 = &temp2;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_centroid(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_centroid" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        result = (char *)vrna_fold_compound_t_centroid(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_double  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, new_flags); argvi++  ;
    }
    
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_MEA__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    float *arg2 = (float *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float temp2 ;
    int res2 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg2 = &temp2;
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_MEA(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_MEA" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        result = (char *)vrna_fold_compound_t_MEA__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res2)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg2)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_MEA__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    double arg2 ;
    float *arg3 = (float *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    float temp3 ;
    int res3 = SWIG_TMPOBJ ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    arg3 = &temp3;
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_MEA(self,gamma);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_MEA" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_MEA" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      try {
        result = (char *)vrna_fold_compound_t_MEA__SWIG_1(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    if (SWIG_IsTmpObj(res3)) {
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1((*arg3)); argvi++  ;
    } else {
      int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN | 0) : 0;
      if (argvi >= items) EXTEND(sp, argvi+1);  ST(argvi) = SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_float, new_flags); argvi++  ;
    }
    
    
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_MEA) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_MEA__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_MEA__SWIG_1); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_MEA'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_pbacktrack__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_pbacktrack(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pbacktrack" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        result = (char *)vrna_fold_compound_t_pbacktrack__SWIG_0(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    delete[] result;
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_pbacktrack5__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    char *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_pbacktrack5(self,length);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pbacktrack5" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_pbacktrack5" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try {
        result = (char *)vrna_fold_compound_t_pbacktrack5__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_FromCharPtr((const char *)result); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_pbacktrack__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    std::vector< std::string > result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_pbacktrack(self,num_samples,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pbacktrack" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_pbacktrack" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_pbacktrack" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = vrna_fold_compound_t_pbacktrack__SWIG_1(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        SwigSvFromString(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_pbacktrack__SWIG_2) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::vector< std::string > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_pbacktrack(self,num_samples);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pbacktrack" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_pbacktrack" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try {
        result = vrna_fold_compound_t_pbacktrack__SWIG_1(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        SwigSvFromString(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_pbacktrack5__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    unsigned int arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    std::vector< std::string > result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_pbacktrack5(self,num_samples,length,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pbacktrack5" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_pbacktrack5" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_pbacktrack5" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_pbacktrack5" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    {
      try {
        result = vrna_fold_compound_t_pbacktrack5__SWIG_1(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        SwigSvFromString(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_pbacktrack5__SWIG_2) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    std::vector< std::string > result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_pbacktrack5(self,num_samples,length);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pbacktrack5" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_pbacktrack5" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_pbacktrack5" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = vrna_fold_compound_t_pbacktrack5__SWIG_1(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        SwigSvFromString(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_pbacktrack__SWIG_3) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    unsigned int arg2 ;
    vrna_pbacktrack_mem_t *arg3 = (vrna_pbacktrack_mem_t *) 0 ;
    unsigned int arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    vrna_pbacktrack_mem_t *retval3 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    SV * _saved[1] ;
    std::vector< std::string > result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_pbacktrack(self,num_samples,nr_memory,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pbacktrack" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_pbacktrack" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      if (!SvOK(ST(2))) {
        retval3 = new vrna_pbacktrack_mem_t();
        arg3 = retval3;
      } else {
        /* INOUT in */
        SWIG_ConvertPtr(ST(2),SWIG_as_voidptrptr(&retval3), 0, SWIG_POINTER_DISOWN);
        arg3 = retval3;
      }
    }
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_pbacktrack" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    _saved[0] = ST(2);
    {
      try {
        result = vrna_fold_compound_t_pbacktrack__SWIG_3(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        SwigSvFromString(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    {
      /* increase output stack if necessary */
      if (argvi >= items) {
        EXTEND(sp,1);
      }
      /* move already existing return values to the back */
      for (int i = argvi; i > 0; i--) {
        ST(i) = ST(i - 1);
      }
      /* store result as first element in the stack */
      ST(0) = SWIG_NewPointerObj(SWIG_as_voidptr(retval3), SWIGTYPE_p_vrna_pbacktrack_mem_t, 0);
      /* increase return argument counter */
      argvi++;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_pbacktrack__SWIG_4) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    unsigned int arg2 ;
    vrna_pbacktrack_mem_t *arg3 = (vrna_pbacktrack_mem_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    vrna_pbacktrack_mem_t *retval3 ;
    int argvi = 0;
    SV * _saved[1] ;
    std::vector< std::string > result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_pbacktrack(self,num_samples,nr_memory);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pbacktrack" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_pbacktrack" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      if (!SvOK(ST(2))) {
        retval3 = new vrna_pbacktrack_mem_t();
        arg3 = retval3;
      } else {
        /* INOUT in */
        SWIG_ConvertPtr(ST(2),SWIG_as_voidptrptr(&retval3), 0, SWIG_POINTER_DISOWN);
        arg3 = retval3;
      }
    }
    _saved[0] = ST(2);
    {
      try {
        result = vrna_fold_compound_t_pbacktrack__SWIG_3(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        SwigSvFromString(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    {
      /* increase output stack if necessary */
      if (argvi >= items) {
        EXTEND(sp,1);
      }
      /* move already existing return values to the back */
      for (int i = argvi; i > 0; i--) {
        ST(i) = ST(i - 1);
      }
      /* store result as first element in the stack */
      ST(0) = SWIG_NewPointerObj(SWIG_as_voidptr(retval3), SWIGTYPE_p_vrna_pbacktrack_mem_t, 0);
      /* increase return argument counter */
      argvi++;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_pbacktrack5__SWIG_3) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    vrna_pbacktrack_mem_t *arg4 = (vrna_pbacktrack_mem_t *) 0 ;
    unsigned int arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    vrna_pbacktrack_mem_t *retval4 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    SV * _saved[1] ;
    std::vector< std::string > result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: fold_compound_pbacktrack5(self,num_samples,length,nr_memory,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pbacktrack5" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_pbacktrack5" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_pbacktrack5" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      if (!SvOK(ST(3))) {
        retval4 = new vrna_pbacktrack_mem_t();
        arg4 = retval4;
      } else {
        /* INOUT in */
        SWIG_ConvertPtr(ST(3),SWIG_as_voidptrptr(&retval4), 0, SWIG_POINTER_DISOWN);
        arg4 = retval4;
      }
    }
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fold_compound_pbacktrack5" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    _saved[0] = ST(3);
    {
      try {
        result = vrna_fold_compound_t_pbacktrack5__SWIG_3(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        SwigSvFromString(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    {
      /* increase output stack if necessary */
      if (argvi >= items) {
        EXTEND(sp,1);
      }
      /* move already existing return values to the back */
      for (int i = argvi; i > 0; i--) {
        ST(i) = ST(i - 1);
      }
      /* store result as first element in the stack */
      ST(0) = SWIG_NewPointerObj(SWIG_as_voidptr(retval4), SWIGTYPE_p_vrna_pbacktrack_mem_t, 0);
      /* increase return argument counter */
      argvi++;
    }
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_pbacktrack5__SWIG_4) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    vrna_pbacktrack_mem_t *arg4 = (vrna_pbacktrack_mem_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    vrna_pbacktrack_mem_t *retval4 ;
    int argvi = 0;
    SV * _saved[1] ;
    std::vector< std::string > result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_pbacktrack5(self,num_samples,length,nr_memory);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pbacktrack5" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_pbacktrack5" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_pbacktrack5" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      if (!SvOK(ST(3))) {
        retval4 = new vrna_pbacktrack_mem_t();
        arg4 = retval4;
      } else {
        /* INOUT in */
        SWIG_ConvertPtr(ST(3),SWIG_as_voidptrptr(&retval4), 0, SWIG_POINTER_DISOWN);
        arg4 = retval4;
      }
    }
    _saved[0] = ST(3);
    {
      try {
        result = vrna_fold_compound_t_pbacktrack5__SWIG_3(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        SwigSvFromString(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    {
      /* increase output stack if necessary */
      if (argvi >= items) {
        EXTEND(sp,1);
      }
      /* move already existing return values to the back */
      for (int i = argvi; i > 0; i--) {
        ST(i) = ST(i - 1);
      }
      /* store result as first element in the stack */
      ST(0) = SWIG_NewPointerObj(SWIG_as_voidptr(retval4), SWIGTYPE_p_vrna_pbacktrack_mem_t, 0);
      /* increase return argument counter */
      argvi++;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_subopt__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    int arg3 ;
    FILE *arg4 = (FILE *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    std::vector< subopt_solution > result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_subopt(self,delta,sorted,nullfile);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_subopt" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_subopt" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_subopt" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      if (SvOK(ST(3))) /* check for undef */
      arg4 = PerlIO_findFILE(IoIFP(sv_2io(ST(3))));
      else  arg4 = NULL;
    }
    {
      try {
        result = vrna_fold_compound_t_subopt__SWIG_0(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        subopt_solution* ptr = new subopt_solution(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_subopt_solution, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_subopt__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    std::vector< subopt_solution > result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_subopt(self,delta,sorted);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_subopt" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_subopt" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_subopt" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
    {
      try {
        result = vrna_fold_compound_t_subopt__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        subopt_solution* ptr = new subopt_solution(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_subopt_solution, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_subopt__SWIG_2) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::vector< subopt_solution > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_subopt(self,delta);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_subopt" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_subopt" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      try {
        result = vrna_fold_compound_t_subopt__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        subopt_solution* ptr = new subopt_solution(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_subopt_solution, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_subopt) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          if (SvOK(ST(3)))
          _v = (sv_2io(ST(3))) ? 1 : 0;
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_subopt__SWIG_2); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_subopt__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_subopt__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_subopt'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_subopt_zuker) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::vector< subopt_solution > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_subopt_zuker(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_subopt_zuker" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        result = vrna_fold_compound_t_subopt_zuker(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        subopt_solution* ptr = new subopt_solution(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_subopt_solution, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sequence_add__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::string arg2 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_sequence_add(self,sequence,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sequence_add" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_sequence_add" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_sequence_add" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = (int)vrna_fold_compound_t_sequence_add__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sequence_add__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::string arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_sequence_add(self,sequence);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sequence_add" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_sequence_add" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (int)vrna_fold_compound_t_sequence_add__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sequence_add) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sequence_add__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_sequence_add__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_sequence_add'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_sequence_remove) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    unsigned int arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_sequence_remove(self,i);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sequence_remove" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_sequence_remove" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      try {
        result = (int)vrna_fold_compound_t_sequence_remove(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sequence_remove_all) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_sequence_remove_all(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sequence_remove_all" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        vrna_fold_compound_t_sequence_remove_all(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sequence_prepare) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_sequence_prepare(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sequence_prepare" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        vrna_fold_compound_t_sequence_prepare(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_ud_add_motif__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::string arg2 ;
    double arg3 ;
    std::string arg4 ;
    unsigned int arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: fold_compound_ud_add_motif(self,motif,motif_en,name,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_ud_add_motif" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_ud_add_motif" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_ud_add_motif" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_ud_add_motif" "', argument " "4"" of type '" "std::string""'"); 
      }
      arg4 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fold_compound_ud_add_motif" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    {
      try {
        vrna_fold_compound_t_ud_add_motif__SWIG_0(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_ud_add_motif__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::string arg2 ;
    double arg3 ;
    std::string arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_ud_add_motif(self,motif,motif_en,name);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_ud_add_motif" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_ud_add_motif" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_ud_add_motif" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_ud_add_motif" "', argument " "4"" of type '" "std::string""'"); 
      }
      arg4 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        vrna_fold_compound_t_ud_add_motif__SWIG_0(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_ud_add_motif__SWIG_2) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::string arg2 ;
    double arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_ud_add_motif(self,motif,motif_en);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_ud_add_motif" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_ud_add_motif" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_ud_add_motif" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
    {
      try {
        vrna_fold_compound_t_ud_add_motif__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_ud_add_motif) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(3), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_ud_add_motif__SWIG_2); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_ud_add_motif__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_ud_add_motif__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_ud_add_motif'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_ud_remove) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_ud_remove(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_ud_remove" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        vrna_fold_compound_t_ud_remove(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_commands_apply__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    vrna_command_s *arg2 = (vrna_command_s *) 0 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_commands_apply(self,commands,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_commands_apply" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_vrna_command_s, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold_compound_commands_apply" "', argument " "2"" of type '" "vrna_command_s *""'"); 
    }
    arg2 = reinterpret_cast< vrna_command_s * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_commands_apply" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = (int)vrna_fold_compound_t_commands_apply__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_commands_apply__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    vrna_command_s *arg2 = (vrna_command_s *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_commands_apply(self,commands);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_commands_apply" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_vrna_command_s, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold_compound_commands_apply" "', argument " "2"" of type '" "vrna_command_s *""'"); 
    }
    arg2 = reinterpret_cast< vrna_command_s * >(argp2);
    {
      try {
        result = (int)vrna_fold_compound_t_commands_apply__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_commands_apply) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_vrna_command_s, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_vrna_command_s, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_commands_apply__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_commands_apply__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_commands_apply'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_file_commands_apply__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::string arg2 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_file_commands_apply(self,filename,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_file_commands_apply" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_file_commands_apply" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_file_commands_apply" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = (int)vrna_fold_compound_t_file_commands_apply__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_file_commands_apply__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::string arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_file_commands_apply(self,filename);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_file_commands_apply" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_file_commands_apply" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (int)vrna_fold_compound_t_file_commands_apply__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_file_commands_apply) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_file_commands_apply__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_file_commands_apply__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_file_commands_apply'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_rotational_symmetry_db) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::string arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::vector< unsigned int > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_rotational_symmetry_db(self,structure);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_rotational_symmetry_db" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_rotational_symmetry_db" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = vrna_fold_compound_t_rotational_symmetry_db(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        svs[i] = sv_newmortal();
        sv_setiv(svs[i], result[i]);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_neighbors__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< int > arg2 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< int > *v2 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    std::vector< vrna_move_t > result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_neighbors(self,pt,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_neighbors" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_neighbors. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg2)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_neighbors. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_neighbors. "
          "Expected an array of ""int");
      }
    }
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_neighbors" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = vrna_fold_compound_t_neighbors__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        vrna_move_t* ptr = new vrna_move_t(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_vrna_move_t, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_neighbors__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< int > arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    std::vector< int > *v2 ;
    int argvi = 0;
    std::vector< vrna_move_t > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_neighbors(self,pt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_neighbors" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      if (SWIG_ConvertPtr(ST(1),(void **) &v2, 
          SWIGTYPE_p_std__vectorT_int_t,1) != -1){
        arg2 = *v2;
      } else if (SvROK(ST(1))) {
        AV *av = (AV *)SvRV(ST(1));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 2 of fold_compound_neighbors. "
          "Expected an array of ""int");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvIOK(*tv)) {
            (&arg2)->push_back((int)SvIVX(*tv));
          } else {
            SWIG_croak("Type error in argument 2 of "
              "fold_compound_neighbors. "
              "Expected an array of ""int");
          }
        }
      } else {
        SWIG_croak("Type error in argument 2 of fold_compound_neighbors. "
          "Expected an array of ""int");
      }
    }
    {
      try {
        result = vrna_fold_compound_t_neighbors__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        vrna_move_t* ptr = new vrna_move_t(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_vrna_move_t, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_neighbors) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< int >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          {
            /* wrapped vector? */
            std::vector< int >* v;
            if (SWIG_ConvertPtr(ST(1),(void **) &v, 
                SWIGTYPE_p_std__vectorT_int_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(1))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(1));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvIOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_neighbors__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_neighbors__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_neighbors'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_path__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< int > *arg2 = 0 ;
    unsigned int arg3 ;
    unsigned int arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    std::vector< vrna_move_t > result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_path(self,pt,steps,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_path" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__vectorT_int_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold_compound_path" "', argument " "2"" of type '" "std::vector< int > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fold_compound_path" "', argument " "2"" of type '" "std::vector< int > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< int > * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_path" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_path" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    {
      try {
        result = vrna_fold_compound_t_path__SWIG_0(arg1,*arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        vrna_move_t* ptr = new vrna_move_t(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_vrna_move_t, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_path__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< int > *arg2 = 0 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    std::vector< vrna_move_t > result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_path(self,pt,steps);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_path" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__vectorT_int_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold_compound_path" "', argument " "2"" of type '" "std::vector< int > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fold_compound_path" "', argument " "2"" of type '" "std::vector< int > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< int > * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_path" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = vrna_fold_compound_t_path__SWIG_0(arg1,*arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        vrna_move_t* ptr = new vrna_move_t(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_vrna_move_t, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_path) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_path__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_path__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_path'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_path_gradient__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< int > *arg2 = 0 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    std::vector< vrna_move_t > result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_path_gradient(self,pt,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_path_gradient" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__vectorT_int_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold_compound_path_gradient" "', argument " "2"" of type '" "std::vector< int > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fold_compound_path_gradient" "', argument " "2"" of type '" "std::vector< int > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< int > * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_path_gradient" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = vrna_fold_compound_t_path_gradient__SWIG_0(arg1,*arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        vrna_move_t* ptr = new vrna_move_t(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_vrna_move_t, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_path_gradient__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< int > *arg2 = 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    std::vector< vrna_move_t > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_path_gradient(self,pt);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_path_gradient" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__vectorT_int_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold_compound_path_gradient" "', argument " "2"" of type '" "std::vector< int > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fold_compound_path_gradient" "', argument " "2"" of type '" "std::vector< int > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< int > * >(argp2);
    {
      try {
        result = vrna_fold_compound_t_path_gradient__SWIG_0(arg1,*arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        vrna_move_t* ptr = new vrna_move_t(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_vrna_move_t, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_path_gradient) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_path_gradient__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_path_gradient__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_path_gradient'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_path_random__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< int > *arg2 = 0 ;
    unsigned int arg3 ;
    unsigned int arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    unsigned int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    std::vector< vrna_move_t > result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_path_random(self,pt,steps,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_path_random" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__vectorT_int_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold_compound_path_random" "', argument " "2"" of type '" "std::vector< int > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fold_compound_path_random" "', argument " "2"" of type '" "std::vector< int > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< int > * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_path_random" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    ecode4 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_path_random" "', argument " "4"" of type '" "unsigned int""'");
    } 
    arg4 = static_cast< unsigned int >(val4);
    {
      try {
        result = vrna_fold_compound_t_path_random__SWIG_0(arg1,*arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        vrna_move_t* ptr = new vrna_move_t(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_vrna_move_t, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_path_random__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::vector< int > *arg2 = 0 ;
    unsigned int arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    std::vector< vrna_move_t > result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_path_random(self,pt,steps);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_path_random" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2, SWIGTYPE_p_std__vectorT_int_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fold_compound_path_random" "', argument " "2"" of type '" "std::vector< int > &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "fold_compound_path_random" "', argument " "2"" of type '" "std::vector< int > &""'"); 
    }
    arg2 = reinterpret_cast< std::vector< int > * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_path_random" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = vrna_fold_compound_t_path_random__SWIG_0(arg1,*arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        vrna_move_t* ptr = new vrna_move_t(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_vrna_move_t, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_path_random) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_path_random__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_path_random__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_path_random'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_path_findpath_saddle__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::string arg2 ;
    std::string arg3 ;
    int arg4 ;
    int arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    SV *result = 0 ;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: fold_compound_path_findpath_saddle(self,s1,s2,width,maxE);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_path_findpath_saddle" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_path_findpath_saddle" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_path_findpath_saddle" "', argument " "3"" of type '" "std::string""'"); 
      }
      arg3 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_path_findpath_saddle" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fold_compound_path_findpath_saddle" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    {
      try {
        result = (SV *)vrna_fold_compound_t_path_findpath_saddle__SWIG_0(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = result; argvi++ ;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_path_findpath_saddle__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::string arg2 ;
    std::string arg3 ;
    int arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    SV *result = 0 ;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_path_findpath_saddle(self,s1,s2,width);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_path_findpath_saddle" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_path_findpath_saddle" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_path_findpath_saddle" "', argument " "3"" of type '" "std::string""'"); 
      }
      arg3 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_path_findpath_saddle" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      try {
        result = (SV *)vrna_fold_compound_t_path_findpath_saddle__SWIG_0(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = result; argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_path_findpath_saddle__SWIG_2) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::string arg2 ;
    std::string arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    SV *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_path_findpath_saddle(self,s1,s2);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_path_findpath_saddle" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_path_findpath_saddle" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_path_findpath_saddle" "', argument " "3"" of type '" "std::string""'"); 
      }
      arg3 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = (SV *)vrna_fold_compound_t_path_findpath_saddle__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = result; argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_path_findpath_saddle) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_path_findpath_saddle__SWIG_2); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_path_findpath_saddle__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_path_findpath_saddle__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_path_findpath_saddle'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_path_findpath__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::string arg2 ;
    std::string arg3 ;
    int arg4 ;
    int arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    std::vector< vrna_path_t > result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: fold_compound_path_findpath(self,s1,s2,width,maxE);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_path_findpath" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_path_findpath" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_path_findpath" "', argument " "3"" of type '" "std::string""'"); 
      }
      arg3 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_path_findpath" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    ecode5 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fold_compound_path_findpath" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
    {
      try {
        result = vrna_fold_compound_t_path_findpath__SWIG_0(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        vrna_path_t* ptr = new vrna_path_t(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_vrna_path_t, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_path_findpath__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::string arg2 ;
    std::string arg3 ;
    int arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    std::vector< vrna_path_t > result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_path_findpath(self,s1,s2,width);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_path_findpath" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_path_findpath" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_path_findpath" "', argument " "3"" of type '" "std::string""'"); 
      }
      arg3 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_path_findpath" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      try {
        result = vrna_fold_compound_t_path_findpath__SWIG_0(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        vrna_path_t* ptr = new vrna_path_t(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_vrna_path_t, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_path_findpath__SWIG_2) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::string arg2 ;
    std::string arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::vector< vrna_path_t > result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_path_findpath(self,s1,s2);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_path_findpath" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_path_findpath" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_path_findpath" "', argument " "3"" of type '" "std::string""'"); 
      }
      arg3 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = vrna_fold_compound_t_path_findpath__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        vrna_path_t* ptr = new vrna_path_t(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_vrna_path_t, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_path_findpath) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_path_findpath__SWIG_2); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_path_findpath__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_path_findpath__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_path_findpath'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_path_direct__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::string arg2 ;
    std::string arg3 ;
    int arg4 ;
    vrna_path_options_s *arg5 = (vrna_path_options_s *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    void *argp5 = 0 ;
    int res5 = 0 ;
    int argvi = 0;
    std::vector< vrna_path_t > result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: fold_compound_path_direct(self,s1,s2,maxE,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_path_direct" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_path_direct" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_path_direct" "', argument " "3"" of type '" "std::string""'"); 
      }
      arg3 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_path_direct" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    res5 = SWIG_ConvertPtr(ST(4), &argp5,SWIGTYPE_p_vrna_path_options_s, 0 |  0 );
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "fold_compound_path_direct" "', argument " "5"" of type '" "vrna_path_options_s *""'"); 
    }
    arg5 = reinterpret_cast< vrna_path_options_s * >(argp5);
    {
      try {
        result = vrna_fold_compound_t_path_direct__SWIG_0(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        vrna_path_t* ptr = new vrna_path_t(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_vrna_path_t, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_path_direct__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::string arg2 ;
    std::string arg3 ;
    int arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    std::vector< vrna_path_t > result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_path_direct(self,s1,s2,maxE);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_path_direct" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_path_direct" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_path_direct" "', argument " "3"" of type '" "std::string""'"); 
      }
      arg3 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    ecode4 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_path_direct" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
    {
      try {
        result = vrna_fold_compound_t_path_direct__SWIG_0(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        vrna_path_t* ptr = new vrna_path_t(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_vrna_path_t, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_path_direct__SWIG_2) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    std::string arg2 ;
    std::string arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::vector< vrna_path_t > result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_path_direct(self,s1,s2);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_path_direct" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_path_direct" "', argument " "2"" of type '" "std::string""'"); 
      }
      arg2 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "fold_compound_path_direct" "', argument " "3"" of type '" "std::string""'"); 
      }
      arg3 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
    {
      try {
        result = vrna_fold_compound_t_path_direct__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        vrna_path_t* ptr = new vrna_path_t(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_vrna_path_t, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_path_direct) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(1), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsPtr_std_string SWIG_PERL_CALL_ARGS_2(ST(2), (std::string**)(0));
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(4), &vptr, SWIGTYPE_p_vrna_path_options_s, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_path_direct__SWIG_2); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_path_direct__SWIG_1); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_path_direct__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_path_direct'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_heat_capacity__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    unsigned int arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    float val3 ;
    int ecode3 = 0 ;
    float val4 ;
    int ecode4 = 0 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    std::vector< heat_capacity_result > result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: fold_compound_heat_capacity(self,T_min,T_max,T_increment,mpoints);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_heat_capacity" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_heat_capacity" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
    ecode3 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_heat_capacity" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
    ecode4 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_heat_capacity" "', argument " "4"" of type '" "float""'");
    } 
    arg4 = static_cast< float >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fold_compound_heat_capacity" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    {
      try {
        result = vrna_fold_compound_t_heat_capacity__SWIG_0(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        heat_capacity_result* ptr = new heat_capacity_result(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_heat_capacity_result, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_heat_capacity__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    float val3 ;
    int ecode3 = 0 ;
    float val4 ;
    int ecode4 = 0 ;
    int argvi = 0;
    std::vector< heat_capacity_result > result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_heat_capacity(self,T_min,T_max,T_increment);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_heat_capacity" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_heat_capacity" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
    ecode3 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_heat_capacity" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
    ecode4 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_heat_capacity" "', argument " "4"" of type '" "float""'");
    } 
    arg4 = static_cast< float >(val4);
    {
      try {
        result = vrna_fold_compound_t_heat_capacity__SWIG_0(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        heat_capacity_result* ptr = new heat_capacity_result(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_heat_capacity_result, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_heat_capacity__SWIG_2) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    float arg2 ;
    float arg3 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    float val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    std::vector< heat_capacity_result > result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_heat_capacity(self,T_min,T_max);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_heat_capacity" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_heat_capacity" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
    ecode3 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_heat_capacity" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
    {
      try {
        result = vrna_fold_compound_t_heat_capacity__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        heat_capacity_result* ptr = new heat_capacity_result(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_heat_capacity_result, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_heat_capacity__SWIG_3) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    float arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    std::vector< heat_capacity_result > result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_heat_capacity(self,T_min);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_heat_capacity" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_heat_capacity" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
    {
      try {
        result = vrna_fold_compound_t_heat_capacity__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        heat_capacity_result* ptr = new heat_capacity_result(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_heat_capacity_result, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_heat_capacity__SWIG_4) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    std::vector< heat_capacity_result > result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_heat_capacity(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_heat_capacity" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        result = vrna_fold_compound_t_heat_capacity__SWIG_0(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    {
      size_t len = (&result)->size();
      SV **svs = new SV*[len];
      for (size_t i=0; i<len; i++) {
        heat_capacity_result* ptr = new heat_capacity_result(result[i]);
        svs[i] = sv_newmortal();
        SWIG_MakePtr(svs[i], (void*) ptr, 
          SWIGTYPE_p_heat_capacity_result, SWIG_SHADOW|0);
      }
      AV *myav = av_make(len, svs);
      delete[] svs;
      ST(argvi) = newRV_noinc((SV*) myav);
      sv_2mortal(ST(argvi));
      argvi++;
    }
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_heat_capacity) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_heat_capacity__SWIG_4); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_heat_capacity__SWIG_3); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_heat_capacity__SWIG_2); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_heat_capacity__SWIG_1); return;
    case 5:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_heat_capacity__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_heat_capacity'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_add_auxdata) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    SV *arg2 = (SV *) 0 ;
    SV *arg3 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_add_auxdata(self,data,PerlFunc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_add_auxdata" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      arg2 = ST(1);
    }
    {
      arg3 = ST(2);
    }
    {
      try {
        vrna_fold_compound_t_add_auxdata(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_add_callback) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    SV *arg2 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_add_callback(self,PerlFunc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_add_callback" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      arg2 = ST(1);
    }
    {
      try {
        vrna_fold_compound_t_add_callback(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_data) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    SV *arg2 = (SV *) 0 ;
    SV *arg3 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_sc_add_data(self,data,PerlFunc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_data" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      arg2 = ST(1);
    }
    {
      arg3 = ST(2);
    }
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_data(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_f) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    SV *arg2 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_sc_add_f(self,PerlFunc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_f" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      arg2 = ST(1);
    }
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_f(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_bt) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    SV *arg2 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_sc_add_bt(self,PerlFunc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_bt" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      arg2 = ST(1);
    }
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_bt(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_sc_add_exp_f) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    SV *arg2 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_sc_add_exp_f(self,PerlFunc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_sc_add_exp_f" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      arg2 = ST(1);
    }
    {
      try {
        result = (int)vrna_fold_compound_t_sc_add_exp_f(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_ud_set_data) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    SV *arg2 = (SV *) 0 ;
    SV *arg3 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_ud_set_data(self,data,PerlFunc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_ud_set_data" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      arg2 = ST(1);
    }
    {
      arg3 = ST(2);
    }
    {
      try {
        vrna_fold_compound_t_ud_set_data(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_ud_set_prod_rule_cb) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    SV *arg2 = (SV *) 0 ;
    SV *arg3 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_ud_set_prod_rule_cb(self,prod_cb,eval_cb);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_ud_set_prod_rule_cb" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    arg2 = ST(1);
    arg3 = ST(2);
    {
      try {
        vrna_fold_compound_t_ud_set_prod_rule_cb(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_ud_set_exp_prod_rule_cb) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    SV *arg2 = (SV *) 0 ;
    SV *arg3 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_ud_set_exp_prod_rule_cb(self,prod_cb,eval_cb);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_ud_set_exp_prod_rule_cb" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    arg2 = ST(1);
    arg3 = ST(2);
    {
      try {
        vrna_fold_compound_t_ud_set_exp_prod_rule_cb(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_ud_set_prob_cb) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    SV *arg2 = (SV *) 0 ;
    SV *arg3 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_ud_set_prob_cb(self,setter,getter);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_ud_set_prob_cb" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    arg2 = ST(1);
    arg3 = ST(2);
    {
      try {
        vrna_fold_compound_t_ud_set_prob_cb(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_subopt_cb__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    SV *arg3 = (SV *) 0 ;
    SV *arg4 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_subopt_cb(self,delta,PerlFunc,PerlData);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_subopt_cb" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_subopt_cb" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      arg3 = ST(2);
    }
    arg4 = ST(3);
    {
      try {
        vrna_fold_compound_t_subopt_cb__SWIG_0(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_subopt_cb__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    SV *arg3 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_subopt_cb(self,delta,PerlFunc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_subopt_cb" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_subopt_cb" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    {
      arg3 = ST(2);
    }
    {
      try {
        vrna_fold_compound_t_subopt_cb__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_subopt_cb) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(2) != 0);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(2) != 0);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(3) != 0);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_subopt_cb__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_subopt_cb__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_subopt_cb'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_pbacktrack5__SWIG_5) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    SV *arg4 = (SV *) 0 ;
    SV *arg5 = (SV *) 0 ;
    unsigned int arg6 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    unsigned int val6 ;
    int ecode6 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: fold_compound_pbacktrack5(self,num_samples,length,PerlFunc,PerlData,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pbacktrack5" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_pbacktrack5" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_pbacktrack5" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      arg4 = ST(3);
    }
    arg5 = ST(4);
    ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fold_compound_pbacktrack5" "', argument " "6"" of type '" "unsigned int""'");
    } 
    arg6 = static_cast< unsigned int >(val6);
    {
      try {
        result = (unsigned int)vrna_fold_compound_t_pbacktrack5__SWIG_5(arg1,arg2,arg3,arg4,arg5,arg6);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_pbacktrack5__SWIG_6) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    SV *arg4 = (SV *) 0 ;
    SV *arg5 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: fold_compound_pbacktrack5(self,num_samples,length,PerlFunc,PerlData);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pbacktrack5" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_pbacktrack5" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_pbacktrack5" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      arg4 = ST(3);
    }
    arg5 = ST(4);
    {
      try {
        result = (unsigned int)vrna_fold_compound_t_pbacktrack5__SWIG_5(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_pbacktrack5__SWIG_7) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    SV *arg4 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_pbacktrack5(self,num_samples,length,PerlFunc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pbacktrack5" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_pbacktrack5" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_pbacktrack5" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      arg4 = ST(3);
    }
    {
      try {
        result = (unsigned int)vrna_fold_compound_t_pbacktrack5__SWIG_5(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_pbacktrack__SWIG_5) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    unsigned int arg2 ;
    SV *arg3 = (SV *) 0 ;
    SV *arg4 = (SV *) 0 ;
    unsigned int arg5 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: fold_compound_pbacktrack(self,num_samples,PerlFunc,PerlData,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pbacktrack" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_pbacktrack" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      arg3 = ST(2);
    }
    arg4 = ST(3);
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fold_compound_pbacktrack" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    {
      try {
        result = (unsigned int)vrna_fold_compound_t_pbacktrack__SWIG_5(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_pbacktrack__SWIG_6) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    unsigned int arg2 ;
    SV *arg3 = (SV *) 0 ;
    SV *arg4 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_pbacktrack(self,num_samples,PerlFunc,PerlData);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pbacktrack" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_pbacktrack" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      arg3 = ST(2);
    }
    arg4 = ST(3);
    {
      try {
        result = (unsigned int)vrna_fold_compound_t_pbacktrack__SWIG_5(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_pbacktrack__SWIG_7) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    unsigned int arg2 ;
    SV *arg3 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_pbacktrack(self,num_samples,PerlFunc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pbacktrack" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_pbacktrack" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      arg3 = ST(2);
    }
    {
      try {
        result = (unsigned int)vrna_fold_compound_t_pbacktrack__SWIG_5(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_pbacktrack__SWIG_8) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    unsigned int arg2 ;
    SV *arg3 = (SV *) 0 ;
    SV *arg4 = (SV *) 0 ;
    vrna_pbacktrack_mem_t *arg5 = (vrna_pbacktrack_mem_t *) 0 ;
    unsigned int arg6 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    vrna_pbacktrack_mem_t *retval5 ;
    unsigned int val6 ;
    int ecode6 = 0 ;
    int argvi = 0;
    SV * _saved[1] ;
    unsigned int result;
    dXSARGS;
    
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: fold_compound_pbacktrack(self,num_samples,PerlFunc,PerlData,nr_memory,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pbacktrack" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_pbacktrack" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      arg3 = ST(2);
    }
    arg4 = ST(3);
    {
      if (!SvOK(ST(4))) {
        retval5 = new vrna_pbacktrack_mem_t();
        arg5 = retval5;
      } else {
        /* INOUT in */
        SWIG_ConvertPtr(ST(4),SWIG_as_voidptrptr(&retval5), 0, SWIG_POINTER_DISOWN);
        arg5 = retval5;
      }
    }
    ecode6 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(5), &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "fold_compound_pbacktrack" "', argument " "6"" of type '" "unsigned int""'");
    } 
    arg6 = static_cast< unsigned int >(val6);
    _saved[0] = ST(4);
    {
      try {
        result = (unsigned int)vrna_fold_compound_t_pbacktrack__SWIG_8(arg1,arg2,arg3,arg4,arg5,arg6);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    {
      /* increase output stack if necessary */
      if (argvi >= items) {
        EXTEND(sp,1);
      }
      /* move already existing return values to the back */
      for (int i = argvi; i > 0; i--) {
        ST(i) = ST(i - 1);
      }
      /* store result as first element in the stack */
      ST(0) = SWIG_NewPointerObj(SWIG_as_voidptr(retval5), SWIGTYPE_p_vrna_pbacktrack_mem_t, 0);
      /* increase return argument counter */
      argvi++;
    }
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_pbacktrack__SWIG_9) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    unsigned int arg2 ;
    SV *arg3 = (SV *) 0 ;
    SV *arg4 = (SV *) 0 ;
    vrna_pbacktrack_mem_t *arg5 = (vrna_pbacktrack_mem_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    vrna_pbacktrack_mem_t *retval5 ;
    int argvi = 0;
    SV * _saved[1] ;
    unsigned int result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: fold_compound_pbacktrack(self,num_samples,PerlFunc,PerlData,nr_memory);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pbacktrack" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_pbacktrack" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    {
      arg3 = ST(2);
    }
    arg4 = ST(3);
    {
      if (!SvOK(ST(4))) {
        retval5 = new vrna_pbacktrack_mem_t();
        arg5 = retval5;
      } else {
        /* INOUT in */
        SWIG_ConvertPtr(ST(4),SWIG_as_voidptrptr(&retval5), 0, SWIG_POINTER_DISOWN);
        arg5 = retval5;
      }
    }
    _saved[0] = ST(4);
    {
      try {
        result = (unsigned int)vrna_fold_compound_t_pbacktrack__SWIG_8(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    {
      /* increase output stack if necessary */
      if (argvi >= items) {
        EXTEND(sp,1);
      }
      /* move already existing return values to the back */
      for (int i = argvi; i > 0; i--) {
        ST(i) = ST(i - 1);
      }
      /* store result as first element in the stack */
      ST(0) = SWIG_NewPointerObj(SWIG_as_voidptr(retval5), SWIGTYPE_p_vrna_pbacktrack_mem_t, 0);
      /* increase return argument counter */
      argvi++;
    }
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_pbacktrack) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(2), &vptr, SWIGTYPE_p_vrna_pbacktrack_mem_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(2) != 0);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(2), &vptr, SWIGTYPE_p_vrna_pbacktrack_mem_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 6;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_6:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(2) != 0);
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(3) != 0);
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 7;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_7:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(2) != 0);
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(3) != 0);
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(4), &vptr, SWIGTYPE_p_vrna_pbacktrack_mem_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 8;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_8:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(2) != 0);
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(3) != 0);
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 9;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_9:
    
    if (items == 6) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(2) != 0);
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(3) != 0);
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(4), &vptr, SWIGTYPE_p_vrna_pbacktrack_mem_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 10;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_10:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_pbacktrack__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_pbacktrack__SWIG_2); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_pbacktrack__SWIG_4); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_pbacktrack__SWIG_1); return;
    case 5:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_pbacktrack__SWIG_7); return;
    case 6:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_pbacktrack__SWIG_3); return;
    case 7:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_pbacktrack__SWIG_6); return;
    case 8:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_pbacktrack__SWIG_9); return;
    case 9:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_pbacktrack__SWIG_5); return;
    case 10:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_pbacktrack__SWIG_8); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_pbacktrack'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_pbacktrack5__SWIG_8) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    SV *arg4 = (SV *) 0 ;
    SV *arg5 = (SV *) 0 ;
    vrna_pbacktrack_mem_t *arg6 = (vrna_pbacktrack_mem_t *) 0 ;
    unsigned int arg7 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    vrna_pbacktrack_mem_t *retval6 ;
    unsigned int val7 ;
    int ecode7 = 0 ;
    int argvi = 0;
    SV * _saved[1] ;
    unsigned int result;
    dXSARGS;
    
    if ((items < 7) || (items > 7)) {
      SWIG_croak("Usage: fold_compound_pbacktrack5(self,num_samples,length,PerlFunc,PerlData,nr_memory,options);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pbacktrack5" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_pbacktrack5" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_pbacktrack5" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      arg4 = ST(3);
    }
    arg5 = ST(4);
    {
      if (!SvOK(ST(5))) {
        retval6 = new vrna_pbacktrack_mem_t();
        arg6 = retval6;
      } else {
        /* INOUT in */
        SWIG_ConvertPtr(ST(5),SWIG_as_voidptrptr(&retval6), 0, SWIG_POINTER_DISOWN);
        arg6 = retval6;
      }
    }
    ecode7 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(6), &val7);
    if (!SWIG_IsOK(ecode7)) {
      SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "fold_compound_pbacktrack5" "', argument " "7"" of type '" "unsigned int""'");
    } 
    arg7 = static_cast< unsigned int >(val7);
    _saved[0] = ST(5);
    {
      try {
        result = (unsigned int)vrna_fold_compound_t_pbacktrack5__SWIG_8(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    {
      /* increase output stack if necessary */
      if (argvi >= items) {
        EXTEND(sp,1);
      }
      /* move already existing return values to the back */
      for (int i = argvi; i > 0; i--) {
        ST(i) = ST(i - 1);
      }
      /* store result as first element in the stack */
      ST(0) = SWIG_NewPointerObj(SWIG_as_voidptr(retval6), SWIGTYPE_p_vrna_pbacktrack_mem_t, 0);
      /* increase return argument counter */
      argvi++;
    }
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_pbacktrack5__SWIG_9) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    SV *arg4 = (SV *) 0 ;
    SV *arg5 = (SV *) 0 ;
    vrna_pbacktrack_mem_t *arg6 = (vrna_pbacktrack_mem_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    vrna_pbacktrack_mem_t *retval6 ;
    int argvi = 0;
    SV * _saved[1] ;
    unsigned int result;
    dXSARGS;
    
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: fold_compound_pbacktrack5(self,num_samples,length,PerlFunc,PerlData,nr_memory);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_pbacktrack5" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_pbacktrack5" "', argument " "2"" of type '" "unsigned int""'");
    } 
    arg2 = static_cast< unsigned int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_pbacktrack5" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      arg4 = ST(3);
    }
    arg5 = ST(4);
    {
      if (!SvOK(ST(5))) {
        retval6 = new vrna_pbacktrack_mem_t();
        arg6 = retval6;
      } else {
        /* INOUT in */
        SWIG_ConvertPtr(ST(5),SWIG_as_voidptrptr(&retval6), 0, SWIG_POINTER_DISOWN);
        arg6 = retval6;
      }
    }
    _saved[0] = ST(5);
    {
      try {
        result = (unsigned int)vrna_fold_compound_t_pbacktrack5__SWIG_8(arg1,arg2,arg3,arg4,arg5,arg6);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    {
      /* increase output stack if necessary */
      if (argvi >= items) {
        EXTEND(sp,1);
      }
      /* move already existing return values to the back */
      for (int i = argvi; i > 0; i--) {
        ST(i) = ST(i - 1);
      }
      /* store result as first element in the stack */
      ST(0) = SWIG_NewPointerObj(SWIG_as_voidptr(retval6), SWIGTYPE_p_vrna_pbacktrack_mem_t, 0);
      /* increase return argument counter */
      argvi++;
    }
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_pbacktrack5) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(3), &vptr, SWIGTYPE_p_vrna_pbacktrack_mem_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(3) != 0);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(3), &vptr, SWIGTYPE_p_vrna_pbacktrack_mem_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 6;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_6:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(3) != 0);
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(4) != 0);
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 7;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_7:
    
    if (items == 6) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(3) != 0);
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(4) != 0);
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(5), &vptr, SWIGTYPE_p_vrna_pbacktrack_mem_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 8;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_8:
    
    if (items == 6) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(3) != 0);
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(4) != 0);
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(5), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 9;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_9:
    
    if (items == 7) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(3) != 0);
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(4) != 0);
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(5), &vptr, SWIGTYPE_p_vrna_pbacktrack_mem_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(6), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_10;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 10;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_10:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_pbacktrack5__SWIG_0); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_pbacktrack5__SWIG_2); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_pbacktrack5__SWIG_4); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_pbacktrack5__SWIG_1); return;
    case 5:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_pbacktrack5__SWIG_7); return;
    case 6:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_pbacktrack5__SWIG_3); return;
    case 7:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_pbacktrack5__SWIG_6); return;
    case 8:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_pbacktrack5__SWIG_9); return;
    case 9:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_pbacktrack5__SWIG_5); return;
    case 10:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_pbacktrack5__SWIG_8); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_pbacktrack5'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_mfe_window_cb__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    SV *arg2 = (SV *) 0 ;
    SV *arg3 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_mfe_window_cb(self,PerlFunc,PerlData);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_mfe_window_cb" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      arg2 = ST(1);
    }
    arg3 = ST(2);
    {
      try {
        result = (float)vrna_fold_compound_t_mfe_window_cb__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_mfe_window_cb__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    SV *arg2 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: fold_compound_mfe_window_cb(self,PerlFunc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_mfe_window_cb" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      arg2 = ST(1);
    }
    {
      try {
        result = (float)vrna_fold_compound_t_mfe_window_cb__SWIG_0(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_mfe_window_cb) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(1) != 0);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(1) != 0);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(2) != 0);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_mfe_window_cb__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_mfe_window_cb__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_mfe_window_cb'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_mfe_window_zscore_cb__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    double arg2 ;
    SV *arg3 = (SV *) 0 ;
    SV *arg4 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_mfe_window_zscore_cb(self,min_z,PerlFunc,PerlData);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_mfe_window_zscore_cb" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_mfe_window_zscore_cb" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      arg3 = ST(2);
    }
    arg4 = ST(3);
    {
      try {
        result = (float)vrna_fold_compound_t_mfe_window_zscore_cb__SWIG_0(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_mfe_window_zscore_cb__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    double arg2 ;
    SV *arg3 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    int argvi = 0;
    float result;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: fold_compound_mfe_window_zscore_cb(self,min_z,PerlFunc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_mfe_window_zscore_cb" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_mfe_window_zscore_cb" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    {
      arg3 = ST(2);
    }
    {
      try {
        result = (float)vrna_fold_compound_t_mfe_window_zscore_cb__SWIG_0(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_float  SWIG_PERL_CALL_ARGS_1(static_cast< float >(result)); argvi++ ;
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_mfe_window_zscore_cb) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(2) != 0);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_double SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(2) != 0);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(3) != 0);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_mfe_window_zscore_cb__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_mfe_window_zscore_cb__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_mfe_window_zscore_cb'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_probs_window__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    unsigned int arg3 ;
    SV *arg4 = (SV *) 0 ;
    SV *arg5 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: fold_compound_probs_window(self,ulength,options,PerlFunc,PerlData);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_probs_window" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_probs_window" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_probs_window" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      arg4 = ST(3);
    }
    arg5 = ST(4);
    {
      try {
        result = (int)vrna_fold_compound_t_probs_window__SWIG_0(arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_probs_window__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    int arg2 ;
    unsigned int arg3 ;
    SV *arg4 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int val2 ;
    int ecode2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    int result;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: fold_compound_probs_window(self,ulength,options,PerlFunc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_probs_window" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_probs_window" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_probs_window" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      arg4 = ST(3);
    }
    {
      try {
        result = (int)vrna_fold_compound_t_probs_window__SWIG_0(arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_probs_window) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(3) != 0);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_int SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(3) != 0);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(4) != 0);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_probs_window__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_probs_window__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_probs_window'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_heat_capacity_cb__SWIG_0) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    unsigned int arg5 ;
    SV *arg6 = (SV *) 0 ;
    SV *arg7 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    float val3 ;
    int ecode3 = 0 ;
    float val4 ;
    int ecode4 = 0 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 7) || (items > 7)) {
      SWIG_croak("Usage: fold_compound_heat_capacity_cb(self,T_min,T_max,T_increment,mpoints,PerlFunc,PerlData);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_heat_capacity_cb" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_heat_capacity_cb" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
    ecode3 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_heat_capacity_cb" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
    ecode4 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_heat_capacity_cb" "', argument " "4"" of type '" "float""'");
    } 
    arg4 = static_cast< float >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fold_compound_heat_capacity_cb" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    {
      arg6 = ST(5);
    }
    arg7 = ST(6);
    {
      try {
        vrna_fold_compound_t_heat_capacity_cb__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_heat_capacity_cb__SWIG_1) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    unsigned int arg5 ;
    SV *arg6 = (SV *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    float val2 ;
    int ecode2 = 0 ;
    float val3 ;
    int ecode3 = 0 ;
    float val4 ;
    int ecode4 = 0 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 6) || (items > 6)) {
      SWIG_croak("Usage: fold_compound_heat_capacity_cb(self,T_min,T_max,T_increment,mpoints,PerlFunc);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_heat_capacity_cb" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    ecode2 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fold_compound_heat_capacity_cb" "', argument " "2"" of type '" "float""'");
    } 
    arg2 = static_cast< float >(val2);
    ecode3 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "fold_compound_heat_capacity_cb" "', argument " "3"" of type '" "float""'");
    } 
    arg3 = static_cast< float >(val3);
    ecode4 = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(3), &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fold_compound_heat_capacity_cb" "', argument " "4"" of type '" "float""'");
    } 
    arg4 = static_cast< float >(val4);
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "fold_compound_heat_capacity_cb" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    {
      arg6 = ST(5);
    }
    {
      try {
        vrna_fold_compound_t_heat_capacity_cb__SWIG_0(arg1,arg2,arg3,arg4,arg5,arg6);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    
    
    
    
    
    XSRETURN(argvi);
  fail:
    
    
    
    
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_heat_capacity_cb) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 6) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(5) != 0);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 7) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(0), &vptr, SWIGTYPE_p_vrna_fold_compound_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(1), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_float SWIG_PERL_CALL_ARGS_2(ST(3), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(5) != 0);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        _v = (ST(6) != 0);
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_heat_capacity_cb__SWIG_1); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_fold_compound_heat_capacity_cb__SWIG_0); return;
    }
  }
  
  croak("No matching function for overloaded 'fold_compound_heat_capacity_cb'");
  XSRETURN(0);
}


XS(_wrap_fold_compound_type_get) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    vrna_fc_type_e result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_type_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_type_get" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    result = (vrna_fc_type_e)(vrna_fc_type_e) ((arg1)->type);
    ST(argvi) = SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_length_get) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_length_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_length_get" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    result = (unsigned int)(unsigned int) ((arg1)->length);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_strands_get) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    unsigned int result;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_strands_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_strands_get" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    result = (unsigned int)(unsigned int) ((arg1)->strands);
    ST(argvi) = SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(result)); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_params_get) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    vrna_param_t *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_params_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_params_get" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    result = (vrna_param_t *)(vrna_param_t *) ((arg1)->params);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_param_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_fold_compound_exp_params_get) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    vrna_exp_param_t *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: fold_compound_exp_params_get(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fold_compound_exp_params_get" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    result = (vrna_exp_param_t *)(vrna_exp_param_t *) ((arg1)->exp_params);
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_exp_param_t, 0 | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_fold_compound__SWIG_0) {
  {
    char *arg1 = (char *) 0 ;
    vrna_md_t *arg2 = (vrna_md_t *) 0 ;
    unsigned int arg3 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    vrna_fold_compound_t *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: new_fold_compound(sequence,md,options);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fold_compound" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_fold_compound" "', argument " "2"" of type '" "vrna_md_t *""'"); 
    }
    arg2 = reinterpret_cast< vrna_md_t * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_fold_compound" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = (vrna_fold_compound_t *)new_vrna_fold_compound_t__SWIG_0((char const *)arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_fold_compound_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_fold_compound__SWIG_1) {
  {
    char *arg1 = (char *) 0 ;
    vrna_md_t *arg2 = (vrna_md_t *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    vrna_fold_compound_t *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_fold_compound(sequence,md);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fold_compound" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_fold_compound" "', argument " "2"" of type '" "vrna_md_t *""'"); 
    }
    arg2 = reinterpret_cast< vrna_md_t * >(argp2);
    {
      try {
        result = (vrna_fold_compound_t *)new_vrna_fold_compound_t__SWIG_0((char const *)arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_fold_compound_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_fold_compound__SWIG_2) {
  {
    char *arg1 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int argvi = 0;
    vrna_fold_compound_t *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_fold_compound(sequence);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fold_compound" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    {
      try {
        result = (vrna_fold_compound_t *)new_vrna_fold_compound_t__SWIG_0((char const *)arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_fold_compound_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    SWIG_croak_null();
  }
}


XS(_wrap_new_fold_compound__SWIG_3) {
  {
    std::vector< std::string > arg1 ;
    vrna_md_t *arg2 = (vrna_md_t *) 0 ;
    unsigned int arg3 ;
    std::vector< std::string > *v1 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    unsigned int val3 ;
    int ecode3 = 0 ;
    int argvi = 0;
    vrna_fold_compound_t *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: new_fold_compound(alignment,md,options);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_fold_compound. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_fold_compound. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of new_fold_compound. "
          "Expected an array of ""std::string");
      }
    }
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_fold_compound" "', argument " "2"" of type '" "vrna_md_t *""'"); 
    }
    arg2 = reinterpret_cast< vrna_md_t * >(argp2);
    ecode3 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_fold_compound" "', argument " "3"" of type '" "unsigned int""'");
    } 
    arg3 = static_cast< unsigned int >(val3);
    {
      try {
        result = (vrna_fold_compound_t *)new_vrna_fold_compound_t__SWIG_3(arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_fold_compound_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    
    XSRETURN(argvi);
  fail:
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_fold_compound__SWIG_4) {
  {
    std::vector< std::string > arg1 ;
    vrna_md_t *arg2 = (vrna_md_t *) 0 ;
    std::vector< std::string > *v1 ;
    void *argp2 = 0 ;
    int res2 = 0 ;
    int argvi = 0;
    vrna_fold_compound_t *result = 0 ;
    dXSARGS;
    
    if ((items < 2) || (items > 2)) {
      SWIG_croak("Usage: new_fold_compound(alignment,md);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_fold_compound. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_fold_compound. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of new_fold_compound. "
          "Expected an array of ""std::string");
      }
    }
    res2 = SWIG_ConvertPtr(ST(1), &argp2,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_fold_compound" "', argument " "2"" of type '" "vrna_md_t *""'"); 
    }
    arg2 = reinterpret_cast< vrna_md_t * >(argp2);
    {
      try {
        result = (vrna_fold_compound_t *)new_vrna_fold_compound_t__SWIG_3(arg1,arg2);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_fold_compound_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_fold_compound__SWIG_5) {
  {
    std::vector< std::string > arg1 ;
    std::vector< std::string > *v1 ;
    int argvi = 0;
    vrna_fold_compound_t *result = 0 ;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: new_fold_compound(alignment);");
    }
    {
      if (SWIG_ConvertPtr(ST(0),(void **) &v1, 
          SWIGTYPE_p_std__vectorT_std__string_t,1) != -1){
        arg1 = *v1;
      } else if (SvROK(ST(0))) {
        AV *av = (AV *)SvRV(ST(0));
        if (SvTYPE(av) != SVt_PVAV)
        SWIG_croak("Type error in argument 1 of new_fold_compound. "
          "Expected an array of ""std::string");
        SV **tv;
        I32 len = av_len(av) + 1;
        for (int i=0; i<len; i++) {
          tv = av_fetch(av, i, 0);
          if (SvPOK(*tv)) {
            (&arg1)->push_back((std::string)SwigSvToString(*tv));
          } else {
            SWIG_croak("Type error in argument 1 of "
              "new_fold_compound. "
              "Expected an array of ""std::string");
          }
        }
      } else {
        SWIG_croak("Type error in argument 1 of new_fold_compound. "
          "Expected an array of ""std::string");
      }
    }
    {
      try {
        result = (vrna_fold_compound_t *)new_vrna_fold_compound_t__SWIG_3(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_fold_compound_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    XSRETURN(argvi);
  fail:
    SWIG_croak_null();
  }
}


XS(_wrap_new_fold_compound__SWIG_6) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    vrna_md_t *arg4 = (vrna_md_t *) 0 ;
    unsigned int arg5 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    unsigned int val5 ;
    int ecode5 = 0 ;
    int argvi = 0;
    vrna_fold_compound_t *result = 0 ;
    dXSARGS;
    
    if ((items < 5) || (items > 5)) {
      SWIG_croak("Usage: new_fold_compound(sequence,s1,s2,md,options);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fold_compound" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_fold_compound" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_fold_compound" "', argument " "3"" of type '" "char *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_fold_compound" "', argument " "4"" of type '" "vrna_md_t *""'"); 
    }
    arg4 = reinterpret_cast< vrna_md_t * >(argp4);
    ecode5 = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_fold_compound" "', argument " "5"" of type '" "unsigned int""'");
    } 
    arg5 = static_cast< unsigned int >(val5);
    {
      try {
        result = (vrna_fold_compound_t *)new_vrna_fold_compound_t__SWIG_6((char const *)arg1,arg2,arg3,arg4,arg5);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_fold_compound_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_fold_compound__SWIG_7) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    vrna_md_t *arg4 = (vrna_md_t *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    void *argp4 = 0 ;
    int res4 = 0 ;
    int argvi = 0;
    vrna_fold_compound_t *result = 0 ;
    dXSARGS;
    
    if ((items < 4) || (items > 4)) {
      SWIG_croak("Usage: new_fold_compound(sequence,s1,s2,md);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fold_compound" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_fold_compound" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_fold_compound" "', argument " "3"" of type '" "char *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    res4 = SWIG_ConvertPtr(ST(3), &argp4,SWIGTYPE_p_vrna_md_t, 0 |  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_fold_compound" "', argument " "4"" of type '" "vrna_md_t *""'"); 
    }
    arg4 = reinterpret_cast< vrna_md_t * >(argp4);
    {
      try {
        result = (vrna_fold_compound_t *)new_vrna_fold_compound_t__SWIG_6((char const *)arg1,arg2,arg3,arg4);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_fold_compound_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    
    SWIG_croak_null();
  }
}


XS(_wrap_new_fold_compound__SWIG_8) {
  {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    int res1 ;
    char *buf1 = 0 ;
    int alloc1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    int res3 ;
    char *buf3 = 0 ;
    int alloc3 = 0 ;
    int argvi = 0;
    vrna_fold_compound_t *result = 0 ;
    dXSARGS;
    
    if ((items < 3) || (items > 3)) {
      SWIG_croak("Usage: new_fold_compound(sequence,s1,s2);");
    }
    res1 = SWIG_AsCharPtrAndSize(ST(0), &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_fold_compound" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
    res2 = SWIG_AsCharPtrAndSize(ST(1), &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_fold_compound" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    res3 = SWIG_AsCharPtrAndSize(ST(2), &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_fold_compound" "', argument " "3"" of type '" "char *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
    {
      try {
        result = (vrna_fold_compound_t *)new_vrna_fold_compound_t__SWIG_6((char const *)arg1,arg2,arg3);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_vrna_fold_compound_t, SWIG_OWNER | SWIG_SHADOW); argvi++ ;
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    XSRETURN(argvi);
  fail:
    if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
    if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
    if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
    SWIG_croak_null();
  }
}


XS(_wrap_new_fold_compound) {
  dXSARGS;
  
  {
    unsigned long _index = 0;
    SWIG_TypeRank _rank = 0; 
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_1;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 1;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_1:
    
    if (items == 1) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_2;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 2;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_2:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_vrna_md_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_3;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 3;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_3:
    
    if (items == 2) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_vrna_md_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_4;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 4;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_4:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_vrna_md_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_5;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 5;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_5:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(2), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_6;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 6;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_6:
    
    if (items == 3) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        {
          {
            /* wrapped vector? */
            std::vector< std::string >* v;
            if (SWIG_ConvertPtr(ST(0),(void **) &v, 
                SWIGTYPE_p_std__vectorT_std__string_t,0) != -1) {
              _v = 1;
            } else if (SvROK(ST(0))) {
              /* native sequence? */
              AV *av = (AV *)SvRV(ST(0));
              if (SvTYPE(av) == SVt_PVAV) {
                I32 len = av_len(av) + 1;
                if (len == 0) {
                  /* an empty sequence can be of any type */
                  _v = 1;
                } else {
                  /* check the first element only */
                  SV **tv = av_fetch(av, 0, 0);
                  if (SvPOK(*tv))
                  _v = 1;
                  else
                  _v = 0;
                }
              }
            } else {
              _v = 0;
            }
          }
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(1), &vptr, SWIGTYPE_p_vrna_md_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(2), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_7;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 7;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_7:
    
    if (items == 4) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(2), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(3), &vptr, SWIGTYPE_p_vrna_md_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_8;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 8;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_8:
    
    if (items == 5) {
      SWIG_TypeRank _ranki = 0;
      SWIG_TypeRank _rankm = 0;
      SWIG_TypeRank _pi = 1;
      int _v = 0;
      {
        int res = SWIG_AsCharPtrAndSize(ST(0), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(1), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        int res = SWIG_AsCharPtrAndSize(ST(2), 0, NULL, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(ST(3), &vptr, SWIGTYPE_p_vrna_md_t, 0);
        _v = SWIG_CheckState(res);
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      {
        {
          int res = SWIG_AsVal_unsigned_SS_int SWIG_PERL_CALL_ARGS_2(ST(4), NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_9;
      _ranki += _v*_pi;
      _rankm += _pi;
      _pi *= SWIG_MAXCASTRANK;
      if (!_index || (_ranki < _rank)) {
        _rank = _ranki; _index = 9;
        if (_rank == _rankm) goto dispatch;
      }
    }
  check_9:
    
  dispatch:
    switch(_index) {
    case 1:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_fold_compound__SWIG_2); return;
    case 2:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_fold_compound__SWIG_5); return;
    case 3:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_fold_compound__SWIG_1); return;
    case 4:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_fold_compound__SWIG_4); return;
    case 5:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_fold_compound__SWIG_0); return;
    case 6:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_fold_compound__SWIG_8); return;
    case 7:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_fold_compound__SWIG_3); return;
    case 8:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_fold_compound__SWIG_7); return;
    case 9:
      PUSHMARK(MARK); SWIG_CALLXS(_wrap_new_fold_compound__SWIG_6); return;
    }
  }
  
  croak("No matching function for overloaded 'new_fold_compound'");
  XSRETURN(0);
}


XS(_wrap_delete_fold_compound) {
  {
    vrna_fold_compound_t *arg1 = (vrna_fold_compound_t *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int argvi = 0;
    dXSARGS;
    
    if ((items < 1) || (items > 1)) {
      SWIG_croak("Usage: delete_fold_compound(self);");
    }
    res1 = SWIG_ConvertPtr(ST(0), &argp1,SWIGTYPE_p_vrna_fold_compound_t, SWIG_POINTER_DISOWN |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_fold_compound" "', argument " "1"" of type '" "vrna_fold_compound_t *""'"); 
    }
    arg1 = reinterpret_cast< vrna_fold_compound_t * >(argp1);
    {
      try {
        delete_vrna_fold_compound_t(arg1);
      } catch (const std::exception& e) {
        SWIG_exception(SWIG_RuntimeError, e.what());
      }
    }
    ST(argvi) = &PL_sv_undef;
    
    XSRETURN(argvi);
  fail:
    
    SWIG_croak_null();
  }
}



/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_doubleArrayTo_p_double(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((double *)  ((doubleArray *) x));
}
static void *_p_a_MAXLOOP_1__doubleArrayTo_p_a_MAXLOOP_1__double(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((double (*)[MAXLOOP+1])  ((doubleArray (*)[MAXLOOP+1]) x));
}
static void *_p_a_NBPAIRS_1__a_5__a_5__a_5__doubleArrayTo_p_a_NBPAIRS_1__a_5__a_5__a_5__double(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((double (*)[NBPAIRS+1][5][5][5])  ((doubleArray (*)[NBPAIRS+1][5][5][5]) x));
}
static void *_p_a_NBPAIRS_1__a_5__a_5__doubleArrayTo_p_a_NBPAIRS_1__a_5__a_5__double(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((double (*)[NBPAIRS+1][5][5])  ((doubleArray (*)[NBPAIRS+1][5][5]) x));
}
static void *_p_a_5__doubleArrayTo_p_a_5__double(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((double (*)[5])  ((doubleArray (*)[5]) x));
}
static void *_p_a_5__a_5__doubleArrayTo_p_a_5__a_5__double(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((double (*)[5][5])  ((doubleArray (*)[5][5]) x));
}
static void *_p_a_NBPAIRS_1__doubleArrayTo_p_a_NBPAIRS_1__double(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((double (*)[NBPAIRS+1])  ((doubleArray (*)[NBPAIRS+1]) x));
}
static void *_p_a_7_1__a_5__a_5__a_5__a_5__intArrayTo_p_a_7_1__a_5__a_5__a_5__a_5__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)[7+1][5][5][5][5])  ((intArray (*)[7+1][5][5][5][5]) x));
}
static void *_p_a_7_1__a_5__a_5__a_5__intArrayTo_p_a_7_1__a_5__a_5__a_5__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)[7+1][5][5][5])  ((intArray (*)[7+1][5][5][5]) x));
}
static void *_p_a_7_1__a_5__a_5__intArrayTo_p_a_7_1__a_5__a_5__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)[7+1][5][5])  ((intArray (*)[7+1][5][5]) x));
}
static void *_p_a_5__a_5__intArrayTo_p_a_5__a_5__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)[5][5])  ((intArray (*)[5][5]) x));
}
static void *_p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__intArrayTo_p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)[NBPAIRS+1][5][5][5][5])  ((intArray (*)[NBPAIRS+1][5][5][5][5]) x));
}
static void *_p_a_NBPAIRS_1__a_5__a_5__a_5__intArrayTo_p_a_NBPAIRS_1__a_5__a_5__a_5__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)[NBPAIRS+1][5][5][5])  ((intArray (*)[NBPAIRS+1][5][5][5]) x));
}
static void *_p_a_NBPAIRS_1__a_5__a_5__intArrayTo_p_a_NBPAIRS_1__a_5__a_5__int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int (*)[NBPAIRS+1][5][5])  ((intArray (*)[NBPAIRS+1][5][5]) x));
}
static void *_p_floatArrayTo_p_float(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((float *)  ((floatArray *) x));
}
static void *_p_intArrayTo_p_int(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((int *)  ((intArray *) x));
}
static void *_p_a_3_VRNA_GQUAD_MAX_LINKER_LENGTH_1__doubleArrayTo_p_a_3_VRNA_GQUAD_MAX_LINKER_LENGTH_1__double(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((double (*)[3*VRNA_GQUAD_MAX_LINKER_LENGTH+1])  ((doubleArray (*)[3*VRNA_GQUAD_MAX_LINKER_LENGTH+1]) x));
}
static void *_p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__doubleArrayTo_p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__double(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((double (*)[NBPAIRS+1][5][5][5][5])  ((doubleArray (*)[NBPAIRS+1][5][5][5][5]) x));
}
static swig_type_info _swigt__p_COORDINATE = {"_p_COORDINATE", "COORDINATE *", 0, 0, (void*)"RNA::COORDINATE", 0};
static swig_type_info _swigt__p_SOLUTION = {"_p_SOLUTION", "SOLUTION *", 0, 0, (void*)"RNA::SOLUTION", 0};
static swig_type_info _swigt__p_Tree = {"_p_Tree", "Tree *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__struct_en = {"_p__struct_en", "_struct_en *|struct_en *", 0, 0, (void*)"RNA::struct_en", 0};
static swig_type_info _swigt__p_a_3_VRNA_GQUAD_MAX_LINKER_LENGTH_1__double = {"_p_a_3_VRNA_GQUAD_MAX_LINKER_LENGTH_1__double", "double (*)[3*VRNA_GQUAD_MAX_LINKER_LENGTH+1]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_3_VRNA_GQUAD_MAX_LINKER_LENGTH_1__doubleArray = {"_p_a_3_VRNA_GQUAD_MAX_LINKER_LENGTH_1__doubleArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_a_5__a_5__double = {"_p_a_5__a_5__double", "double (*)[5][5]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_5__a_5__doubleArray = {"_p_a_5__a_5__doubleArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_a_5__a_5__int = {"_p_a_5__a_5__int", "int (*)[5][5]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_5__a_5__intArray = {"_p_a_5__a_5__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_a_5__double = {"_p_a_5__double", "double (*)[5]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_5__doubleArray = {"_p_a_5__doubleArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_a_7_1__a_5__a_5__a_5__a_5__int = {"_p_a_7_1__a_5__a_5__a_5__a_5__int", "int (*)[7+1][5][5][5][5]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_7_1__a_5__a_5__a_5__a_5__intArray = {"_p_a_7_1__a_5__a_5__a_5__a_5__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_a_7_1__a_5__a_5__a_5__int = {"_p_a_7_1__a_5__a_5__a_5__int", "int (*)[7+1][5][5][5]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_7_1__a_5__a_5__a_5__intArray = {"_p_a_7_1__a_5__a_5__a_5__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_a_7_1__a_5__a_5__int = {"_p_a_7_1__a_5__a_5__int", "int (*)[7+1][5][5]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_7_1__a_5__a_5__intArray = {"_p_a_7_1__a_5__a_5__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_a_MAXLOOP_1__double = {"_p_a_MAXLOOP_1__double", "double (*)[MAXLOOP+1]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_MAXLOOP_1__doubleArray = {"_p_a_MAXLOOP_1__doubleArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__double = {"_p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__double", "double (*)[NBPAIRS+1][5][5][5][5]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__doubleArray = {"_p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__doubleArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__int = {"_p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__int", "int (*)[NBPAIRS+1][5][5][5][5]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__intArray = {"_p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__double = {"_p_a_NBPAIRS_1__a_5__a_5__a_5__double", "double (*)[NBPAIRS+1][5][5][5]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__doubleArray = {"_p_a_NBPAIRS_1__a_5__a_5__a_5__doubleArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__int = {"_p_a_NBPAIRS_1__a_5__a_5__a_5__int", "int (*)[NBPAIRS+1][5][5][5]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__intArray = {"_p_a_NBPAIRS_1__a_5__a_5__a_5__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_a_NBPAIRS_1__a_5__a_5__double = {"_p_a_NBPAIRS_1__a_5__a_5__double", "double (*)[NBPAIRS+1][5][5]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_NBPAIRS_1__a_5__a_5__doubleArray = {"_p_a_NBPAIRS_1__a_5__a_5__doubleArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_a_NBPAIRS_1__a_5__a_5__int = {"_p_a_NBPAIRS_1__a_5__a_5__int", "int (*)[NBPAIRS+1][5][5]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_NBPAIRS_1__a_5__a_5__intArray = {"_p_a_NBPAIRS_1__a_5__a_5__intArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_a_NBPAIRS_1__double = {"_p_a_NBPAIRS_1__double", "double (*)[NBPAIRS+1]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_NBPAIRS_1__doubleArray = {"_p_a_NBPAIRS_1__doubleArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "FLT_OR_DBL *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_doubleArray = {"_p_doubleArray", "doubleArray *", 0, 0, (void*)"RNA::doubleArray", 0};
static swig_type_info _swigt__p_duplexT = {"_p_duplexT", "duplexT *", 0, 0, (void*)"RNA::duplexT", 0};
static swig_type_info _swigt__p_duplex_list_t = {"_p_duplex_list_t", "duplex_list_t *", 0, 0, (void*)"RNA::duplex_list_t", 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_floatArray = {"_p_floatArray", "floatArray *", 0, 0, (void*)"RNA::floatArray", 0};
static swig_type_info _swigt__p_heat_capacity_result = {"_p_heat_capacity_result", "heat_capacity_result *", 0, 0, (void*)"RNA::heat_capacity_result", 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_intArray = {"_p_intArray", "intArray *", 0, 0, (void*)"RNA::intArray", 0};
static swig_type_info _swigt__p_my_fc_type_e = {"_p_my_fc_type_e", "enum my_fc_type_e *|my_fc_type_e *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_p_char = {"_p_p_p_char", "char ***", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_second_type = {"_p_second_type", "second_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__out_of_range = {"_p_std__out_of_range", "std::out_of_range *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_double_double_t = {"_p_std__pairT_double_double_t", "std::pair< double,double > *", 0, 0, (void*)"RNA::DoublePair", 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_COORDINATE_t = {"_p_std__vectorT_COORDINATE_t", "std::vector< COORDINATE > *", 0, 0, (void*)"RNA::CoordinateVector", 0};
static swig_type_info _swigt__p_std__vectorT_SOLUTION_t = {"_p_std__vectorT_SOLUTION_t", "std::vector< SOLUTION > *", 0, 0, (void*)"RNA::SOLUTIONVector", 0};
static swig_type_info _swigt__p_std__vectorT_char_const_p_t = {"_p_std__vectorT_char_const_p_t", "std::vector< char const * > *", 0, 0, (void*)"RNA::ConstCharVector", 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< double > *", 0, 0, (void*)"RNA::DoubleVector", 0};
static swig_type_info _swigt__p_std__vectorT_duplex_list_t_t = {"_p_std__vectorT_duplex_list_t_t", "std::vector< duplex_list_t > *", 0, 0, (void*)"RNA::DuplexVector", 0};
static swig_type_info _swigt__p_std__vectorT_heat_capacity_result_t = {"_p_std__vectorT_heat_capacity_result_t", "std::vector< heat_capacity_result > *", 0, 0, (void*)"RNA::HeatCapacityVector", 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int > *", 0, 0, (void*)"RNA::IntVector", 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)"RNA::StringVector", 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_double_t_t = {"_p_std__vectorT_std__vectorT_double_t_t", "std::vector< std::vector< double > > *", 0, 0, (void*)"RNA::DoubleDoubleVector", 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_int_t_t = {"_p_std__vectorT_std__vectorT_int_t_t", "std::vector< std::vector< int > > *", 0, 0, (void*)"RNA::IntIntVector", 0};
static swig_type_info _swigt__p_std__vectorT_subopt_solution_t = {"_p_std__vectorT_subopt_solution_t", "std::vector< subopt_solution > *", 0, 0, (void*)"RNA::SuboptVector", 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_t = {"_p_std__vectorT_unsigned_int_t", "std::vector< unsigned int > *", 0, 0, (void*)"RNA::UIntVector", 0};
static swig_type_info _swigt__p_std__vectorT_vrna_ep_t_t = {"_p_std__vectorT_vrna_ep_t_t", "std::vector< vrna_ep_t > *", 0, 0, (void*)"RNA::ElemProbVector", 0};
static swig_type_info _swigt__p_std__vectorT_vrna_move_t_t = {"_p_std__vectorT_vrna_move_t_t", "std::vector< vrna_move_t > *", 0, 0, (void*)"RNA::MoveVector", 0};
static swig_type_info _swigt__p_std__vectorT_vrna_path_t_t = {"_p_std__vectorT_vrna_path_t_t", "std::vector< vrna_path_t > *", 0, 0, (void*)"RNA::PathVector", 0};
static swig_type_info _swigt__p_subopt_solution = {"_p_subopt_solution", "subopt_solution *", 0, 0, (void*)"RNA::subopt_solution", 0};
static swig_type_info _swigt__p_swString = {"_p_swString", "swString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vrna_basepair_t = {"_p_vrna_basepair_t", "vrna_basepair_t *", 0, 0, (void*)"RNA::basepair", 0};
static swig_type_info _swigt__p_vrna_bp_stack_s = {"_p_vrna_bp_stack_s", "vrna_bp_stack_s *|bondT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vrna_command_s = {"_p_vrna_command_s", "vrna_command_s *", 0, 0, (void*)"RNA::cmd", 0};
static swig_type_info _swigt__p_vrna_cpair_s = {"_p_vrna_cpair_s", "vrna_cpair_s *|cpair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vrna_dimer_pf_s = {"_p_vrna_dimer_pf_s", "vrna_dimer_pf_s *|cofoldF *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vrna_elem_prob_s = {"_p_vrna_elem_prob_s", "vrna_elem_prob_s *|plist *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vrna_ep_t = {"_p_vrna_ep_t", "vrna_ep_t *", 0, 0, (void*)"RNA::ep", 0};
static swig_type_info _swigt__p_vrna_exp_param_t = {"_p_vrna_exp_param_t", "vrna_exp_param_t *", 0, 0, (void*)"RNA::exp_param", 0};
static swig_type_info _swigt__p_vrna_fold_compound_t = {"_p_vrna_fold_compound_t", "vrna_fold_compound_t *", 0, 0, (void*)"RNA::fold_compound", 0};
static swig_type_info _swigt__p_vrna_md_t = {"_p_vrna_md_t", "vrna_md_t *", 0, 0, (void*)"RNA::md", 0};
static swig_type_info _swigt__p_vrna_move_t = {"_p_vrna_move_t", "vrna_move_t *", 0, 0, (void*)"RNA::move", 0};
static swig_type_info _swigt__p_vrna_param_t = {"_p_vrna_param_t", "vrna_param_t *", 0, 0, (void*)"RNA::param", 0};
static swig_type_info _swigt__p_vrna_path_options_s = {"_p_vrna_path_options_s", "vrna_path_options_s *", 0, 0, (void*)"RNA::path_options", 0};
static swig_type_info _swigt__p_vrna_path_s = {"_p_vrna_path_s", "path_t *|vrna_path_s *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vrna_path_t = {"_p_vrna_path_t", "vrna_path_t *", 0, 0, (void*)"RNA::path", 0};
static swig_type_info _swigt__p_vrna_pbacktrack_mem_t = {"_p_vrna_pbacktrack_mem_t", "vrna_pbacktrack_mem_t *", 0, 0, (void*)"RNA::pbacktrack_mem", 0};
static swig_type_info _swigt__p_vrna_pinfo_s = {"_p_vrna_pinfo_s", "vrna_pinfo_s *|pair_info *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vrna_sc_s = {"_p_vrna_sc_s", "vrna_sc_t *|vrna_sc_s *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_COORDINATE,
  &_swigt__p_SOLUTION,
  &_swigt__p_Tree,
  &_swigt__p__struct_en,
  &_swigt__p_a_3_VRNA_GQUAD_MAX_LINKER_LENGTH_1__double,
  &_swigt__p_a_3_VRNA_GQUAD_MAX_LINKER_LENGTH_1__doubleArray,
  &_swigt__p_a_5__a_5__double,
  &_swigt__p_a_5__a_5__doubleArray,
  &_swigt__p_a_5__a_5__int,
  &_swigt__p_a_5__a_5__intArray,
  &_swigt__p_a_5__double,
  &_swigt__p_a_5__doubleArray,
  &_swigt__p_a_7_1__a_5__a_5__a_5__a_5__int,
  &_swigt__p_a_7_1__a_5__a_5__a_5__a_5__intArray,
  &_swigt__p_a_7_1__a_5__a_5__a_5__int,
  &_swigt__p_a_7_1__a_5__a_5__a_5__intArray,
  &_swigt__p_a_7_1__a_5__a_5__int,
  &_swigt__p_a_7_1__a_5__a_5__intArray,
  &_swigt__p_a_MAXLOOP_1__double,
  &_swigt__p_a_MAXLOOP_1__doubleArray,
  &_swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__double,
  &_swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__doubleArray,
  &_swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__int,
  &_swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__intArray,
  &_swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__double,
  &_swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__doubleArray,
  &_swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__int,
  &_swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__intArray,
  &_swigt__p_a_NBPAIRS_1__a_5__a_5__double,
  &_swigt__p_a_NBPAIRS_1__a_5__a_5__doubleArray,
  &_swigt__p_a_NBPAIRS_1__a_5__a_5__int,
  &_swigt__p_a_NBPAIRS_1__a_5__a_5__intArray,
  &_swigt__p_a_NBPAIRS_1__double,
  &_swigt__p_a_NBPAIRS_1__doubleArray,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_doubleArray,
  &_swigt__p_duplexT,
  &_swigt__p_duplex_list_t,
  &_swigt__p_first_type,
  &_swigt__p_float,
  &_swigt__p_floatArray,
  &_swigt__p_heat_capacity_result,
  &_swigt__p_int,
  &_swigt__p_intArray,
  &_swigt__p_my_fc_type_e,
  &_swigt__p_p_char,
  &_swigt__p_p_p_char,
  &_swigt__p_p_void,
  &_swigt__p_second_type,
  &_swigt__p_short,
  &_swigt__p_size_type,
  &_swigt__p_std__out_of_range,
  &_swigt__p_std__pairT_double_double_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_COORDINATE_t,
  &_swigt__p_std__vectorT_SOLUTION_t,
  &_swigt__p_std__vectorT_char_const_p_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_duplex_list_t_t,
  &_swigt__p_std__vectorT_heat_capacity_result_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__vectorT_std__vectorT_double_t_t,
  &_swigt__p_std__vectorT_std__vectorT_int_t_t,
  &_swigt__p_std__vectorT_subopt_solution_t,
  &_swigt__p_std__vectorT_unsigned_int_t,
  &_swigt__p_std__vectorT_vrna_ep_t_t,
  &_swigt__p_std__vectorT_vrna_move_t_t,
  &_swigt__p_std__vectorT_vrna_path_t_t,
  &_swigt__p_subopt_solution,
  &_swigt__p_swString,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
  &_swigt__p_void,
  &_swigt__p_vrna_basepair_t,
  &_swigt__p_vrna_bp_stack_s,
  &_swigt__p_vrna_command_s,
  &_swigt__p_vrna_cpair_s,
  &_swigt__p_vrna_dimer_pf_s,
  &_swigt__p_vrna_elem_prob_s,
  &_swigt__p_vrna_ep_t,
  &_swigt__p_vrna_exp_param_t,
  &_swigt__p_vrna_fold_compound_t,
  &_swigt__p_vrna_md_t,
  &_swigt__p_vrna_move_t,
  &_swigt__p_vrna_param_t,
  &_swigt__p_vrna_path_options_s,
  &_swigt__p_vrna_path_s,
  &_swigt__p_vrna_path_t,
  &_swigt__p_vrna_pbacktrack_mem_t,
  &_swigt__p_vrna_pinfo_s,
  &_swigt__p_vrna_sc_s,
};

static swig_cast_info _swigc__p_COORDINATE[] = {  {&_swigt__p_COORDINATE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SOLUTION[] = {  {&_swigt__p_SOLUTION, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Tree[] = {  {&_swigt__p_Tree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__struct_en[] = {  {&_swigt__p__struct_en, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_3_VRNA_GQUAD_MAX_LINKER_LENGTH_1__doubleArray[] = {{&_swigt__p_a_3_VRNA_GQUAD_MAX_LINKER_LENGTH_1__doubleArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_3_VRNA_GQUAD_MAX_LINKER_LENGTH_1__double[] = {  {&_swigt__p_a_3_VRNA_GQUAD_MAX_LINKER_LENGTH_1__doubleArray, _p_a_3_VRNA_GQUAD_MAX_LINKER_LENGTH_1__doubleArrayTo_p_a_3_VRNA_GQUAD_MAX_LINKER_LENGTH_1__double, 0, 0},  {&_swigt__p_a_3_VRNA_GQUAD_MAX_LINKER_LENGTH_1__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_5__a_5__doubleArray[] = {{&_swigt__p_a_5__a_5__doubleArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_5__a_5__double[] = {  {&_swigt__p_a_5__a_5__doubleArray, _p_a_5__a_5__doubleArrayTo_p_a_5__a_5__double, 0, 0},  {&_swigt__p_a_5__a_5__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_5__a_5__intArray[] = {{&_swigt__p_a_5__a_5__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_5__a_5__int[] = {  {&_swigt__p_a_5__a_5__int, 0, 0, 0},  {&_swigt__p_a_5__a_5__intArray, _p_a_5__a_5__intArrayTo_p_a_5__a_5__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_5__doubleArray[] = {{&_swigt__p_a_5__doubleArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_5__double[] = {  {&_swigt__p_a_5__doubleArray, _p_a_5__doubleArrayTo_p_a_5__double, 0, 0},  {&_swigt__p_a_5__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_7_1__a_5__a_5__a_5__a_5__intArray[] = {{&_swigt__p_a_7_1__a_5__a_5__a_5__a_5__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_7_1__a_5__a_5__a_5__a_5__int[] = {  {&_swigt__p_a_7_1__a_5__a_5__a_5__a_5__int, 0, 0, 0},  {&_swigt__p_a_7_1__a_5__a_5__a_5__a_5__intArray, _p_a_7_1__a_5__a_5__a_5__a_5__intArrayTo_p_a_7_1__a_5__a_5__a_5__a_5__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_7_1__a_5__a_5__a_5__intArray[] = {{&_swigt__p_a_7_1__a_5__a_5__a_5__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_7_1__a_5__a_5__a_5__int[] = {  {&_swigt__p_a_7_1__a_5__a_5__a_5__int, 0, 0, 0},  {&_swigt__p_a_7_1__a_5__a_5__a_5__intArray, _p_a_7_1__a_5__a_5__a_5__intArrayTo_p_a_7_1__a_5__a_5__a_5__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_7_1__a_5__a_5__intArray[] = {{&_swigt__p_a_7_1__a_5__a_5__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_7_1__a_5__a_5__int[] = {  {&_swigt__p_a_7_1__a_5__a_5__int, 0, 0, 0},  {&_swigt__p_a_7_1__a_5__a_5__intArray, _p_a_7_1__a_5__a_5__intArrayTo_p_a_7_1__a_5__a_5__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_MAXLOOP_1__doubleArray[] = {{&_swigt__p_a_MAXLOOP_1__doubleArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_MAXLOOP_1__double[] = {  {&_swigt__p_a_MAXLOOP_1__doubleArray, _p_a_MAXLOOP_1__doubleArrayTo_p_a_MAXLOOP_1__double, 0, 0},  {&_swigt__p_a_MAXLOOP_1__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__doubleArray[] = {{&_swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__doubleArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__double[] = {  {&_swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__doubleArray, _p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__doubleArrayTo_p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__double, 0, 0},  {&_swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__intArray[] = {{&_swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__int[] = {  {&_swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__int, 0, 0, 0},  {&_swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__intArray, _p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__intArrayTo_p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_NBPAIRS_1__a_5__a_5__a_5__doubleArray[] = {{&_swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__doubleArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_NBPAIRS_1__a_5__a_5__a_5__double[] = {  {&_swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__doubleArray, _p_a_NBPAIRS_1__a_5__a_5__a_5__doubleArrayTo_p_a_NBPAIRS_1__a_5__a_5__a_5__double, 0, 0},  {&_swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_NBPAIRS_1__a_5__a_5__a_5__intArray[] = {{&_swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_NBPAIRS_1__a_5__a_5__a_5__int[] = {  {&_swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__int, 0, 0, 0},  {&_swigt__p_a_NBPAIRS_1__a_5__a_5__a_5__intArray, _p_a_NBPAIRS_1__a_5__a_5__a_5__intArrayTo_p_a_NBPAIRS_1__a_5__a_5__a_5__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_NBPAIRS_1__a_5__a_5__doubleArray[] = {{&_swigt__p_a_NBPAIRS_1__a_5__a_5__doubleArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_NBPAIRS_1__a_5__a_5__double[] = {  {&_swigt__p_a_NBPAIRS_1__a_5__a_5__doubleArray, _p_a_NBPAIRS_1__a_5__a_5__doubleArrayTo_p_a_NBPAIRS_1__a_5__a_5__double, 0, 0},  {&_swigt__p_a_NBPAIRS_1__a_5__a_5__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_NBPAIRS_1__a_5__a_5__intArray[] = {{&_swigt__p_a_NBPAIRS_1__a_5__a_5__intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_NBPAIRS_1__a_5__a_5__int[] = {  {&_swigt__p_a_NBPAIRS_1__a_5__a_5__int, 0, 0, 0},  {&_swigt__p_a_NBPAIRS_1__a_5__a_5__intArray, _p_a_NBPAIRS_1__a_5__a_5__intArrayTo_p_a_NBPAIRS_1__a_5__a_5__int, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_NBPAIRS_1__doubleArray[] = {{&_swigt__p_a_NBPAIRS_1__doubleArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_NBPAIRS_1__double[] = {  {&_swigt__p_a_NBPAIRS_1__doubleArray, _p_a_NBPAIRS_1__doubleArrayTo_p_a_NBPAIRS_1__double, 0, 0},  {&_swigt__p_a_NBPAIRS_1__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_doubleArray, _p_doubleArrayTo_p_double, 0, 0},  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_doubleArray[] = {  {&_swigt__p_doubleArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_duplexT[] = {  {&_swigt__p_duplexT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_duplex_list_t[] = {  {&_swigt__p_duplex_list_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},  {&_swigt__p_floatArray, _p_floatArrayTo_p_float, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_floatArray[] = {  {&_swigt__p_floatArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_heat_capacity_result[] = {  {&_swigt__p_heat_capacity_result, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_intArray, _p_intArrayTo_p_int, 0, 0},  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_intArray[] = {  {&_swigt__p_intArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_my_fc_type_e[] = {  {&_swigt__p_my_fc_type_e, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_p_char[] = {  {&_swigt__p_p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_second_type[] = {  {&_swigt__p_second_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__out_of_range[] = {  {&_swigt__p_std__out_of_range, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_double_double_t[] = {  {&_swigt__p_std__pairT_double_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_COORDINATE_t[] = {  {&_swigt__p_std__vectorT_COORDINATE_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_SOLUTION_t[] = {  {&_swigt__p_std__vectorT_SOLUTION_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_char_const_p_t[] = {  {&_swigt__p_std__vectorT_char_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_duplex_list_t_t[] = {  {&_swigt__p_std__vectorT_duplex_list_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_heat_capacity_result_t[] = {  {&_swigt__p_std__vectorT_heat_capacity_result_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_double_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_int_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_subopt_solution_t[] = {  {&_swigt__p_std__vectorT_subopt_solution_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_vrna_ep_t_t[] = {  {&_swigt__p_std__vectorT_vrna_ep_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_vrna_move_t_t[] = {  {&_swigt__p_std__vectorT_vrna_move_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_vrna_path_t_t[] = {  {&_swigt__p_std__vectorT_vrna_path_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_subopt_solution[] = {  {&_swigt__p_subopt_solution, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swString[] = {  {&_swigt__p_swString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vrna_basepair_t[] = {  {&_swigt__p_vrna_basepair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vrna_bp_stack_s[] = {  {&_swigt__p_vrna_bp_stack_s, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vrna_command_s[] = {  {&_swigt__p_vrna_command_s, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vrna_cpair_s[] = {  {&_swigt__p_vrna_cpair_s, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vrna_dimer_pf_s[] = {  {&_swigt__p_vrna_dimer_pf_s, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vrna_elem_prob_s[] = {  {&_swigt__p_vrna_elem_prob_s, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vrna_ep_t[] = {  {&_swigt__p_vrna_ep_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vrna_exp_param_t[] = {  {&_swigt__p_vrna_exp_param_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vrna_fold_compound_t[] = {  {&_swigt__p_vrna_fold_compound_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vrna_md_t[] = {  {&_swigt__p_vrna_md_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vrna_move_t[] = {  {&_swigt__p_vrna_move_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vrna_param_t[] = {  {&_swigt__p_vrna_param_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vrna_path_options_s[] = {  {&_swigt__p_vrna_path_options_s, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vrna_path_s[] = {  {&_swigt__p_vrna_path_s, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vrna_path_t[] = {  {&_swigt__p_vrna_path_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vrna_pbacktrack_mem_t[] = {  {&_swigt__p_vrna_pbacktrack_mem_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vrna_pinfo_s[] = {  {&_swigt__p_vrna_pinfo_s, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vrna_sc_s[] = {  {&_swigt__p_vrna_sc_s, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_COORDINATE,
  _swigc__p_SOLUTION,
  _swigc__p_Tree,
  _swigc__p__struct_en,
  _swigc__p_a_3_VRNA_GQUAD_MAX_LINKER_LENGTH_1__double,
  _swigc__p_a_3_VRNA_GQUAD_MAX_LINKER_LENGTH_1__doubleArray,
  _swigc__p_a_5__a_5__double,
  _swigc__p_a_5__a_5__doubleArray,
  _swigc__p_a_5__a_5__int,
  _swigc__p_a_5__a_5__intArray,
  _swigc__p_a_5__double,
  _swigc__p_a_5__doubleArray,
  _swigc__p_a_7_1__a_5__a_5__a_5__a_5__int,
  _swigc__p_a_7_1__a_5__a_5__a_5__a_5__intArray,
  _swigc__p_a_7_1__a_5__a_5__a_5__int,
  _swigc__p_a_7_1__a_5__a_5__a_5__intArray,
  _swigc__p_a_7_1__a_5__a_5__int,
  _swigc__p_a_7_1__a_5__a_5__intArray,
  _swigc__p_a_MAXLOOP_1__double,
  _swigc__p_a_MAXLOOP_1__doubleArray,
  _swigc__p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__double,
  _swigc__p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__doubleArray,
  _swigc__p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__int,
  _swigc__p_a_NBPAIRS_1__a_5__a_5__a_5__a_5__intArray,
  _swigc__p_a_NBPAIRS_1__a_5__a_5__a_5__double,
  _swigc__p_a_NBPAIRS_1__a_5__a_5__a_5__doubleArray,
  _swigc__p_a_NBPAIRS_1__a_5__a_5__a_5__int,
  _swigc__p_a_NBPAIRS_1__a_5__a_5__a_5__intArray,
  _swigc__p_a_NBPAIRS_1__a_5__a_5__double,
  _swigc__p_a_NBPAIRS_1__a_5__a_5__doubleArray,
  _swigc__p_a_NBPAIRS_1__a_5__a_5__int,
  _swigc__p_a_NBPAIRS_1__a_5__a_5__intArray,
  _swigc__p_a_NBPAIRS_1__double,
  _swigc__p_a_NBPAIRS_1__doubleArray,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_doubleArray,
  _swigc__p_duplexT,
  _swigc__p_duplex_list_t,
  _swigc__p_first_type,
  _swigc__p_float,
  _swigc__p_floatArray,
  _swigc__p_heat_capacity_result,
  _swigc__p_int,
  _swigc__p_intArray,
  _swigc__p_my_fc_type_e,
  _swigc__p_p_char,
  _swigc__p_p_p_char,
  _swigc__p_p_void,
  _swigc__p_second_type,
  _swigc__p_short,
  _swigc__p_size_type,
  _swigc__p_std__out_of_range,
  _swigc__p_std__pairT_double_double_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_COORDINATE_t,
  _swigc__p_std__vectorT_SOLUTION_t,
  _swigc__p_std__vectorT_char_const_p_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_duplex_list_t_t,
  _swigc__p_std__vectorT_heat_capacity_result_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__vectorT_std__vectorT_double_t_t,
  _swigc__p_std__vectorT_std__vectorT_int_t_t,
  _swigc__p_std__vectorT_subopt_solution_t,
  _swigc__p_std__vectorT_unsigned_int_t,
  _swigc__p_std__vectorT_vrna_ep_t_t,
  _swigc__p_std__vectorT_vrna_move_t_t,
  _swigc__p_std__vectorT_vrna_path_t_t,
  _swigc__p_subopt_solution,
  _swigc__p_swString,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
  _swigc__p_void,
  _swigc__p_vrna_basepair_t,
  _swigc__p_vrna_bp_stack_s,
  _swigc__p_vrna_command_s,
  _swigc__p_vrna_cpair_s,
  _swigc__p_vrna_dimer_pf_s,
  _swigc__p_vrna_elem_prob_s,
  _swigc__p_vrna_ep_t,
  _swigc__p_vrna_exp_param_t,
  _swigc__p_vrna_fold_compound_t,
  _swigc__p_vrna_md_t,
  _swigc__p_vrna_move_t,
  _swigc__p_vrna_param_t,
  _swigc__p_vrna_path_options_s,
  _swigc__p_vrna_path_s,
  _swigc__p_vrna_path_t,
  _swigc__p_vrna_pbacktrack_mem_t,
  _swigc__p_vrna_pinfo_s,
  _swigc__p_vrna_sc_s,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_constant_info swig_constants[] = {
{0,0,0,0,0,0}
};
#ifdef __cplusplus
}
#endif
static swig_variable_info swig_variables[] = {
    { "RNAc::lxc37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_lxc37_get,0 },
    { "RNAc::stack37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_stack37_get,0 },
    { "RNAc::stackdH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_stackdH_get,0 },
    { "RNAc::hairpin37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_hairpin37_get,0 },
    { "RNAc::hairpindH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_hairpindH_get,0 },
    { "RNAc::bulge37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_bulge37_get,0 },
    { "RNAc::bulgedH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_bulgedH_get,0 },
    { "RNAc::internal_loop37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_internal_loop37_get,0 },
    { "RNAc::internal_loopdH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_internal_loopdH_get,0 },
    { "RNAc::mismatchI37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_mismatchI37_get,&SWIGTYPE_p_a_5__a_5__int },
    { "RNAc::mismatchIdH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_mismatchIdH_get,&SWIGTYPE_p_a_5__a_5__int },
    { "RNAc::mismatch1nI37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_mismatch1nI37_get,&SWIGTYPE_p_a_5__a_5__int },
    { "RNAc::mismatch23I37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_mismatch23I37_get,&SWIGTYPE_p_a_5__a_5__int },
    { "RNAc::mismatch1nIdH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_mismatch1nIdH_get,&SWIGTYPE_p_a_5__a_5__int },
    { "RNAc::mismatch23IdH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_mismatch23IdH_get,&SWIGTYPE_p_a_5__a_5__int },
    { "RNAc::mismatchH37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_mismatchH37_get,&SWIGTYPE_p_a_5__a_5__int },
    { "RNAc::mismatchM37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_mismatchM37_get,&SWIGTYPE_p_a_5__a_5__int },
    { "RNAc::mismatchHdH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_mismatchHdH_get,&SWIGTYPE_p_a_5__a_5__int },
    { "RNAc::mismatchMdH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_mismatchMdH_get,&SWIGTYPE_p_a_5__a_5__int },
    { "RNAc::mismatchExt37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_mismatchExt37_get,&SWIGTYPE_p_a_5__a_5__int },
    { "RNAc::mismatchExtdH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_mismatchExtdH_get,&SWIGTYPE_p_a_5__a_5__int },
    { "RNAc::dangle5_37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_dangle5_37_get,0 },
    { "RNAc::dangle3_37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_dangle3_37_get,0 },
    { "RNAc::dangle3_dH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_dangle3_dH_get,0 },
    { "RNAc::dangle5_dH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_dangle5_dH_get,0 },
    { "RNAc::int11_37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_int11_37_get,&SWIGTYPE_p_a_7_1__a_5__a_5__int },
    { "RNAc::int11_dH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_int11_dH_get,&SWIGTYPE_p_a_7_1__a_5__a_5__int },
    { "RNAc::int21_37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_int21_37_get,&SWIGTYPE_p_a_7_1__a_5__a_5__a_5__int },
    { "RNAc::int21_dH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_int21_dH_get,&SWIGTYPE_p_a_7_1__a_5__a_5__a_5__int },
    { "RNAc::int22_37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_int22_37_get,&SWIGTYPE_p_a_7_1__a_5__a_5__a_5__a_5__int },
    { "RNAc::int22_dH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_int22_dH_get,&SWIGTYPE_p_a_7_1__a_5__a_5__a_5__a_5__int },
    { "RNAc::ML_BASE37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_ML_BASE37_get,0 },
    { "RNAc::ML_BASEdH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_ML_BASEdH_get,0 },
    { "RNAc::ML_closing37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_ML_closing37_get,0 },
    { "RNAc::ML_closingdH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_ML_closingdH_get,0 },
    { "RNAc::ML_intern37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_ML_intern37_get,0 },
    { "RNAc::ML_interndH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_ML_interndH_get,0 },
    { "RNAc::TripleC37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_TripleC37_get,0 },
    { "RNAc::TripleCdH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_TripleCdH_get,0 },
    { "RNAc::MultipleCA37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_MultipleCA37_get,0 },
    { "RNAc::MultipleCAdH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_MultipleCAdH_get,0 },
    { "RNAc::MultipleCB37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_MultipleCB37_get,0 },
    { "RNAc::MultipleCBdH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_MultipleCBdH_get,0 },
    { "RNAc::MAX_NINIO", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_MAX_NINIO_get,0 },
    { "RNAc::ninio37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_ninio37_get,0 },
    { "RNAc::niniodH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_niniodH_get,0 },
    { "RNAc::TerminalAU37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_TerminalAU37_get,0 },
    { "RNAc::TerminalAUdH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_TerminalAUdH_get,0 },
    { "RNAc::DuplexInit37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_DuplexInit37_get,0 },
    { "RNAc::DuplexInitdH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_DuplexInitdH_get,0 },
    { "RNAc::Tetraloops", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_Tetraloops_get,0 },
    { "RNAc::Tetraloop37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_Tetraloop37_get,0 },
    { "RNAc::TetraloopdH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_TetraloopdH_get,0 },
    { "RNAc::Triloops", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_Triloops_get,0 },
    { "RNAc::Triloop37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_Triloop37_get,0 },
    { "RNAc::TriloopdH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_TriloopdH_get,0 },
    { "RNAc::Hexaloops", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_Hexaloops_get,0 },
    { "RNAc::Hexaloop37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_Hexaloop37_get,0 },
    { "RNAc::HexaloopdH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_HexaloopdH_get,0 },
    { "RNAc::GQuadAlpha37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_GQuadAlpha37_get,0 },
    { "RNAc::GQuadAlphadH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_GQuadAlphadH_get,0 },
    { "RNAc::GQuadBeta37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_GQuadBeta37_get,0 },
    { "RNAc::GQuadBetadH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_GQuadBetadH_get,0 },
    { "RNAc::GQuadLayerMismatch37", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_GQuadLayerMismatch37_get,0 },
    { "RNAc::GQuadLayerMismatchH", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_GQuadLayerMismatchH_get,0 },
    { "RNAc::GQuadLayerMismatchMax", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_GQuadLayerMismatchMax_get,0 },
    { "RNAc::Tmeasure", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_Tmeasure_get,0 },
    { "RNAc::temperature", MAGIC_CLASS _wrap_temperature_set, MAGIC_CLASS _wrap_temperature_get,0 },
    { "RNAc::dangles", MAGIC_CLASS _wrap_dangles_set, MAGIC_CLASS _wrap_dangles_get,0 },
    { "RNAc::betaScale", MAGIC_CLASS _wrap_betaScale_set, MAGIC_CLASS _wrap_betaScale_get,0 },
    { "RNAc::pf_smooth", MAGIC_CLASS _wrap_pf_smooth_set, MAGIC_CLASS _wrap_pf_smooth_get,0 },
    { "RNAc::tetra_loop", MAGIC_CLASS _wrap_tetra_loop_set, MAGIC_CLASS _wrap_tetra_loop_get,0 },
    { "RNAc::special_hp", MAGIC_CLASS _wrap_special_hp_set, MAGIC_CLASS _wrap_special_hp_get,0 },
    { "RNAc::noLonelyPairs", MAGIC_CLASS _wrap_noLonelyPairs_set, MAGIC_CLASS _wrap_noLonelyPairs_get,0 },
    { "RNAc::noLP", MAGIC_CLASS _wrap_noLP_set, MAGIC_CLASS _wrap_noLP_get,0 },
    { "RNAc::noGU", MAGIC_CLASS _wrap_noGU_set, MAGIC_CLASS _wrap_noGU_get,0 },
    { "RNAc::no_closingGU", MAGIC_CLASS _wrap_no_closingGU_set, MAGIC_CLASS _wrap_no_closingGU_get,0 },
    { "RNAc::noGUclosure", MAGIC_CLASS _wrap_noGUclosure_set, MAGIC_CLASS _wrap_noGUclosure_get,0 },
    { "RNAc::logML", MAGIC_CLASS _wrap_logML_set, MAGIC_CLASS _wrap_logML_get,0 },
    { "RNAc::circ", MAGIC_CLASS _wrap_circ_set, MAGIC_CLASS _wrap_circ_get,0 },
    { "RNAc::gquad", MAGIC_CLASS _wrap_gquad_set, MAGIC_CLASS _wrap_gquad_get,0 },
    { "RNAc::uniq_ML", MAGIC_CLASS _wrap_uniq_ML_set, MAGIC_CLASS _wrap_uniq_ML_get,0 },
    { "RNAc::energy_set", MAGIC_CLASS _wrap_energy_set_set, MAGIC_CLASS _wrap_energy_set_get,0 },
    { "RNAc::backtrack", MAGIC_CLASS _wrap_backtrack_set, MAGIC_CLASS _wrap_backtrack_get,0 },
    { "RNAc::backtrack_type", MAGIC_CLASS _wrap_backtrack_type_set, MAGIC_CLASS _wrap_backtrack_type_get,0 },
    { "RNAc::do_backtrack", MAGIC_CLASS _wrap_do_backtrack_set, MAGIC_CLASS _wrap_do_backtrack_get,0 },
    { "RNAc::compute_bpp", MAGIC_CLASS _wrap_compute_bpp_set, MAGIC_CLASS _wrap_compute_bpp_get,0 },
    { "RNAc::max_bp_span", MAGIC_CLASS _wrap_max_bp_span_set, MAGIC_CLASS _wrap_max_bp_span_get,0 },
    { "RNAc::min_loop_size", MAGIC_CLASS _wrap_min_loop_size_set, MAGIC_CLASS _wrap_min_loop_size_get,0 },
    { "RNAc::window_size", MAGIC_CLASS _wrap_window_size_set, MAGIC_CLASS _wrap_window_size_get,0 },
    { "RNAc::oldAliEn", MAGIC_CLASS _wrap_oldAliEn_set, MAGIC_CLASS _wrap_oldAliEn_get,0 },
    { "RNAc::ribo", MAGIC_CLASS _wrap_ribo_set, MAGIC_CLASS _wrap_ribo_get,0 },
    { "RNAc::cv_fact", MAGIC_CLASS _wrap_cv_fact_set, MAGIC_CLASS _wrap_cv_fact_get,0 },
    { "RNAc::nc_fact", MAGIC_CLASS _wrap_nc_fact_set, MAGIC_CLASS _wrap_nc_fact_get,0 },
    { "RNAc::sfact", MAGIC_CLASS _wrap_sfact_set, MAGIC_CLASS _wrap_sfact_get,0 },
    { "RNAc::pf_scale", MAGIC_CLASS _wrap_pf_scale_set, MAGIC_CLASS _wrap_pf_scale_get,0 },
    { "RNAc::nonstandards", MAGIC_CLASS _wrap_nonstandards_set, MAGIC_CLASS _wrap_nonstandards_get,0 },
    { "RNAc::xsubi", MAGIC_CLASS _wrap_xsubi_set, MAGIC_CLASS _wrap_xsubi_get,&SWIGTYPE_p_unsigned_short },
    { "RNAc::rna_plot_type", MAGIC_CLASS _wrap_rna_plot_type_set, MAGIC_CLASS _wrap_rna_plot_type_get,0 },
    { "RNAc::cut_point", MAGIC_CLASS _wrap_cut_point_set, MAGIC_CLASS _wrap_cut_point_get,0 },
    { "RNAc::eos_debug", MAGIC_CLASS _wrap_eos_debug_set, MAGIC_CLASS _wrap_eos_debug_get,0 },
    { "RNAc::st_back", MAGIC_CLASS _wrap_st_back_set, MAGIC_CLASS _wrap_st_back_get,0 },
    { "RNAc::mirnatog", MAGIC_CLASS _wrap_mirnatog_set, MAGIC_CLASS _wrap_mirnatog_get,0 },
    { "RNAc::F_monomer", MAGIC_CLASS _wrap_F_monomer_set, MAGIC_CLASS _wrap_F_monomer_get,&SWIGTYPE_p_double },
    { "RNAc::subopt_sorted", MAGIC_CLASS _wrap_subopt_sorted_set, MAGIC_CLASS _wrap_subopt_sorted_get,0 },
    { "RNAc::print_energy", MAGIC_CLASS _wrap_print_energy_set, MAGIC_CLASS _wrap_print_energy_get,0 },
    { "RNAc::density_of_states", MAGIC_CLASS _wrap_density_of_states_set, MAGIC_CLASS _wrap_density_of_states_get,0 },
    { "RNAc::symbolset", MAGIC_CLASS _wrap_symbolset_set, MAGIC_CLASS _wrap_symbolset_get,0 },
    { "RNAc::final_cost", MAGIC_CLASS _wrap_final_cost_set, MAGIC_CLASS _wrap_final_cost_get,0 },
    { "RNAc::give_up", MAGIC_CLASS _wrap_give_up_set, MAGIC_CLASS _wrap_give_up_get,0 },
    { "RNAc::inv_verbose", MAGIC_CLASS _wrap_inv_verbose_set, MAGIC_CLASS _wrap_inv_verbose_get,0 },
    { "RNAc::loop_size", MAGIC_CLASS _wrap_loop_size_set, MAGIC_CLASS _wrap_loop_size_get,0 },
    { "RNAc::helix_size", MAGIC_CLASS _wrap_helix_size_set, MAGIC_CLASS _wrap_helix_size_get,0 },
    { "RNAc::loop_degree", MAGIC_CLASS _wrap_loop_degree_set, MAGIC_CLASS _wrap_loop_degree_get,0 },
    { "RNAc::loops", MAGIC_CLASS _wrap_loops_set, MAGIC_CLASS _wrap_loops_get,0 },
    { "RNAc::unpaired", MAGIC_CLASS _wrap_unpaired_set, MAGIC_CLASS _wrap_unpaired_get,0 },
    { "RNAc::pairs", MAGIC_CLASS _wrap_pairs_set, MAGIC_CLASS _wrap_pairs_get,0 },
    { "RNAc::edit_backtrack", MAGIC_CLASS _wrap_edit_backtrack_set, MAGIC_CLASS _wrap_edit_backtrack_get,0 },
    { "RNAc::aligned_line", MAGIC_CLASS _wrap_aligned_line_set, MAGIC_CLASS _wrap_aligned_line_get,&SWIGTYPE_p_p_char },
    { "RNAc::cost_matrix", MAGIC_CLASS _wrap_cost_matrix_set, MAGIC_CLASS _wrap_cost_matrix_get,0 },
    { "RNAc::base_pair", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_base_pair_get,&SWIGTYPE_p_vrna_bp_stack_s },
    { "RNAc::pr", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_pr_get,&SWIGTYPE_p_double },
    { "RNAc::iindx", MAGIC_CLASS swig_magic_readonly, MAGIC_CLASS _wrap_iindx_get,&SWIGTYPE_p_int },
    { "RNAc::fold_constrained", MAGIC_CLASS _wrap_fold_constrained_set, MAGIC_CLASS _wrap_fold_constrained_get,0 },
    { "RNAc::csv", MAGIC_CLASS _wrap_csv_set, MAGIC_CLASS _wrap_csv_get,0 },
    { "RNAc::RibosumFile", MAGIC_CLASS _wrap_RibosumFile_set, MAGIC_CLASS _wrap_RibosumFile_get,0 },
    { "RNAc::james_rule", MAGIC_CLASS _wrap_james_rule_set, MAGIC_CLASS _wrap_james_rule_get,0 },
{0,0,0,0}
};
static swig_command_info swig_commands[] = {
{"RNAc::new_intP", _wrap_new_intP},
{"RNAc::delete_intP", _wrap_delete_intP},
{"RNAc::intP_getitem", _wrap_intP_getitem},
{"RNAc::intP_setitem", _wrap_intP_setitem},
{"RNAc::new_intArray", _wrap_new_intArray},
{"RNAc::delete_intArray", _wrap_delete_intArray},
{"RNAc::intArray_getitem", _wrap_intArray_getitem},
{"RNAc::intArray_setitem", _wrap_intArray_setitem},
{"RNAc::intArray_cast", _wrap_intArray_cast},
{"RNAc::intArray_frompointer", _wrap_intArray_frompointer},
{"RNAc::new_floatP", _wrap_new_floatP},
{"RNAc::delete_floatP", _wrap_delete_floatP},
{"RNAc::floatP_getitem", _wrap_floatP_getitem},
{"RNAc::floatP_setitem", _wrap_floatP_setitem},
{"RNAc::new_floatArray", _wrap_new_floatArray},
{"RNAc::delete_floatArray", _wrap_delete_floatArray},
{"RNAc::floatArray_getitem", _wrap_floatArray_getitem},
{"RNAc::floatArray_setitem", _wrap_floatArray_setitem},
{"RNAc::floatArray_cast", _wrap_floatArray_cast},
{"RNAc::floatArray_frompointer", _wrap_floatArray_frompointer},
{"RNAc::new_doubleP", _wrap_new_doubleP},
{"RNAc::delete_doubleP", _wrap_delete_doubleP},
{"RNAc::doubleP_getitem", _wrap_doubleP_getitem},
{"RNAc::doubleP_setitem", _wrap_doubleP_setitem},
{"RNAc::new_doubleArray", _wrap_new_doubleArray},
{"RNAc::delete_doubleArray", _wrap_delete_doubleArray},
{"RNAc::doubleArray_getitem", _wrap_doubleArray_getitem},
{"RNAc::doubleArray_setitem", _wrap_doubleArray_setitem},
{"RNAc::doubleArray_cast", _wrap_doubleArray_cast},
{"RNAc::doubleArray_frompointer", _wrap_doubleArray_frompointer},
{"RNAc::new_ushortP", _wrap_new_ushortP},
{"RNAc::delete_ushortP", _wrap_delete_ushortP},
{"RNAc::ushortP_getitem", _wrap_ushortP_getitem},
{"RNAc::ushortP_setitem", _wrap_ushortP_setitem},
{"RNAc::new_shortP", _wrap_new_shortP},
{"RNAc::delete_shortP", _wrap_delete_shortP},
{"RNAc::shortP_getitem", _wrap_shortP_getitem},
{"RNAc::shortP_setitem", _wrap_shortP_setitem},
{"RNAc::cdata", _wrap_cdata},
{"RNAc::memmove", _wrap_memmove},
{"RNAc::new_DoublePair", _wrap_new_DoublePair},
{"RNAc::DoublePair_first_set", _wrap_DoublePair_first_set},
{"RNAc::DoublePair_first_get", _wrap_DoublePair_first_get},
{"RNAc::DoublePair_second_set", _wrap_DoublePair_second_set},
{"RNAc::DoublePair_second_get", _wrap_DoublePair_second_get},
{"RNAc::delete_DoublePair", _wrap_delete_DoublePair},
{"RNAc::new_IntVector", _wrap_new_IntVector},
{"RNAc::IntVector_size", _wrap_IntVector_size},
{"RNAc::IntVector_empty", _wrap_IntVector_empty},
{"RNAc::IntVector_clear", _wrap_IntVector_clear},
{"RNAc::IntVector_push", _wrap_IntVector_push},
{"RNAc::IntVector_pop", _wrap_IntVector_pop},
{"RNAc::IntVector_get", _wrap_IntVector_get},
{"RNAc::IntVector_set", _wrap_IntVector_set},
{"RNAc::delete_IntVector", _wrap_delete_IntVector},
{"RNAc::new_UIntVector", _wrap_new_UIntVector},
{"RNAc::UIntVector_size", _wrap_UIntVector_size},
{"RNAc::UIntVector_empty", _wrap_UIntVector_empty},
{"RNAc::UIntVector_clear", _wrap_UIntVector_clear},
{"RNAc::UIntVector_push", _wrap_UIntVector_push},
{"RNAc::UIntVector_pop", _wrap_UIntVector_pop},
{"RNAc::UIntVector_get", _wrap_UIntVector_get},
{"RNAc::UIntVector_set", _wrap_UIntVector_set},
{"RNAc::delete_UIntVector", _wrap_delete_UIntVector},
{"RNAc::new_DoubleVector", _wrap_new_DoubleVector},
{"RNAc::DoubleVector_size", _wrap_DoubleVector_size},
{"RNAc::DoubleVector_empty", _wrap_DoubleVector_empty},
{"RNAc::DoubleVector_clear", _wrap_DoubleVector_clear},
{"RNAc::DoubleVector_push", _wrap_DoubleVector_push},
{"RNAc::DoubleVector_pop", _wrap_DoubleVector_pop},
{"RNAc::DoubleVector_get", _wrap_DoubleVector_get},
{"RNAc::DoubleVector_set", _wrap_DoubleVector_set},
{"RNAc::delete_DoubleVector", _wrap_delete_DoubleVector},
{"RNAc::new_StringVector", _wrap_new_StringVector},
{"RNAc::StringVector_size", _wrap_StringVector_size},
{"RNAc::StringVector_empty", _wrap_StringVector_empty},
{"RNAc::StringVector_clear", _wrap_StringVector_clear},
{"RNAc::StringVector_push", _wrap_StringVector_push},
{"RNAc::StringVector_pop", _wrap_StringVector_pop},
{"RNAc::StringVector_get", _wrap_StringVector_get},
{"RNAc::StringVector_set", _wrap_StringVector_set},
{"RNAc::delete_StringVector", _wrap_delete_StringVector},
{"RNAc::new_ConstCharVector", _wrap_new_ConstCharVector},
{"RNAc::ConstCharVector_size", _wrap_ConstCharVector_size},
{"RNAc::ConstCharVector_empty", _wrap_ConstCharVector_empty},
{"RNAc::ConstCharVector_clear", _wrap_ConstCharVector_clear},
{"RNAc::ConstCharVector_push", _wrap_ConstCharVector_push},
{"RNAc::ConstCharVector_pop", _wrap_ConstCharVector_pop},
{"RNAc::ConstCharVector_get", _wrap_ConstCharVector_get},
{"RNAc::ConstCharVector_set", _wrap_ConstCharVector_set},
{"RNAc::delete_ConstCharVector", _wrap_delete_ConstCharVector},
{"RNAc::new_SOLUTIONVector", _wrap_new_SOLUTIONVector},
{"RNAc::SOLUTIONVector_size", _wrap_SOLUTIONVector_size},
{"RNAc::SOLUTIONVector_empty", _wrap_SOLUTIONVector_empty},
{"RNAc::SOLUTIONVector_clear", _wrap_SOLUTIONVector_clear},
{"RNAc::SOLUTIONVector_push", _wrap_SOLUTIONVector_push},
{"RNAc::SOLUTIONVector_pop", _wrap_SOLUTIONVector_pop},
{"RNAc::SOLUTIONVector_get", _wrap_SOLUTIONVector_get},
{"RNAc::SOLUTIONVector_set", _wrap_SOLUTIONVector_set},
{"RNAc::delete_SOLUTIONVector", _wrap_delete_SOLUTIONVector},
{"RNAc::new_CoordinateVector", _wrap_new_CoordinateVector},
{"RNAc::CoordinateVector_size", _wrap_CoordinateVector_size},
{"RNAc::CoordinateVector_empty", _wrap_CoordinateVector_empty},
{"RNAc::CoordinateVector_clear", _wrap_CoordinateVector_clear},
{"RNAc::CoordinateVector_push", _wrap_CoordinateVector_push},
{"RNAc::CoordinateVector_pop", _wrap_CoordinateVector_pop},
{"RNAc::CoordinateVector_get", _wrap_CoordinateVector_get},
{"RNAc::CoordinateVector_set", _wrap_CoordinateVector_set},
{"RNAc::delete_CoordinateVector", _wrap_delete_CoordinateVector},
{"RNAc::new_DoubleDoubleVector", _wrap_new_DoubleDoubleVector},
{"RNAc::DoubleDoubleVector_size", _wrap_DoubleDoubleVector_size},
{"RNAc::DoubleDoubleVector_empty", _wrap_DoubleDoubleVector_empty},
{"RNAc::DoubleDoubleVector_clear", _wrap_DoubleDoubleVector_clear},
{"RNAc::DoubleDoubleVector_push", _wrap_DoubleDoubleVector_push},
{"RNAc::DoubleDoubleVector_pop", _wrap_DoubleDoubleVector_pop},
{"RNAc::DoubleDoubleVector_get", _wrap_DoubleDoubleVector_get},
{"RNAc::DoubleDoubleVector_set", _wrap_DoubleDoubleVector_set},
{"RNAc::delete_DoubleDoubleVector", _wrap_delete_DoubleDoubleVector},
{"RNAc::new_IntIntVector", _wrap_new_IntIntVector},
{"RNAc::IntIntVector_size", _wrap_IntIntVector_size},
{"RNAc::IntIntVector_empty", _wrap_IntIntVector_empty},
{"RNAc::IntIntVector_clear", _wrap_IntIntVector_clear},
{"RNAc::IntIntVector_push", _wrap_IntIntVector_push},
{"RNAc::IntIntVector_pop", _wrap_IntIntVector_pop},
{"RNAc::IntIntVector_get", _wrap_IntIntVector_get},
{"RNAc::IntIntVector_set", _wrap_IntIntVector_set},
{"RNAc::delete_IntIntVector", _wrap_delete_IntIntVector},
{"RNAc::new_ElemProbVector", _wrap_new_ElemProbVector},
{"RNAc::ElemProbVector_size", _wrap_ElemProbVector_size},
{"RNAc::ElemProbVector_empty", _wrap_ElemProbVector_empty},
{"RNAc::ElemProbVector_clear", _wrap_ElemProbVector_clear},
{"RNAc::ElemProbVector_push", _wrap_ElemProbVector_push},
{"RNAc::ElemProbVector_pop", _wrap_ElemProbVector_pop},
{"RNAc::ElemProbVector_get", _wrap_ElemProbVector_get},
{"RNAc::ElemProbVector_set", _wrap_ElemProbVector_set},
{"RNAc::delete_ElemProbVector", _wrap_delete_ElemProbVector},
{"RNAc::new_PathVector", _wrap_new_PathVector},
{"RNAc::PathVector_size", _wrap_PathVector_size},
{"RNAc::PathVector_empty", _wrap_PathVector_empty},
{"RNAc::PathVector_clear", _wrap_PathVector_clear},
{"RNAc::PathVector_push", _wrap_PathVector_push},
{"RNAc::PathVector_pop", _wrap_PathVector_pop},
{"RNAc::PathVector_get", _wrap_PathVector_get},
{"RNAc::PathVector_set", _wrap_PathVector_set},
{"RNAc::delete_PathVector", _wrap_delete_PathVector},
{"RNAc::new_MoveVector", _wrap_new_MoveVector},
{"RNAc::MoveVector_size", _wrap_MoveVector_size},
{"RNAc::MoveVector_empty", _wrap_MoveVector_empty},
{"RNAc::MoveVector_clear", _wrap_MoveVector_clear},
{"RNAc::MoveVector_push", _wrap_MoveVector_push},
{"RNAc::MoveVector_pop", _wrap_MoveVector_pop},
{"RNAc::MoveVector_get", _wrap_MoveVector_get},
{"RNAc::MoveVector_set", _wrap_MoveVector_set},
{"RNAc::delete_MoveVector", _wrap_delete_MoveVector},
{"RNAc::param_id_get", _wrap_param_id_get},
{"RNAc::param_stack_get", _wrap_param_stack_get},
{"RNAc::param_hairpin_get", _wrap_param_hairpin_get},
{"RNAc::param_bulge_get", _wrap_param_bulge_get},
{"RNAc::param_internal_loop_get", _wrap_param_internal_loop_get},
{"RNAc::param_mismatchExt_get", _wrap_param_mismatchExt_get},
{"RNAc::param_mismatchI_get", _wrap_param_mismatchI_get},
{"RNAc::param_mismatch1nI_get", _wrap_param_mismatch1nI_get},
{"RNAc::param_mismatch23I_get", _wrap_param_mismatch23I_get},
{"RNAc::param_mismatchH_get", _wrap_param_mismatchH_get},
{"RNAc::param_mismatchM_get", _wrap_param_mismatchM_get},
{"RNAc::param_dangle5_get", _wrap_param_dangle5_get},
{"RNAc::param_dangle3_get", _wrap_param_dangle3_get},
{"RNAc::param_int11_get", _wrap_param_int11_get},
{"RNAc::param_int21_get", _wrap_param_int21_get},
{"RNAc::param_int22_get", _wrap_param_int22_get},
{"RNAc::param_ninio_get", _wrap_param_ninio_get},
{"RNAc::param_lxc_get", _wrap_param_lxc_get},
{"RNAc::param_MLbase_get", _wrap_param_MLbase_get},
{"RNAc::param_MLintern_get", _wrap_param_MLintern_get},
{"RNAc::param_MLclosing_get", _wrap_param_MLclosing_get},
{"RNAc::param_TerminalAU_get", _wrap_param_TerminalAU_get},
{"RNAc::param_DuplexInit_get", _wrap_param_DuplexInit_get},
{"RNAc::param_Tetraloop_E_get", _wrap_param_Tetraloop_E_get},
{"RNAc::param_Tetraloops_get", _wrap_param_Tetraloops_get},
{"RNAc::param_Triloop_E_get", _wrap_param_Triloop_E_get},
{"RNAc::param_Triloops_get", _wrap_param_Triloops_get},
{"RNAc::param_Hexaloop_E_get", _wrap_param_Hexaloop_E_get},
{"RNAc::param_Hexaloops_get", _wrap_param_Hexaloops_get},
{"RNAc::param_TripleC_get", _wrap_param_TripleC_get},
{"RNAc::param_MultipleCA_get", _wrap_param_MultipleCA_get},
{"RNAc::param_MultipleCB_get", _wrap_param_MultipleCB_get},
{"RNAc::param_gquad_get", _wrap_param_gquad_get},
{"RNAc::param_gquadLayerMismatch_get", _wrap_param_gquadLayerMismatch_get},
{"RNAc::param_gquadLayerMismatchMax_get", _wrap_param_gquadLayerMismatchMax_get},
{"RNAc::param_temperature_get", _wrap_param_temperature_get},
{"RNAc::param_model_details_get", _wrap_param_model_details_get},
{"RNAc::param_param_file_get", _wrap_param_param_file_get},
{"RNAc::new_param", _wrap_new_param},
{"RNAc::delete_param", _wrap_delete_param},
{"RNAc::exp_param_id_get", _wrap_exp_param_id_get},
{"RNAc::exp_param_expstack_get", _wrap_exp_param_expstack_get},
{"RNAc::exp_param_exphairpin_get", _wrap_exp_param_exphairpin_get},
{"RNAc::exp_param_expbulge_get", _wrap_exp_param_expbulge_get},
{"RNAc::exp_param_expinternal_get", _wrap_exp_param_expinternal_get},
{"RNAc::exp_param_expmismatchExt_get", _wrap_exp_param_expmismatchExt_get},
{"RNAc::exp_param_expmismatchI_get", _wrap_exp_param_expmismatchI_get},
{"RNAc::exp_param_expmismatch23I_get", _wrap_exp_param_expmismatch23I_get},
{"RNAc::exp_param_expmismatch1nI_get", _wrap_exp_param_expmismatch1nI_get},
{"RNAc::exp_param_expmismatchH_get", _wrap_exp_param_expmismatchH_get},
{"RNAc::exp_param_expmismatchM_get", _wrap_exp_param_expmismatchM_get},
{"RNAc::exp_param_expdangle5_get", _wrap_exp_param_expdangle5_get},
{"RNAc::exp_param_expdangle3_get", _wrap_exp_param_expdangle3_get},
{"RNAc::exp_param_expint11_get", _wrap_exp_param_expint11_get},
{"RNAc::exp_param_expint21_get", _wrap_exp_param_expint21_get},
{"RNAc::exp_param_expint22_get", _wrap_exp_param_expint22_get},
{"RNAc::exp_param_expninio_get", _wrap_exp_param_expninio_get},
{"RNAc::exp_param_lxc_get", _wrap_exp_param_lxc_get},
{"RNAc::exp_param_expMLbase_get", _wrap_exp_param_expMLbase_get},
{"RNAc::exp_param_expMLintern_get", _wrap_exp_param_expMLintern_get},
{"RNAc::exp_param_expMLclosing_get", _wrap_exp_param_expMLclosing_get},
{"RNAc::exp_param_expTermAU_get", _wrap_exp_param_expTermAU_get},
{"RNAc::exp_param_expDuplexInit_get", _wrap_exp_param_expDuplexInit_get},
{"RNAc::exp_param_exptetra_get", _wrap_exp_param_exptetra_get},
{"RNAc::exp_param_exptri_get", _wrap_exp_param_exptri_get},
{"RNAc::exp_param_exphex_get", _wrap_exp_param_exphex_get},
{"RNAc::exp_param_Tetraloops_get", _wrap_exp_param_Tetraloops_get},
{"RNAc::exp_param_expTriloop_get", _wrap_exp_param_expTriloop_get},
{"RNAc::exp_param_Triloops_get", _wrap_exp_param_Triloops_get},
{"RNAc::exp_param_Hexaloops_get", _wrap_exp_param_Hexaloops_get},
{"RNAc::exp_param_expTripleC_get", _wrap_exp_param_expTripleC_get},
{"RNAc::exp_param_expMultipleCA_get", _wrap_exp_param_expMultipleCA_get},
{"RNAc::exp_param_expMultipleCB_get", _wrap_exp_param_expMultipleCB_get},
{"RNAc::exp_param_expgquad_get", _wrap_exp_param_expgquad_get},
{"RNAc::exp_param_expgquadLayerMismatch_get", _wrap_exp_param_expgquadLayerMismatch_get},
{"RNAc::exp_param_gquadLayerMismatchMax_get", _wrap_exp_param_gquadLayerMismatchMax_get},
{"RNAc::exp_param_kT_get", _wrap_exp_param_kT_get},
{"RNAc::exp_param_pf_scale_get", _wrap_exp_param_pf_scale_get},
{"RNAc::exp_param_temperature_get", _wrap_exp_param_temperature_get},
{"RNAc::exp_param_alpha_get", _wrap_exp_param_alpha_get},
{"RNAc::exp_param_model_details_get", _wrap_exp_param_model_details_get},
{"RNAc::exp_param_param_file_get", _wrap_exp_param_param_file_get},
{"RNAc::new_exp_param", _wrap_new_exp_param},
{"RNAc::delete_exp_param", _wrap_delete_exp_param},
{"RNAc::params_load", _wrap_params_load},
{"RNAc::params_save", _wrap_params_save},
{"RNAc::params_load_from_string", _wrap_params_load_from_string},
{"RNAc::params_load_RNA_Turner2004", _wrap_params_load_RNA_Turner2004},
{"RNAc::params_load_RNA_Turner1999", _wrap_params_load_RNA_Turner1999},
{"RNAc::params_load_RNA_Andronescu2007", _wrap_params_load_RNA_Andronescu2007},
{"RNAc::params_load_RNA_Langdon2018", _wrap_params_load_RNA_Langdon2018},
{"RNAc::params_load_RNA_misc_special_hairpins", _wrap_params_load_RNA_misc_special_hairpins},
{"RNAc::params_load_DNA_Mathews2004", _wrap_params_load_DNA_Mathews2004},
{"RNAc::params_load_DNA_Mathews1999", _wrap_params_load_DNA_Mathews1999},
{"RNAc::last_parameter_file", _wrap_last_parameter_file},
{"RNAc::read_parameter_file", _wrap_read_parameter_file},
{"RNAc::write_parameter_file", _wrap_write_parameter_file},
{"RNAc::gettype", _wrap_gettype},
{"RNAc::settype", _wrap_settype},
{"RNAc::md_temperature_set", _wrap_md_temperature_set},
{"RNAc::md_temperature_get", _wrap_md_temperature_get},
{"RNAc::md_betaScale_set", _wrap_md_betaScale_set},
{"RNAc::md_betaScale_get", _wrap_md_betaScale_get},
{"RNAc::md_pf_smooth_set", _wrap_md_pf_smooth_set},
{"RNAc::md_pf_smooth_get", _wrap_md_pf_smooth_get},
{"RNAc::md_dangles_set", _wrap_md_dangles_set},
{"RNAc::md_dangles_get", _wrap_md_dangles_get},
{"RNAc::md_special_hp_set", _wrap_md_special_hp_set},
{"RNAc::md_special_hp_get", _wrap_md_special_hp_get},
{"RNAc::md_noLP_set", _wrap_md_noLP_set},
{"RNAc::md_noLP_get", _wrap_md_noLP_get},
{"RNAc::md_noGU_set", _wrap_md_noGU_set},
{"RNAc::md_noGU_get", _wrap_md_noGU_get},
{"RNAc::md_noGUclosure_set", _wrap_md_noGUclosure_set},
{"RNAc::md_noGUclosure_get", _wrap_md_noGUclosure_get},
{"RNAc::md_logML_set", _wrap_md_logML_set},
{"RNAc::md_logML_get", _wrap_md_logML_get},
{"RNAc::md_circ_set", _wrap_md_circ_set},
{"RNAc::md_circ_get", _wrap_md_circ_get},
{"RNAc::md_gquad_set", _wrap_md_gquad_set},
{"RNAc::md_gquad_get", _wrap_md_gquad_get},
{"RNAc::md_uniq_ML_set", _wrap_md_uniq_ML_set},
{"RNAc::md_uniq_ML_get", _wrap_md_uniq_ML_get},
{"RNAc::md_energy_set_set", _wrap_md_energy_set_set},
{"RNAc::md_energy_set_get", _wrap_md_energy_set_get},
{"RNAc::md_backtrack_set", _wrap_md_backtrack_set},
{"RNAc::md_backtrack_get", _wrap_md_backtrack_get},
{"RNAc::md_backtrack_type_set", _wrap_md_backtrack_type_set},
{"RNAc::md_backtrack_type_get", _wrap_md_backtrack_type_get},
{"RNAc::md_compute_bpp_set", _wrap_md_compute_bpp_set},
{"RNAc::md_compute_bpp_get", _wrap_md_compute_bpp_get},
{"RNAc::md_nonstandards_set", _wrap_md_nonstandards_set},
{"RNAc::md_nonstandards_get", _wrap_md_nonstandards_get},
{"RNAc::md_max_bp_span_set", _wrap_md_max_bp_span_set},
{"RNAc::md_max_bp_span_get", _wrap_md_max_bp_span_get},
{"RNAc::md_min_loop_size_set", _wrap_md_min_loop_size_set},
{"RNAc::md_min_loop_size_get", _wrap_md_min_loop_size_get},
{"RNAc::md_window_size_set", _wrap_md_window_size_set},
{"RNAc::md_window_size_get", _wrap_md_window_size_get},
{"RNAc::md_oldAliEn_set", _wrap_md_oldAliEn_set},
{"RNAc::md_oldAliEn_get", _wrap_md_oldAliEn_get},
{"RNAc::md_ribo_set", _wrap_md_ribo_set},
{"RNAc::md_ribo_get", _wrap_md_ribo_get},
{"RNAc::md_cv_fact_set", _wrap_md_cv_fact_set},
{"RNAc::md_cv_fact_get", _wrap_md_cv_fact_get},
{"RNAc::md_nc_fact_set", _wrap_md_nc_fact_set},
{"RNAc::md_nc_fact_get", _wrap_md_nc_fact_get},
{"RNAc::md_sfact_set", _wrap_md_sfact_set},
{"RNAc::md_sfact_get", _wrap_md_sfact_get},
{"RNAc::md_rtype_get", _wrap_md_rtype_get},
{"RNAc::md_alias_get", _wrap_md_alias_get},
{"RNAc::md_pair_get", _wrap_md_pair_get},
{"RNAc::new_md", _wrap_new_md},
{"RNAc::delete_md", _wrap_delete_md},
{"RNAc::md_reset", _wrap_md_reset},
{"RNAc::md_set_from_globals", _wrap_md_set_from_globals},
{"RNAc::md_option_string", _wrap_md_option_string},
{"RNAc::init_rand", _wrap_init_rand},
{"RNAc::urn", _wrap_urn},
{"RNAc::int_urn", _wrap_int_urn},
{"RNAc::hamming", _wrap_hamming},
{"RNAc::hamming_bound", _wrap_hamming_bound},
{"RNAc::encode_seq", _wrap_encode_seq},
{"RNAc::random_string", _wrap_random_string},
{"RNAc::hamming_distance", _wrap_hamming_distance},
{"RNAc::hamming_distance_bound", _wrap_hamming_distance_bound},
{"RNAc::ep_i_set", _wrap_ep_i_set},
{"RNAc::ep_i_get", _wrap_ep_i_get},
{"RNAc::ep_j_set", _wrap_ep_j_set},
{"RNAc::ep_j_get", _wrap_ep_j_get},
{"RNAc::ep_p_set", _wrap_ep_p_set},
{"RNAc::ep_p_get", _wrap_ep_p_get},
{"RNAc::ep_type_set", _wrap_ep_type_set},
{"RNAc::ep_type_get", _wrap_ep_type_get},
{"RNAc::new_ep", _wrap_new_ep},
{"RNAc::delete_ep", _wrap_delete_ep},
{"RNAc::pack_structure", _wrap_pack_structure},
{"RNAc::unpack_structure", _wrap_unpack_structure},
{"RNAc::db_from_ptable", _wrap_db_from_ptable},
{"RNAc::db_flatten", _wrap_db_flatten},
{"RNAc::db_from_WUSS", _wrap_db_from_WUSS},
{"RNAc::abstract_shapes", _wrap_abstract_shapes},
{"RNAc::ptable", _wrap_ptable},
{"RNAc::ptable_pk", _wrap_ptable_pk},
{"RNAc::pt_pk_remove", _wrap_pt_pk_remove},
{"RNAc::plist", _wrap_plist},
{"RNAc::db_from_plist", _wrap_db_from_plist},
{"RNAc::db_pk_remove", _wrap_db_pk_remove},
{"RNAc::db_to_tree_string", _wrap_db_to_tree_string},
{"RNAc::tree_string_unweight", _wrap_tree_string_unweight},
{"RNAc::tree_string_to_db", _wrap_tree_string_to_db},
{"RNAc::make_loop_index", _wrap_make_loop_index},
{"RNAc::loopidx_from_ptable", _wrap_loopidx_from_ptable},
{"RNAc::bp_distance", _wrap_bp_distance},
{"RNAc::dist_mountain", _wrap_dist_mountain},
{"RNAc::db_pack", _wrap_db_pack},
{"RNAc::db_unpack", _wrap_db_unpack},
{"RNAc::db_to_element_string", _wrap_db_to_element_string},
{"RNAc::consensus", _wrap_consensus},
{"RNAc::consens_mis", _wrap_consens_mis},
{"RNAc::aln_mpi", _wrap_aln_mpi},
{"RNAc::aln_pscore", _wrap_aln_pscore},
{"RNAc::aln_conservation_struct", _wrap_aln_conservation_struct},
{"RNAc::aln_conservation_col", _wrap_aln_conservation_col},
{"RNAc::move_standard", _wrap_move_standard},
{"RNAc::struct_en_energy_set", _wrap_struct_en_energy_set},
{"RNAc::struct_en_energy_get", _wrap_struct_en_energy_get},
{"RNAc::struct_en_structure_set", _wrap_struct_en_structure_set},
{"RNAc::struct_en_structure_get", _wrap_struct_en_structure_get},
{"RNAc::new_struct_en", _wrap_new_struct_en},
{"RNAc::delete_struct_en", _wrap_delete_struct_en},
{"RNAc::filename_sanitize", _wrap_filename_sanitize},
{"RNAc::get_xy_coordinates", _wrap_get_xy_coordinates},
{"RNAc::simple_circplot_coordinates", _wrap_simple_circplot_coordinates},
{"RNAc::naview_xy_coordinates", _wrap_naview_xy_coordinates},
{"RNAc::COORDINATE_get", _wrap_COORDINATE_get},
{"RNAc::COORDINATE_X_set", _wrap_COORDINATE_X_set},
{"RNAc::COORDINATE_X_get", _wrap_COORDINATE_X_get},
{"RNAc::COORDINATE_Y_set", _wrap_COORDINATE_Y_set},
{"RNAc::COORDINATE_Y_get", _wrap_COORDINATE_Y_get},
{"RNAc::new_COORDINATE", _wrap_new_COORDINATE},
{"RNAc::delete_COORDINATE", _wrap_delete_COORDINATE},
{"RNAc::simple_xy_coordinates", _wrap_simple_xy_coordinates},
{"RNAc::my_PS_rna_plot_snoop_a", _wrap_my_PS_rna_plot_snoop_a},
{"RNAc::file_PS_rnaplot", _wrap_file_PS_rnaplot},
{"RNAc::file_PS_rnaplot_a", _wrap_file_PS_rnaplot_a},
{"RNAc::gmlRNA", _wrap_gmlRNA},
{"RNAc::ssv_rna_plot", _wrap_ssv_rna_plot},
{"RNAc::svg_rna_plot", _wrap_svg_rna_plot},
{"RNAc::xrna_plot", _wrap_xrna_plot},
{"RNAc::PS_rna_plot", _wrap_PS_rna_plot},
{"RNAc::PS_rna_plot_a", _wrap_PS_rna_plot_a},
{"RNAc::PS_rna_plot_a_gquad", _wrap_PS_rna_plot_a_gquad},
{"RNAc::file_PS_aln", _wrap_file_PS_aln},
{"RNAc::PS_color_dot_plot", _wrap_PS_color_dot_plot},
{"RNAc::PS_color_dot_plot_turn", _wrap_PS_color_dot_plot_turn},
{"RNAc::PS_dot_plot_turn", _wrap_PS_dot_plot_turn},
{"RNAc::PS_dot_plot_list", _wrap_PS_dot_plot_list},
{"RNAc::PS_dot_plot", _wrap_PS_dot_plot},
{"RNAc::eval_structure_simple", _wrap_eval_structure_simple},
{"RNAc::eval_circ_structure", _wrap_eval_circ_structure},
{"RNAc::eval_gquad_structure", _wrap_eval_gquad_structure},
{"RNAc::eval_circ_gquad_structure", _wrap_eval_circ_gquad_structure},
{"RNAc::eval_structure_pt_simple", _wrap_eval_structure_pt_simple},
{"RNAc::energy_of_structure", _wrap_energy_of_structure},
{"RNAc::energy_of_circ_structure", _wrap_energy_of_circ_structure},
{"RNAc::energy_of_gquad_structure", _wrap_energy_of_gquad_structure},
{"RNAc::energy_of_structure_pt", _wrap_energy_of_structure_pt},
{"RNAc::energy_of_move", _wrap_energy_of_move},
{"RNAc::energy_of_move_pt", _wrap_energy_of_move_pt},
{"RNAc::loop_energy", _wrap_loop_energy},
{"RNAc::energy_of_struct", _wrap_energy_of_struct},
{"RNAc::energy_of_struct_pt", _wrap_energy_of_struct_pt},
{"RNAc::energy_of_circ_struct", _wrap_energy_of_circ_struct},
{"RNAc::E_ext_stem", _wrap_E_ext_stem},
{"RNAc::exp_E_ext_stem", _wrap_exp_E_ext_stem},
{"RNAc::E_Stem", _wrap_E_Stem},
{"RNAc::E_ExtLoop", _wrap_E_ExtLoop},
{"RNAc::exp_E_ExtLoop", _wrap_exp_E_ExtLoop},
{"RNAc::exp_E_Stem", _wrap_exp_E_Stem},
{"RNAc::E_Hairpin", _wrap_E_Hairpin},
{"RNAc::exp_E_Hairpin", _wrap_exp_E_Hairpin},
{"RNAc::E_IntLoop", _wrap_E_IntLoop},
{"RNAc::exp_E_IntLoop", _wrap_exp_E_IntLoop},
{"RNAc::E_IntLoop_Co", _wrap_E_IntLoop_Co},
{"RNAc::ubf_eval_int_loop", _wrap_ubf_eval_int_loop},
{"RNAc::ubf_eval_int_loop2", _wrap_ubf_eval_int_loop2},
{"RNAc::ubf_eval_ext_int_loop", _wrap_ubf_eval_ext_int_loop},
{"RNAc::E_ml_rightmost_stem", _wrap_E_ml_rightmost_stem},
{"RNAc::E_MLstem", _wrap_E_MLstem},
{"RNAc::exp_E_MLstem", _wrap_exp_E_MLstem},
{"RNAc::maximum_matching", _wrap_maximum_matching},
{"RNAc::fold", _wrap_fold},
{"RNAc::alifold", _wrap_alifold},
{"RNAc::cofold", _wrap_cofold},
{"RNAc::circfold", _wrap_circfold},
{"RNAc::free_arrays", _wrap_free_arrays},
{"RNAc::update_fold_params", _wrap_update_fold_params},
{"RNAc::circalifold", _wrap_circalifold},
{"RNAc::free_alifold_arrays", _wrap_free_alifold_arrays},
{"RNAc::free_co_arrays", _wrap_free_co_arrays},
{"RNAc::update_cofold_params", _wrap_update_cofold_params},
{"RNAc::initialize_cofold", _wrap_initialize_cofold},
{"RNAc::Lfoldz", _wrap_Lfoldz},
{"RNAc::Lfold", _wrap_Lfold},
{"RNAc::aliLfold", _wrap_aliLfold},
{"RNAc::pf_fold", _wrap_pf_fold},
{"RNAc::pf_circ_fold", _wrap_pf_circ_fold},
{"RNAc::pf_float_precision", _wrap_pf_float_precision},
{"RNAc::pbacktrack", _wrap_pbacktrack},
{"RNAc::pbacktrack5", _wrap_pbacktrack5},
{"RNAc::pbacktrack_circ", _wrap_pbacktrack_circ},
{"RNAc::free_pf_arrays", _wrap_free_pf_arrays},
{"RNAc::update_pf_params", _wrap_update_pf_params},
{"RNAc::mean_bp_distance", _wrap_mean_bp_distance},
{"RNAc::init_pf_fold", _wrap_init_pf_fold},
{"RNAc::centroid", _wrap_centroid},
{"RNAc::co_pf_fold", _wrap_co_pf_fold},
{"RNAc::get_concentrations", _wrap_get_concentrations},
{"RNAc::free_co_pf_arrays", _wrap_free_co_pf_arrays},
{"RNAc::update_co_pf_params", _wrap_update_co_pf_params},
{"RNAc::get_pr", _wrap_get_pr},
{"RNAc::get_centroid_struct_pl", _wrap_get_centroid_struct_pl},
{"RNAc::get_centroid_struct_pr", _wrap_get_centroid_struct_pr},
{"RNAc::MEA_from_plist", _wrap_MEA_from_plist},
{"RNAc::new_pbacktrack_mem", _wrap_new_pbacktrack_mem},
{"RNAc::delete_pbacktrack_mem", _wrap_delete_pbacktrack_mem},
{"RNAc::pfl_fold", _wrap_pfl_fold},
{"RNAc::pfl_fold_up", _wrap_pfl_fold_up},
{"RNAc::SOLUTION_energy_set", _wrap_SOLUTION_energy_set},
{"RNAc::SOLUTION_energy_get", _wrap_SOLUTION_energy_get},
{"RNAc::SOLUTION_structure_set", _wrap_SOLUTION_structure_set},
{"RNAc::SOLUTION_structure_get", _wrap_SOLUTION_structure_get},
{"RNAc::SOLUTION_get", _wrap_SOLUTION_get},
{"RNAc::SOLUTION_size", _wrap_SOLUTION_size},
{"RNAc::delete_SOLUTION", _wrap_delete_SOLUTION},
{"RNAc::new_SOLUTION", _wrap_new_SOLUTION},
{"RNAc::subopt_solution_energy_set", _wrap_subopt_solution_energy_set},
{"RNAc::subopt_solution_energy_get", _wrap_subopt_solution_energy_get},
{"RNAc::subopt_solution_structure_set", _wrap_subopt_solution_structure_set},
{"RNAc::subopt_solution_structure_get", _wrap_subopt_solution_structure_get},
{"RNAc::delete_subopt_solution", _wrap_delete_subopt_solution},
{"RNAc::new_subopt_solution", _wrap_new_subopt_solution},
{"RNAc::new_SuboptVector", _wrap_new_SuboptVector},
{"RNAc::SuboptVector_size", _wrap_SuboptVector_size},
{"RNAc::SuboptVector_empty", _wrap_SuboptVector_empty},
{"RNAc::SuboptVector_clear", _wrap_SuboptVector_clear},
{"RNAc::SuboptVector_push", _wrap_SuboptVector_push},
{"RNAc::SuboptVector_pop", _wrap_SuboptVector_pop},
{"RNAc::SuboptVector_get", _wrap_SuboptVector_get},
{"RNAc::SuboptVector_set", _wrap_SuboptVector_set},
{"RNAc::delete_SuboptVector", _wrap_delete_SuboptVector},
{"RNAc::subopt", _wrap_subopt},
{"RNAc::zukersubopt", _wrap_zukersubopt},
{"RNAc::inverse_fold", _wrap_inverse_fold},
{"RNAc::inverse_pf_fold", _wrap_inverse_pf_fold},
{"RNAc::b2HIT", _wrap_b2HIT},
{"RNAc::b2C", _wrap_b2C},
{"RNAc::b2Shapiro", _wrap_b2Shapiro},
{"RNAc::add_root", _wrap_add_root},
{"RNAc::expand_Shapiro", _wrap_expand_Shapiro},
{"RNAc::expand_Full", _wrap_expand_Full},
{"RNAc::unexpand_Full", _wrap_unexpand_Full},
{"RNAc::unweight", _wrap_unweight},
{"RNAc::unexpand_aligned_F", _wrap_unexpand_aligned_F},
{"RNAc::parse_structure", _wrap_parse_structure},
{"RNAc::make_tree", _wrap_make_tree},
{"RNAc::tree_edit_distance", _wrap_tree_edit_distance},
{"RNAc::print_tree", _wrap_print_tree},
{"RNAc::free_tree", _wrap_free_tree},
{"RNAc::Make_swString", _wrap_Make_swString},
{"RNAc::string_edit_distance", _wrap_string_edit_distance},
{"RNAc::profile_edit_distance", _wrap_profile_edit_distance},
{"RNAc::Make_bp_profile_bppm", _wrap_Make_bp_profile_bppm},
{"RNAc::print_bppm", _wrap_print_bppm},
{"RNAc::free_profile", _wrap_free_profile},
{"RNAc::Make_bp_profile", _wrap_Make_bp_profile},
{"RNAc::deref_any", _wrap_deref_any},
{"RNAc::get_aligned_line", _wrap_get_aligned_line},
{"RNAc::file_SHAPE_read", _wrap_file_SHAPE_read},
{"RNAc::file_fasta_read", _wrap_file_fasta_read},
{"RNAc::extract_record_rest_structure", _wrap_extract_record_rest_structure},
{"RNAc::read_record", _wrap_read_record},
{"RNAc::get_multi_input_line", _wrap_get_multi_input_line},
{"RNAc::file_msa_detect_format", _wrap_file_msa_detect_format},
{"RNAc::file_msa_write", _wrap_file_msa_write},
{"RNAc::file_msa_read", _wrap_file_msa_read},
{"RNAc::file_msa_read_record", _wrap_file_msa_read_record},
{"RNAc::seq_encode", _wrap_seq_encode},
{"RNAc::new_cmd", _wrap_new_cmd},
{"RNAc::delete_cmd", _wrap_delete_cmd},
{"RNAc::file_commands_read", _wrap_file_commands_read},
{"RNAc::enumerate_necklaces", _wrap_enumerate_necklaces},
{"RNAc::rotational_symmetry", _wrap_rotational_symmetry},
{"RNAc::duplexT_i_set", _wrap_duplexT_i_set},
{"RNAc::duplexT_i_get", _wrap_duplexT_i_get},
{"RNAc::duplexT_j_set", _wrap_duplexT_j_set},
{"RNAc::duplexT_j_get", _wrap_duplexT_j_get},
{"RNAc::duplexT_structure_set", _wrap_duplexT_structure_set},
{"RNAc::duplexT_structure_get", _wrap_duplexT_structure_get},
{"RNAc::duplexT_energy_set", _wrap_duplexT_energy_set},
{"RNAc::duplexT_energy_get", _wrap_duplexT_energy_get},
{"RNAc::delete_duplexT", _wrap_delete_duplexT},
{"RNAc::duplex_list_t_i_set", _wrap_duplex_list_t_i_set},
{"RNAc::duplex_list_t_i_get", _wrap_duplex_list_t_i_get},
{"RNAc::duplex_list_t_j_set", _wrap_duplex_list_t_j_set},
{"RNAc::duplex_list_t_j_get", _wrap_duplex_list_t_j_get},
{"RNAc::duplex_list_t_energy_set", _wrap_duplex_list_t_energy_set},
{"RNAc::duplex_list_t_energy_get", _wrap_duplex_list_t_energy_get},
{"RNAc::duplex_list_t_structure_set", _wrap_duplex_list_t_structure_set},
{"RNAc::duplex_list_t_structure_get", _wrap_duplex_list_t_structure_get},
{"RNAc::delete_duplex_list_t", _wrap_delete_duplex_list_t},
{"RNAc::new_duplex_list_t", _wrap_new_duplex_list_t},
{"RNAc::new_DuplexVector", _wrap_new_DuplexVector},
{"RNAc::DuplexVector_size", _wrap_DuplexVector_size},
{"RNAc::DuplexVector_empty", _wrap_DuplexVector_empty},
{"RNAc::DuplexVector_clear", _wrap_DuplexVector_clear},
{"RNAc::DuplexVector_push", _wrap_DuplexVector_push},
{"RNAc::DuplexVector_pop", _wrap_DuplexVector_pop},
{"RNAc::DuplexVector_get", _wrap_DuplexVector_get},
{"RNAc::DuplexVector_set", _wrap_DuplexVector_set},
{"RNAc::delete_DuplexVector", _wrap_delete_DuplexVector},
{"RNAc::duplexfold", _wrap_duplexfold},
{"RNAc::duplex_subopt", _wrap_duplex_subopt},
{"RNAc::aliduplexfold", _wrap_aliduplexfold},
{"RNAc::aliduplex_subopt", _wrap_aliduplex_subopt},
{"RNAc::move_pos_5_set", _wrap_move_pos_5_set},
{"RNAc::move_pos_5_get", _wrap_move_pos_5_get},
{"RNAc::move_pos_3_set", _wrap_move_pos_3_set},
{"RNAc::move_pos_3_get", _wrap_move_pos_3_get},
{"RNAc::new_move", _wrap_new_move},
{"RNAc::delete_move", _wrap_delete_move},
{"RNAc::move_is_removal", _wrap_move_is_removal},
{"RNAc::move_is_insertion", _wrap_move_is_insertion},
{"RNAc::move_is_shift", _wrap_move_is_shift},
{"RNAc::move_compare", _wrap_move_compare},
{"RNAc::path_type_set", _wrap_path_type_set},
{"RNAc::path_type_get", _wrap_path_type_get},
{"RNAc::path_en_set", _wrap_path_en_set},
{"RNAc::path_en_get", _wrap_path_en_get},
{"RNAc::path_s_set", _wrap_path_s_set},
{"RNAc::path_s_get", _wrap_path_s_get},
{"RNAc::path_move_set", _wrap_path_move_set},
{"RNAc::path_move_get", _wrap_path_move_get},
{"RNAc::new_path", _wrap_new_path},
{"RNAc::delete_path", _wrap_delete_path},
{"RNAc::new_path_options", _wrap_new_path_options},
{"RNAc::delete_path_options", _wrap_delete_path_options},
{"RNAc::path_options_findpath", _wrap_path_options_findpath},
{"RNAc::get_path", _wrap_get_path},
{"RNAc::find_saddle", _wrap_find_saddle},
{"RNAc::free_path", _wrap_free_path},
{"RNAc::heat_capacity_result_temperature_set", _wrap_heat_capacity_result_temperature_set},
{"RNAc::heat_capacity_result_temperature_get", _wrap_heat_capacity_result_temperature_get},
{"RNAc::heat_capacity_result_heat_capacity_set", _wrap_heat_capacity_result_heat_capacity_set},
{"RNAc::heat_capacity_result_heat_capacity_get", _wrap_heat_capacity_result_heat_capacity_get},
{"RNAc::new_heat_capacity_result", _wrap_new_heat_capacity_result},
{"RNAc::delete_heat_capacity_result", _wrap_delete_heat_capacity_result},
{"RNAc::new_HeatCapacityVector", _wrap_new_HeatCapacityVector},
{"RNAc::HeatCapacityVector_size", _wrap_HeatCapacityVector_size},
{"RNAc::HeatCapacityVector_empty", _wrap_HeatCapacityVector_empty},
{"RNAc::HeatCapacityVector_clear", _wrap_HeatCapacityVector_clear},
{"RNAc::HeatCapacityVector_push", _wrap_HeatCapacityVector_push},
{"RNAc::HeatCapacityVector_pop", _wrap_HeatCapacityVector_pop},
{"RNAc::HeatCapacityVector_get", _wrap_HeatCapacityVector_get},
{"RNAc::HeatCapacityVector_set", _wrap_HeatCapacityVector_set},
{"RNAc::delete_HeatCapacityVector", _wrap_delete_HeatCapacityVector},
{"RNAc::heat_capacity", _wrap_heat_capacity},
{"RNAc::basepair_i_set", _wrap_basepair_i_set},
{"RNAc::basepair_i_get", _wrap_basepair_i_get},
{"RNAc::basepair_j_set", _wrap_basepair_j_set},
{"RNAc::basepair_j_get", _wrap_basepair_j_get},
{"RNAc::new_basepair", _wrap_new_basepair},
{"RNAc::delete_basepair", _wrap_delete_basepair},
{"RNAc::fc_add_perl_callback", _wrap_fc_add_perl_callback},
{"RNAc::fc_add_perl_data", _wrap_fc_add_perl_data},
{"RNAc::sc_add_f_perl_callback", _wrap_sc_add_f_perl_callback},
{"RNAc::sc_add_bt_perl_callback", _wrap_sc_add_bt_perl_callback},
{"RNAc::sc_add_exp_f_perl_callback", _wrap_sc_add_exp_f_perl_callback},
{"RNAc::sc_add_perl_data", _wrap_sc_add_perl_data},
{"RNAc::ud_set_data", _wrap_ud_set_data},
{"RNAc::ud_set_prod_rule_cb", _wrap_ud_set_prod_rule_cb},
{"RNAc::ud_set_exp_prod_rule_cb", _wrap_ud_set_exp_prod_rule_cb},
{"RNAc::ud_set_prob_cb", _wrap_ud_set_prob_cb},
{"RNAc::Lfold_cb", _wrap_Lfold_cb},
{"RNAc::Lfoldz_cb", _wrap_Lfoldz_cb},
{"RNAc::aliLfold_cb", _wrap_aliLfold_cb},
{"RNAc::pfl_fold_cb", _wrap_pfl_fold_cb},
{"RNAc::pfl_fold_up_cb", _wrap_pfl_fold_up_cb},
{"RNAc::fold_compound_params_reset", _wrap_fold_compound_params_reset},
{"RNAc::fold_compound_params_subst", _wrap_fold_compound_params_subst},
{"RNAc::fold_compound_exp_params_rescale", _wrap_fold_compound_exp_params_rescale},
{"RNAc::fold_compound_exp_params_reset", _wrap_fold_compound_exp_params_reset},
{"RNAc::fold_compound_exp_params_subst", _wrap_fold_compound_exp_params_subst},
{"RNAc::fold_compound_plist_from_probs", _wrap_fold_compound_plist_from_probs},
{"RNAc::fold_compound_constraints_add", _wrap_fold_compound_constraints_add},
{"RNAc::fold_compound_hc_init", _wrap_fold_compound_hc_init},
{"RNAc::fold_compound_hc_add_up", _wrap_fold_compound_hc_add_up},
{"RNAc::fold_compound_hc_add_bp_nonspecific", _wrap_fold_compound_hc_add_bp_nonspecific},
{"RNAc::fold_compound_hc_add_bp", _wrap_fold_compound_hc_add_bp},
{"RNAc::fold_compound_hc_add_from_db", _wrap_fold_compound_hc_add_from_db},
{"RNAc::fold_compound_sc_remove", _wrap_fold_compound_sc_remove},
{"RNAc::fold_compound_sc_init", _wrap_fold_compound_sc_init},
{"RNAc::fold_compound_sc_add_up", _wrap_fold_compound_sc_add_up},
{"RNAc::fold_compound_sc_add_bp", _wrap_fold_compound_sc_add_bp},
{"RNAc::fold_compound_sc_set_bp", _wrap_fold_compound_sc_set_bp},
{"RNAc::fold_compound_sc_set_up", _wrap_fold_compound_sc_set_up},
{"RNAc::fold_compound_sc_set_stack", _wrap_fold_compound_sc_set_stack},
{"RNAc::fold_compound_sc_add_stack", _wrap_fold_compound_sc_add_stack},
{"RNAc::fold_compound_sc_add_SHAPE_deigan", _wrap_fold_compound_sc_add_SHAPE_deigan},
{"RNAc::fold_compound_sc_add_SHAPE_deigan_ali", _wrap_fold_compound_sc_add_SHAPE_deigan_ali},
{"RNAc::fold_compound_sc_add_SHAPE_zarringhalam", _wrap_fold_compound_sc_add_SHAPE_zarringhalam},
{"RNAc::fold_compound_sc_add_hi_motif", _wrap_fold_compound_sc_add_hi_motif},
{"RNAc::fold_compound_eval_structure", _wrap_fold_compound_eval_structure},
{"RNAc::fold_compound_eval_structure_pt", _wrap_fold_compound_eval_structure_pt},
{"RNAc::fold_compound_eval_structure_verbose", _wrap_fold_compound_eval_structure_verbose},
{"RNAc::fold_compound_eval_structure_pt_verbose", _wrap_fold_compound_eval_structure_pt_verbose},
{"RNAc::fold_compound_eval_covar_structure", _wrap_fold_compound_eval_covar_structure},
{"RNAc::fold_compound_eval_loop_pt", _wrap_fold_compound_eval_loop_pt},
{"RNAc::fold_compound_eval_move", _wrap_fold_compound_eval_move},
{"RNAc::fold_compound_eval_move_pt", _wrap_fold_compound_eval_move_pt},
{"RNAc::fold_compound_E_ext_loop", _wrap_fold_compound_E_ext_loop},
{"RNAc::fold_compound_E_hp_loop", _wrap_fold_compound_E_hp_loop},
{"RNAc::fold_compound_E_ext_hp_loop", _wrap_fold_compound_E_ext_hp_loop},
{"RNAc::fold_compound_eval_ext_hp_loop", _wrap_fold_compound_eval_ext_hp_loop},
{"RNAc::fold_compound_eval_hp_loop", _wrap_fold_compound_eval_hp_loop},
{"RNAc::fold_compound_exp_E_hp_loop", _wrap_fold_compound_exp_E_hp_loop},
{"RNAc::fold_compound_E_int_loop", _wrap_fold_compound_E_int_loop},
{"RNAc::fold_compound_eval_int_loop", _wrap_fold_compound_eval_int_loop},
{"RNAc::fold_compound_E_ext_int_loop", _wrap_fold_compound_E_ext_int_loop},
{"RNAc::fold_compound_E_stack", _wrap_fold_compound_E_stack},
{"RNAc::fold_compound_exp_E_int_loop", _wrap_fold_compound_exp_E_int_loop},
{"RNAc::fold_compound_exp_E_interior_loop", _wrap_fold_compound_exp_E_interior_loop},
{"RNAc::fold_compound_maxmimum_matching", _wrap_fold_compound_maxmimum_matching},
{"RNAc::fold_compound_mfe", _wrap_fold_compound_mfe},
{"RNAc::fold_compound_mfe_dimer", _wrap_fold_compound_mfe_dimer},
{"RNAc::fold_compound_backtrack", _wrap_fold_compound_backtrack},
{"RNAc::fold_compound_mfe_window", _wrap_fold_compound_mfe_window},
{"RNAc::fold_compound_mfe_window_zscore", _wrap_fold_compound_mfe_window_zscore},
{"RNAc::fold_compound_zsc_filter_init", _wrap_fold_compound_zsc_filter_init},
{"RNAc::fold_compound_zsc_filter_update", _wrap_fold_compound_zsc_filter_update},
{"RNAc::fold_compound_zsc_filter_free", _wrap_fold_compound_zsc_filter_free},
{"RNAc::fold_compound_zsc_filter_on", _wrap_fold_compound_zsc_filter_on},
{"RNAc::fold_compound_zsc_filter_threshold", _wrap_fold_compound_zsc_filter_threshold},
{"RNAc::fold_compound_zsc_compute", _wrap_fold_compound_zsc_compute},
{"RNAc::fold_compound_pf", _wrap_fold_compound_pf},
{"RNAc::fold_compound_mean_bp_distance", _wrap_fold_compound_mean_bp_distance},
{"RNAc::fold_compound_ensemble_defect", _wrap_fold_compound_ensemble_defect},
{"RNAc::fold_compound_positional_entropy", _wrap_fold_compound_positional_entropy},
{"RNAc::fold_compound_pr_structure", _wrap_fold_compound_pr_structure},
{"RNAc::fold_compound_pr_energy", _wrap_fold_compound_pr_energy},
{"RNAc::fold_compound_pf_dimer", _wrap_fold_compound_pf_dimer},
{"RNAc::fold_compound_bpp", _wrap_fold_compound_bpp},
{"RNAc::fold_compound_centroid", _wrap_fold_compound_centroid},
{"RNAc::fold_compound_MEA", _wrap_fold_compound_MEA},
{"RNAc::fold_compound_subopt", _wrap_fold_compound_subopt},
{"RNAc::fold_compound_subopt_zuker", _wrap_fold_compound_subopt_zuker},
{"RNAc::fold_compound_sequence_add", _wrap_fold_compound_sequence_add},
{"RNAc::fold_compound_sequence_remove", _wrap_fold_compound_sequence_remove},
{"RNAc::fold_compound_sequence_remove_all", _wrap_fold_compound_sequence_remove_all},
{"RNAc::fold_compound_sequence_prepare", _wrap_fold_compound_sequence_prepare},
{"RNAc::fold_compound_ud_add_motif", _wrap_fold_compound_ud_add_motif},
{"RNAc::fold_compound_ud_remove", _wrap_fold_compound_ud_remove},
{"RNAc::fold_compound_commands_apply", _wrap_fold_compound_commands_apply},
{"RNAc::fold_compound_file_commands_apply", _wrap_fold_compound_file_commands_apply},
{"RNAc::fold_compound_rotational_symmetry_db", _wrap_fold_compound_rotational_symmetry_db},
{"RNAc::fold_compound_neighbors", _wrap_fold_compound_neighbors},
{"RNAc::fold_compound_path", _wrap_fold_compound_path},
{"RNAc::fold_compound_path_gradient", _wrap_fold_compound_path_gradient},
{"RNAc::fold_compound_path_random", _wrap_fold_compound_path_random},
{"RNAc::fold_compound_path_findpath_saddle", _wrap_fold_compound_path_findpath_saddle},
{"RNAc::fold_compound_path_findpath", _wrap_fold_compound_path_findpath},
{"RNAc::fold_compound_path_direct", _wrap_fold_compound_path_direct},
{"RNAc::fold_compound_heat_capacity", _wrap_fold_compound_heat_capacity},
{"RNAc::fold_compound_add_auxdata", _wrap_fold_compound_add_auxdata},
{"RNAc::fold_compound_add_callback", _wrap_fold_compound_add_callback},
{"RNAc::fold_compound_sc_add_data", _wrap_fold_compound_sc_add_data},
{"RNAc::fold_compound_sc_add_f", _wrap_fold_compound_sc_add_f},
{"RNAc::fold_compound_sc_add_bt", _wrap_fold_compound_sc_add_bt},
{"RNAc::fold_compound_sc_add_exp_f", _wrap_fold_compound_sc_add_exp_f},
{"RNAc::fold_compound_ud_set_data", _wrap_fold_compound_ud_set_data},
{"RNAc::fold_compound_ud_set_prod_rule_cb", _wrap_fold_compound_ud_set_prod_rule_cb},
{"RNAc::fold_compound_ud_set_exp_prod_rule_cb", _wrap_fold_compound_ud_set_exp_prod_rule_cb},
{"RNAc::fold_compound_ud_set_prob_cb", _wrap_fold_compound_ud_set_prob_cb},
{"RNAc::fold_compound_subopt_cb", _wrap_fold_compound_subopt_cb},
{"RNAc::fold_compound_pbacktrack", _wrap_fold_compound_pbacktrack},
{"RNAc::fold_compound_pbacktrack5", _wrap_fold_compound_pbacktrack5},
{"RNAc::fold_compound_mfe_window_cb", _wrap_fold_compound_mfe_window_cb},
{"RNAc::fold_compound_mfe_window_zscore_cb", _wrap_fold_compound_mfe_window_zscore_cb},
{"RNAc::fold_compound_probs_window", _wrap_fold_compound_probs_window},
{"RNAc::fold_compound_heat_capacity_cb", _wrap_fold_compound_heat_capacity_cb},
{"RNAc::fold_compound_type_get", _wrap_fold_compound_type_get},
{"RNAc::fold_compound_length_get", _wrap_fold_compound_length_get},
{"RNAc::fold_compound_strands_get", _wrap_fold_compound_strands_get},
{"RNAc::fold_compound_params_get", _wrap_fold_compound_params_get},
{"RNAc::fold_compound_exp_params_get", _wrap_fold_compound_exp_params_get},
{"RNAc::new_fold_compound", _wrap_new_fold_compound},
{"RNAc::delete_fold_compound", _wrap_delete_fold_compound},
{0,0}
};
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#if defined(__cplusplus) && ! defined(XSPROTO)
extern "C"
#endif

XS(SWIG_init) {
  dXSARGS;
  int i;
  (void)items;
  
  SWIG_InitializeModule(0);
  
  /* Install commands */
  for (i = 0; swig_commands[i].name; i++) {
    /* Casts only needed for Perl < 5.10. */
#ifdef __cplusplus
    newXS(const_cast<char*>(swig_commands[i].name), swig_commands[i].wrapper, const_cast<char*>(__FILE__));
#else
    newXS((char*)swig_commands[i].name, swig_commands[i].wrapper, (char*)__FILE__);
#endif
  }
  
  /* Install variables */
  for (i = 0; swig_variables[i].name; i++) {
    SV *sv;
    sv = get_sv(swig_variables[i].name, TRUE | 0x2 | GV_ADDMULTI);
    if (swig_variables[i].type) {
      SWIG_MakePtr(sv,(void *)1, *swig_variables[i].type,0);
    } else {
      sv_setiv(sv,(IV) 0);
    }
    swig_create_magic(sv, swig_variables[i].name, swig_variables[i].set, swig_variables[i].get); 
  }
  
  /* Install constant */
  for (i = 0; swig_constants[i].type; i++) {
    SV *sv;
    sv = get_sv(swig_constants[i].name, TRUE | 0x2 | GV_ADDMULTI);
    switch(swig_constants[i].type) {
    case SWIG_INT:
      sv_setiv(sv, (IV) swig_constants[i].lvalue);
      break;
    case SWIG_FLOAT:
      sv_setnv(sv, (double) swig_constants[i].dvalue);
      break;
    case SWIG_STRING:
      sv_setpv(sv, (const char *) swig_constants[i].pvalue);
      break;
    case SWIG_POINTER:
      SWIG_MakePtr(sv, swig_constants[i].pvalue, *(swig_constants[i].ptype),0);
      break;
    case SWIG_BINARY:
      SWIG_MakePackedObj(sv, swig_constants[i].pvalue, swig_constants[i].lvalue, *(swig_constants[i].ptype));
      break;
    default:
      break;
    }
    SvREADONLY_on(sv);
  }
  
  SWIG_TypeClientData(SWIGTYPE_p_intArray, (void*) "RNA::intArray");
  SWIG_TypeClientData(SWIGTYPE_p_floatArray, (void*) "RNA::floatArray");
  SWIG_TypeClientData(SWIGTYPE_p_doubleArray, (void*) "RNA::doubleArray");
  SWIG_TypeClientData(SWIGTYPE_p_std__pairT_double_double_t, (void*) "RNA::DoublePair");
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_int_t, (void*) "RNA::IntVector");
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_unsigned_int_t, (void*) "RNA::UIntVector");
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_double_t, (void*) "RNA::DoubleVector");
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_std__string_t, (void*) "RNA::StringVector");
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_char_const_p_t, (void*) "RNA::ConstCharVector");
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_SOLUTION_t, (void*) "RNA::SOLUTIONVector");
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_COORDINATE_t, (void*) "RNA::CoordinateVector");
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_std__vectorT_double_t_t, (void*) "RNA::DoubleDoubleVector");
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_std__vectorT_int_t_t, (void*) "RNA::IntIntVector");
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_vrna_ep_t_t, (void*) "RNA::ElemProbVector");
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_vrna_path_t_t, (void*) "RNA::PathVector");
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_vrna_move_t_t, (void*) "RNA::MoveVector");
  SWIG_TypeClientData(SWIGTYPE_p_vrna_param_t, (void*) "RNA::param");
  SWIG_TypeClientData(SWIGTYPE_p_vrna_exp_param_t, (void*) "RNA::exp_param");
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PARAMETER_FORMAT_DEFAULT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_PARAMETER_FORMAT_DEFAULT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "UNKNOWN", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(UNKNOWN)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "QUIT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(QUIT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "S", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(S)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "S_H", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(S_H)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "HP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(HP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "HP_H", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(HP_H)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "B", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(B)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "B_H", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(B_H)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IL)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "IL_H", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(IL_H)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MMH", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(MMH)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MMH_H", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(MMH_H)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MMI", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(MMI)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MMI_H", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(MMI_H)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MMI1N", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(MMI1N)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MMI1N_H", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(MMI1N_H)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MMI23", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(MMI23)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MMI23_H", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(MMI23_H)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MMM", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(MMM)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MMM_H", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(MMM_H)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MME", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(MME)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MME_H", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(MME_H)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "D5", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(D5)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "D5_H", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(D5_H)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "D3", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(D3)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "D3_H", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(D3_H)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "INT11", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(INT11)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "INT11_H", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(INT11_H)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "INT21", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(INT21)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "INT21_H", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(INT21_H)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "INT22", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(INT22)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "INT22_H", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(INT22_H)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ML", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(ML)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TL)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TRI", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(TRI)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "HEX", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(HEX)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "NIN", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(NIN)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MISC", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(MISC)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "GASCONST", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(1.98717)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "K0", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_double  SWIG_PERL_CALL_ARGS_1(static_cast< double >(273.15)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "INF", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(10000000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "EMAX", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((10000000/10))));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FORBIDDEN", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(9999)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "BONUS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(10000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "NBPAIRS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(7)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "TURN", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(3)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAXLOOP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(30)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "UNIT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(100)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MINPSCORE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(-2*100)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_vrna_md_t, (void*) "RNA::md");
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "NBASES", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(8)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAXALPHA", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(20)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FILENAME_MAX_LENGTH", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(80)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FILENAME_ID_LENGTH", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(42)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_vrna_ep_t, (void*) "RNA::ep");
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PLIST_TYPE_BASEPAIR", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(VRNA_PLIST_TYPE_BASEPAIR)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PLIST_TYPE_GQUAD", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(VRNA_PLIST_TYPE_GQUAD)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PLIST_TYPE_H_MOTIF", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(VRNA_PLIST_TYPE_H_MOTIF)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PLIST_TYPE_I_MOTIF", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(VRNA_PLIST_TYPE_I_MOTIF)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PLIST_TYPE_UD_MOTIF", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(VRNA_PLIST_TYPE_UD_MOTIF)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PLIST_TYPE_STACK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(VRNA_PLIST_TYPE_STACK)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STRUCTURE_TREE_HIT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_STRUCTURE_TREE_HIT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STRUCTURE_TREE_SHAPIRO_SHORT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_STRUCTURE_TREE_SHAPIRO_SHORT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STRUCTURE_TREE_SHAPIRO", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_STRUCTURE_TREE_SHAPIRO)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STRUCTURE_TREE_SHAPIRO_EXT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_STRUCTURE_TREE_SHAPIRO_EXT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STRUCTURE_TREE_SHAPIRO_WEIGHT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_STRUCTURE_TREE_SHAPIRO_WEIGHT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STRUCTURE_TREE_EXPANDED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_STRUCTURE_TREE_EXPANDED)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "BRACKETS_RND", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_BRACKETS_RND)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "BRACKETS_ANG", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_BRACKETS_ANG)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "BRACKETS_SQR", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_BRACKETS_SQR)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "BRACKETS_CLY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_BRACKETS_CLY)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "BRACKETS_ALPHA", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_BRACKETS_ALPHA)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "BRACKETS_DEFAULT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_BRACKETS_DEFAULT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "BRACKETS_ANY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_BRACKETS_ANY)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ALN_DEFAULT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_ALN_DEFAULT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ALN_RNA", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_ALN_RNA)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ALN_DNA", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_ALN_DNA)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ALN_UPPERCASE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_ALN_UPPERCASE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ALN_LOWERCASE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_ALN_LOWERCASE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MEASURE_SHANNON_ENTROPY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_MEASURE_SHANNON_ENTROPY)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p__struct_en, (void*) "RNA::struct_en");
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "GRADIENT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(GRADIENT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FIRST", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(FIRST)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ADAPTIVE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(ADAPTIVE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_COORDINATE, (void*) "RNA::COORDINATE");
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DECOMP_PAIR_HP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((int) VRNA_DECOMP_PAIR_HP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DECOMP_PAIR_IL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((int) VRNA_DECOMP_PAIR_IL)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DECOMP_PAIR_ML", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((int) VRNA_DECOMP_PAIR_ML)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DECOMP_ML_ML_ML", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((int) VRNA_DECOMP_ML_ML_ML)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DECOMP_ML_STEM", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((int) VRNA_DECOMP_ML_STEM)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DECOMP_ML_ML", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((int) VRNA_DECOMP_ML_ML)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DECOMP_ML_UP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((int) VRNA_DECOMP_ML_UP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DECOMP_ML_ML_STEM", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((int) VRNA_DECOMP_ML_ML_STEM)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DECOMP_ML_COAXIAL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((int) VRNA_DECOMP_ML_COAXIAL)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DECOMP_EXT_EXT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((int) VRNA_DECOMP_EXT_EXT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DECOMP_EXT_UP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((int) VRNA_DECOMP_EXT_UP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DECOMP_EXT_STEM", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((int) VRNA_DECOMP_EXT_STEM)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DECOMP_EXT_EXT_EXT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((int) VRNA_DECOMP_EXT_EXT_EXT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DECOMP_EXT_STEM_EXT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((int) VRNA_DECOMP_EXT_STEM_EXT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DECOMP_EXT_STEM_OUTSIDE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((int) VRNA_DECOMP_EXT_STEM_OUTSIDE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DECOMP_EXT_EXT_STEM", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((int) VRNA_DECOMP_EXT_EXT_STEM)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "DECOMP_EXT_EXT_STEM1", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >((int) VRNA_DECOMP_EXT_EXT_STEM1)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONSTRAINT_DB", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CONSTRAINT_DB)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONSTRAINT_DB_ENFORCE_BP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CONSTRAINT_DB_ENFORCE_BP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONSTRAINT_DB_PIPE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CONSTRAINT_DB_PIPE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONSTRAINT_DB_DOT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CONSTRAINT_DB_DOT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONSTRAINT_DB_X", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CONSTRAINT_DB_X)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONSTRAINT_DB_ANG_BRACK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CONSTRAINT_DB_ANG_BRACK)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONSTRAINT_DB_RND_BRACK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CONSTRAINT_DB_RND_BRACK)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONSTRAINT_DB_INTRAMOL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CONSTRAINT_DB_INTRAMOL)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONSTRAINT_DB_INTERMOL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CONSTRAINT_DB_INTERMOL)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONSTRAINT_DB_GQUAD", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CONSTRAINT_DB_GQUAD)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONSTRAINT_DB_DEFAULT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CONSTRAINT_DB_DEFAULT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONSTRAINT_CONTEXT_EXT_LOOP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CONSTRAINT_CONTEXT_EXT_LOOP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONSTRAINT_CONTEXT_HP_LOOP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CONSTRAINT_CONTEXT_HP_LOOP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONSTRAINT_CONTEXT_INT_LOOP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CONSTRAINT_CONTEXT_INT_LOOP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONSTRAINT_CONTEXT_INT_LOOP_ENC", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CONSTRAINT_CONTEXT_INT_LOOP_ENC)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONSTRAINT_CONTEXT_MB_LOOP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CONSTRAINT_CONTEXT_MB_LOOP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONSTRAINT_CONTEXT_MB_LOOP_ENC", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CONSTRAINT_CONTEXT_MB_LOOP_ENC)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONSTRAINT_CONTEXT_ENFORCE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CONSTRAINT_CONTEXT_ENFORCE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONSTRAINT_CONTEXT_NO_REMOVE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CONSTRAINT_CONTEXT_NO_REMOVE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONSTRAINT_CONTEXT_ALL_LOOPS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CONSTRAINT_CONTEXT_ALL_LOOPS)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONSTRAINT_CONTEXT_NONE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CONSTRAINT_CONTEXT_NONE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONSTRAINT_CONTEXT_CLOSING_LOOPS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CONSTRAINT_CONTEXT_CLOSING_LOOPS)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CONSTRAINT_CONTEXT_ENCLOSED_LOOPS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CONSTRAINT_CONTEXT_ENCLOSED_LOOPS)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ZSCORE_OPTIONS_NONE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_ZSCORE_OPTIONS_NONE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ZSCORE_FILTER_ON", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_ZSCORE_FILTER_ON)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ZSCORE_PRE_FILTER", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_ZSCORE_PRE_FILTER)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ZSCORE_REPORT_SUBSUMED", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_ZSCORE_REPORT_SUBSUMED)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ZSCORE_MODEL_DEFAULT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_ZSCORE_MODEL_DEFAULT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ZSCORE_SETTINGS_DEFAULT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_ZSCORE_SETTINGS_DEFAULT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_vrna_pbacktrack_mem_t, (void*) "RNA::pbacktrack_mem");
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PBACKTRACK_DEFAULT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_PBACKTRACK_DEFAULT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PBACKTRACK_NON_REDUNDANT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_PBACKTRACK_NON_REDUNDANT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "EXT_LOOP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_EXT_LOOP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "HP_LOOP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_HP_LOOP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "INT_LOOP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_INT_LOOP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MB_LOOP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_MB_LOOP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "ANY_LOOP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_ANY_LOOP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PROBS_WINDOW_BPP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_PROBS_WINDOW_BPP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PROBS_WINDOW_UP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_PROBS_WINDOW_UP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PROBS_WINDOW_STACKP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_PROBS_WINDOW_STACKP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PROBS_WINDOW_UP_SPLIT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_PROBS_WINDOW_UP_SPLIT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PROBS_WINDOW_PF", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_PROBS_WINDOW_PF)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_SOLUTION, (void*) "RNA::SOLUTION");
  SWIG_TypeClientData(SWIGTYPE_p_subopt_solution, (void*) "RNA::subopt_solution");
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_subopt_solution_t, (void*) "RNA::SuboptVector");
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MAXDOS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(1000)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  
  /* work around segfault when script tries to free symbolset */
  
  symbolset = (char *) vrna_alloc(21);
  strcpy(symbolset, "AUGC");
  
  
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FILE_FORMAT_MSA_CLUSTAL", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_FILE_FORMAT_MSA_CLUSTAL)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FILE_FORMAT_MSA_DEFAULT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_FILE_FORMAT_MSA_DEFAULT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FILE_FORMAT_MSA_FASTA", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_FILE_FORMAT_MSA_FASTA)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FILE_FORMAT_MSA_MAF", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_FILE_FORMAT_MSA_MAF)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FILE_FORMAT_MSA_NOCHECK", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_FILE_FORMAT_MSA_NOCHECK)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FILE_FORMAT_MSA_STOCKHOLM", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_FILE_FORMAT_MSA_STOCKHOLM)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FILE_FORMAT_MSA_MIS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_FILE_FORMAT_MSA_MIS)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FILE_FORMAT_MSA_UNKNOWN", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_FILE_FORMAT_MSA_UNKNOWN)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FILE_FORMAT_MSA_QUIET", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_FILE_FORMAT_MSA_QUIET)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FILE_FORMAT_MSA_SILENT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_FILE_FORMAT_MSA_SILENT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FILE_FORMAT_MSA_APPEND", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_FILE_FORMAT_MSA_APPEND)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SEQUENCE_RNA", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_SEQUENCE_RNA)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "SEQUENCE_DNA", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_SEQUENCE_DNA)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "UNSTRUCTURED_DOMAIN_EXT_LOOP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_UNSTRUCTURED_DOMAIN_EXT_LOOP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "UNSTRUCTURED_DOMAIN_HP_LOOP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_UNSTRUCTURED_DOMAIN_HP_LOOP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "UNSTRUCTURED_DOMAIN_INT_LOOP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_UNSTRUCTURED_DOMAIN_INT_LOOP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "UNSTRUCTURED_DOMAIN_MB_LOOP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_UNSTRUCTURED_DOMAIN_MB_LOOP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "UNSTRUCTURED_DOMAIN_ALL_LOOPS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_UNSTRUCTURED_DOMAIN_ALL_LOOPS)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "UNSTRUCTURED_DOMAIN_MOTIF", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_UNSTRUCTURED_DOMAIN_MOTIF)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_vrna_command_s, (void*) "RNA::cmd");
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CMD_PARSE_DEFAULTS", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CMD_PARSE_DEFAULTS)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CMD_PARSE_HC", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CMD_PARSE_HC)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CMD_PARSE_SC", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CMD_PARSE_SC)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CMD_PARSE_SD", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CMD_PARSE_SD)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "CMD_PARSE_UD", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_CMD_PARSE_UD)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_duplexT, (void*) "RNA::duplexT");
  SWIG_TypeClientData(SWIGTYPE_p_duplex_list_t, (void*) "RNA::duplex_list_t");
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_duplex_list_t_t, (void*) "RNA::DuplexVector");
  SWIG_TypeClientData(SWIGTYPE_p_vrna_move_t, (void*) "RNA::move");
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MOVESET_INSERTION", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_MOVESET_INSERTION)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MOVESET_DELETION", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_MOVESET_DELETION)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MOVESET_SHIFT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_MOVESET_SHIFT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MOVESET_NO_LP", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_MOVESET_NO_LP)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "MOVESET_DEFAULT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_MOVESET_DEFAULT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "NEIGHBOR_CHANGE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_NEIGHBOR_CHANGE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "NEIGHBOR_INVALID", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_NEIGHBOR_INVALID)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "NEIGHBOR_NEW", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_NEIGHBOR_NEW)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PATH_STEEPEST_DESCENT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_PATH_STEEPEST_DESCENT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PATH_RANDOM", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_PATH_RANDOM)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PATH_NO_TRANSITION_OUTPUT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_PATH_NO_TRANSITION_OUTPUT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PATH_DEFAULT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_PATH_DEFAULT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_vrna_path_t, (void*) "RNA::path");
  SWIG_TypeClientData(SWIGTYPE_p_vrna_path_options_s, (void*) "RNA::path_options");
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PATH_TYPE_DOT_BRACKET", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_PATH_TYPE_DOT_BRACKET)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "PATH_TYPE_MOVES", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_PATH_TYPE_MOVES)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_heat_capacity_result, (void*) "RNA::heat_capacity_result");
  SWIG_TypeClientData(SWIGTYPE_p_std__vectorT_heat_capacity_result_t, (void*) "RNA::HeatCapacityVector");
  SWIG_TypeClientData(SWIGTYPE_p_vrna_basepair_t, (void*) "RNA::basepair");
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FC_TYPE_SINGLE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(FC_TYPE_SINGLE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "FC_TYPE_COMPARATIVE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_int  SWIG_PERL_CALL_ARGS_1(static_cast< int >(FC_TYPE_COMPARATIVE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  SWIG_TypeClientData(SWIGTYPE_p_vrna_fold_compound_t, (void*) "RNA::fold_compound");
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_MFE_PRE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(VRNA_STATUS_MFE_PRE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_MFE_POST", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(VRNA_STATUS_MFE_POST)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_PF_PRE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(VRNA_STATUS_PF_PRE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "STATUS_PF_POST", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_char  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned char >(VRNA_STATUS_PF_POST)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "OPTION_DEFAULT", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_OPTION_DEFAULT)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "OPTION_MFE", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_OPTION_MFE)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "OPTION_PF", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_OPTION_PF)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "OPTION_HYBRID", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_OPTION_HYBRID)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "OPTION_EVAL_ONLY", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_OPTION_EVAL_ONLY)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  /*@SWIG:/usr/share/swig/4.0.2/perl5/perltypemaps.swg,65,%set_constant@*/ do {
    SV *sv = get_sv((char*) SWIG_prefix "OPTION_WINDOW", TRUE | 0x2 | GV_ADDMULTI);
    sv_setsv(sv, SWIG_From_unsigned_SS_int  SWIG_PERL_CALL_ARGS_1(static_cast< unsigned int >(VRNA_OPTION_WINDOW)));
    SvREADONLY_on(sv);
  } while(0) /*@SWIG@*/;
  ST(0) = &PL_sv_yes;
  XSRETURN(1);
}

