/**

@fn float vrna_eval_structure(vrna_fold_compound_t *vc, const char *structure)
@scripting
@parblock
This function is attached as method @b eval_structure() to objects of type @em fold_compound
@endparblock

@fn int vrna_eval_structure_pt( vrna_fold_compound_t *vc, const short *pt)
@scripting
@parblock
This function is attached as method @b eval_structure_pt() to objects of type @em fold_compound
@endparblock

@fn float vrna_eval_structure_verbose(vrna_fold_compound_t *vc, const char *structure, FILE *file)
@scripting
@parblock
This function is attached as method @b eval_structure_verbose() to objects of type @em fold_compound
@endparblock

@fn int vrna_eval_structure_pt_verbose( vrna_fold_compound_t *vc, const short *pt, FILE *file)
@scripting
@parblock
This function is attached as method @b eval_structure_pt_verbose() to objects of type @em fold_compound
@endparblock

@fn float vrna_eval_covar_structure(vrna_fold_compound_t *vc, const char *structure)
@scripting
@parblock
This function is attached as method @b eval_covar_structure() to objects of type @em fold_compound
@endparblock

@fn int vrna_eval_loop_pt(vrna_fold_compound_t *vc, int i, const short *pt)
@scripting
@parblock
This function is attached as method @b eval_loop_pt() to objects of type @em fold_compound
@endparblock

@fn float vrna_eval_move( vrna_fold_compound_t *vc, const char *structure, int m1, int m2)
@scripting
@parblock
This function is attached as method @b eval_move() to objects of type @em fold_compound
@endparblock

@fn int vrna_eval_move_pt(vrna_fold_compound_t *vc, short *pt, int m1, int m2)
@scripting
@parblock
This function is attached as method @b eval_move_pt() to objects of type @em fold_compound
@endparblock

@fn int vrna_eval_hp_loop(vrna_fold_compound_t *fc, int i, int j)
@scripting
@parblock
This function is attached as method @b eval_hp_loop() to objects of type @em fold_compound
@endparblock

@fn int vrna_eval_int_loop( vrna_fold_compound_t *vc, int i, int j, int k, int l)
@scripting
@parblock
This function is attached as method @b eval_int_loop() to objects of type @em fold_compound
@endparblock

@fn int vrna_eval_structure_simple(const char *string, const char *structure)
@scripting
@parblock
In the target scripting language, this function serves as a wrapper for vrna_eval_structure_simple_v()
and, thus, allows for two additional, optional arguments, the verbosity level and a file
handle which default to #VRNA_VERBOSITY_QUIET and NULL, respectively.
@endparblock

@fn int vrna_eval_circ_structure(const char *string, const char *structure)
@scripting
@parblock
In the target scripting language, this function serves as a wrapper for vrna_eval_circ_structure_v()
and, thus, allows for two additional, optional arguments, the verbosity level and a file
handle which default to #VRNA_VERBOSITY_QUIET and NULL, respectively.
@endparblock

@fn int vrna_eval_gquad_structure(const char *string, const char *structure)
@scripting
@parblock
In the target scripting language, this function serves as a wrapper for vrna_eval_gquad_structure_v()
and, thus, allows for two additional, optional arguments, the verbosity level and a file
handle which default to #VRNA_VERBOSITY_QUIET and NULL, respectively.
@endparblock

@fn int vrna_eval_circ_gquad_structure(const char *string, const char *structure)
@scripting
@parblock
In the target scripting language, this function serves as a wrapper for vrna_eval_circ_gquad_structure_v()
and, thus, allows for two additional, optional arguments, the verbosity level and a file
handle which default to #VRNA_VERBOSITY_QUIET and NULL, respectively.
@endparblock

@fn int vrna_eval_consensus_structure_simple(const char **alignment, const char *structure)
@scripting
@parblock
This function is available through an overloadeded version of vrna_eval_structure_simple().
Simply pass a sequence alignment as list of strings (including gaps) as first, and the
consensus structure as second argument
@endparblock

@fn int vrna_eval_circ_consensus_structure(const char **alignment, const char *structure)
@scripting
@parblock
This function is available through an overloadeded version of vrna_eval_circ_structure().
Simply pass a sequence alignment as list of strings (including gaps) as first, and the
consensus structure as second argument
@endparblock

@fn int vrna_eval_gquad_consensus_structure(const char **alignment, const char *structure)
@scripting
@parblock
This function is available through an overloadeded version of vrna_eval_gquad_structure().
Simply pass a sequence alignment as list of strings (including gaps) as first, and the
consensus structure as second argument
@endparblock

@fn int vrna_eval_circ_gquad_consensus_structure(const char **alignment, const char *structure)
@scripting
@parblock
This function is available through an overloadeded version of vrna_eval_circ_gquad_structure().
Simply pass a sequence alignment as list of strings (including gaps) as first, and the
consensus structure as second argument
@endparblock

@fn int vrna_eval_structure_simple_verbose(const char *string, const char *structure, FILE *file)
@scripting
@parblock
This function is not available. Use vrna_eval_structure_simple_v() instead!
@endparblock

@fn int vrna_eval_consensus_structure_simple_verbose(const char **alignment, const char *structure, FILE *file)
@scripting
@parblock
This function is not available. Use vrna_eval_consensus_structure_simple_v() instead!
@endparblock

@fn int vrna_eval_structure_simple_v(const char *string, const char *structure, int verbosity_level, FILE *file)
@scripting
@parblock
This function is available through an overloaded version of vrna_eval_structure_simple().
The last two arguments for this function are optional and default to #VRNA_VERBOSITY_QUIET and NULL,
respectively.
@endparblock

@fn int vrna_eval_circ_structure_v(const char *string, const char *structure, int verbosity_level, FILE *file)
@scripting
@parblock
This function is available through an overloaded version of vrna_eval_circ_structure().
The last two arguments for this function are optional and default to #VRNA_VERBOSITY_QUIET and NULL,
respectively.
@endparblock

@fn int vrna_eval_gquad_structure_v(const char *string, const char *structure, int verbosity_level, FILE *file)
@scripting
@parblock
This function is available through an overloaded version of vrna_eval_gquad_structure().
The last two arguments for this function are optional and default to #VRNA_VERBOSITY_QUIET and NULL,
respectively.
@endparblock

@fn int vrna_eval_circ_gquad_structure_v(const char *string, const char *structure, int verbosity_level, FILE *file)
@scripting
@parblock
This function is available through an overloaded version of vrna_eval_circ_gquad_structure().
The last two arguments for this function are optional and default to #VRNA_VERBOSITY_QUIET and NULL,
respectively.
@endparblock

@fn int vrna_eval_consensus_structure_simple_v(const char **alignment, const char *structure, int verbosity_level, FILE *file)
@scripting
@parblock
This function is available through an overloaded version of vrna_eval_structure_simple().
Simply pass a sequence alignment as list of strings (including gaps) as first, and the
consensus structure as second argument. The last two arguments are optional and default
to #VRNA_VERBOSITY_QUIET and NULL, respectively.
@endparblock

@fn int vrna_eval_circ_consensus_structure_v(const char **alignment, const char *structure, int verbosity_level, FILE *file)
@scripting
@parblock
This function is available through an overloaded version of vrna_eval_circ_structure().
Simply pass a sequence alignment as list of strings (including gaps) as first, and the
consensus structure as second argument. The last two arguments are optional and default
to #VRNA_VERBOSITY_QUIET and NULL, respectively.
@endparblock

@fn int vrna_eval_gquad_consensus_structure_v(const char **alignment, const char *structure, int verbosity_level, FILE *file)
@scripting
@parblock
This function is available through an overloaded version of vrna_eval_gquad_structure().
Simply pass a sequence alignment as list of strings (including gaps) as first, and the
consensus structure as second argument. The last two arguments are optional and default
to #VRNA_VERBOSITY_QUIET and NULL, respectively.
@endparblock

@fn int vrna_eval_circ_gquad_consensus_structure_v(const char **alignment, const char *structure, int verbosity_level, FILE *file)
@scripting
@parblock
This function is available through an overloaded version of vrna_eval_circ_gquad_structure().
Simply pass a sequence alignment as list of strings (including gaps) as first, and the
consensus structure as second argument. The last two arguments are optional and default
to #VRNA_VERBOSITY_QUIET and NULL, respectively.
@endparblock

@fn int vrna_eval_structure_pt_simple(const char *string, const short *pt)
@scripting
@parblock
In the target scripting language, this function serves as a wrapper for vrna_eval_structure_pt_v()
and, thus, allows for two additional, optional arguments, the verbosity level and a file
handle which default to #VRNA_VERBOSITY_QUIET and NULL, respectively.
@endparblock

@fn int vrna_eval_consensus_structure_pt_simple(const char **alignment, const short *pt)
@scripting
@parblock
This function is available through an overloadeded version of vrna_eval_structure_pt_simple().
Simply pass a sequence alignment as list of strings (including gaps) as first, and the
consensus structure as second argument
@endparblock

@fn int vrna_eval_structure_pt_verbose(const char *sequence, const short *pt, FILE *file)
@scripting
@parblock
This function is not available. Use vrna_eval_structure_pt_v() instead!
@endparblock

@fn int vrna_eval_consensus_structure_pt_verbose(const char **alignment, const short *pt, FILE *file)
@scripting
@parblock
This function is not available. Use vrna_eval_consensus_structure_pt_v() instead!
@endparblock

@fn int vrna_eval_consensus_structure_pt_v(const char **alignment, const short *pt, int verbosity_level, FILE *file)
@scripting
@parblock
This function is available through an overloaded version of vrna_eval_structure_pt_simple().
Simply pass a sequence alignment as list of strings (including gaps) as first, and the
consensus structure as second argument. The last two arguments are optional and default
to #VRNA_VERBOSITY_QUIET and NULL, respectively.
@endparblock

@fn int vrna_eval_structure_pt_v(const char *sequence, const short *pt, int verbosity_level, FILE *file)
@scripting
@parblock
This function is available through an overloaded version of vrna_eval_structure_pt_simple().
The last two arguments for this function are optional and default to #VRNA_VERBOSITY_QUIET and NULL,
respectively.
@endparblock

*/
