/** @file RNAinverse_cmdl.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.23
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt */

#ifndef RNAINVERSE_CMDL_H
#define RNAINVERSE_CMDL_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef RNAINVERSE_CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define RNAINVERSE_CMDLINE_PARSER_PACKAGE "RNAinverse"
#endif

#ifndef RNAINVERSE_CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define RNAINVERSE_CMDLINE_PARSER_PACKAGE_NAME "RNAinverse"
#endif

#ifndef RNAINVERSE_CMDLINE_PARSER_VERSION
/** @brief the program version */
#define RNAINVERSE_CMDLINE_PARSER_VERSION VERSION
#endif

/** @brief Where the command line options are stored */
struct RNAinverse_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *detailed_help_help; /**< @brief Print help, including all details and hidden options, and exit help description.  */
  const char *full_help_help; /**< @brief Print help, including hidden options, and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int repeat_arg;	/**< @brief Search repeatedly for the same structure.
  If an argument is supplied to this option it must follow the option flag immediately. E.g.: -R5
 (default='100').  */
  char * repeat_orig;	/**< @brief Search repeatedly for the same structure.
  If an argument is supplied to this option it must follow the option flag immediately. E.g.: -R5
 original value given at command line.  */
  const char *repeat_help; /**< @brief Search repeatedly for the same structure.
  If an argument is supplied to this option it must follow the option flag immediately. E.g.: -R5
 help description.  */
  char * alphabet_arg;	/**< @brief Find sequences using only nucleotides from a given alphabet.
  
.  */
  char * alphabet_orig;	/**< @brief Find sequences using only nucleotides from a given alphabet.
  
 original value given at command line.  */
  const char *alphabet_help; /**< @brief Find sequences using only nucleotides from a given alphabet.
  
 help description.  */
  int verbose_flag;	/**< @brief In conjunction with a negative value supplied to -R, print the last subsequence and substructure for each unsuccessful search.
  
 (default=off).  */
  const char *verbose_help; /**< @brief In conjunction with a negative value supplied to -R, print the last subsequence and substructure for each unsuccessful search.
  
 help description.  */
  char * function_arg;	/**< @brief Use minimum energy (-Fm), partition function folding (-Fp) or both (-Fmp).
 (default='m').  */
  char * function_orig;	/**< @brief Use minimum energy (-Fm), partition function folding (-Fp) or both (-Fmp).
 original value given at command line.  */
  const char *function_help; /**< @brief Use minimum energy (-Fm), partition function folding (-Fp) or both (-Fmp).
 help description.  */
  float final_arg;	/**< @brief In combination with -Fp stop search when sequence is found with E(s)-F is smaller than final, where F=-kT*ln(Q).
  
.  */
  char * final_orig;	/**< @brief In combination with -Fp stop search when sequence is found with E(s)-F is smaller than final, where F=-kT*ln(Q).
  
 original value given at command line.  */
  const char *final_help; /**< @brief In combination with -Fp stop search when sequence is found with E(s)-F is smaller than final, where F=-kT*ln(Q).
  
 help description.  */
  double temp_arg;	/**< @brief Rescale energy parameters to a temperature of temp C. Default is 37C.
  
.  */
  char * temp_orig;	/**< @brief Rescale energy parameters to a temperature of temp C. Default is 37C.
  
 original value given at command line.  */
  const char *temp_help; /**< @brief Rescale energy parameters to a temperature of temp C. Default is 37C.
  
 help description.  */
  int noTetra_flag;	/**< @brief Do not include special tabulated stabilizing energies for tri-, tetra- and hexaloop hairpins. Mostly for testing.
  
 (default=off).  */
  const char *noTetra_help; /**< @brief Do not include special tabulated stabilizing energies for tri-, tetra- and hexaloop hairpins. Mostly for testing.
  
 help description.  */
  int dangles_arg;	/**< @brief How to treat \"dangling end\" energies for bases adjacent to helices in free ends and multi-loops
 (default='2').  */
  char * dangles_orig;	/**< @brief How to treat \"dangling end\" energies for bases adjacent to helices in free ends and multi-loops
 original value given at command line.  */
  const char *dangles_help; /**< @brief How to treat \"dangling end\" energies for bases adjacent to helices in free ends and multi-loops
 help description.  */
  int noGU_flag;	/**< @brief Do not allow GU pairs
  
 (default=off).  */
  const char *noGU_help; /**< @brief Do not allow GU pairs
  
 help description.  */
  int noClosingGU_flag;	/**< @brief Do not allow GU pairs at the end of helices
  
 (default=off).  */
  const char *noClosingGU_help; /**< @brief Do not allow GU pairs at the end of helices
  
 help description.  */
  char * paramFile_arg;	/**< @brief Read energy parameters from paramfile, instead of using the default parameter set.
.  */
  char * paramFile_orig;	/**< @brief Read energy parameters from paramfile, instead of using the default parameter set.
 original value given at command line.  */
  const char *paramFile_help; /**< @brief Read energy parameters from paramfile, instead of using the default parameter set.
 help description.  */
  char * nsp_arg;	/**< @brief Allow other pairs in addition to the usual AU,GC,and GU pairs.
.  */
  char * nsp_orig;	/**< @brief Allow other pairs in addition to the usual AU,GC,and GU pairs.
 original value given at command line.  */
  const char *nsp_help; /**< @brief Allow other pairs in addition to the usual AU,GC,and GU pairs.
 help description.  */
  int energyModel_arg;	/**< @brief Rarely used option to fold sequences from the artificial ABCD... alphabet, where A pairs B, C-D etc.  Use the energy parameters for GC (-e 1) or AU (-e 2) pairs.
  
.  */
  char * energyModel_orig;	/**< @brief Rarely used option to fold sequences from the artificial ABCD... alphabet, where A pairs B, C-D etc.  Use the energy parameters for GC (-e 1) or AU (-e 2) pairs.
  
 original value given at command line.  */
  const char *energyModel_help; /**< @brief Rarely used option to fold sequences from the artificial ABCD... alphabet, where A pairs B, C-D etc.  Use the energy parameters for GC (-e 1) or AU (-e 2) pairs.
  
 help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int detailed_help_given ;	/**< @brief Whether detailed-help was given.  */
  unsigned int full_help_given ;	/**< @brief Whether full-help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int repeat_given ;	/**< @brief Whether repeat was given.  */
  unsigned int alphabet_given ;	/**< @brief Whether alphabet was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */
  unsigned int function_given ;	/**< @brief Whether function was given.  */
  unsigned int final_given ;	/**< @brief Whether final was given.  */
  unsigned int temp_given ;	/**< @brief Whether temp was given.  */
  unsigned int noTetra_given ;	/**< @brief Whether noTetra was given.  */
  unsigned int dangles_given ;	/**< @brief Whether dangles was given.  */
  unsigned int noGU_given ;	/**< @brief Whether noGU was given.  */
  unsigned int noClosingGU_given ;	/**< @brief Whether noClosingGU was given.  */
  unsigned int paramFile_given ;	/**< @brief Whether paramFile was given.  */
  unsigned int nsp_given ;	/**< @brief Whether nsp was given.  */
  unsigned int energyModel_given ;	/**< @brief Whether energyModel was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct RNAinverse_cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure RNAinverse_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure RNAinverse_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *RNAinverse_args_info_purpose;
/** @brief the usage string of the program */
extern const char *RNAinverse_args_info_usage;
/** @brief the description string of the program */
extern const char *RNAinverse_args_info_description;
/** @brief all the lines making the help output */
extern const char *RNAinverse_args_info_help[];
/** @brief all the lines making the full help output (including hidden options) */
extern const char *RNAinverse_args_info_full_help[];
/** @brief all the lines making the detailed help output (including hidden options and details) */
extern const char *RNAinverse_args_info_detailed_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int RNAinverse_cmdline_parser (int argc, char **argv,
  struct RNAinverse_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use RNAinverse_cmdline_parser_ext() instead
 */
int RNAinverse_cmdline_parser2 (int argc, char **argv,
  struct RNAinverse_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int RNAinverse_cmdline_parser_ext (int argc, char **argv,
  struct RNAinverse_args_info *args_info,
  struct RNAinverse_cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int RNAinverse_cmdline_parser_dump(FILE *outfile,
  struct RNAinverse_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int RNAinverse_cmdline_parser_file_save(const char *filename,
  struct RNAinverse_args_info *args_info);

/**
 * Print the help
 */
void RNAinverse_cmdline_parser_print_help(void);
/**
 * Print the full help (including hidden options)
 */
void RNAinverse_cmdline_parser_print_full_help(void);
/**
 * Print the detailed help (including hidden options and details)
 */
void RNAinverse_cmdline_parser_print_detailed_help(void);
/**
 * Print the version
 */
void RNAinverse_cmdline_parser_print_version(void);

/**
 * Initializes all the fields a RNAinverse_cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void RNAinverse_cmdline_parser_params_init(struct RNAinverse_cmdline_parser_params *params);

/**
 * Allocates dynamically a RNAinverse_cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized RNAinverse_cmdline_parser_params structure
 */
struct RNAinverse_cmdline_parser_params *RNAinverse_cmdline_parser_params_create(void);

/**
 * Initializes the passed RNAinverse_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void RNAinverse_cmdline_parser_init (struct RNAinverse_args_info *args_info);
/**
 * Deallocates the string fields of the RNAinverse_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void RNAinverse_cmdline_parser_free (struct RNAinverse_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int RNAinverse_cmdline_parser_required (struct RNAinverse_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* RNAINVERSE_CMDL_H */
