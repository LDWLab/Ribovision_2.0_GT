# Makefile.in generated by automake 1.16.3 from Makefile.am.
# tests/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2020 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/ViennaRNA
pkgincludedir = $(includedir)/ViennaRNA
pkglibdir = $(libdir)/ViennaRNA
pkglibexecdir = $(libexecdir)/ViennaRNA
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-pc-linux-gnu
host_triplet = x86_64-pc-linux-gnu
#am__append_1 = $(MPFR_LIBS)

# Link against stdc++ if we use SVM
am__append_2 = $(SVM_LIBS)
#check_PROGRAMS =  \
#	$(am__EXEEXT_1)
TESTS = $(EXECUTABLE_TESTS) $(am__EXEEXT_1) \
	$(PERL_TESTS) $(PYTHON2_TESTS) \
	$(PYTHON3_TESTS)
subdir = tests
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/ac_rna.m4 \
	$(top_srcdir)/m4/ac_rna_build_requirements.m4 \
	$(top_srcdir)/m4/ac_rna_colorize.m4 \
	$(top_srcdir)/m4/ac_rna_features.m4 \
	$(top_srcdir)/m4/ac_rna_latex.m4 \
	$(top_srcdir)/m4/ac_rna_lto.m4 \
	$(top_srcdir)/m4/ac_rna_macros.m4 \
	$(top_srcdir)/m4/ac_rna_osx.m4 \
	$(top_srcdir)/m4/ac_rna_refman.m4 \
	$(top_srcdir)/m4/ac_rna_subpackages.m4 \
	$(top_srcdir)/m4/ac_rna_swig.m4 \
	$(top_srcdir)/m4/ac_rna_tutorial.m4 \
	$(top_srcdir)/m4/ac_rna_unit_tests.m4 \
	$(top_srcdir)/m4/ax_append_flag.m4 \
	$(top_srcdir)/m4/ax_check_compile_flag.m4 \
	$(top_srcdir)/m4/ax_check_link_flag.m4 \
	$(top_srcdir)/m4/ax_compiler_vendor.m4 \
	$(top_srcdir)/m4/ax_openmp.m4 $(top_srcdir)/m4/ax_perl_ext.m4 \
	$(top_srcdir)/m4/ax_pkg_swig.m4 $(top_srcdir)/m4/ax_pthread.m4 \
	$(top_srcdir)/m4/ax_python2_devel.m4 \
	$(top_srcdir)/m4/ax_python3_devel.m4 \
	$(top_srcdir)/m4/ax_require_defined.m4 \
	$(top_srcdir)/m4/libtool.m4 $(top_srcdir)/m4/ltoptions.m4 \
	$(top_srcdir)/m4/ltsugar.m4 $(top_srcdir)/m4/ltversion.m4 \
	$(top_srcdir)/m4/lt~obsolete.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES = RNApath.py RNAHelpers.pm test-env.sh
CONFIG_CLEAN_VPATH_FILES =
#am__EXEEXT_1 = energy_evaluation$(EXEEXT) \
#	constraints$(EXEEXT) \
#	constraints_soft$(EXEEXT) \
#	ensemble_defect$(EXEEXT) \
#	fold$(EXEEXT) \
#	utils$(EXEEXT) \
#	eval_structure$(EXEEXT) \
#	walk$(EXEEXT) \
#	neighbor$(EXEEXT) \
#	hash_table$(EXEEXT)
constraints_SOURCES = constraints.c
constraints_OBJECTS = constraints.$(OBJEXT)
constraints_LDADD = $(LDADD)
am__DEPENDENCIES_1 =
#am__DEPENDENCIES_2 = $(am__DEPENDENCIES_1)
am__DEPENDENCIES_3 = $(am__DEPENDENCIES_1)
constraints_DEPENDENCIES =  \
	$(top_builddir)/src/ViennaRNA/libRNA_conv.la \
	$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_3)
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
constraints_soft_SOURCES = constraints_soft.c
constraints_soft_OBJECTS = constraints_soft.$(OBJEXT)
constraints_soft_LDADD = $(LDADD)
constraints_soft_DEPENDENCIES =  \
	$(top_builddir)/src/ViennaRNA/libRNA_conv.la \
	$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_3)
energy_evaluation_SOURCES = energy_evaluation.c
energy_evaluation_OBJECTS = energy_evaluation.$(OBJEXT)
energy_evaluation_LDADD = $(LDADD)
energy_evaluation_DEPENDENCIES =  \
	$(top_builddir)/src/ViennaRNA/libRNA_conv.la \
	$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_3)
ensemble_defect_SOURCES = ensemble_defect.c
ensemble_defect_OBJECTS = ensemble_defect.$(OBJEXT)
ensemble_defect_LDADD = $(LDADD)
ensemble_defect_DEPENDENCIES =  \
	$(top_builddir)/src/ViennaRNA/libRNA_conv.la \
	$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_3)
eval_structure_SOURCES = eval_structure.c
eval_structure_OBJECTS = eval_structure.$(OBJEXT)
eval_structure_LDADD = $(LDADD)
eval_structure_DEPENDENCIES =  \
	$(top_builddir)/src/ViennaRNA/libRNA_conv.la \
	$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_3)
fold_SOURCES = fold.c
fold_OBJECTS = fold.$(OBJEXT)
fold_LDADD = $(LDADD)
fold_DEPENDENCIES = $(top_builddir)/src/ViennaRNA/libRNA_conv.la \
	$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_3)
hash_table_SOURCES = hash_table.c
hash_table_OBJECTS = hash_table.$(OBJEXT)
hash_table_LDADD = $(LDADD)
hash_table_DEPENDENCIES =  \
	$(top_builddir)/src/ViennaRNA/libRNA_conv.la \
	$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_3)
neighbor_SOURCES = neighbor.c
neighbor_OBJECTS = neighbor.$(OBJEXT)
neighbor_LDADD = $(LDADD)
neighbor_DEPENDENCIES = $(top_builddir)/src/ViennaRNA/libRNA_conv.la \
	$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_3)
utils_SOURCES = utils.c
utils_OBJECTS = utils.$(OBJEXT)
utils_LDADD = $(LDADD)
utils_DEPENDENCIES = $(top_builddir)/src/ViennaRNA/libRNA_conv.la \
	$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_3)
walk_SOURCES = walk.c
walk_OBJECTS = walk.$(OBJEXT)
walk_LDADD = $(LDADD)
walk_DEPENDENCIES = $(top_builddir)/src/ViennaRNA/libRNA_conv.la \
	$(am__DEPENDENCIES_2) $(am__DEPENDENCIES_3)
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/config/depcomp
am__maybe_remake_depfiles = depfiles
am__depfiles_remade = ./$(DEPDIR)/constraints.Po \
	./$(DEPDIR)/constraints_soft.Po \
	./$(DEPDIR)/energy_evaluation.Po \
	./$(DEPDIR)/ensemble_defect.Po ./$(DEPDIR)/eval_structure.Po \
	./$(DEPDIR)/fold.Po ./$(DEPDIR)/hash_table.Po \
	./$(DEPDIR)/neighbor.Po ./$(DEPDIR)/utils.Po \
	./$(DEPDIR)/walk.Po
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
SOURCES = constraints.c constraints_soft.c energy_evaluation.c \
	ensemble_defect.c eval_structure.c fold.c hash_table.c \
	neighbor.c utils.c walk.c
DIST_SOURCES = constraints.c constraints_soft.c energy_evaluation.c \
	ensemble_defect.c eval_structure.c fold.c hash_table.c \
	neighbor.c utils.c walk.c
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
am__tty_colors_dummy = \
  mgn= red= grn= lgn= blu= brg= std=; \
  am__color_tests=no
am__tty_colors = { \
  $(am__tty_colors_dummy); \
  if test "X$(AM_COLOR_TESTS)" = Xno; then \
    am__color_tests=no; \
  elif test "X$(AM_COLOR_TESTS)" = Xalways; then \
    am__color_tests=yes; \
  elif test "X$$TERM" != Xdumb && { test -t 1; } 2>/dev/null; then \
    am__color_tests=yes; \
  fi; \
  if test $$am__color_tests = yes; then \
    red='[0;31m'; \
    grn='[0;32m'; \
    lgn='[1;32m'; \
    blu='[1;34m'; \
    mgn='[0;35m'; \
    brg='[1m'; \
    std='[m'; \
  fi; \
}
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__recheck_rx = ^[ 	]*:recheck:[ 	]*
am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*
am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*
# A command that, given a newline-separated list of test names on the
# standard input, print the name of the tests that are to be re-run
# upon "make recheck".
am__list_recheck_tests = $(AWK) '{ \
  recheck = 1; \
  while ((rc = (getline line < ($$0 ".trs"))) != 0) \
    { \
      if (rc < 0) \
        { \
          if ((getline line2 < ($$0 ".log")) < 0) \
	    recheck = 0; \
          break; \
        } \
      else if (line ~ /$(am__recheck_rx)[nN][Oo]/) \
        { \
          recheck = 0; \
          break; \
        } \
      else if (line ~ /$(am__recheck_rx)[yY][eE][sS]/) \
        { \
          break; \
        } \
    }; \
  if (recheck) \
    print $$0; \
  close ($$0 ".trs"); \
  close ($$0 ".log"); \
}'
# A command that, given a newline-separated list of test names on the
# standard input, create the global log from their .trs and .log files.
am__create_global_log = $(AWK) ' \
function fatal(msg) \
{ \
  print "fatal: making $@: " msg | "cat >&2"; \
  exit 1; \
} \
function rst_section(header) \
{ \
  print header; \
  len = length(header); \
  for (i = 1; i <= len; i = i + 1) \
    printf "="; \
  printf "\n\n"; \
} \
{ \
  copy_in_global_log = 1; \
  global_test_result = "RUN"; \
  while ((rc = (getline line < ($$0 ".trs"))) != 0) \
    { \
      if (rc < 0) \
         fatal("failed to read from " $$0 ".trs"); \
      if (line ~ /$(am__global_test_result_rx)/) \
        { \
          sub("$(am__global_test_result_rx)", "", line); \
          sub("[ 	]*$$", "", line); \
          global_test_result = line; \
        } \
      else if (line ~ /$(am__copy_in_global_log_rx)[nN][oO]/) \
        copy_in_global_log = 0; \
    }; \
  if (copy_in_global_log) \
    { \
      rst_section(global_test_result ": " $$0); \
      while ((rc = (getline line < ($$0 ".log"))) != 0) \
      { \
        if (rc < 0) \
          fatal("failed to read from " $$0 ".log"); \
        print line; \
      }; \
      printf "\n"; \
    }; \
  close ($$0 ".trs"); \
  close ($$0 ".log"); \
}'
# Restructured Text title.
am__rst_title = { sed 's/.*/   &   /;h;s/./=/g;p;x;s/ *$$//;p;g' && echo; }
# Solaris 10 'make', and several other traditional 'make' implementations,
# pass "-e" to $(SHELL), and POSIX 2008 even requires this.  Work around it
# by disabling -e (using the XSI extension "set +e") if it's set.
am__sh_e_setup = case $$- in *e*) set +e;; esac
# Default flags passed to test drivers.
am__common_driver_flags = \
  --color-tests "$$am__color_tests" \
  --enable-hard-errors "$$am__enable_hard_errors" \
  --expect-failure "$$am__expect_failure"
# To be inserted before the command running the test.  Creates the
# directory for the log if needed.  Stores in $dir the directory
# containing $f, in $tst the test, in $log the log.  Executes the
# developer- defined test setup AM_TESTS_ENVIRONMENT (if any), and
# passes TESTS_ENVIRONMENT.  Set up options for the wrapper that
# will run the test scripts (or their associated LOG_COMPILER, if
# thy have one).
am__check_pre = \
$(am__sh_e_setup);					\
$(am__vpath_adj_setup) $(am__vpath_adj)			\
$(am__tty_colors);					\
srcdir=$(srcdir); export srcdir;			\
case "$@" in						\
  */*) am__odir=`echo "./$@" | sed 's|/[^/]*$$||'`;;	\
    *) am__odir=.;; 					\
esac;							\
test "x$$am__odir" = x"." || test -d "$$am__odir" 	\
  || $(MKDIR_P) "$$am__odir" || exit $$?;		\
if test -f "./$$f"; then dir=./;			\
elif test -f "$$f"; then dir=;				\
else dir="$(srcdir)/"; fi;				\
tst=$$dir$$f; log='$@'; 				\
if test -n '$(DISABLE_HARD_ERRORS)'; then		\
  am__enable_hard_errors=no; 				\
else							\
  am__enable_hard_errors=yes; 				\
fi; 							\
case " $(XFAIL_TESTS) " in				\
  *[\ \	]$$f[\ \	]* | *[\ \	]$$dir$$f[\ \	]*) \
    am__expect_failure=yes;;				\
  *)							\
    am__expect_failure=no;;				\
esac; 							\
$(AM_TESTS_ENVIRONMENT) $(TESTS_ENVIRONMENT)
# A shell command to get the names of the tests scripts with any registered
# extension removed (i.e., equivalently, the names of the test logs, with
# the '.log' extension removed).  The result is saved in the shell variable
# '$bases'.  This honors runtime overriding of TESTS and TEST_LOGS.  Sadly,
# we cannot use something simpler, involving e.g., "$(TEST_LOGS:.log=)",
# since that might cause problem with VPATH rewrites for suffix-less tests.
# See also 'test-harness-vpath-rewrite.sh' and 'test-trs-basic.sh'.
am__set_TESTS_bases = \
  bases='$(TEST_LOGS)'; \
  bases=`for i in $$bases; do echo $$i; done | sed 's/\.log$$//'`; \
  bases=`echo $$bases`
AM_TESTSUITE_SUMMARY_HEADER = ' for $(PACKAGE_STRING)'
RECHECK_LOGS = $(TEST_LOGS)
AM_RECURSIVE_TARGETS = check recheck
TEST_SUITE_LOG = test-suite.log
LOG_DRIVER = $(SHELL) $(top_srcdir)/config/test-driver
LOG_COMPILE = $(LOG_COMPILER) $(AM_LOG_FLAGS) $(LOG_FLAGS)
am__set_b = \
  case '$@' in \
    */*) \
      case '$*' in \
        */*) b='$*';; \
          *) b=`echo '$@' | sed 's/\.log$$//'`; \
       esac;; \
    *) \
      b='$*';; \
  esac
am__test_logs1 = $(TESTS:=.log)
am__test_logs2 = $(am__test_logs1:.log=.log)
am__test_logs3 = $(am__test_logs2:.pl.log=.log)
PL_LOG_DRIVER = $(SHELL) $(top_srcdir)/config/test-driver
PL_LOG_COMPILE = $(PL_LOG_COMPILER) $(AM_PL_LOG_FLAGS) $(PL_LOG_FLAGS)
am__test_logs4 = $(am__test_logs3:.t.log=.log)
T_LOG_DRIVER = $(SHELL) $(top_srcdir)/config/test-driver
T_LOG_COMPILE = $(T_LOG_COMPILER) $(AM_T_LOG_FLAGS) $(T_LOG_FLAGS)
am__test_logs5 = $(am__test_logs4:.py.log=.log)
PY_LOG_DRIVER = $(SHELL) $(top_srcdir)/config/test-driver
PY_LOG_COMPILE = $(PY_LOG_COMPILER) $(AM_PY_LOG_FLAGS) $(PY_LOG_FLAGS)
TEST_LOGS = $(am__test_logs5:.py3.log=.log)
PY3_LOG_DRIVER = $(SHELL) $(top_srcdir)/config/test-driver
PY3_LOG_COMPILE = $(PY3_LOG_COMPILER) $(AM_PY3_LOG_FLAGS) \
	$(PY3_LOG_FLAGS)
am__DIST_COMMON = $(srcdir)/Makefile.in $(srcdir)/RNAHelpers.pm.in \
	$(srcdir)/RNApath.py.in $(srcdir)/test-env.sh.in \
	$(top_srcdir)/config/depcomp $(top_srcdir)/config/test-driver
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} '/home/RiboVision3/R2DT/rna/ViennaRNA-2.4.18/config/missing' aclocal-1.16
AMTAR = $${TAR-tar}
AM_CFLAGS = $(RNA_CFLAGS) $(PTHREAD_CFLAGS)  
AM_CPPFLAGS = $(RNA_CPPFLAGS) -I$(top_srcdir)/src -I$(top_builddir)/src/
AM_CXXFLAGS = $(RNA_CXXFLAGS) $(PTHREAD_CFLAGS)
AM_DEFAULT_VERBOSITY = 0
AM_LDFLAGS = $(RNA_LDFLAGS) $(PTHREAD_LIBS)
AR = gcc-ar
AUTOCONF = ${SHELL} '/home/RiboVision3/R2DT/rna/ViennaRNA-2.4.18/config/missing' autoconf
AUTOHEADER = ${SHELL} '/home/RiboVision3/R2DT/rna/ViennaRNA-2.4.18/config/missing' autoheader
AUTOMAKE = ${SHELL} '/home/RiboVision3/R2DT/rna/ViennaRNA-2.4.18/config/missing' automake-1.16
AWK = gawk
BIBTEX_CMD = no
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CHECK_CFLAGS = 
CHECK_LIBS = 
CLUSTER_DIR = 
CONFIG_BOUSTROPHEDON = #define VRNA_WITH_BOUSTROPHEDON
CONFIG_DISABLE_C11_FEATURES = 
CONFIG_FLOAT_PF = 
CONFIG_GSL = 
CONFIG_JSON = #define VRNA_WITH_JSON_SUPPORT
CONFIG_LTO = #define VRNA_WITH_LTO
CONFIG_NR_SAMPLING = 
CONFIG_OPENMP = #define VRNA_WITH_OPENMP
CONFIG_SVM = #define VRNA_WITH_SVM
CONFIG_TTY_COLORS = 
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DEPRECATION_WARNING = 
DIFF = /usr/bin/diff
DISABLE_C11_FEATURES = 
DLLTOOL = false
DOXYGEN_CMD_BIBTEX = 
DOXYGEN_CMD_LATEX = 
DOXYGEN_CMD_MAKEINDEX = 
DOXYGEN_CONF = doxygen.conf
DOXYGEN_DOCDIR = doc
DOXYGEN_GENERATE_HTML = 
DOXYGEN_GENERATE_LATEX = 
DOXYGEN_HAVE_DOT = 
DOXYGEN_PROJECT_NAME = RNAlib-2.4.18
DOXYGEN_SRCDIR = .
DOXYGEN_WITH_PDFLATEX = 
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /usr/bin/grep -E
EXEEXT = 
FGREP = /usr/bin/grep -F
FLOAT_PF_FLAG = 
GENGETOPT = no
GREP = /usr/bin/grep
GSL_LIBS = 
HDIUTIL = 
HELP2MAN = no
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
ISODATE = 2023-05-24
LATEX_CMD = no
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = 
LIBGOMPFLAG = -fopenmp
LIBOBJS = 
LIBS = -lm 
LIBSVM_DIR = libsvm-3.24
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIBTOOL_DEPS = ./config//ltmain.sh
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
LTO_CFLAGS = -flto -ffat-lto-objects
LTO_CXXFLAGS = -flto -ffat-lto-objects
LTO_LDFLAGS = -flto
LT_SYS_LIBRARY_PATH = 
MACOSX_INSTALLER = 
MAKEINDEX_CMD = no
MAKEINFO = ${SHELL} '/home/RiboVision3/R2DT/rna/ViennaRNA-2.4.18/config/missing' makeinfo
MANIFEST_TOOL = :
MKDIR_P = /usr/bin/mkdir -p
MPFR_LIBS = 
NM = gcc-nm
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OPENMP_CFLAGS = -fopenmp
OPENMP_CXXFLAGS = -fopenmp
OTOOL = 
OTOOL64 = 
OUR_AR = gcc-ar
OUR_NM = gcc-nm
OUR_RANLIB = gcc-ranlib
PACKAGE = ViennaRNA
PACKAGE_BUGREPORT = rna@tbi.univie.ac.at
PACKAGE_NAME = ViennaRNA
PACKAGE_STRING = ViennaRNA 2.4.18
PACKAGE_TARNAME = ViennaRNA
PACKAGE_URL = http://www.tbi.univie.ac.at/RNA
PACKAGE_VERSION = 2.4.18
PARAMETER_FILES = misc/dna_mathews1999.par misc/dna_mathews2004.par misc/rna_andronescu2007.par misc/rna_langdon2018.par misc/rna_misc_special_hairpins.par misc/rna_turner1999.par misc/rna_turner2004.par 
PARAMETER_FILES_HEX = misc/dna_mathews1999.hex misc/dna_mathews2004.hex misc/rna_andronescu2007.hex misc/rna_langdon2018.hex misc/rna_misc_special_hairpins.hex misc/rna_turner1999.hex misc/rna_turner2004.hex 
PATH_SEPARATOR = :
PERL = /usr/bin/perl
PERL_ARCH_RELATIVE_INSTALL_DIR = /lib64/perl5
PERL_EXT_CPPFLAGS = -D_REENTRANT -D_GNU_SOURCE -O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions -fstack-protector-strong -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -specs=/usr/lib/rpm/redhat/redhat-annobin-cc1 -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection -fwrapv -fno-strict-aliasing -I/usr/local/include
PERL_EXT_INC = /usr/lib64/perl5/CORE
PERL_EXT_LDFLAGS = -lpthread -shared -Wl,-z,relro -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -L/usr/local/lib -fstack-protector-strong
PERL_EXT_LIB = /usr/local/lib64/perl5
PERL_EXT_PREFIX = /usr
PERL_EXT_SITEARCH = /usr/local/lib64/perl5
PERL_EXT_SITELIB = /usr/local/share/perl5
PERL_EXT_SITEPREFIX = /usr/local
PERL_EXT_VENDORARCH = /usr/lib64/perl5/vendor_perl
PERL_EXT_VENDORLIB = /usr/share/perl5/vendor_perl
PERL_EXT_VENDORPREFIX = /usr
PERL_INTERFACE = Perl
PERL_LIB_RELATIVE_INSTALL_DIR = /share/perl5
PERL_SO = .so
PKGBUILD = 
PKGPYEXEC2DIR = 
PKGPYTHON2DIR = 
PKG_CONFIG = /usr/bin/pkg-config
PKG_CONFIG_LIBDIR = 
PKG_CONFIG_PATH = 
POW_LIB = 
PRODUCTBUILD = 
PS_TEMPLATE_FILES = postscript/structure_plot_macro_base.ps postscript/structure_plot_macro_extras.ps postscript/dot_plot_macro_base.ps postscript/dot_plot_macro_turn.ps postscript/dot_plot_macro_sd.ps postscript/dot_plot_macro_ud.ps postscript/dot_plot_macro_sc_motifs.ps postscript/dot_plot_macro_linear_data.ps postscript/aln_macro_base.ps 
PS_TEMPLATE_FILES_HEX = postscript/structure_plot_macro_base.hex postscript/structure_plot_macro_extras.hex postscript/dot_plot_macro_base.hex postscript/dot_plot_macro_turn.hex postscript/dot_plot_macro_sd.hex postscript/dot_plot_macro_ud.hex postscript/dot_plot_macro_sc_motifs.hex postscript/dot_plot_macro_linear_data.hex postscript/aln_macro_base.hex 
PTHREAD_CC = gcc
PTHREAD_CFLAGS = -pthread
PTHREAD_LIBS = -lpthread
PYEXEC2DIR = 
PYTHON2 = no
PYTHON2DIR = 
PYTHON2_DIR = 
PYTHON2_EXECDIR = 
PYTHON2_INC = 
PYTHON2_INTERFACE = 
PYTHON2_LD = 
PYTHON2_LDFLAGS = 
PYTHON2_SO = 
PYTHON3 = /usr/bin/python3
PYTHON3_CACHE_OPT1_EXT = 
PYTHON3_CACHE_TAG = 
PYTHON3_DIR = 
PYTHON3_EXECDIR = 
PYTHON3_INC = /usr/include/python3.6m
PYTHON3_INTERFACE = 
PYTHON3_LD = 
PYTHON3_LDFLAGS = 
PYTHON3_SO = 
RANLIB = gcc-ranlib
REFDOC_PREDEF_FLOAT_PF = 
REFDOC_PREDEF_JSON = VRNA_WITH_JSON_SUPPORT
REFDOC_PREDEF_SVM = VRNA_WITH_SVM
REFERENCE_MANUAL_PDF_NAME = RNAlib-2.4.18.pdf
REFERENCE_MANUAL_TAGFILE = RNAlib-2.4.18.tag
RNA_CFLAGS = -fno-strict-aliasing -flto -ffat-lto-objects -fopenmp -ftree-vectorize
RNA_CPPFLAGS = 
RNA_CXXFLAGS = -fno-strict-aliasing -flto -ffat-lto-objects -fopenmp
RNA_LDFLAGS = -fno-strict-aliasing -flto
SED = /usr/bin/sed
SET_MAKE = 
SHELL = /bin/sh
SIMD_AVX512_FLAGS = -mavx512f
SIMD_SSE41_FLAGS = -msse4.1
STRIP = strip
SVG_TEMPLATE_FILES = svg/structure_plot_header.svg svg/structure_plot_footer.svg 
SVG_TEMPLATE_FILES_HEX = svg/structure_plot_header.hex svg/structure_plot_footer.hex 
SVM_LIBS = -lstdc++
SWIG = 
SWIG_LIB = 
TUTORIAL_CMD_HTLATEX = 
TUTORIAL_CMD_LATEX = no -interaction=nonstopmode -halt-on-error
TUTORIAL_DOCDIR = RNA-Tutorial
TUTORIAL_PDF_NAME = RNA-tutorial-2.4.18.pdf
TUTORIAL_PROJECT_NAME = RNA-tutorial-2.4.18
TUTORIAL_SRCDIR = .
USER_AR = 
USER_NM = 
USER_RANLIB = 
VERSION = 2.4.18
VRNA_CFLAGS =  -I$(top_srcdir)/../../src/ViennaRNA -I$(top_srcdir)/../../src 
VRNA_LIBS =  -fno-strict-aliasing -flto -L$(top_builddir)/../../src/ViennaRNA -lRNA -fopenmp  -lpthread  -lstdc++
VRNA_VERSION_MAJOR = 2
VRNA_VERSION_MINOR = 4
VRNA_VERSION_PATCH = 18
XXD = /usr/bin/xxd
abs_builddir = /home/RiboVision3/R2DT/rna/ViennaRNA-2.4.18/tests
abs_srcdir = /home/RiboVision3/R2DT/rna/ViennaRNA-2.4.18/tests
abs_top_builddir = /home/RiboVision3/R2DT/rna/ViennaRNA-2.4.18
abs_top_srcdir = /home/RiboVision3/R2DT/rna/ViennaRNA-2.4.18
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
ax_pthread_config = 
bibtex = no
bindir = ${exec_prefix}/bin
build = x86_64-pc-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dot = no
doxygen = no
dvidir = ${docdir}
egrep = /usr/bin/egrep
exec_prefix = ${prefix}
host = x86_64-pc-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = pc
htlatex = no
htmldir = ${datarootdir}/doc/${PACKAGE_TARNAME}/html
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/RiboVision3/R2DT/rna/ViennaRNA-2.4.18/config/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
makeindex = no
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
pdflatex = no
perl = /usr/bin/perl
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
py2execdir = 
py3execdir = 
python2dir = 
python3dir = 
runstatedir = ${localstatedir}/run
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
subdirs =  src/Kinfold src/RNAforester src/RNAlocmin
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
AUTOMAKE_OPTIONS = subdir-objects
checkmk_verbose = $(checkmk_verbose_$(V))
checkmk_verbose_ = $(checkmk_verbose_$(AM_DEFAULT_VERBOSITY))
checkmk_verbose_0 = @echo "  CHECKMK  $@";
LDADD = $(top_builddir)/src/ViennaRNA/libRNA_conv.la  \
	$(am__append_1) $(am__append_2)
SUFFIXES = .c .ts
TEST_EXTENSIONS = .pl .t .py .py3
AM_TESTS_ENVIRONMENT = \
                        CK_DEFAULT_TIMEOUT=20 \
                        . $(builddir)/test-env.sh; \
                        if test -d /usr/xpg4/bin; then \
                          PATH=/usr/xpg4/bin:$$PATH; export PATH; \
                        fi;

AM_TESTS_FD_REDIRECT = 9>&2

######################################
######################################
BUILT_SOURCES = perl5/test-RNA-Design.t
PL_LOG_COMPILER = $(PERL)
T_LOG_COMPILER = $(PERL)
AM_PL_LOG_FLAGS = -Mstrict -w \
                  -I$(top_builddir)/interfaces/Perl \
                  -I$(top_srcdir)/interfaces/Perl \
                  -I$(top_builddir)/tests

AM_T_LOG_FLAGS = -Mstrict -w \
                  -I$(top_builddir)/interfaces/Perl \
                  -I$(top_srcdir)/interfaces/Perl \
                  -I$(top_builddir)/tests


# add test scripts here
PERL_TESTS = perl5/test-RNA.pl \
              perl5/test-RNA-callbacks.pl \
              perl5/test-RNA-combinatorics.pl \
              perl5/test-RNA-Design.t \
              perl5/test-RNA-ensemble_defect.pl \
              perl5/test-RNA-file-formats.pl \
              perl5/test-RNA-mfe_eval.pl \
              perl5/test-RNA-mfe_window.pl \
              perl5/test-RNA-pf_window.pl \
              perl5/test-RNA-boltzmann-sampling.pl \
              perl5/test-RNA-constraints.pl \
              perl5/test-RNA-constraints-soft.pl \
              perl5/test-RNA-constraints-SHAPE.pl \
              perl5/test-RNA-constraints-special.pl


# add test script output files here
PERL_TEST_OUTPUT = test.coord \
                    test_dp.ps \
                    test_ss.ps \
                    test_ss_a.ps \
                    test.par \
                    test-RNA-mfe_eval.pl.out \
                    outputFile_test.txt


######################################  
######################################
#PY_LOG_COMPILER = $(PYTHON2)
#AM_PY_LOG_FLAGS = 

# add test scripts here
#PYTHON2_TESTS = python/test-RNA-combinatorics.py \
#                python/test-RNA-constraints.py \
#                python/test-RNA-constraints-soft.py \
#                python/test-RNA-constraints-SHAPE.py \
#                python/test-RNA-constraints-special.py \
#                python/test-RNA-ensemble_defect.py \
#                python/test-RNA-file-formats.py \
#                python/test-RNA-mfe_eval.py \
#                python/test-RNA-mfe_window.py \
#                python/test-RNA-pf_window.py \
#                python/test-RNA-sc-callbacks.py \
#                python/test-RNA-subopt.py \
#                python/test-RNA-boltzmann-sampling.py \
#                python/test-RNA-utils.py \
#                python/test-RNA.py


# add test script output files here
#PYTHON2_TEST_OUTPUT = test-RNA-mfe_eval.py.out

######################################
######################################
#PY3_LOG_COMPILER = $(PYTHON3)
#AM_PY3_LOG_FLAGS = 

# add test scripts here
#PYTHON3_TESTS = python3/test-RNA-combinatorics.py3 \
#                python3/test-RNA-constraints.py3 \
#                python3/test-RNA-constraints-soft.py3 \
#                python3/test-RNA-constraints-SHAPE.py3 \
#                python3/test-RNA-constraints-special.py3 \
#                python3/test-RNA-ensemble_defect.py3 \
#                python3/test-RNA-file-formats.py3 \
#                python3/test-RNA-mfe_eval.py3 \
#                python3/test-RNA-mfe_window.py3 \
#                python3/test-RNA-pf_window.py3 \
#                python3/test-RNA-sc-callbacks.py3 \
#                python3/test-RNA-subopt.py3 \
#                python3/test-RNA-boltzmann-sampling.py3 \
#                python3/test-RNA-utils.py3 \
#                python3/test-RNA.py3


# add test script output files here
#PYTHON3_TEST_OUTPUT = test-RNA-mfe_eval.py3.out

######################################
######################################
#CHECKMK_FILES = \
#              energy_evaluation.ts \
#              constraints.ts \
#              constraints_soft.ts \
#              ensemble_defect.ts \
#              fold.ts \
#              utils.ts \
#              eval_structure.ts \
#              walk.ts \
#              neighbor.ts \
#              hash_table.ts

#CHECK_CFILES = \
#              energy_evaluation.c \
#              constraints.c \
#              constraints_soft.c \
#              ensemble_defect.c \
#              fold.c \
#              utils.c \
#              eval_structure.c \
#              walk.c \
#              neighbor.c \
#              hash_table.c

#LIBRARY_TESTS = energy_evaluation \
#                constraints \
#                constraints_soft \
#                ensemble_defect \
#                fold \
#                utils \
#                eval_structure \
#                walk \
#                neighbor \
#                hash_table


########################################
########################################
EXECUTABLE_TESTS = \
                  RNAfold/general.sh \
                  RNAfold/partfunc.sh \
                  RNAfold/special.sh \
                  RNAfold/long.sh \
                  RNAcofold/general.sh \
                  RNAcofold/partfunc.sh \
                  RNAalifold/general.sh \
                  RNAalifold/partfunc.sh \
                  RNAalifold/special.sh

EXTRA_DIST = data \
              RNAfold/results \
              RNAcofold/results \
              RNAalifold/results \
              ${CHECKMK_FILES} ${CHECK_CFILES} \
              ${PERL_TESTS} \
              ${PYTHON2_TESTS} \
              ${PYTHON3_TESTS} \
              ${EXECUTABLE_TESTS}

all: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .c .ts .lo .log .o .obj .pl .pl$(EXEEXT) .py .py$(EXEEXT) .py3 .py3$(EXEEXT) .t .t$(EXEEXT) .trs
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu tests/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu tests/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
RNApath.py: $(top_builddir)/config.status $(srcdir)/RNApath.py.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
RNAHelpers.pm: $(top_builddir)/config.status $(srcdir)/RNAHelpers.pm.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
test-env.sh: $(top_builddir)/config.status $(srcdir)/test-env.sh.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

constraints$(EXEEXT): $(constraints_OBJECTS) $(constraints_DEPENDENCIES) $(EXTRA_constraints_DEPENDENCIES) 
	@rm -f constraints$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(constraints_OBJECTS) $(constraints_LDADD) $(LIBS)

constraints_soft$(EXEEXT): $(constraints_soft_OBJECTS) $(constraints_soft_DEPENDENCIES) $(EXTRA_constraints_soft_DEPENDENCIES) 
	@rm -f constraints_soft$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(constraints_soft_OBJECTS) $(constraints_soft_LDADD) $(LIBS)

energy_evaluation$(EXEEXT): $(energy_evaluation_OBJECTS) $(energy_evaluation_DEPENDENCIES) $(EXTRA_energy_evaluation_DEPENDENCIES) 
	@rm -f energy_evaluation$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(energy_evaluation_OBJECTS) $(energy_evaluation_LDADD) $(LIBS)

ensemble_defect$(EXEEXT): $(ensemble_defect_OBJECTS) $(ensemble_defect_DEPENDENCIES) $(EXTRA_ensemble_defect_DEPENDENCIES) 
	@rm -f ensemble_defect$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(ensemble_defect_OBJECTS) $(ensemble_defect_LDADD) $(LIBS)

eval_structure$(EXEEXT): $(eval_structure_OBJECTS) $(eval_structure_DEPENDENCIES) $(EXTRA_eval_structure_DEPENDENCIES) 
	@rm -f eval_structure$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(eval_structure_OBJECTS) $(eval_structure_LDADD) $(LIBS)

fold$(EXEEXT): $(fold_OBJECTS) $(fold_DEPENDENCIES) $(EXTRA_fold_DEPENDENCIES) 
	@rm -f fold$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(fold_OBJECTS) $(fold_LDADD) $(LIBS)

hash_table$(EXEEXT): $(hash_table_OBJECTS) $(hash_table_DEPENDENCIES) $(EXTRA_hash_table_DEPENDENCIES) 
	@rm -f hash_table$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(hash_table_OBJECTS) $(hash_table_LDADD) $(LIBS)

neighbor$(EXEEXT): $(neighbor_OBJECTS) $(neighbor_DEPENDENCIES) $(EXTRA_neighbor_DEPENDENCIES) 
	@rm -f neighbor$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(neighbor_OBJECTS) $(neighbor_LDADD) $(LIBS)

utils$(EXEEXT): $(utils_OBJECTS) $(utils_DEPENDENCIES) $(EXTRA_utils_DEPENDENCIES) 
	@rm -f utils$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(utils_OBJECTS) $(utils_LDADD) $(LIBS)

walk$(EXEEXT): $(walk_OBJECTS) $(walk_DEPENDENCIES) $(EXTRA_walk_DEPENDENCIES) 
	@rm -f walk$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(walk_OBJECTS) $(walk_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/constraints.Po # am--include-marker
include ./$(DEPDIR)/constraints_soft.Po # am--include-marker
include ./$(DEPDIR)/energy_evaluation.Po # am--include-marker
include ./$(DEPDIR)/ensemble_defect.Po # am--include-marker
include ./$(DEPDIR)/eval_structure.Po # am--include-marker
include ./$(DEPDIR)/fold.Po # am--include-marker
include ./$(DEPDIR)/hash_table.Po # am--include-marker
include ./$(DEPDIR)/neighbor.Po # am--include-marker
include ./$(DEPDIR)/utils.Po # am--include-marker
include ./$(DEPDIR)/walk.Po # am--include-marker

$(am__depfiles_remade):
	@$(MKDIR_P) $(@D)
	@echo '# dummy' >$@-t && $(am__mv) $@-t $@

am--depfiles: $(am__depfiles_remade)

.c.o:
	$(AM_V_CC)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
	$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CC)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(COMPILE) -c -o $@ $<

.c.obj:
	$(AM_V_CC)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
	$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CC)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.c.lo:
	$(AM_V_CC)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.lo$$||'`;\
	$(LTCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Plo
#	$(AM_V_CC)source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(LTCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

# Recover from deleted '.trs' file; this should ensure that
# "rm -f foo.log; make foo.trs" re-run 'foo.test', and re-create
# both 'foo.log' and 'foo.trs'.  Break the recipe in two subshells
# to avoid problems with "make -n".
.log.trs:
	rm -f $< $@
	$(MAKE) $(AM_MAKEFLAGS) $<

# Leading 'am--fnord' is there to ensure the list of targets does not
# expand to empty, as could happen e.g. with make check TESTS=''.
am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
am--force-recheck:
	@:

$(TEST_SUITE_LOG): $(TEST_LOGS)
	@$(am__set_TESTS_bases); \
	am__f_ok () { test -f "$$1" && test -r "$$1"; }; \
	redo_bases=`for i in $$bases; do \
	              am__f_ok $$i.trs && am__f_ok $$i.log || echo $$i; \
	            done`; \
	if test -n "$$redo_bases"; then \
	  redo_logs=`for i in $$redo_bases; do echo $$i.log; done`; \
	  redo_results=`for i in $$redo_bases; do echo $$i.trs; done`; \
	  if $(am__make_dryrun); then :; else \
	    rm -f $$redo_logs && rm -f $$redo_results || exit 1; \
	  fi; \
	fi; \
	if test -n "$$am__remaking_logs"; then \
	  echo "fatal: making $(TEST_SUITE_LOG): possible infinite" \
	       "recursion detected" >&2; \
	elif test -n "$$redo_logs"; then \
	  am__remaking_logs=yes $(MAKE) $(AM_MAKEFLAGS) $$redo_logs; \
	fi; \
	if $(am__make_dryrun); then :; else \
	  st=0;  \
	  errmsg="fatal: making $(TEST_SUITE_LOG): failed to create"; \
	  for i in $$redo_bases; do \
	    test -f $$i.trs && test -r $$i.trs \
	      || { echo "$$errmsg $$i.trs" >&2; st=1; }; \
	    test -f $$i.log && test -r $$i.log \
	      || { echo "$$errmsg $$i.log" >&2; st=1; }; \
	  done; \
	  test $$st -eq 0 || exit 1; \
	fi
	@$(am__sh_e_setup); $(am__tty_colors); $(am__set_TESTS_bases); \
	ws='[ 	]'; \
	results=`for b in $$bases; do echo $$b.trs; done`; \
	test -n "$$results" || results=/dev/null; \
	all=`  grep "^$$ws*:test-result:"           $$results | wc -l`; \
	pass=` grep "^$$ws*:test-result:$$ws*PASS"  $$results | wc -l`; \
	fail=` grep "^$$ws*:test-result:$$ws*FAIL"  $$results | wc -l`; \
	skip=` grep "^$$ws*:test-result:$$ws*SKIP"  $$results | wc -l`; \
	xfail=`grep "^$$ws*:test-result:$$ws*XFAIL" $$results | wc -l`; \
	xpass=`grep "^$$ws*:test-result:$$ws*XPASS" $$results | wc -l`; \
	error=`grep "^$$ws*:test-result:$$ws*ERROR" $$results | wc -l`; \
	if test `expr $$fail + $$xpass + $$error` -eq 0; then \
	  success=true; \
	else \
	  success=false; \
	fi; \
	br='==================='; br=$$br$$br$$br$$br; \
	result_count () \
	{ \
	    if test x"$$1" = x"--maybe-color"; then \
	      maybe_colorize=yes; \
	    elif test x"$$1" = x"--no-color"; then \
	      maybe_colorize=no; \
	    else \
	      echo "$@: invalid 'result_count' usage" >&2; exit 4; \
	    fi; \
	    shift; \
	    desc=$$1 count=$$2; \
	    if test $$maybe_colorize = yes && test $$count -gt 0; then \
	      color_start=$$3 color_end=$$std; \
	    else \
	      color_start= color_end=; \
	    fi; \
	    echo "$${color_start}# $$desc $$count$${color_end}"; \
	}; \
	create_testsuite_report () \
	{ \
	  result_count $$1 "TOTAL:" $$all   "$$brg"; \
	  result_count $$1 "PASS: " $$pass  "$$grn"; \
	  result_count $$1 "SKIP: " $$skip  "$$blu"; \
	  result_count $$1 "XFAIL:" $$xfail "$$lgn"; \
	  result_count $$1 "FAIL: " $$fail  "$$red"; \
	  result_count $$1 "XPASS:" $$xpass "$$red"; \
	  result_count $$1 "ERROR:" $$error "$$mgn"; \
	}; \
	{								\
	  echo "$(PACKAGE_STRING): $(subdir)/$(TEST_SUITE_LOG)" |	\
	    $(am__rst_title);						\
	  create_testsuite_report --no-color;				\
	  echo;								\
	  echo ".. contents:: :depth: 2";				\
	  echo;								\
	  for b in $$bases; do echo $$b; done				\
	    | $(am__create_global_log);					\
	} >$(TEST_SUITE_LOG).tmp || exit 1;				\
	mv $(TEST_SUITE_LOG).tmp $(TEST_SUITE_LOG);			\
	if $$success; then						\
	  col="$$grn";							\
	 else								\
	  col="$$red";							\
	  test x"$$VERBOSE" = x || cat $(TEST_SUITE_LOG);		\
	fi;								\
	echo "$${col}$$br$${std}"; 					\
	echo "$${col}Testsuite summary"$(AM_TESTSUITE_SUMMARY_HEADER)"$${std}";	\
	echo "$${col}$$br$${std}"; 					\
	create_testsuite_report --maybe-color;				\
	echo "$$col$$br$$std";						\
	if $$success; then :; else					\
	  echo "$${col}See $(subdir)/$(TEST_SUITE_LOG)$${std}";		\
	  if test -n "$(PACKAGE_BUGREPORT)"; then			\
	    echo "$${col}Please report to $(PACKAGE_BUGREPORT)$${std}";	\
	  fi;								\
	  echo "$$col$$br$$std";					\
	fi;								\
	$$success || exit 1

check-TESTS: $(check_PROGRAMS)
	@list='$(RECHECK_LOGS)';           test -z "$$list" || rm -f $$list
	@list='$(RECHECK_LOGS:.log=.trs)'; test -z "$$list" || rm -f $$list
	@test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)
	@set +e; $(am__set_TESTS_bases); \
	log_list=`for i in $$bases; do echo $$i.log; done`; \
	trs_list=`for i in $$bases; do echo $$i.trs; done`; \
	log_list=`echo $$log_list`; trs_list=`echo $$trs_list`; \
	$(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) TEST_LOGS="$$log_list"; \
	exit $$?;
recheck: all $(check_PROGRAMS)
	@test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)
	@set +e; $(am__set_TESTS_bases); \
	bases=`for i in $$bases; do echo $$i; done \
	         | $(am__list_recheck_tests)` || exit 1; \
	log_list=`for i in $$bases; do echo $$i.log; done`; \
	log_list=`echo $$log_list`; \
	$(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) \
	        am__force_recheck=am--force-recheck \
	        TEST_LOGS="$$log_list"; \
	exit $$?
RNAfold/general.sh.log: RNAfold/general.sh
	@p='RNAfold/general.sh'; \
	b='RNAfold/general.sh'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
RNAfold/partfunc.sh.log: RNAfold/partfunc.sh
	@p='RNAfold/partfunc.sh'; \
	b='RNAfold/partfunc.sh'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
RNAfold/special.sh.log: RNAfold/special.sh
	@p='RNAfold/special.sh'; \
	b='RNAfold/special.sh'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
RNAfold/long.sh.log: RNAfold/long.sh
	@p='RNAfold/long.sh'; \
	b='RNAfold/long.sh'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
RNAcofold/general.sh.log: RNAcofold/general.sh
	@p='RNAcofold/general.sh'; \
	b='RNAcofold/general.sh'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
RNAcofold/partfunc.sh.log: RNAcofold/partfunc.sh
	@p='RNAcofold/partfunc.sh'; \
	b='RNAcofold/partfunc.sh'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
RNAalifold/general.sh.log: RNAalifold/general.sh
	@p='RNAalifold/general.sh'; \
	b='RNAalifold/general.sh'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
RNAalifold/partfunc.sh.log: RNAalifold/partfunc.sh
	@p='RNAalifold/partfunc.sh'; \
	b='RNAalifold/partfunc.sh'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
RNAalifold/special.sh.log: RNAalifold/special.sh
	@p='RNAalifold/special.sh'; \
	b='RNAalifold/special.sh'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
energy_evaluation.log: energy_evaluation$(EXEEXT)
	@p='energy_evaluation$(EXEEXT)'; \
	b='energy_evaluation'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
constraints.log: constraints$(EXEEXT)
	@p='constraints$(EXEEXT)'; \
	b='constraints'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
constraints_soft.log: constraints_soft$(EXEEXT)
	@p='constraints_soft$(EXEEXT)'; \
	b='constraints_soft'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
ensemble_defect.log: ensemble_defect$(EXEEXT)
	@p='ensemble_defect$(EXEEXT)'; \
	b='ensemble_defect'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
fold.log: fold$(EXEEXT)
	@p='fold$(EXEEXT)'; \
	b='fold'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
utils.log: utils$(EXEEXT)
	@p='utils$(EXEEXT)'; \
	b='utils'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
eval_structure.log: eval_structure$(EXEEXT)
	@p='eval_structure$(EXEEXT)'; \
	b='eval_structure'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
walk.log: walk$(EXEEXT)
	@p='walk$(EXEEXT)'; \
	b='walk'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
neighbor.log: neighbor$(EXEEXT)
	@p='neighbor$(EXEEXT)'; \
	b='neighbor'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
hash_table.log: hash_table$(EXEEXT)
	@p='hash_table$(EXEEXT)'; \
	b='hash_table'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
.pl.log:
	@p='$<'; \
	$(am__set_b); \
	$(am__check_pre) $(PL_LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_PL_LOG_DRIVER_FLAGS) $(PL_LOG_DRIVER_FLAGS) -- $(PL_LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
#.pl$(EXEEXT).log:
#	@p='$<'; \
#	$(am__set_b); \
#	$(am__check_pre) $(PL_LOG_DRIVER) --test-name "$$f" \
#	--log-file $$b.log --trs-file $$b.trs \
#	$(am__common_driver_flags) $(AM_PL_LOG_DRIVER_FLAGS) $(PL_LOG_DRIVER_FLAGS) -- $(PL_LOG_COMPILE) \
#	"$$tst" $(AM_TESTS_FD_REDIRECT)
.t.log:
	@p='$<'; \
	$(am__set_b); \
	$(am__check_pre) $(T_LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_T_LOG_DRIVER_FLAGS) $(T_LOG_DRIVER_FLAGS) -- $(T_LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
#.t$(EXEEXT).log:
#	@p='$<'; \
#	$(am__set_b); \
#	$(am__check_pre) $(T_LOG_DRIVER) --test-name "$$f" \
#	--log-file $$b.log --trs-file $$b.trs \
#	$(am__common_driver_flags) $(AM_T_LOG_DRIVER_FLAGS) $(T_LOG_DRIVER_FLAGS) -- $(T_LOG_COMPILE) \
#	"$$tst" $(AM_TESTS_FD_REDIRECT)
.py.log:
	@p='$<'; \
	$(am__set_b); \
	$(am__check_pre) $(PY_LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_PY_LOG_DRIVER_FLAGS) $(PY_LOG_DRIVER_FLAGS) -- $(PY_LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
#.py$(EXEEXT).log:
#	@p='$<'; \
#	$(am__set_b); \
#	$(am__check_pre) $(PY_LOG_DRIVER) --test-name "$$f" \
#	--log-file $$b.log --trs-file $$b.trs \
#	$(am__common_driver_flags) $(AM_PY_LOG_DRIVER_FLAGS) $(PY_LOG_DRIVER_FLAGS) -- $(PY_LOG_COMPILE) \
#	"$$tst" $(AM_TESTS_FD_REDIRECT)
.py3.log:
	@p='$<'; \
	$(am__set_b); \
	$(am__check_pre) $(PY3_LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_PY3_LOG_DRIVER_FLAGS) $(PY3_LOG_DRIVER_FLAGS) -- $(PY3_LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
#.py3$(EXEEXT).log:
#	@p='$<'; \
#	$(am__set_b); \
#	$(am__check_pre) $(PY3_LOG_DRIVER) --test-name "$$f" \
#	--log-file $$b.log --trs-file $$b.trs \
#	$(am__common_driver_flags) $(AM_PY3_LOG_DRIVER_FLAGS) $(PY3_LOG_DRIVER_FLAGS) -- $(PY3_LOG_COMPILE) \
#	"$$tst" $(AM_TESTS_FD_REDIRECT)

distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-am
all-am: Makefile
installdirs:
install: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-am
install-exec: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:
	-test -z "$(TEST_LOGS)" || rm -f $(TEST_LOGS)
	-test -z "$(TEST_LOGS:.log=.trs)" || rm -f $(TEST_LOGS:.log=.trs)
	-test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic clean-libtool clean-local \
	mostlyclean-am

distclean: distclean-am
		-rm -f ./$(DEPDIR)/constraints.Po
	-rm -f ./$(DEPDIR)/constraints_soft.Po
	-rm -f ./$(DEPDIR)/energy_evaluation.Po
	-rm -f ./$(DEPDIR)/ensemble_defect.Po
	-rm -f ./$(DEPDIR)/eval_structure.Po
	-rm -f ./$(DEPDIR)/fold.Po
	-rm -f ./$(DEPDIR)/hash_table.Po
	-rm -f ./$(DEPDIR)/neighbor.Po
	-rm -f ./$(DEPDIR)/utils.Po
	-rm -f ./$(DEPDIR)/walk.Po
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
		-rm -f ./$(DEPDIR)/constraints.Po
	-rm -f ./$(DEPDIR)/constraints_soft.Po
	-rm -f ./$(DEPDIR)/energy_evaluation.Po
	-rm -f ./$(DEPDIR)/ensemble_defect.Po
	-rm -f ./$(DEPDIR)/eval_structure.Po
	-rm -f ./$(DEPDIR)/fold.Po
	-rm -f ./$(DEPDIR)/hash_table.Po
	-rm -f ./$(DEPDIR)/neighbor.Po
	-rm -f ./$(DEPDIR)/utils.Po
	-rm -f ./$(DEPDIR)/walk.Po
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: all check check-am install install-am install-exec \
	install-strip

.PHONY: CTAGS GTAGS TAGS all all-am am--depfiles check check-TESTS \
	check-am clean clean-checkPROGRAMS clean-generic clean-libtool \
	clean-local cscopelist-am ctags ctags-am distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am recheck tags tags-am uninstall \
	uninstall-am

.PRECIOUS: Makefile


perl5/test-RNA-Design.t: $(top_srcdir)/interfaces/Perl/RNA/t/Design.t
	cp $(top_srcdir)/interfaces/Perl/RNA/t/Design.t $(builddir)/perl5/test-RNA-Design.t

.ts.c:
	$(checkmk_verbose)checkmk $< > $@

clean-local:
	-rm -rf ${PERL_TEST_OUTPUT} \
                $(PYTHON2_TEST_OUTPUT) \
                $(PYTHON3_TEST_OUTPUT) \
                *.pyc \
                __pycache__

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
