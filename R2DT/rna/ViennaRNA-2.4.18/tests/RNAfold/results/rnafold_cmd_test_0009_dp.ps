%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Jun 17 17:21:24 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  % draw strand separators if required
  currentdict /nicks known {
    gsave
    % draw lines in red color
    0 1 1 sethsbcolor
    % draw with line thickness of 0.2
    0.2 setlinewidth
    nicks
    { 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
    } forall
    grestore
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (rnafold_cmd_test_0009)
} def

/sequence { (\
AGUUGACUGUAAGAGUGGGACACAUGUUCCGGCUAUAGACUUCCUGACAUUGGGACGCGGCCGUGGUGCGUCGAAAGUCAGUACAUGUCUAAUUUUCUCA\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
[ (Protein binding)
  [ 74 0.999291122 0.6000 0.8000 0.9500]
  [ 75 0.999291122 0.6000 0.8000 0.9500]
  [ 76 0.999291122 0.6000 0.8000 0.9500]
]
] def

/leftData [
[ (Protein binding)
  [ 74 0.999291122 0.6000 0.8000 0.9500]
  [ 75 0.999291122 0.6000 0.8000 0.9500]
  [ 76 0.999291122 0.6000 0.8000 0.9500]
]
] def

/bottomData [
[ (Protein binding)
  [ 74 0.999291122 0.6000 0.8000 0.9500]
  [ 75 0.999291122 0.6000 0.8000 0.9500]
  [ 76 0.999291122 0.6000 0.8000 0.9500]
]
] def

/rightData [
[ (Protein binding)
  [ 74 0.999291122 0.6000 0.8000 0.9500]
  [ 75 0.999291122 0.6000 0.8000 0.9500]
  [ 76 0.999291122 0.6000 0.8000 0.9500]
]
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 34 0.999903466 ubox
1 36 0.004273038 ubox
1 41 0.004972117 ubox
1 90 0.004602825 ubox
1 94 0.010889005 ubox
2 33 0.999912586 ubox
2 40 0.004976947 ubox
2 89 0.004594260 ubox
2 93 0.010905725 ubox
3 31 0.021202113 ubox
3 32 0.999687682 ubox
3 39 0.004959308 ubox
3 87 0.004503608 ubox
3 92 0.010921141 ubox
4 22 0.006013065 ubox
4 24 0.007804757 ubox
4 31 0.955287825 ubox
4 38 0.004708314 ubox
4 85 0.003821485 ubox
4 91 0.010391433 ubox
5 21 0.006637846 ubox
5 23 0.008446407 ubox
5 27 0.007747362 ubox
5 28 0.455155084 ubox
5 29 0.224717305 ubox
5 30 0.843956498 ubox
5 84 0.004158599 ubox
5 89 0.010378335 ubox
6 16 0.005508467 ubox
6 25 0.020072026 ubox
6 27 0.780929004 ubox
6 28 0.237344205 ubox
6 82 0.005354769 ubox
6 88 0.010489614 ubox
7 15 0.007165012 ubox
7 17 0.004284191 ubox
7 26 0.835168967 ubox
7 31 0.007790096 ubox
7 32 0.003455622 ubox
7 81 0.005422338 ubox
7 87 0.010454005 ubox
8 14 0.007135469 ubox
8 20 0.015554744 ubox
8 22 0.146181716 ubox
8 24 0.582705625 ubox
8 26 0.042751277 ubox
8 31 0.007909468 ubox
8 80 0.005454409 ubox
8 85 0.009447087 ubox
9 21 0.148558304 ubox
9 23 0.594340884 ubox
9 25 0.046949776 ubox
9 27 0.019447521 ubox
9 28 0.038733238 ubox
9 29 0.050187067 ubox
9 30 0.009416801 ubox
9 79 0.005448164 ubox
9 84 0.009642885 ubox
10 19 0.003251595 ubox
10 20 0.096405609 ubox
10 22 0.348096440 ubox
10 24 0.029888056 ubox
10 26 0.004761016 ubox
10 83 0.007384215 ubox
11 25 0.004460071 ubox
11 82 0.005648352 ubox
12 25 0.010126705 ubox
13 21 0.039736620 ubox
13 23 0.012967323 ubox
13 25 0.003404055 ubox
13 29 0.004866187 ubox
14 25 0.005345783 ubox
15 21 0.022125414 ubox
15 23 0.010994941 ubox
15 25 0.011157702 ubox
15 29 0.004212103 ubox
16 20 0.009009786 ubox
16 22 0.009552110 ubox
16 24 0.013352037 ubox
16 31 0.013191221 ubox
17 21 0.008491214 ubox
17 23 0.018223736 ubox
17 29 0.007593375 ubox
17 30 0.051958769 ubox
18 23 0.022556681 ubox
18 25 0.004267226 ubox
18 28 0.004491809 ubox
18 29 0.094291623 ubox
18 30 0.013186579 ubox
19 28 0.099106233 ubox
19 29 0.024319737 ubox
19 72 0.011317680 ubox
20 25 0.008097099 ubox
20 27 0.123480540 ubox
20 28 0.019746897 ubox
20 71 0.011476289 ubox
21 26 0.125272863 ubox
21 70 0.011481302 ubox
22 27 0.003748174 ubox
23 68 0.011472250 ubox
24 67 0.011453573 ubox
25 66 0.011005480 ubox
29 65 0.004869563 ubox
30 63 0.011629878 ubox
31 62 0.011786141 ubox
32 61 0.011788745 ubox
33 60 0.011785645 ubox
34 59 0.011516363 ubox
35 88 0.004917179 ubox
35 90 0.004186520 ubox
35 93 0.116537145 ubox
35 94 0.036071889 ubox
35 95 0.024575988 ubox
35 96 0.017686404 ubox
35 98 0.009221202 ubox
36 87 0.005199473 ubox
36 91 0.935272591 ubox
36 92 0.090024817 ubox
37 86 0.005204352 ubox
37 90 0.993807124 ubox
38 56 0.005389747 ubox
38 58 0.008954028 ubox
38 89 0.999565895 ubox
39 88 0.999434967 ubox
40 57 0.007752413 ubox
40 87 0.997659985 ubox
41 55 0.007013408 ubox
41 83 0.074159928 ubox
41 85 0.173247869 ubox
41 87 0.008827779 ubox
42 54 0.007220654 ubox
42 55 0.009114859 ubox
42 83 0.304087794 ubox
42 85 0.406683874 ubox
43 53 0.007271905 ubox
43 54 0.009274571 ubox
43 81 0.049641081 ubox
44 52 0.007272639 ubox
44 53 0.009273783 ubox
44 81 0.995144500 ubox
45 52 0.009017912 ubox
45 80 0.999416479 ubox
45 81 0.003657478 ubox
46 51 0.005593300 ubox
46 79 0.999891931 ubox
47 78 0.999625821 ubox
48 77 0.996468148 ubox
49 78 0.004136462 ubox
50 73 0.021996715 ubox
50 75 0.019080691 ubox
50 76 0.026418603 ubox
50 77 0.007002582 ubox
51 73 0.027726447 ubox
51 74 0.019375733 ubox
51 75 0.026188222 ubox
51 77 0.006071136 ubox
52 72 0.015400628 ubox
53 71 0.008369709 ubox
53 72 0.095383402 ubox
54 71 0.049980778 ubox
54 72 0.994745636 ubox
55 71 0.998452151 ubox
56 68 0.005209429 ubox
56 70 0.999868712 ubox
57 67 0.005604613 ubox
57 69 0.999889368 ubox
58 65 0.003176822 ubox
58 66 0.006270589 ubox
58 68 0.999699220 ubox
59 64 0.009561963 ubox
59 67 0.969677604 ubox
60 64 0.010248882 ubox
60 67 0.185032221 ubox
61 65 0.861440950 ubox
61 66 0.261534868 ubox
62 66 0.023797197 ubox
91 96 0.005451917 ubox
91 98 0.006417774 ubox
92 96 0.009726383 ubox
92 98 0.014587387 ubox
93 100 0.011442630 ubox
94 100 0.008328655 ubox
95 100 0.009038942 ubox
96 100 0.006536119 ubox
1 34 0.9500000 lbox
2 33 0.9500000 lbox
3 32 0.9500000 lbox
4 31 0.9500000 lbox
5 30 0.9500000 lbox
36 91 0.9500000 lbox
37 90 0.9500000 lbox
38 89 0.9500000 lbox
39 88 0.9500000 lbox
40 87 0.9500000 lbox
44 81 0.9500000 lbox
45 80 0.9500000 lbox
46 79 0.9500000 lbox
47 78 0.9500000 lbox
48 77 0.9500000 lbox
54 72 0.9500000 lbox
55 71 0.9500000 lbox
56 70 0.9500000 lbox
57 69 0.9500000 lbox
58 68 0.9500000 lbox
59 67 0.9500000 lbox
61 65 0.9500000 lbox
showpage
end
%%EOF
