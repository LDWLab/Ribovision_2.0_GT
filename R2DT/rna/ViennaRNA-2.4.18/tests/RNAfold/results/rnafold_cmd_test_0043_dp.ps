%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Jun 17 17:21:25 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  % draw strand separators if required
  currentdict /nicks known {
    gsave
    % draw lines in red color
    0 1 1 sethsbcolor
    % draw with line thickness of 0.2
    0.2 setlinewidth
    nicks
    { 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
    } forall
    grestore
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (rnafold_cmd_test_0043)
} def

/sequence { (\
UUGACCAGGGGACCAACACCAGGCCAGCGCCAACAUAAGCCAGGCGGCUGCGUAUUUACAACUUGCAAGUUCCCGCAGGGCGAGUUAAAGGGUGACUGGU\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
[ (Protein binding)
  [ 87 0.999845147 0.6000 0.8000 0.9500]
  [ 88 0.999845147 0.6000 0.8000 0.9500]
  [ 89 0.999845147 0.6000 0.8000 0.9500]
]
] def

/leftData [
[ (Protein binding)
  [ 87 0.999845147 0.6000 0.8000 0.9500]
  [ 88 0.999845147 0.6000 0.8000 0.9500]
  [ 89 0.999845147 0.6000 0.8000 0.9500]
]
] def

/bottomData [
[ (Protein binding)
  [ 87 0.999845147 0.6000 0.8000 0.9500]
  [ 88 0.999845147 0.6000 0.8000 0.9500]
  [ 89 0.999845147 0.6000 0.8000 0.9500]
]
] def

/rightData [
[ (Protein binding)
  [ 87 0.999845147 0.6000 0.8000 0.9500]
  [ 88 0.999845147 0.6000 0.8000 0.9500]
  [ 89 0.999845147 0.6000 0.8000 0.9500]
]
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 16 0.011480394 ubox
1 22 0.998514144 ubox
1 23 0.013383036 ubox
1 27 0.051513694 ubox
2 15 0.011508935 ubox
2 21 0.998584103 ubox
2 22 0.006219843 ubox
2 26 0.051514004 ubox
3 14 0.011546508 ubox
3 19 0.007175127 ubox
3 20 0.998575746 ubox
3 25 0.051450609 ubox
5 9 0.011220490 ubox
5 10 0.004620064 ubox
5 11 0.008817290 ubox
5 23 0.051392974 ubox
6 10 0.007833882 ubox
6 11 0.006679961 ubox
6 22 0.051377748 ubox
8 13 0.066822936 ubox
8 14 0.071255513 ubox
8 17 0.108711662 ubox
8 19 0.035672210 ubox
8 20 0.047347341 ubox
9 13 0.054634371 ubox
9 14 0.150381144 ubox
9 17 0.078894969 ubox
9 19 0.054421664 ubox
9 20 0.017304114 ubox
10 14 0.005865417 ubox
10 17 0.013772759 ubox
10 19 0.018264077 ubox
23 100 0.942546581 ubox
24 99 0.998170102 ubox
25 98 0.998652594 ubox
26 97 0.998408064 ubox
27 96 0.998400362 ubox
28 92 0.005211113 ubox
28 94 0.999085097 ubox
29 93 0.999316161 ubox
29 100 0.005336160 ubox
30 90 0.003793148 ubox
30 91 0.051719708 ubox
30 92 0.998609291 ubox
30 99 0.005704410 ubox
31 90 0.069991907 ubox
31 91 0.996979563 ubox
31 98 0.005706795 ubox
32 85 0.012260834 ubox
32 86 0.392293685 ubox
32 97 0.005503362 ubox
33 85 0.400572870 ubox
33 86 0.027808787 ubox
34 82 0.006010774 ubox
34 84 0.401377805 ubox
34 90 0.037942618 ubox
34 94 0.005152167 ubox
35 85 0.548056498 ubox
35 86 0.144540438 ubox
35 93 0.005152285 ubox
36 82 0.094066800 ubox
36 83 0.139856430 ubox
36 84 0.564385407 ubox
36 92 0.005081408 ubox
37 85 0.098617855 ubox
37 86 0.049123837 ubox
38 85 0.051479061 ubox
38 86 0.011303962 ubox
39 81 0.999616997 ubox
39 85 0.006794042 ubox
39 100 0.003585236 ubox
40 79 0.015010597 ubox
40 80 0.999836402 ubox
40 84 0.006564282 ubox
40 99 0.003839557 ubox
41 78 0.018481513 ubox
41 79 0.999674476 ubox
41 98 0.003843812 ubox
42 97 0.003840924 ubox
43 74 0.011253323 ubox
43 76 0.011483031 ubox
43 96 0.003796057 ubox
44 73 0.011338678 ubox
44 76 0.999702260 ubox
44 81 0.006941716 ubox
45 75 0.999828085 ubox
45 80 0.007021851 ubox
45 94 0.003380505 ubox
46 71 0.054614227 ubox
46 72 0.017329339 ubox
46 73 0.061553127 ubox
46 74 0.996157805 ubox
46 93 0.003657739 ubox
47 66 0.005466117 ubox
47 70 0.257114071 ubox
47 71 0.021512221 ubox
47 72 0.083671405 ubox
47 73 0.961222040 ubox
48 65 0.007424157 ubox
48 69 0.765206008 ubox
48 78 0.010268686 ubox
48 91 0.003674749 ubox
49 60 0.006960067 ubox
49 67 0.667687072 ubox
49 68 0.558271916 ubox
49 69 0.085171113 ubox
49 77 0.010301164 ubox
49 90 0.003646275 ubox
50 59 0.007389729 ubox
50 63 0.003227695 ubox
50 64 0.004566789 ubox
50 66 0.856337328 ubox
50 70 0.446164788 ubox
50 71 0.012040772 ubox
50 72 0.023488614 ubox
50 76 0.010311997 ubox
51 65 0.856555614 ubox
51 69 0.447770446 ubox
51 75 0.010311621 ubox
52 57 0.009578814 ubox
52 59 0.079022020 ubox
52 62 0.166213036 ubox
52 63 0.022416413 ubox
52 64 0.775212150 ubox
52 66 0.419751758 ubox
52 70 0.003334594 ubox
52 71 0.008749052 ubox
52 72 0.043958153 ubox
52 74 0.010181886 ubox
53 58 0.075795813 ubox
53 60 0.039500340 ubox
53 61 0.168501751 ubox
53 65 0.421333867 ubox
53 67 0.030811474 ubox
53 68 0.021669081 ubox
54 63 0.152658828 ubox
54 64 0.415239461 ubox
54 70 0.062554261 ubox
54 85 0.003412719 ubox
55 60 0.047765723 ubox
55 61 0.162848385 ubox
55 65 0.040050066 ubox
55 67 0.011854451 ubox
55 68 0.013494593 ubox
55 69 0.064091702 ubox
55 84 0.003448865 ubox
56 60 0.149715494 ubox
56 61 0.062710991 ubox
56 65 0.045882062 ubox
56 67 0.012932569 ubox
56 68 0.068117914 ubox
56 83 0.003387363 ubox
57 61 0.072940261 ubox
57 65 0.029738149 ubox
57 67 0.063477681 ubox
57 68 0.003753037 ubox
57 82 0.003202181 ubox
58 63 0.032879747 ubox
58 64 0.030279790 ubox
58 70 0.008461007 ubox
59 65 0.073540686 ubox
59 69 0.008571010 ubox
60 64 0.059785540 ubox
60 71 0.039261972 ubox
61 70 0.042754243 ubox
62 69 0.043006290 ubox
62 79 0.004483927 ubox
63 68 0.039811796 ubox
63 78 0.004491555 ubox
64 77 0.004500547 ubox
65 76 0.004510191 ubox
66 75 0.004509220 ubox
81 99 0.003369253 ubox
83 97 0.003629301 ubox
84 96 0.003654522 ubox
85 95 0.003639841 ubox
86 94 0.003544744 ubox
1 22 0.9500000 lbox
2 21 0.9500000 lbox
3 20 0.9500000 lbox
23 100 0.9500000 lbox
24 99 0.9500000 lbox
25 98 0.9500000 lbox
26 97 0.9500000 lbox
27 96 0.9500000 lbox
28 94 0.9500000 lbox
29 93 0.9500000 lbox
30 92 0.9500000 lbox
31 91 0.9500000 lbox
39 81 0.9500000 lbox
40 80 0.9500000 lbox
41 79 0.9500000 lbox
44 76 0.9500000 lbox
45 75 0.9500000 lbox
46 74 0.9500000 lbox
47 73 0.9500000 lbox
48 69 0.9500000 lbox
49 68 0.9500000 lbox
50 66 0.9500000 lbox
51 65 0.9500000 lbox
52 64 0.9500000 lbox
showpage
end
%%EOF
