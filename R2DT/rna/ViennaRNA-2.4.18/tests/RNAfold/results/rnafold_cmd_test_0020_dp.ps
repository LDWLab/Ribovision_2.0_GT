%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Wed Jun 17 17:21:24 2020
%%Title: RNA Dot Plot
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% This file contains the square roots of probabilities in the form
% i  j  sqrt(p(i,j)) ubox

/DPdict 100 dict def

DPdict begin

%%BeginProlog

/logscale false def
/lpmin 1e-05 log def
/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def
/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def
/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def
/drawseq { % print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def
/drawgrid{
  gsave
  0.5 dup translate
  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  % draw strand separators if required
  currentdict /nicks known {
    gsave
    % draw lines in red color
    0 1 1 sethsbcolor
    % draw with line thickness of 0.2
    0.2 setlinewidth
    nicks
    { 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
    } forall
    grestore
  } if
  % draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def
/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def
/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def
/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def
/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def
/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def
/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def
/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def
/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def
/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def
/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def
/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def
% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def
% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i
          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]
          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key
            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]
          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

%%EndProlog

/DPtitle {
  (rnafold_cmd_test_0020)
} def

/sequence { (\
AAACACGGAUGGCAUUGUAUCACACUAGCGCUGCAAGAUAAUCUUAAAAUCGGGCAUCUCUAGAUGGACAAUGGGAAUCCACAUGGUGAACUUUCAAAAG\
) } def
/len { sequence length } bind def

% BEGIN linear data array

/topData [
[ (Protein binding)
  [ 46 0.963474810 0.6000 0.8000 0.9500]
  [ 47 0.999855816 0.6000 0.8000 0.9500]
  [ 48 0.999855816 0.6000 0.8000 0.9500]
  [ 49 0.267260104 0.6000 0.8000 0.9500]
  [ 96 0.707054377 0.6000 0.8000 0.9500]
  [ 97 0.999925077 0.6000 0.8000 0.9500]
  [ 98 0.999925077 0.6000 0.8000 0.9500]
  [ 99 0.707053185 0.6000 0.8000 0.9500]
]
] def

/leftData [
[ (Protein binding)
  [ 46 0.963474810 0.6000 0.8000 0.9500]
  [ 47 0.999855816 0.6000 0.8000 0.9500]
  [ 48 0.999855816 0.6000 0.8000 0.9500]
  [ 49 0.267260104 0.6000 0.8000 0.9500]
  [ 96 0.707054377 0.6000 0.8000 0.9500]
  [ 97 0.999925077 0.6000 0.8000 0.9500]
  [ 98 0.999925077 0.6000 0.8000 0.9500]
  [ 99 0.707053185 0.6000 0.8000 0.9500]
]
] def

/bottomData [
[ (Protein binding)
  [ 46 0.963474810 0.6000 0.8000 0.9500]
  [ 47 0.999855816 0.6000 0.8000 0.9500]
  [ 48 0.999855816 0.6000 0.8000 0.9500]
  [ 49 0.267260104 0.6000 0.8000 0.9500]
  [ 96 0.707054377 0.6000 0.8000 0.9500]
  [ 97 0.999925077 0.6000 0.8000 0.9500]
  [ 98 0.999925077 0.6000 0.8000 0.9500]
  [ 99 0.707053185 0.6000 0.8000 0.9500]
]
] def

/rightData [
[ (Protein binding)
  [ 46 0.963474810 0.6000 0.8000 0.9500]
  [ 47 0.999855816 0.6000 0.8000 0.9500]
  [ 48 0.999855816 0.6000 0.8000 0.9500]
  [ 49 0.267260104 0.6000 0.8000 0.9500]
  [ 96 0.707054377 0.6000 0.8000 0.9500]
  [ 97 0.999925077 0.6000 0.8000 0.9500]
  [ 98 0.999925077 0.6000 0.8000 0.9500]
  [ 99 0.707053185 0.6000 0.8000 0.9500]
]
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 93 0.099477185 ubox
1 94 0.995039558 ubox
2 92 0.099581083 ubox
2 93 0.995029105 ubox
3 84 0.011865337 ubox
3 87 0.122354006 ubox
3 92 0.992415394 ubox
4 85 0.142840966 ubox
4 86 0.124198992 ubox
4 88 0.976944353 ubox
5 84 0.144474334 ubox
5 87 0.977954452 ubox
6 85 0.086416169 ubox
6 86 0.975453533 ubox
6 88 0.028068173 ubox
7 79 0.010229127 ubox
7 80 0.986500398 ubox
7 82 0.053374143 ubox
7 84 0.028784538 ubox
7 87 0.012615444 ubox
8 78 0.009122161 ubox
8 79 0.987085426 ubox
8 80 0.022882082 ubox
8 82 0.029401778 ubox
8 84 0.100265242 ubox
8 87 0.003915030 ubox
9 78 0.976104385 ubox
9 84 0.022571236 ubox
10 75 0.006176797 ubox
10 76 0.022390335 ubox
10 77 0.745216573 ubox
10 81 0.020293092 ubox
10 83 0.027651069 ubox
11 78 0.006576807 ubox
11 79 0.008838029 ubox
11 80 0.032081756 ubox
11 82 0.030285799 ubox
12 78 0.004133761 ubox
12 79 0.031463545 ubox
12 80 0.016961362 ubox
12 82 0.008559776 ubox
13 73 0.069396641 ubox
13 74 0.247100346 ubox
13 75 0.119171877 ubox
14 72 0.052717557 ubox
14 78 0.003511368 ubox
15 71 0.042716814 ubox
15 73 0.067626915 ubox
15 74 0.021154876 ubox
15 75 0.004136277 ubox
15 76 0.004895532 ubox
15 77 0.004471063 ubox
16 70 0.045234046 ubox
16 71 0.089511703 ubox
16 73 0.011879934 ubox
16 74 0.009175142 ubox
16 75 0.007006845 ubox
16 76 0.006097207 ubox
16 77 0.007376142 ubox
17 69 0.052462637 ubox
17 72 0.011538214 ubox
18 68 0.025610037 ubox
18 70 0.089882459 ubox
18 71 0.011869911 ubox
18 73 0.010732344 ubox
18 74 0.008089763 ubox
18 75 0.003527839 ubox
18 76 0.004645790 ubox
19 72 0.011587353 ubox
20 66 0.010316830 ubox
20 67 0.292870429 ubox
20 68 0.852950409 ubox
20 70 0.018428102 ubox
20 71 0.015063759 ubox
20 73 0.009164662 ubox
20 74 0.088155879 ubox
20 75 0.007714587 ubox
20 76 0.014531313 ubox
21 66 0.321814609 ubox
21 67 0.874058728 ubox
21 73 0.090213879 ubox
21 74 0.008482553 ubox
21 75 0.014326528 ubox
22 65 0.312631615 ubox
22 72 0.089606937 ubox
23 63 0.013766396 ubox
23 66 0.883832798 ubox
23 67 0.019030562 ubox
23 73 0.017067365 ubox
24 65 0.880661733 ubox
24 72 0.016968494 ubox
25 63 0.998616155 ubox
26 62 0.999549287 ubox
26 63 0.004878421 ubox
27 59 0.004615634 ubox
27 61 0.999616311 ubox
28 58 0.005622006 ubox
28 59 0.003854455 ubox
28 60 0.998930150 ubox
30 55 0.007937390 ubox
30 57 0.031700636 ubox
30 58 0.956221475 ubox
30 59 0.019905237 ubox
31 53 0.003853538 ubox
31 54 0.007880341 ubox
32 52 0.004067755 ubox
32 53 0.007533204 ubox
32 56 0.988176996 ubox
33 51 0.004233571 ubox
33 55 0.999886327 ubox
34 53 0.011552271 ubox
34 54 0.999723366 ubox
35 45 0.059051184 ubox
36 44 0.060423647 ubox
36 50 0.005277596 ubox
36 59 0.006191109 ubox
37 43 0.060802436 ubox
37 51 0.996689084 ubox
37 58 0.006278033 ubox
38 42 0.052912704 ubox
38 44 0.003343436 ubox
38 45 0.008926596 ubox
38 50 0.988640189 ubox
38 57 0.006264989 ubox
39 46 0.073793801 ubox
39 49 0.928653591 ubox
39 56 0.005951677 ubox
40 44 0.022832012 ubox
40 45 0.092408149 ubox
40 50 0.005125518 ubox
41 45 0.047881718 ubox
41 50 0.013989937 ubox
42 46 0.024752908 ubox
42 49 0.025651691 ubox
42 53 0.011140196 ubox
43 52 0.011423049 ubox
43 53 0.006001671 ubox
43 54 0.003392298 ubox
44 49 0.009889225 ubox
44 52 0.005778844 ubox
44 53 0.003901164 ubox
45 49 0.004801095 ubox
45 52 0.003472999 ubox
95 100 0.038936492 ubox
1 94 0.9500000 lbox
2 93 0.9500000 lbox
3 92 0.9500000 lbox
4 88 0.9500000 lbox
5 87 0.9500000 lbox
6 86 0.9500000 lbox
7 80 0.9500000 lbox
8 79 0.9500000 lbox
9 78 0.9500000 lbox
10 77 0.9500000 lbox
20 68 0.9500000 lbox
21 67 0.9500000 lbox
23 66 0.9500000 lbox
24 65 0.9500000 lbox
25 63 0.9500000 lbox
26 62 0.9500000 lbox
27 61 0.9500000 lbox
28 60 0.9500000 lbox
30 58 0.9500000 lbox
32 56 0.9500000 lbox
33 55 0.9500000 lbox
34 54 0.9500000 lbox
37 51 0.9500000 lbox
38 50 0.9500000 lbox
39 49 0.9500000 lbox
showpage
end
%%EOF
