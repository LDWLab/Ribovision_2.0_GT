%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.9
%%CreationDate: Thu Jul  2 16:47:09 2015
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
UCAAUAGCGGCCACAGCAGGUGUGUCACACCCGUUCCCAUUCCGAACACGGAAGUUAAGACACCUCACGUGGAUGACGGUACUGAGGUACGCGAGUCCUCGGGAAAUCAUCCUCGCUGCUAUUGUU\
) def
/coor [
[88.00640869 268.74386597]
[96.32306671 254.61004639]
[95.95204926 239.61463928]
[95.58103180 224.61921692]
[95.21001434 209.62380981]
[94.83899689 194.62840271]
[94.46798706 179.63299561]
[94.09696960 164.63757324]
[93.72595215 149.64216614]
[93.35493469 134.64675903]
[92.98391724 119.65134430]
[86.81965637 115.37912750]
[73.25582123 121.78399658]
[74.49113464 106.83467865]
[68.32687378 102.56245422]
[54.15554428 107.47910309]
[39.98421478 112.39574432]
[29.48253059 124.22896576]
[14.92226791 121.09081268]
[0.75093722 126.00745392]
[-13.42039394 130.92410278]
[-27.59172440 135.84074402]
[-41.76305389 140.75738525]
[-54.74531555 151.66139221]
[-68.81703186 142.20500183]
[-63.62565231 126.06542969]
[-46.67969894 126.58605194]
[-32.50836945 121.66941071]
[-18.33703804 116.75276947]
[-4.16570663 111.83612061]
[10.00562382 106.91947937]
[19.49367905 95.43792725]
[35.06756973 98.22441101]
[49.23889923 93.30776978]
[63.41023254 88.39112854]
[64.88478088 81.03750610]
[50.17759323 78.08816528]
[53.12717438 63.38102722]
[67.83387756 66.33026886]
[69.30842590 58.97665024]
[58.12820816 48.97651291]
[46.94799042 38.97637558]
[35.76777649 28.97623634]
[24.58756065 18.97609711]
[8.43360329 16.15090561]
[3.05821180 0.65777057]
[13.99112797 -11.56529713]
[29.98550415 -7.94425392]
[34.58769989 7.79588127]
[45.76791382 17.79601860]
[56.94813156 27.79615784]
[68.12834930 37.79629517]
[79.30856323 47.79643250]
[74.29132080 33.66040421]
[77.77663422 19.07093811]
[85.71288300 6.34238911]
[97.27915192 -3.20860577]
[111.27902222 -8.59409809]
[126.26436615 -9.25701523]
[140.68510437 -5.12878609]
[153.04957581 3.36356831]
[162.07878113 15.34160328]
[166.83876038 29.56631851]
[166.83715820 44.56631851]
[162.07411194 58.79001236]
[153.04232788 70.76610565]
[140.67605591 79.25580597]
[126.25863647 83.38044739]
[114.64736176 92.87666321]
[126.78344727 82.72650146]
[140.71957397 87.98329163]
[155.46215820 85.21631622]
[170.20474243 82.44934845]
[184.94732666 79.68238068]
[199.68991089 76.91541290]
[214.43251038 74.14843750]
[218.40643311 60.67598343]
[227.77024841 50.29534912]
[240.64042664 45.00894547]
[254.46481323 45.80300903]
[266.52883911 52.46411514]
[274.48837280 63.63243484]
[289.29486084 61.23096085]
[304.10137939 58.82948685]
[318.90789795 56.42801285]
[333.71441650 54.02653885]
[348.52093506 51.62506485]
[356.59268188 47.11819839]
[363.72299194 49.35203552]
[378.58438110 47.31752777]
[391.20440674 36.84534836]
[406.48757935 42.79150772]
[408.71185303 59.03911209]
[395.58911133 68.87401581]
[380.61889648 62.17891312]
[365.75750732 64.21342468]
[350.92242432 66.43157959]
[336.11590576 68.83305359]
[321.30938721 71.23452759]
[306.50286865 73.63600159]
[291.69635010 76.03747559]
[276.88983154 78.43894958]
[271.55941772 93.64085388]
[259.23913574 104.16436005]
[243.20681763 107.08612061]
[227.79032898 101.52184296]
[217.19947815 88.89102936]
[202.45689392 91.65799713]
[187.71429443 94.42496490]
[172.97171021 97.19193268]
[158.22912598 99.95890808]
[143.48654175 102.72587585]
[132.40493774 112.67813110]
[117.41432953 107.61924744]
[107.97933197 119.28033447]
[108.35034180 134.27574158]
[108.72135925 149.27114868]
[109.09237671 164.26657104]
[109.46339417 179.26197815]
[109.83441162 194.25738525]
[110.20542908 209.25279236]
[110.57644653 224.24821472]
[110.94746399 239.24362183]
[111.31847382 254.23902893]
[120.32392883 267.94427490]
[112.71681213 282.47232056]
] def
/pairs [
[2 124]
[3 123]
[4 122]
[5 121]
[6 120]
[7 119]
[8 118]
[9 117]
[10 116]
[11 115]
[15 35]
[16 34]
[17 33]
[19 31]
[20 30]
[21 29]
[22 28]
[23 27]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[69 114]
[71 112]
[72 111]
[73 110]
[74 109]
[75 108]
[76 107]
[82 102]
[83 101]
[84 100]
[85 99]
[86 98]
[87 97]
[89 96]
[90 95]
] def

init

% Start Annotations
76 107 82 102 GREEN BFmark 44 49 0.8 0.8 0.8 Fomark 1 15 8 RED omark 80 cmark 80 -0.23 -1.2 (pos80) Label 90 95 BLUE Fomark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
